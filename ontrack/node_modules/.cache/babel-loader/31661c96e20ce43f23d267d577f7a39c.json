{"ast":null,"code":"module.exports = function () {\n  var dnsd = require('hbo-dnsd'),\n      dns = require('native-dns');\n\n  function Dns(config) {\n    var $this = this;\n    this.config = {};\n    this.config.host = process.env.DNSINTERFACE || config.dns.host;\n    this.config.port = process.env.DNSPORT || config.dns.port;\n    this.config.zone = process.env.DNSZONE || config.dns.zone;\n    this.config.ttl = process.env.DNSTTL || config.dns.ttl;\n    this.config.prefix = process.env.DNSPREFIX || config.dns.prefix;\n    this.config.primary = process.env.DNSPRIMARY || config.dns.primary;\n    this.config.secondary = process.env.DNSSECONDARY || config.dns.secondary;\n    this.config.timeout = process.env.DNSTIMEOUT || config.dns.timeout;\n    this.store = config.store;\n    this.meta = config.meta;\n    this.logger = config.logger;\n    this.logger.log('debug', \"dns-config=%j\", this.config, this.meta);\n    this.logger.log('debug', \"env=%j\", process.env, this.meta);\n    this.logger.log('debug', \"store=%j\", config.store, this.meta);\n  }\n\n  Dns.prototype.nativeDNS = function (dnsAddress, question, hostname, req, res, next) {\n    var timedout = false;\n    var $this = this,\n        nativeQuestion = dns.Question({\n      name: question.name,\n      type: question.type\n    }),\n        nativeReq = dns.Request({\n      question: nativeQuestion,\n      server: {\n        address: dnsAddress,\n        port: 53,\n        type: 'udp'\n      },\n      timeout: $this.config.timeout\n    });\n    nativeReq.on('timeout', function () {\n      if (dnsAddress === $this.config.secondary) {\n        $this.logger.log('error', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n        return next(new Error('DNS:nativeDNS:timeout: ' + $this.config.secondary));\n      }\n\n      $this.logger.log('warn', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n      timedout = true;\n      $this.nativeDNS($this.config.secondary, question, hostname, req, res, next);\n    });\n    nativeReq.on('message', function (err, answer) {\n      answer.answer.forEach(function (oneAnswer) {\n        answer = {\n          name: hostname,\n          type: question.type,\n          class: question.class,\n          data: oneAnswer.address,\n          ttl: oneAnswer.ttl\n        };\n        res.answer.push(answer);\n      });\n    });\n    nativeReq.on('end', function () {\n      if (!timedout) {\n        $this.logger.log('info', '%s:%s/%s - %s - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n        next(null);\n      }\n    });\n    nativeReq.send();\n  };\n\n  Dns.prototype.resolver = function (req, res) {\n    var $this = this,\n        question = res.question[0],\n        hostname = question.name,\n        length = hostname.length,\n        answer = {},\n        key = this.config.prefix + hostname;\n    this.store.get(key, function (err, value) {\n      $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] err[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, err, $this.meta);\n      var object;\n\n      if (!err && value) {\n        try {\n          object = JSON.parse(value);\n          $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] == object[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, object, $this.meta);\n        } catch (e) {\n          err = new Error(\"Exception [\" + util.inspect(e, true) + \"] while parsing store response [\" + value + \"]\");\n          $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, $this.meta);\n        }\n      }\n\n      if (!err && object && object.hasOwnProperty(question.type)) {\n        answer = {\n          name: hostname,\n          type: question.type,\n          class: question.class,\n          ttl: $this.config.ttl\n        };\n\n        if (object[question.type]) {\n          var vector = object[question.type] instanceof Array ? object[question.type] : [object[question.type]];\n          vector.forEach(function (data) {\n            answer.data = '' + data;\n            res.answer.push(answer);\n            $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n          });\n        } else {\n          res.answer.push(answer);\n          $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n        }\n\n        return res.end();\n      } // Log the error and try with the external DNS\n\n\n      if (err) {\n        $this.logger.log('error', 'dns/local GET hostname \"%s\" - err=%j', hostname, err, $this.meta);\n      } // Send the requestion to the DNSPRIMARY and DNSSECONDARY\n\n\n      $this.nativeDNS($this.config.primary, question, hostname, req, res, function (err) {\n        if (err) {\n          $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - %j -- ERROR:%j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, res.answer, err, $this.meta);\n        }\n\n        res.end();\n      });\n    });\n  };\n\n  Dns.prototype.start = function () {\n    var $this = this;\n    this.server = dnsd.createServer(function (req, res) {\n      $this.resolver(req, res);\n    });\n    this.server.zone($this.config.zone, 'ns1.' + $this.config.zone, 'us@' + $this.config.zone, 'now', '2h', '30m', '2w', '10m').listen($this.config.port, $this.config.host);\n  };\n\n  function create(pkgConfig) {\n    return new Dns(pkgConfig);\n  }\n\n  return {\n    create: create\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}