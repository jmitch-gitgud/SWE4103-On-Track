{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar utils = require('../utils');\n\nvar NativeQuery = module.exports = function (config, values, callback) {\n  EventEmitter.call(this);\n  config = utils.normalizeQueryConfig(config, values, callback);\n  this.text = config.text;\n  this.values = config.values;\n  this.name = config.name;\n  this.callback = config.callback;\n  this.state = 'new';\n  this._arrayMode = config.rowMode === 'array'; // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n\n  this._emitRowEvents = false;\n  this.on('newListener', function (event) {\n    if (event === 'row') this._emitRowEvents = true;\n  }.bind(this));\n};\n\nutil.inherits(NativeQuery, EventEmitter);\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  sqlState: 'code',\n  statementPosition: 'position',\n  messagePrimary: 'message',\n  context: 'where',\n  schemaName: 'schema',\n  tableName: 'table',\n  columnName: 'column',\n  dataTypeName: 'dataType',\n  constraintName: 'constraint',\n  sourceFile: 'file',\n  sourceLine: 'line',\n  sourceFunction: 'routine'\n};\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields();\n\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key;\n      err[normalizedFieldName] = fields[key];\n    }\n  }\n\n  if (this.callback) {\n    this.callback(err);\n  } else {\n    this.emit('error', err);\n  }\n\n  this.state = 'error';\n};\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure);\n};\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback);\n};\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise;\n  this._promise = new Promise(function (resolve, reject) {\n    this._once('end', resolve);\n\n    this._once('error', reject);\n  }.bind(this));\n  return this._promise;\n};\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running';\n  var self = this;\n  this.native = client.native;\n  client.native.arrayMode = this._arrayMode;\n\n  var after = function after(err, rows, results) {\n    client.native.arrayMode = false;\n    setImmediate(function () {\n      self.emit('_done');\n    }); // handle possible query error\n\n    if (err) {\n      return self.handleError(err);\n    } // emit row events for each row in the result\n\n\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach(function (rowOfRows, i) {\n          rowOfRows.forEach(function (row) {\n            self.emit('row', row, results[i]);\n          });\n        });\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results);\n        });\n      }\n    } // handle successful result\n\n\n    self.state = 'end';\n    self.emit('end', results);\n\n    if (self.callback) {\n      self.callback(null, results);\n    }\n  };\n\n  if (process.domain) {\n    after = process.domain.bind(after);\n  } // named query\n\n\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.');\n      console.error('You supplied %s (%s)', this.name, this.name.length);\n      console.error('This can cause conflicts and silent errors executing queries');\n      /* eslint-enable no-console */\n    }\n\n    var values = (this.values || []).map(utils.prepareValue); // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        var err = new Error(\"Prepared statements must be unique - '\".concat(this.name, \"' was used for a different statement\"));\n        return after(err);\n      }\n\n      return client.native.execute(this.name, values, after);\n    } // plan the named query the first time, then execute it\n\n\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err);\n      client.namedQueries[self.name] = self.text;\n      return self.native.execute(self.name, values, after);\n    });\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      var _err = new Error('Query values must be an array');\n\n      return after(_err);\n    }\n\n    var vals = this.values.map(utils.prepareValue);\n    client.native.query(this.text, vals, after);\n  } else {\n    client.native.query(this.text, after);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}