{"ast":null,"code":"var array = require('postgres-array');\n\nvar arrayParser = require('./arrayParser');\n\nvar parseDate = require('postgres-date');\n\nvar parseInterval = require('postgres-interval');\n\nvar parseByteA = require('postgres-bytea');\n\nfunction allowNull(fn) {\n  return function nullAllowed(value) {\n    if (value === null) return value;\n    return fn(value);\n  };\n}\n\nfunction parseBool(value) {\n  if (value === null) return value;\n  return value === 'TRUE' || value === 't' || value === 'true' || value === 'y' || value === 'yes' || value === 'on' || value === '1';\n}\n\nfunction parseBoolArray(value) {\n  if (!value) return null;\n  return array.parse(value, parseBool);\n}\n\nfunction parseBaseTenInt(string) {\n  return parseInt(string, 10);\n}\n\nfunction parseIntegerArray(value) {\n  if (!value) return null;\n  return array.parse(value, allowNull(parseBaseTenInt));\n}\n\nfunction parseBigIntegerArray(value) {\n  if (!value) return null;\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim();\n  }));\n}\n\nvar parsePointArray = function parsePointArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  var p = arrayParser.create(value, function (entry) {\n    if (entry !== null) {\n      entry = parsePoint(entry);\n    }\n\n    return entry;\n  });\n  return p.parse();\n};\n\nvar parseFloatArray = function parseFloatArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  var p = arrayParser.create(value, function (entry) {\n    if (entry !== null) {\n      entry = parseFloat(entry);\n    }\n\n    return entry;\n  });\n  return p.parse();\n};\n\nvar parseStringArray = function parseStringArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function parseDateArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  var p = arrayParser.create(value, function (entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n\n    return entry;\n  });\n  return p.parse();\n};\n\nvar parseIntervalArray = function parseIntervalArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  var p = arrayParser.create(value, function (entry) {\n    if (entry !== null) {\n      entry = parseInterval(entry);\n    }\n\n    return entry;\n  });\n  return p.parse();\n};\n\nvar parseByteAArray = function parseByteAArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  return array.parse(value, allowNull(parseByteA));\n};\n\nvar parseInteger = function parseInteger(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function parseBigInteger(value) {\n  var valStr = String(value);\n\n  if (/^\\d+$/.test(valStr)) {\n    return valStr;\n  }\n\n  return value;\n};\n\nvar parseJsonArray = function parseJsonArray(value) {\n  if (!value) {\n    return null;\n  }\n\n  return array.parse(value, allowNull(JSON.parse));\n};\n\nvar parsePoint = function parsePoint(value) {\n  if (value[0] !== '(') {\n    return null;\n  }\n\n  value = value.substring(1, value.length - 1).split(',');\n  return {\n    x: parseFloat(value[0]),\n    y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function parseCircle(value) {\n  if (value[0] !== '<' && value[1] !== '(') {\n    return null;\n  }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n\n  for (var i = 2; i < value.length - 1; i++) {\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ',') {\n      continue;\n    }\n\n    radius += value[i];\n  }\n\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n  return result;\n};\n\nvar init = function init(register) {\n  register(20, parseBigInteger); // int8\n\n  register(21, parseInteger); // int2\n\n  register(23, parseInteger); // int4\n\n  register(26, parseInteger); // oid\n\n  register(700, parseFloat); // float4/real\n\n  register(701, parseFloat); // float8/double\n\n  register(16, parseBool);\n  register(1082, parseDate); // date\n\n  register(1114, parseDate); // timestamp without timezone\n\n  register(1184, parseDate); // timestamp\n\n  register(600, parsePoint); // point\n\n  register(651, parseStringArray); // cidr[]\n\n  register(718, parseCircle); // circle\n\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n\n  register(1007, parseIntegerArray); // _int4\n\n  register(1028, parseIntegerArray); // oid[]\n\n  register(1016, parseBigIntegerArray); // _int8\n\n  register(1017, parsePointArray); // point[]\n\n  register(1021, parseFloatArray); // _float4\n\n  register(1022, parseFloatArray); // _float8\n\n  register(1231, parseFloatArray); // _numeric\n\n  register(1014, parseStringArray); //char\n\n  register(1015, parseStringArray); //varchar\n\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1040, parseStringArray); // macaddr[]\n\n  register(1041, parseStringArray); // inet[]\n\n  register(1115, parseDateArray); // timestamp without time zone[]\n\n  register(1182, parseDateArray); // _date\n\n  register(1185, parseDateArray); // timestamp with time zone[]\n\n  register(1186, parseInterval);\n  register(1187, parseIntervalArray);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n\n  register(199, parseJsonArray); // json[]\n\n  register(3807, parseJsonArray); // jsonb[]\n\n  register(3907, parseStringArray); // numrange[]\n\n  register(2951, parseStringArray); // uuid[]\n\n  register(791, parseStringArray); // money[]\n\n  register(1183, parseStringArray); // time[]\n\n  register(1270, parseStringArray); // timetz[]\n};\n\nmodule.exports = {\n  init: init\n};","map":null,"metadata":{},"sourceType":"script"}