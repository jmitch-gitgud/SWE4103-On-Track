{"ast":null,"code":"'use strict';\n\nvar url = require('url');\n\nvar fs = require('fs'); //Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n//parses a connection string\n\n\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ');\n    return {\n      host: config[0],\n      database: config[1]\n    };\n  } // url parse expects spaces encoded as %20\n\n\n  var result = url.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str, true);\n  var config = result.query;\n\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1];\n    }\n  }\n\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n  config.port = result.port;\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname;\n  } // If the host is missing it might be a URL-encoded path to a socket.\n\n\n  var pathname = result.pathname;\n\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/');\n    config.host = decodeURIComponent(pathnameSplit[0]);\n    pathname = pathnameSplit.splice(1).join('/');\n  } // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n\n\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null;\n  }\n\n  config.database = pathname && decodeURI(pathname);\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true;\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false;\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {};\n  }\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString();\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString();\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();\n  }\n\n  switch (config.sslmode) {\n    case 'disable':\n      {\n        config.ssl = false;\n        break;\n      }\n\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      {\n        break;\n      }\n\n    case 'no-verify':\n      {\n        config.ssl.rejectUnauthorized = false;\n        break;\n      }\n  }\n\n  return config;\n}\n\nmodule.exports = parse;\nparse.parse = parse;","map":null,"metadata":{},"sourceType":"script"}