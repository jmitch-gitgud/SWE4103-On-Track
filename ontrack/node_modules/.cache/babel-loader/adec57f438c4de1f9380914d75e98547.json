{"ast":null,"code":"/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\nimport { types } from 'node:util';\nimport http from 'node:http';\n/* c8 ignore next 9 */\n\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ? http.validateHeaderName : name => {\n  if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n    const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_HTTP_TOKEN'\n    });\n    throw error;\n  }\n};\n/* c8 ignore next 9 */\n\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ? http.validateHeaderValue : (name, value) => {\n  if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n    const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_CHAR'\n    });\n    throw error;\n  }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\n\nexport default class Headers extends URLSearchParams {\n  /**\n   * Headers class\n   *\n   * @constructor\n   * @param {HeadersInit} [init] - Response headers\n   */\n  constructor(init) {\n    // Validate and normalize init object in [name, value(s)][]\n\n    /** @type {string[][]} */\n    let result = [];\n\n    if (init instanceof Headers) {\n      const raw = init.raw();\n\n      for (const [name, values] of Object.entries(raw)) {\n        result.push(...values.map(value => [name, value]));\n      }\n    } else if (init == null) {// eslint-disable-line no-eq-null, eqeqeq\n      // No op\n    } else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n      const method = init[Symbol.iterator]; // eslint-disable-next-line no-eq-null, eqeqeq\n\n      if (method == null) {\n        // Record<ByteString, ByteString>\n        result.push(...Object.entries(init));\n      } else {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable');\n        } // Sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n\n\n        result = [...init].map(pair => {\n          if (typeof pair !== 'object' || types.isBoxedPrimitive(pair)) {\n            throw new TypeError('Each header pair must be an iterable object');\n          }\n\n          return [...pair];\n        }).map(pair => {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple');\n          }\n\n          return [...pair];\n        });\n      }\n    } else {\n      throw new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n    } // Validate and lowercase\n\n\n    result = result.length > 0 ? result.map(_ref => {\n      let [name, value] = _ref;\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return [String(name).toLowerCase(), String(value)];\n    }) : undefined;\n    super(result); // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n    // eslint-disable-next-line no-constructor-return\n\n    return new Proxy(this, {\n      get(target, p, receiver) {\n        switch (p) {\n          case 'append':\n          case 'set':\n            return (name, value) => {\n              validateHeaderName(name);\n              validateHeaderValue(name, String(value));\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n            };\n\n          case 'delete':\n          case 'has':\n          case 'getAll':\n            return name => {\n              validateHeaderName(name);\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n            };\n\n          case 'keys':\n            return () => {\n              target.sort();\n              return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n            };\n\n          default:\n            return Reflect.get(target, p, receiver);\n        }\n      }\n\n    });\n    /* c8 ignore next */\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n  toString() {\n    return Object.prototype.toString.call(this);\n  }\n\n  get(name) {\n    const values = this.getAll(name);\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let value = values.join(', ');\n\n    if (/^content-encoding$/i.test(name)) {\n      value = value.toLowerCase();\n    }\n\n    return value;\n  }\n\n  forEach(callback) {\n    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    for (const name of this.keys()) {\n      Reflect.apply(callback, thisArg, [this.get(name), name, this]);\n    }\n  }\n\n  *values() {\n    for (const name of this.keys()) {\n      yield this.get(name);\n    }\n  }\n  /**\n   * @type {() => IterableIterator<[string, string]>}\n   */\n\n\n  *entries() {\n    for (const name of this.keys()) {\n      yield [name, this.get(name)];\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Node-fetch non-spec method\n   * returning all headers and their values as array\n   * @returns {Record<string, string[]>}\n   */\n\n\n  raw() {\n    return [...this.keys()].reduce((result, key) => {\n      result[key] = this.getAll(key);\n      return result;\n    }, {});\n  }\n  /**\n   * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n   */\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return [...this.keys()].reduce((result, key) => {\n      const values = this.getAll(key); // Http.request() only supports string as Host header.\n      // This hack makes specifying custom Host header possible.\n\n      if (key === 'host') {\n        result[key] = values[0];\n      } else {\n        result[key] = values.length > 1 ? values : values[0];\n      }\n\n      return result;\n    }, {});\n  }\n\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\n\nObject.defineProperties(Headers.prototype, ['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n  result[property] = {\n    enumerable: true\n  };\n  return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\n\nexport function fromRawHeaders() {\n  let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return new Headers(headers // Split into pairs\n  .reduce((result, value, index, array) => {\n    if (index % 2 === 0) {\n      result.push(array.slice(index, index + 2));\n    }\n\n    return result;\n  }, []).filter(_ref2 => {\n    let [name, value] = _ref2;\n\n    try {\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return true;\n    } catch {\n      return false;\n    }\n  }));\n}","map":{"version":3,"names":["types","http","validateHeaderName","name","test","error","TypeError","Object","defineProperty","value","validateHeaderValue","Headers","URLSearchParams","constructor","init","result","raw","values","entries","push","map","isBoxedPrimitive","method","Symbol","iterator","pair","length","String","toLowerCase","undefined","Proxy","get","target","p","receiver","prototype","call","sort","Set","keys","Reflect","toStringTag","toString","getAll","join","forEach","callback","thisArg","apply","reduce","key","for","defineProperties","property","enumerable","fromRawHeaders","headers","index","array","slice","filter"],"sources":["/home/jordanm/Documents/GitHub/SWE4103-Team-Project/ontrack/node_modules/node-fetch/src/headers.js"],"sourcesContent":["/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}