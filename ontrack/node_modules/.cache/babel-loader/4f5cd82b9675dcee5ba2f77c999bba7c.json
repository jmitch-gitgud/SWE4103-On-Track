{"ast":null,"code":"function ReportWorkAbsences(filename) {\n  //Data Declaration\n  var i = 0;\n  var data = [];\n\n  var _require = require(\"pg\"),\n      Client = _require.Client;\n\n  var XLSX = require(\"xlsx\");\n\n  var client = new Client({\n    host: \"localhost\",\n    user: \"postgres\",\n    database: \"postgres\",\n    password: \"Vwf7j5yb#M\",\n    port: 5432\n  });\n  console.log(filename.slice(-4));\n\n  if (filename.slice(-4) == \"xlsx\") {\n    var workbook = XLSX.readFile(filename); //Loop through all sheets in the file\n\n    var ws = workbook.Sheets[workbook.SheetNames[i]]; //Split the excel sheet into a 2d array\n\n    var csv = XLSX.utils.sheet_to_csv(ws);\n    csv = csv.split(\"\\n\");\n\n    for (var _j = 0; _j < csv.length; _j++) {\n      data.push(csv[_j].split(\",\"));\n    } //Remove all of the empty rows at the end of the sheet\n\n\n    var j = data.length - 1;\n\n    while (data[j][0] == '') {\n      data.pop();\n      j--;\n    } //Remove the two headers of the worksheet\n\n\n    for (var _j2 = 0; _j2 < 2; _j2++) {\n      data.shift();\n    } //Stored Procedure would go here\n\n\n    var query = \"INSERT INTO work_abscense(Absence_ID, Staff_ID, Period1, \" + \"Period2, Period3, Period4, day) VALUES (DEFAULT, $1, $2, $3, $4, $5, $6)\";\n    var query2 = \"SELECT Staff_ID FROM staff WHERE username = $1\";\n    client.connect(function (err, client, done) {\n      if (err) throw err;\n\n      try {\n        data.forEach(function (row) {\n          var user = [];\n          var id;\n          user.push(row[0]);\n          client.query(query2, user, function (err, res) {\n            if (err) {\n              console.log(err.stack);\n            } else {\n              id = res.rows[0];\n\n              if (id != undefined) {\n                var _loop = function _loop(_j3) {\n                  var x = 4 * _j3;\n                  var absenceList = [];\n                  absenceList.push(id.staff_id);\n                  absenceList.push(row[x + 1]);\n                  absenceList.push(row[x + 2]);\n                  absenceList.push(row[x + 3]);\n                  absenceList.push(row[x + 4]);\n\n                  switch (x) {\n                    case 0:\n                      absenceList.push(\"Monday\");\n                      break;\n\n                    case 4:\n                      absenceList.push(\"Tuesday\");\n                      break;\n\n                    case 8:\n                      absenceList.push(\"Wednesday\");\n                      break;\n\n                    case 12:\n                      absenceList.push(\"Thursday\");\n                      break;\n\n                    default:\n                      absenceList.push(\"Friday\");\n                  }\n\n                  client.query(query, absenceList, function (err, res) {\n                    if (err) {\n                      console.log(err.stack);\n                    } else {\n                      console.log(\"inserted for user: \" + user[0] + \"\\n\" + \" row:\", absenceList + \"\\n\");\n                    }\n                  });\n                };\n\n                for (var _j3 = 0; _j3 < 5; _j3++) {\n                  _loop(_j3);\n                }\n              } else {\n                console.log(\"Error on user row: \" + user[0] + \"\\n Failed insert: \" + \"The given user does not exist.\\n\");\n              }\n            }\n          });\n        });\n      } finally {\n        done();\n      }\n    });\n    result = \"File Successfully Inserted\";\n  } else {\n    result = \"Invalid File Type Given\";\n  }\n\n  return result;\n}\n\nReportWorkAbsences(\"Example_Absences_(Fall_2017-018).xlsx\");\nReportWorkAbsences(\"GetSheetNames.js\");\nexports.ReportWorkAbsences = ReportWorkAbsences;","map":{"version":3,"names":["ReportWorkAbsences","filename","i","data","require","Client","XLSX","client","host","user","database","password","port","console","log","slice","workbook","readFile","ws","Sheets","SheetNames","csv","utils","sheet_to_csv","split","j","length","push","pop","shift","query","query2","connect","err","done","forEach","row","id","res","stack","rows","undefined","x","absenceList","staff_id","result","exports"],"sources":["C:/Users/MicSc/Documents/SWE4103/Project/SWE4103-On-Track/ontrack/src/functions/ReportWorkAbsences.js"],"sourcesContent":["function ReportWorkAbsences(filename)\r\n{\r\n    //Data Declaration\r\n    var i = 0;\r\n    const data = [];\r\n    const {Client} = require(\"pg\");\r\n    var XLSX = require(\"xlsx\");\r\n\r\n    const client = new Client({\r\n        host: \"localhost\",\r\n        user: \"postgres\",\r\n        database: \"postgres\",\r\n        password: \"Vwf7j5yb#M\",\r\n        port: 5432\r\n      });\r\n\r\n    console.log(filename.slice(-4));\r\n\r\n    if(filename.slice(-4) == \"xlsx\")\r\n    {\r\n        var workbook = XLSX.readFile(filename);\r\n\r\n        //Loop through all sheets in the file\r\n        var ws = workbook.Sheets[workbook.SheetNames[i]];\r\n\r\n        //Split the excel sheet into a 2d array\r\n        var csv = XLSX.utils.sheet_to_csv(ws);\r\n\r\n        csv = csv.split(\"\\n\");\r\n\r\n        for(let j = 0; j < csv.length; j++)\r\n        {\r\n            data.push(csv[j].split(\",\"));\r\n        }\r\n\r\n        //Remove all of the empty rows at the end of the sheet\r\n        let j = data.length - 1;\r\n\r\n        while(data[j][0] ==  '')\r\n        {\r\n            data.pop();\r\n\r\n            j--;\r\n        }\r\n\r\n        //Remove the two headers of the worksheet\r\n        for(let j = 0; j < 2; j++)\r\n        {\r\n            data.shift();\r\n        }\r\n\r\n        //Stored Procedure would go here\r\n        const query = \"INSERT INTO work_abscense(Absence_ID, Staff_ID, Period1, \" +\r\n                      \"Period2, Period3, Period4, day) VALUES (DEFAULT, $1, $2, $3, $4, $5, $6)\"\r\n\r\n        const query2 = \"SELECT Staff_ID FROM staff WHERE username = $1\"\r\n\r\n        client.connect((err, client, done) => {\r\n            if (err) throw err;\r\n                  \r\n             try {\r\n                    data.forEach(row => {\r\n                        const user = [];\r\n                        var id;\r\n\r\n                        user.push(row[0]);\r\n                        \r\n                        client.query(query2, user, (err, res) => {\r\n                            if (err) {\r\n                                console.log(err.stack);\r\n                            } else {\r\n                                id = res.rows[0];\r\n\r\n                                if(id != undefined)\r\n                                {\r\n                                    for(let j = 0; j < 5; j++)\r\n                                    {\r\n                                        let x = 4 * j;\r\n                                        let absenceList = [];\r\n\r\n                                        absenceList.push(id.staff_id);\r\n                                        absenceList.push(row[x + 1]);\r\n                                        absenceList.push(row[x + 2]);\r\n                                        absenceList.push(row[x + 3]);\r\n                                        absenceList.push(row[x + 4]);\r\n\r\n                                        switch(x)\r\n                                        {\r\n                                            case 0:\r\n                                                absenceList.push(\"Monday\");\r\n                                                break;\r\n                                            case 4:\r\n                                                absenceList.push(\"Tuesday\");\r\n                                                break;\r\n                                            case 8:\r\n                                                absenceList.push(\"Wednesday\");\r\n                                                break;\r\n                                            case 12:\r\n                                                absenceList.push(\"Thursday\");\r\n                                                break; \r\n                                            default:\r\n                                                absenceList.push(\"Friday\");\r\n                                        }\r\n\r\n                                        client.query(query, absenceList, (err, res) => {\r\n                                            if (err) {\r\n                                                console.log(err.stack);\r\n                                            } else {\r\n                                                console.log(\"inserted for user: \" + user[0] + \"\\n\" +\r\n                                                            \" row:\", absenceList + \"\\n\");\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    console.log(\"Error on user row: \" + user[0] + \"\\n Failed insert: \" +\r\n                                                \"The given user does not exist.\\n\");\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n             } finally {\r\n                    done();\r\n             }\r\n        });\r\n\r\n        result = \"File Successfully Inserted\";\r\n    }\r\n    else\r\n    {\r\n        result = \"Invalid File Type Given\";\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nReportWorkAbsences(\"Example_Absences_(Fall_2017-018).xlsx\");\r\nReportWorkAbsences(\"GetSheetNames.js\");\r\n\r\nexports.ReportWorkAbsences = ReportWorkAbsences;"],"mappings":"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"},"metadata":{},"sourceType":"module"}