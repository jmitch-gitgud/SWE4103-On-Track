{"ast":null,"code":"/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*exported XLSX */\n\n/*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */\nvar XLSX = {};\nXLSX.version = '0.18.12';\nvar current_codepage = 1200,\n    current_ansi = 1252;\n/*:: declare var cptable:any; */\n\n/*global cptable:true, window */\n\nvar $cptable;\nvar VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 10000];\n/* ECMA-376 Part I 18.4.1 charset to codepage mapping */\n\nvar CS2CP = {\n  /*::[*/\n  0\n  /*::]*/\n  : 1252,\n\n  /* ANSI */\n\n  /*::[*/\n  1\n  /*::]*/\n  : 65001,\n\n  /* DEFAULT */\n\n  /*::[*/\n  2\n  /*::]*/\n  : 65001,\n\n  /* SYMBOL */\n\n  /*::[*/\n  77\n  /*::]*/\n  : 10000,\n\n  /* MAC */\n\n  /*::[*/\n  128\n  /*::]*/\n  : 932,\n\n  /* SHIFTJIS */\n\n  /*::[*/\n  129\n  /*::]*/\n  : 949,\n\n  /* HANGUL */\n\n  /*::[*/\n  130\n  /*::]*/\n  : 1361,\n\n  /* JOHAB */\n\n  /*::[*/\n  134\n  /*::]*/\n  : 936,\n\n  /* GB2312 */\n\n  /*::[*/\n  136\n  /*::]*/\n  : 950,\n\n  /* CHINESEBIG5 */\n\n  /*::[*/\n  161\n  /*::]*/\n  : 1253,\n\n  /* GREEK */\n\n  /*::[*/\n  162\n  /*::]*/\n  : 1254,\n\n  /* TURKISH */\n\n  /*::[*/\n  163\n  /*::]*/\n  : 1258,\n\n  /* VIETNAMESE */\n\n  /*::[*/\n  177\n  /*::]*/\n  : 1255,\n\n  /* HEBREW */\n\n  /*::[*/\n  178\n  /*::]*/\n  : 1256,\n\n  /* ARABIC */\n\n  /*::[*/\n  186\n  /*::]*/\n  : 1257,\n\n  /* BALTIC */\n\n  /*::[*/\n  204\n  /*::]*/\n  : 1251,\n\n  /* RUSSIAN */\n\n  /*::[*/\n  222\n  /*::]*/\n  : 874,\n\n  /* THAI */\n\n  /*::[*/\n  238\n  /*::]*/\n  : 1250,\n\n  /* EASTEUROPE */\n\n  /*::[*/\n  255\n  /*::]*/\n  : 1252,\n\n  /* OEM */\n\n  /*::[*/\n  69\n  /*::]*/\n  : 6969\n  /* MISC */\n\n}\n/*:any*/\n;\n\nvar set_ansi = function set_ansi(cp\n/*:number*/\n) {\n  if (VALID_ANSI.indexOf(cp) == -1) return;\n  current_ansi = CS2CP[0] = cp;\n};\n\nfunction reset_ansi() {\n  set_ansi(1252);\n}\n\nvar set_cp = function set_cp(cp\n/*:number*/\n) {\n  current_codepage = cp;\n  set_ansi(cp);\n};\n\nfunction reset_cp() {\n  set_cp(1200);\n  reset_ansi();\n}\n\nfunction char_codes(data\n/*:string*/\n)\n/*:Array<number>*/\n{\n  var o\n  /*:Array<number>*/\n  = [];\n\n  for (var i = 0, len = data.length; i < len; ++i) {\n    o[i] = data.charCodeAt(i);\n  }\n\n  return o;\n}\n\nfunction utf16leread(data\n/*:string*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < data.length >> 1; ++i) {\n    o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));\n  }\n\n  return o.join(\"\");\n}\n\nfunction utf16beread(data\n/*:string*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < data.length >> 1; ++i) {\n    o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));\n  }\n\n  return o.join(\"\");\n}\n\nvar debom = function debom(data\n/*:string*/\n)\n/*:string*/\n{\n  var c1 = data.charCodeAt(0),\n      c2 = data.charCodeAt(1);\n  if (c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));\n  if (c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));\n  if (c1 == 0xFEFF) return data.slice(1);\n  return data;\n};\n\nvar _getchar = function _gc1(x\n/*:number*/\n)\n/*:string*/\n{\n  return String.fromCharCode(x);\n};\n\nvar _getansi = function _ga1(x\n/*:number*/\n)\n/*:string*/\n{\n  return String.fromCharCode(x);\n};\n\nfunction set_cptable(cptable) {\n  $cptable = cptable;\n\n  set_cp = function set_cp(cp\n  /*:number*/\n  ) {\n    current_codepage = cp;\n    set_ansi(cp);\n  };\n\n  debom = function debom(data\n  /*:string*/\n  ) {\n    if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) {\n      return $cptable.utils.decode(1200, char_codes(data.slice(2)));\n    }\n\n    return data;\n  };\n\n  _getchar = function _gc2(x\n  /*:number*/\n  )\n  /*:string*/\n  {\n    if (current_codepage === 1200) return String.fromCharCode(x);\n    return $cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];\n  };\n\n  _getansi = function _ga2(x\n  /*:number*/\n  )\n  /*:string*/\n  {\n    return $cptable.utils.decode(current_ansi, [x])[0];\n  };\n\n  cpdoit();\n}\n\nvar DENSE = null;\nvar DIF_XL = true;\nvar Base64_map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction Base64_encode(input) {\n  var o = \"\";\n  var c1 = 0,\n      c2 = 0,\n      c3 = 0,\n      e1 = 0,\n      e2 = 0,\n      e3 = 0,\n      e4 = 0;\n\n  for (var i = 0; i < input.length;) {\n    c1 = input.charCodeAt(i++);\n    e1 = c1 >> 2;\n    c2 = input.charCodeAt(i++);\n    e2 = (c1 & 3) << 4 | c2 >> 4;\n    c3 = input.charCodeAt(i++);\n    e3 = (c2 & 15) << 2 | c3 >> 6;\n    e4 = c3 & 63;\n\n    if (isNaN(c2)) {\n      e3 = e4 = 64;\n    } else if (isNaN(c3)) {\n      e4 = 64;\n    }\n\n    o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);\n  }\n\n  return o;\n}\n\nfunction Base64_encode_pass(input) {\n  var o = \"\";\n  var c1 = 0,\n      c2 = 0,\n      c3 = 0,\n      e1 = 0,\n      e2 = 0,\n      e3 = 0,\n      e4 = 0;\n\n  for (var i = 0; i < input.length;) {\n    c1 = input.charCodeAt(i++);\n    if (c1 > 255) c1 = 95;\n    e1 = c1 >> 2;\n    c2 = input.charCodeAt(i++);\n    if (c2 > 255) c2 = 95;\n    e2 = (c1 & 3) << 4 | c2 >> 4;\n    c3 = input.charCodeAt(i++);\n    if (c3 > 255) c3 = 95;\n    e3 = (c2 & 15) << 2 | c3 >> 6;\n    e4 = c3 & 63;\n\n    if (isNaN(c2)) {\n      e3 = e4 = 64;\n    } else if (isNaN(c3)) {\n      e4 = 64;\n    }\n\n    o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);\n  }\n\n  return o;\n}\n\nfunction Base64_decode(input) {\n  var o = \"\";\n  var c1 = 0,\n      c2 = 0,\n      c3 = 0,\n      e1 = 0,\n      e2 = 0,\n      e3 = 0,\n      e4 = 0;\n  input = input.replace(/^data:([^\\/]+\\/[^\\/]+)?;base64\\,/, \"\").replace(/[^\\w\\+\\/\\=]/g, \"\");\n\n  for (var i = 0; i < input.length;) {\n    e1 = Base64_map.indexOf(input.charAt(i++));\n    e2 = Base64_map.indexOf(input.charAt(i++));\n    c1 = e1 << 2 | e2 >> 4;\n    o += String.fromCharCode(c1);\n    e3 = Base64_map.indexOf(input.charAt(i++));\n    c2 = (e2 & 15) << 4 | e3 >> 2;\n\n    if (e3 !== 64) {\n      o += String.fromCharCode(c2);\n    }\n\n    e4 = Base64_map.indexOf(input.charAt(i++));\n    c3 = (e3 & 3) << 6 | e4;\n\n    if (e4 !== 64) {\n      o += String.fromCharCode(c3);\n    }\n  }\n\n  return o;\n}\n\nvar has_buf = /*#__PURE__*/function () {\n  return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node;\n}();\n\nvar Buffer_from = /*#__PURE__*/function () {\n  if (typeof Buffer !== 'undefined') {\n    var nbfs = !Buffer.from;\n    if (!nbfs) try {\n      Buffer.from(\"foo\", \"utf8\");\n    } catch (e) {\n      nbfs = true;\n    }\n    return nbfs ? function (buf, enc) {\n      return enc ? new Buffer(buf, enc) : new Buffer(buf);\n    } : Buffer.from.bind(Buffer);\n  }\n\n  return function () {};\n}();\n\nvar buf_utf16le = /*#__PURE__*/function () {\n  if (typeof Buffer === 'undefined') return false;\n  var x = Buffer_from([65, 0]);\n  if (!x) return false;\n  var o = x.toString(\"utf16le\");\n  return o.length == 1;\n}();\n\nfunction new_raw_buf(len\n/*:number*/\n) {\n  /* jshint -W056 */\n  if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);\n  return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len\n/*:number*/\n) {\n  /* jshint -W056 */\n  if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);\n  return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nvar s2a = function s2a(s\n/*:string*/\n)\n/*:any*/\n{\n  if (has_buf) return Buffer_from(s, \"binary\");\n  return s.split(\"\").map(function (x\n  /*:string*/\n  )\n  /*:number*/\n  {\n    return x.charCodeAt(0) & 0xff;\n  });\n};\n\nfunction s2ab(s\n/*:string*/\n)\n/*:any*/\n{\n  if (typeof ArrayBuffer === 'undefined') return s2a(s);\n  var buf = new ArrayBuffer(s.length),\n      view = new Uint8Array(buf);\n\n  for (var i = 0; i != s.length; ++i) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n\n  return buf;\n}\n\nfunction a2s(data\n/*:any*/\n)\n/*:string*/\n{\n  if (Array.isArray(data)) return data.map(function (c) {\n    return String.fromCharCode(c);\n  }).join(\"\");\n  var o\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < data.length; ++i) {\n    o[i] = String.fromCharCode(data[i]);\n  }\n\n  return o.join(\"\");\n}\n\nfunction a2u(data\n/*:Array<number>*/\n)\n/*:Uint8Array*/\n{\n  if (typeof Uint8Array === 'undefined') throw new Error(\"Unsupported\");\n  return new Uint8Array(data);\n}\n\nfunction ab2a(data\n/*:ArrayBuffer|Uint8Array*/\n)\n/*:Array<number>*/\n{\n  if (typeof ArrayBuffer == 'undefined') throw new Error(\"Unsupported\");\n  if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));\n  /*:: if(data instanceof ArrayBuffer) throw new Error(\"unreachable\"); */\n\n  var o = new Array(data.length);\n\n  for (var i = 0; i < data.length; ++i) {\n    o[i] = data[i];\n  }\n\n  return o;\n}\n\nvar bconcat = has_buf ? function (bufs) {\n  return Buffer.concat(bufs.map(function (buf) {\n    return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);\n  }));\n} : function (bufs) {\n  if (typeof Uint8Array !== \"undefined\") {\n    var i = 0,\n        maxlen = 0;\n\n    for (i = 0; i < bufs.length; ++i) {\n      maxlen += bufs[i].length;\n    }\n\n    var o = new Uint8Array(maxlen);\n    var len = 0;\n\n    for (i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {\n      len = bufs[i].length;\n      if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);else if (typeof bufs[i] == \"string\") o.set(new Uint8Array(s2a(bufs[i])), maxlen);else o.set(new Uint8Array(bufs[i]), maxlen);\n    }\n\n    return o;\n  }\n\n  return [].concat.apply([], bufs.map(function (buf) {\n    return Array.isArray(buf) ? buf : [].slice.call(buf);\n  }));\n};\n\nfunction utf8decode(content\n/*:string*/\n) {\n  var out = [],\n      widx = 0,\n      L = content.length + 250;\n  var o = new_raw_buf(content.length + 255);\n\n  for (var ridx = 0; ridx < content.length; ++ridx) {\n    var c = content.charCodeAt(ridx);\n    if (c < 0x80) o[widx++] = c;else if (c < 0x800) {\n      o[widx++] = 192 | c >> 6 & 31;\n      o[widx++] = 128 | c & 63;\n    } else if (c >= 0xD800 && c < 0xE000) {\n      c = (c & 1023) + 64;\n      var d = content.charCodeAt(++ridx) & 1023;\n      o[widx++] = 240 | c >> 8 & 7;\n      o[widx++] = 128 | c >> 2 & 63;\n      o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;\n      o[widx++] = 128 | d & 63;\n    } else {\n      o[widx++] = 224 | c >> 12 & 15;\n      o[widx++] = 128 | c >> 6 & 63;\n      o[widx++] = 128 | c & 63;\n    }\n\n    if (widx > L) {\n      out.push(o.slice(0, widx));\n      widx = 0;\n      o = new_raw_buf(65535);\n      L = 65530;\n    }\n  }\n\n  out.push(o.slice(0, widx));\n  return bconcat(out);\n}\n\nvar chr0 = /\\u0000/g,\n    chr1 = /[\\u0001-\\u0006]/g;\n/*::\ndeclare type Block = any;\ndeclare type BufArray = {\n\tnewblk(sz:number):Block;\n\tnext(sz:number):Block;\n\tend():any;\n\tpush(buf:Block):void;\n};\n\ntype RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};\n\ntype EvertType = {[string]:string};\ntype EvertNumType = {[string]:number};\ntype EvertArrType = {[string]:Array<string>};\n\ntype StringConv = {(string):string};\n\n*/\n\n/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */\n\n/*jshint -W041 */\n\nfunction _strrev(x\n/*:string*/\n)\n/*:string*/\n{\n  var o = \"\",\n      i = x.length - 1;\n\n  while (i >= 0) {\n    o += x.charAt(i--);\n  }\n\n  return o;\n}\n\nfunction pad0(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var t = \"\" + v;\n  return t.length >= d ? t : fill('0', d - t.length) + t;\n}\n\nfunction pad_(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var t = \"\" + v;\n  return t.length >= d ? t : fill(' ', d - t.length) + t;\n}\n\nfunction rpad_(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var t = \"\" + v;\n  return t.length >= d ? t : t + fill(' ', d - t.length);\n}\n\nfunction pad0r1(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var t = \"\" + Math.round(v);\n  return t.length >= d ? t : fill('0', d - t.length) + t;\n}\n\nfunction pad0r2(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var t = \"\" + v;\n  return t.length >= d ? t : fill('0', d - t.length) + t;\n}\n\nvar p2_32 = /*#__PURE__*/Math.pow(2, 32);\n\nfunction pad0r(v\n/*:any*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  if (v > p2_32 || v < -p2_32) return pad0r1(v, d);\n  var i = Math.round(v);\n  return pad0r2(i, d);\n}\n/* yes, in 2022 this is still faster than string compare */\n\n\nfunction SSF_isgeneral(s\n/*:string*/\n, i\n/*:?number*/\n)\n/*:boolean*/\n{\n  i = i || 0;\n  return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;\n}\n\nvar days\n/*:Array<Array<string> >*/\n= [['Sun', 'Sunday'], ['Mon', 'Monday'], ['Tue', 'Tuesday'], ['Wed', 'Wednesday'], ['Thu', 'Thursday'], ['Fri', 'Friday'], ['Sat', 'Saturday']];\nvar months\n/*:Array<Array<string> >*/\n= [['J', 'Jan', 'January'], ['F', 'Feb', 'February'], ['M', 'Mar', 'March'], ['A', 'Apr', 'April'], ['M', 'May', 'May'], ['J', 'Jun', 'June'], ['J', 'Jul', 'July'], ['A', 'Aug', 'August'], ['S', 'Sep', 'September'], ['O', 'Oct', 'October'], ['N', 'Nov', 'November'], ['D', 'Dec', 'December']];\n\nfunction SSF_init_table(t\n/*:any*/\n) {\n  if (!t) t = {};\n  t[0] = 'General';\n  t[1] = '0';\n  t[2] = '0.00';\n  t[3] = '#,##0';\n  t[4] = '#,##0.00';\n  t[9] = '0%';\n  t[10] = '0.00%';\n  t[11] = '0.00E+00';\n  t[12] = '# ?/?';\n  t[13] = '# ??/??';\n  t[14] = 'm/d/yy';\n  t[15] = 'd-mmm-yy';\n  t[16] = 'd-mmm';\n  t[17] = 'mmm-yy';\n  t[18] = 'h:mm AM/PM';\n  t[19] = 'h:mm:ss AM/PM';\n  t[20] = 'h:mm';\n  t[21] = 'h:mm:ss';\n  t[22] = 'm/d/yy h:mm';\n  t[37] = '#,##0 ;(#,##0)';\n  t[38] = '#,##0 ;[Red](#,##0)';\n  t[39] = '#,##0.00;(#,##0.00)';\n  t[40] = '#,##0.00;[Red](#,##0.00)';\n  t[45] = 'mm:ss';\n  t[46] = '[h]:mm:ss';\n  t[47] = 'mmss.0';\n  t[48] = '##0.0E+0';\n  t[49] = '@';\n  t[56] = '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"';\n  return t;\n}\n/* repeated to satiate webpack */\n\n\nvar table_fmt = {\n  0: 'General',\n  1: '0',\n  2: '0.00',\n  3: '#,##0',\n  4: '#,##0.00',\n  9: '0%',\n  10: '0.00%',\n  11: '0.00E+00',\n  12: '# ?/?',\n  13: '# ??/??',\n  14: 'm/d/yy',\n  15: 'd-mmm-yy',\n  16: 'd-mmm',\n  17: 'mmm-yy',\n  18: 'h:mm AM/PM',\n  19: 'h:mm:ss AM/PM',\n  20: 'h:mm',\n  21: 'h:mm:ss',\n  22: 'm/d/yy h:mm',\n  37: '#,##0 ;(#,##0)',\n  38: '#,##0 ;[Red](#,##0)',\n  39: '#,##0.00;(#,##0.00)',\n  40: '#,##0.00;[Red](#,##0.00)',\n  45: 'mm:ss',\n  46: '[h]:mm:ss',\n  47: 'mmss.0',\n  48: '##0.0E+0',\n  49: '@',\n  56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"'\n};\n/* Defaults determined by systematically testing in Excel 2019 */\n\n/* These formats appear to default to other formats in the table */\n\nvar SSF_default_map = {\n  5: 37,\n  6: 38,\n  7: 39,\n  8: 40,\n  //  5 -> 37 ...  8 -> 40\n  23: 0,\n  24: 0,\n  25: 0,\n  26: 0,\n  // 23 ->  0 ... 26 ->  0\n  27: 14,\n  28: 14,\n  29: 14,\n  30: 14,\n  31: 14,\n  // 27 -> 14 ... 31 -> 14\n  50: 14,\n  51: 14,\n  52: 14,\n  53: 14,\n  54: 14,\n  // 50 -> 14 ... 58 -> 14\n  55: 14,\n  56: 14,\n  57: 14,\n  58: 14,\n  59: 1,\n  60: 2,\n  61: 3,\n  62: 4,\n  // 59 ->  1 ... 62 ->  4\n  67: 9,\n  68: 10,\n  // 67 ->  9 ... 68 -> 10\n  69: 12,\n  70: 13,\n  71: 14,\n  // 69 -> 12 ... 71 -> 14\n  72: 14,\n  73: 15,\n  74: 16,\n  75: 17,\n  // 72 -> 14 ... 75 -> 17\n  76: 20,\n  77: 21,\n  78: 22,\n  // 76 -> 20 ... 78 -> 22\n  79: 45,\n  80: 46,\n  81: 47,\n  // 79 -> 45 ... 81 -> 47\n  82: 0 // 82 ->  0 ... 65536 -> 0 (omitted)\n\n};\n/* These formats technically refer to Accounting formats with no equivalent */\n\nvar SSF_default_str = {\n  //  5 -- Currency,   0 decimal, black negative\n  5: '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n  63: '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n  //  6 -- Currency,   0 decimal, red   negative\n  6: '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n  64: '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n  //  7 -- Currency,   2 decimal, black negative\n  7: '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n  65: '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n  //  8 -- Currency,   2 decimal, red   negative\n  8: '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n  66: '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n  // 41 -- Accounting, 0 decimal, No Symbol\n  41: '_(* #,##0_);_(* \\\\(#,##0\\\\);_(* \"-\"_);_(@_)',\n  // 42 -- Accounting, 0 decimal, $  Symbol\n  42: '_(\"$\"* #,##0_);_(\"$\"* \\\\(#,##0\\\\);_(\"$\"* \"-\"_);_(@_)',\n  // 43 -- Accounting, 2 decimal, No Symbol\n  43: '_(* #,##0.00_);_(* \\\\(#,##0.00\\\\);_(* \"-\"??_);_(@_)',\n  // 44 -- Accounting, 2 decimal, $  Symbol\n  44: '_(\"$\"* #,##0.00_);_(\"$\"* \\\\(#,##0.00\\\\);_(\"$\"* \"-\"??_);_(@_)'\n};\n\nfunction SSF_frac(x\n/*:number*/\n, D\n/*:number*/\n, mixed\n/*:?boolean*/\n)\n/*:Array<number>*/\n{\n  var sgn = x < 0 ? -1 : 1;\n  var B = x * sgn;\n  var P_2 = 0,\n      P_1 = 1,\n      P = 0;\n  var Q_2 = 1,\n      Q_1 = 0,\n      Q = 0;\n  var A = Math.floor(B);\n\n  while (Q_1 < D) {\n    A = Math.floor(B);\n    P = A * P_1 + P_2;\n    Q = A * Q_1 + Q_2;\n    if (B - A < 0.00000005) break;\n    B = 1 / (B - A);\n    P_2 = P_1;\n    P_1 = P;\n    Q_2 = Q_1;\n    Q_1 = Q;\n  }\n\n  if (Q > D) {\n    if (Q_1 > D) {\n      Q = Q_2;\n      P = P_2;\n    } else {\n      Q = Q_1;\n      P = P_1;\n    }\n  }\n\n  if (!mixed) return [0, sgn * P, Q];\n  var q = Math.floor(sgn * P / Q);\n  return [q, sgn * P - q * Q, Q];\n}\n\nfunction SSF_parse_date_code(v\n/*:number*/\n, opts\n/*:?any*/\n, b2\n/*:?boolean*/\n) {\n  if (v > 2958465 || v < 0) return null;\n  var date = v | 0,\n      time = Math.floor(86400 * (v - date)),\n      dow = 0;\n  var dout = [];\n  var out = {\n    D: date,\n    T: time,\n    u: 86400 * (v - date) - time,\n    y: 0,\n    m: 0,\n    d: 0,\n    H: 0,\n    M: 0,\n    S: 0,\n    q: 0\n  };\n  if (Math.abs(out.u) < 1e-6) out.u = 0;\n  if (opts && opts.date1904) date += 1462;\n\n  if (out.u > 0.9999) {\n    out.u = 0;\n\n    if (++time == 86400) {\n      out.T = time = 0;\n      ++date;\n      ++out.D;\n    }\n  }\n\n  if (date === 60) {\n    dout = b2 ? [1317, 10, 29] : [1900, 2, 29];\n    dow = 3;\n  } else if (date === 0) {\n    dout = b2 ? [1317, 8, 29] : [1900, 1, 0];\n    dow = 6;\n  } else {\n    if (date > 60) --date;\n    /* 1 = Jan 1 1900 in Gregorian */\n\n    var d = new Date(1900, 0, 1);\n    d.setDate(d.getDate() + date - 1);\n    dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];\n    dow = d.getDay();\n    if (date < 60) dow = (dow + 6) % 7;\n    if (b2) dow = SSF_fix_hijri(d, dout);\n  }\n\n  out.y = dout[0];\n  out.m = dout[1];\n  out.d = dout[2];\n  out.S = time % 60;\n  time = Math.floor(time / 60);\n  out.M = time % 60;\n  time = Math.floor(time / 60);\n  out.H = time;\n  out.q = dow;\n  return out;\n}\n\nvar SSFbasedate = /*#__PURE__*/new Date(1899, 11, 31, 0, 0, 0);\nvar SSFdnthresh = /*#__PURE__*/SSFbasedate.getTime();\nvar SSFbase1904 = /*#__PURE__*/new Date(1900, 2, 1, 0, 0, 0);\n\nfunction datenum_local(v\n/*:Date*/\n, date1904\n/*:?boolean*/\n)\n/*:number*/\n{\n  var epoch = /*#__PURE__*/v.getTime();\n  if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1000;else if (v >= SSFbase1904) epoch += 24 * 60 * 60 * 1000;\n  return (epoch - (SSFdnthresh + ( /*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/SSFbasedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);\n}\n/* ECMA-376 18.8.30 numFmt*/\n\n/* Note: `toPrecision` uses standard form when prec > E and E >= -6 */\n\n/* exponent >= -9 and <= 9 */\n\n\nfunction SSF_strip_decimal(o\n/*:string*/\n)\n/*:string*/\n{\n  return o.indexOf(\".\") == -1 ? o : o.replace(/(?:\\.0*|(\\.\\d*[1-9])0+)$/, \"$1\");\n}\n/* General Exponential always shows 2 digits exp and trims the mantissa */\n\n\nfunction SSF_normalize_exp(o\n/*:string*/\n)\n/*:string*/\n{\n  if (o.indexOf(\"E\") == -1) return o;\n  return o.replace(/(?:\\.0*|(\\.\\d*[1-9])0+)[Ee]/, \"$1E\").replace(/(E[+-])(\\d)$/, \"$10$2\");\n}\n/* exponent >= -9 and <= 9 */\n\n\nfunction SSF_small_exp(v\n/*:number*/\n)\n/*:string*/\n{\n  var w = v < 0 ? 12 : 11;\n  var o = SSF_strip_decimal(v.toFixed(12));\n  if (o.length <= w) return o;\n  o = v.toPrecision(10);\n  if (o.length <= w) return o;\n  return v.toExponential(5);\n}\n/* exponent >= 11 or <= -10 likely exponential */\n\n\nfunction SSF_large_exp(v\n/*:number*/\n)\n/*:string*/\n{\n  var o = SSF_strip_decimal(v.toFixed(11));\n  return o.length > (v < 0 ? 12 : 11) || o === \"0\" || o === \"-0\" ? v.toPrecision(6) : o;\n}\n\nfunction SSF_general_num(v\n/*:number*/\n)\n/*:string*/\n{\n  var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),\n      o;\n  if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);else if (Math.abs(V) <= 9) o = SSF_small_exp(v);else if (V === 10) o = v.toFixed(10).substr(0, 12);else o = SSF_large_exp(v);\n  return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));\n}\n/*\n\t\"General\" rules:\n\t- text is passed through (\"@\")\n\t- booleans are rendered as TRUE/FALSE\n\t- \"up to 11 characters\" displayed for numbers\n\t- Default date format (code 14) used for Dates\n\n\tThe longest 32-bit integer text is \"-2147483648\", exactly 11 chars\n\tTODO: technically the display depends on the width of the cell\n*/\n\n\nfunction SSF_general(v\n/*:any*/\n, opts\n/*:any*/\n) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? \"TRUE\" : \"FALSE\";\n\n    case 'number':\n      return (v | 0) === v ? v.toString(10) : SSF_general_num(v);\n\n    case 'undefined':\n      return \"\";\n\n    case 'object':\n      if (v == null) return \"\";\n      if (v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);\n  }\n\n  throw new Error(\"unsupported value in General format: \" + v);\n}\n\nfunction SSF_fix_hijri(date\n/*:Date*/\n, o\n/*:[number, number, number]*/\n) {\n  /* TODO: properly adjust y/m/d and  */\n  o[0] -= 581;\n  var dow = date.getDay();\n  if (date < 60) dow = (dow + 6) % 7;\n  return dow;\n} //var THAI_DIGITS = \"\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\".split(\"\");\n\n\nfunction SSF_write_date(type\n/*:number*/\n, fmt\n/*:string*/\n, val, ss0\n/*:?number*/\n)\n/*:string*/\n{\n  var o = \"\",\n      ss = 0,\n      tt = 0,\n      y = val.y,\n      out,\n      outl = 0;\n\n  switch (type) {\n    case 98:\n      /* 'b' buddhist year */\n      y = val.y + 543;\n\n    /* falls through */\n\n    case 121:\n      /* 'y' year */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = y % 100;\n          outl = 2;\n          break;\n\n        default:\n          out = y % 10000;\n          outl = 4;\n          break;\n      }\n\n      break;\n\n    case 109:\n      /* 'm' month */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = val.m;\n          outl = fmt.length;\n          break;\n\n        case 3:\n          return months[val.m - 1][1];\n\n        case 5:\n          return months[val.m - 1][0];\n\n        default:\n          return months[val.m - 1][2];\n      }\n\n      break;\n\n    case 100:\n      /* 'd' day */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = val.d;\n          outl = fmt.length;\n          break;\n\n        case 3:\n          return days[val.q][0];\n\n        default:\n          return days[val.q][1];\n      }\n\n      break;\n\n    case 104:\n      /* 'h' 12-hour */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = 1 + (val.H + 11) % 12;\n          outl = fmt.length;\n          break;\n\n        default:\n          throw 'bad hour format: ' + fmt;\n      }\n\n      break;\n\n    case 72:\n      /* 'H' 24-hour */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = val.H;\n          outl = fmt.length;\n          break;\n\n        default:\n          throw 'bad hour format: ' + fmt;\n      }\n\n      break;\n\n    case 77:\n      /* 'M' minutes */\n      switch (fmt.length) {\n        case 1:\n        case 2:\n          out = val.M;\n          outl = fmt.length;\n          break;\n\n        default:\n          throw 'bad minute format: ' + fmt;\n      }\n\n      break;\n\n    case 115:\n      /* 's' seconds */\n      if (fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;\n      if (val.u === 0 && (fmt == \"s\" || fmt == \"ss\")) return pad0(val.S, fmt.length);\n      /*::if(!ss0) ss0 = 0; */\n\n      if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;else tt = ss0 === 1 ? 10 : 1;\n      ss = Math.round(tt * (val.S + val.u));\n      if (ss >= 60 * tt) ss = 0;\n      if (fmt === 's') return ss === 0 ? \"0\" : \"\" + ss / tt;\n      o = pad0(ss, 2 + ss0);\n      if (fmt === 'ss') return o.substr(0, 2);\n      return \".\" + o.substr(2, fmt.length - 1);\n\n    case 90:\n      /* 'Z' absolute time */\n      switch (fmt) {\n        case '[h]':\n        case '[hh]':\n          out = val.D * 24 + val.H;\n          break;\n\n        case '[m]':\n        case '[mm]':\n          out = (val.D * 24 + val.H) * 60 + val.M;\n          break;\n\n        case '[s]':\n        case '[ss]':\n          out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);\n          break;\n\n        default:\n          throw 'bad abstime format: ' + fmt;\n      }\n\n      outl = fmt.length === 3 ? 1 : 2;\n      break;\n\n    case 101:\n      /* 'e' era */\n      out = y;\n      outl = 1;\n      break;\n  }\n\n  var outstr = outl > 0 ? pad0(out, outl) : \"\";\n  return outstr;\n}\n/*jshint -W086 */\n\n/*jshint +W086 */\n\n\nfunction commaify(s\n/*:string*/\n)\n/*:string*/\n{\n  var w = 3;\n  if (s.length <= w) return s;\n  var j = s.length % w,\n      o = s.substr(0, j);\n\n  for (; j != s.length; j += w) {\n    o += (o.length > 0 ? \",\" : \"\") + s.substr(j, w);\n  }\n\n  return o;\n}\n\nvar pct1 = /%/g;\n\nfunction write_num_pct(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var sfmt = fmt.replace(pct1, \"\"),\n      mul = fmt.length - sfmt.length;\n  return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n}\n\nfunction write_num_cm(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var idx = fmt.length - 1;\n\n  while (fmt.charCodeAt(idx - 1) === 44) {\n    --idx;\n  }\n\n  return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n}\n\nfunction write_num_exp(fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var o\n  /*:string*/\n  ;\n  var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\n  if (fmt.match(/^#+0.0E\\+0$/)) {\n    if (val == 0) return \"0.0E+0\";else if (val < 0) return \"-\" + write_num_exp(fmt, -val);\n    var period = fmt.indexOf(\".\");\n    if (period === -1) period = fmt.indexOf('E');\n    var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;\n    if (ee < 0) ee += period;\n    o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n\n    if (o.indexOf(\"e\") === -1) {\n      var fakee = Math.floor(Math.log(val) * Math.LOG10E);\n      if (o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);else o += \"E+\" + (fakee - ee);\n\n      while (o.substr(0, 2) === \"0.\") {\n        o = o.charAt(0) + o.substr(2, period) + \".\" + o.substr(2 + period);\n        o = o.replace(/^0+([1-9])/, \"$1\").replace(/^0+\\./, \"0.\");\n      }\n\n      o = o.replace(/\\+-/, \"-\");\n    }\n\n    o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function ($$, $1, $2, $3) {\n      return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n    });\n  } else o = val.toExponential(idx);\n\n  if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o.charAt(o.length - 1);\n  if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n  return o.replace(\"e\", \"E\");\n}\n\nvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\n\nfunction write_num_f1(r\n/*:Array<string>*/\n, aval\n/*:number*/\n, sign\n/*:string*/\n)\n/*:string*/\n{\n  var den = parseInt(r[4], 10),\n      rr = Math.round(aval * den),\n      base = Math.floor(rr / den);\n  var myn = rr - base * den,\n      myd = den;\n  return sign + (base === 0 ? \"\" : \"\" + base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + \"/\" + r[3] + pad0(myd, r[4].length));\n}\n\nfunction write_num_f2(r\n/*:Array<string>*/\n, aval\n/*:number*/\n, sign\n/*:string*/\n)\n/*:string*/\n{\n  return sign + (aval === 0 ? \"\" : \"\" + aval) + fill(\" \", r[1].length + 2 + r[4].length);\n}\n\nvar dec1 = /^#*0*\\.([0#]+)/;\nvar closeparen = /\\).*[0#]/;\nvar phone = /\\(###\\) ###\\\\?-####/;\n\nfunction hashq(str\n/*:string*/\n)\n/*:string*/\n{\n  var o = \"\",\n      cc;\n\n  for (var i = 0; i != str.length; ++i) {\n    switch (cc = str.charCodeAt(i)) {\n      case 35:\n        break;\n\n      case 63:\n        o += \" \";\n        break;\n\n      case 48:\n        o += \"0\";\n        break;\n\n      default:\n        o += String.fromCharCode(cc);\n    }\n  }\n\n  return o;\n}\n\nfunction rnd(val\n/*:number*/\n, d\n/*:number*/\n)\n/*:string*/\n{\n  var dd = Math.pow(10, d);\n  return \"\" + Math.round(val * dd) / dd;\n}\n\nfunction dec(val\n/*:number*/\n, d\n/*:number*/\n)\n/*:number*/\n{\n  var _frac = val - Math.floor(val),\n      dd = Math.pow(10, d);\n\n  if (d < ('' + Math.round(_frac * dd)).length) return 0;\n  return Math.round(_frac * dd);\n}\n\nfunction carry(val\n/*:number*/\n, d\n/*:number*/\n)\n/*:number*/\n{\n  if (d < ('' + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction flr(val\n/*:number*/\n)\n/*:string*/\n{\n  if (val < 2147483647 && val > -2147483648) return \"\" + (val >= 0 ? val | 0 : val - 1 | 0);\n  return \"\" + Math.floor(val);\n}\n\nfunction write_num_flt(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n    var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n    if (val >= 0) return write_num_flt('n', ffmt, val);\n    return '(' + write_num_flt('n', ffmt, -val) + ')';\n  }\n\n  if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n  if (fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n  if (fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n  if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_flt(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val);\n  var o;\n  var r\n  /*:?Array<string>*/\n  ,\n      ri,\n      ff,\n      aval = Math.abs(val),\n      sign = val < 0 ? \"-\" : \"\";\n  if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);\n\n  if (fmt.match(/^[#?]+$/)) {\n    o = pad0r(val, 0);\n    if (o === \"0\") o = \"\";\n    return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n  }\n\n  if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);\n  if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf(\"0\"));\n\n  if (r = fmt.match(dec1)) {\n    o = rnd(val, r[1].length).replace(/^([^\\.]+)$/, \"$1.\" + hashq(r[1])).replace(/\\.$/, \".\" + hashq(r[1])).replace(/\\.(\\d*)$/, function ($$, $1) {\n      return \".\" + $1 + fill(\"0\", hashq(\n      /*::(*/\n      r\n      /*::||[\"\"])*/\n      [1]).length - $1.length);\n    });\n    return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n  }\n\n  fmt = fmt.replace(/^#+([0.])/, \"$1\");\n\n  if (r = fmt.match(/^(0*)\\.(#*)$/)) {\n    return sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n  }\n\n  if (r = fmt.match(/^#{1,3},##0(\\.?)$/)) return sign + commaify(pad0r(aval, 0));\n\n  if (r = fmt.match(/^#,##0\\.([#0]*0)$/)) {\n    return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\" + (Math.floor(val) + carry(val, r[1].length))) + \".\" + pad0(dec(val, r[1].length), r[1].length);\n  }\n\n  if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, \"\"), val);\n\n  if (r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) {\n    o = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n    ri = 0;\n    return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function (x) {\n      return ri < o.length ? o.charAt(ri++) : x === '0' ? '0' : \"\";\n    }));\n  }\n\n  if (fmt.match(phone)) {\n    o = write_num_flt(type, \"##########\", val);\n    return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n  }\n\n  var oa = \"\";\n\n  if (r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n    ri = Math.min(\n    /*::String(*/\n    r[4]\n    /*::)*/\n    .length, 7);\n    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);\n    o = \"\" + sign;\n    oa = write_num(\"n\",\n    /*::String(*/\n    r[1]\n    /*::)*/\n    , ff[1]);\n    if (oa.charAt(oa.length - 1) == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n    o += oa +\n    /*::String(*/\n    r[2]\n    /*::)*/\n    + \"/\" +\n    /*::String(*/\n    r[3]\n    /*::)*/\n    ;\n    oa = rpad_(ff[2], ri);\n    if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n    o += oa;\n    return o;\n  }\n\n  if (r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n    ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);\n    return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n  }\n\n  if (r = fmt.match(/^[#0?]+$/)) {\n    o = pad0r(val, 0);\n    if (fmt.length <= o.length) return o;\n    return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n  }\n\n  if (r = fmt.match(/^([#0?]+)\\.([#0]+)$/)) {\n    o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n    ri = o.indexOf(\".\");\n    var lres = fmt.indexOf(\".\") - ri,\n        rres = fmt.length - o.length - lres;\n    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n  }\n\n  if (r = fmt.match(/^00,000\\.([#0]*0)$/)) {\n    ri = dec(val, r[1].length);\n    return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function ($$) {\n      return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n    }) + \".\" + pad0(ri, r[1].length);\n  }\n\n  switch (fmt) {\n    case \"###,##0.00\":\n      return write_num_flt(type, \"#,##0.00\", val);\n\n    case \"###,###\":\n    case \"##,###\":\n    case \"#,###\":\n      var x = commaify(pad0r(aval, 0));\n      return x !== \"0\" ? sign + x : \"\";\n\n    case \"###,###.00\":\n      return write_num_flt(type, \"###,##0.00\", val).replace(/^0\\./, \".\");\n\n    case \"#,###.00\":\n      return write_num_flt(type, \"#,##0.00\", val).replace(/^0\\./, \".\");\n\n    default:\n  }\n\n  throw new Error(\"unsupported format |\" + fmt + \"|\");\n}\n\nfunction write_num_cm2(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var idx = fmt.length - 1;\n\n  while (fmt.charCodeAt(idx - 1) === 44) {\n    --idx;\n  }\n\n  return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n}\n\nfunction write_num_pct2(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var sfmt = fmt.replace(pct1, \"\"),\n      mul = fmt.length - sfmt.length;\n  return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n}\n\nfunction write_num_exp2(fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  var o\n  /*:string*/\n  ;\n  var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\n  if (fmt.match(/^#+0.0E\\+0$/)) {\n    if (val == 0) return \"0.0E+0\";else if (val < 0) return \"-\" + write_num_exp2(fmt, -val);\n    var period = fmt.indexOf(\".\");\n    if (period === -1) period = fmt.indexOf('E');\n    var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;\n    if (ee < 0) ee += period;\n    o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n\n    if (!o.match(/[Ee]/)) {\n      var fakee = Math.floor(Math.log(val) * Math.LOG10E);\n      if (o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);else o += \"E+\" + (fakee - ee);\n      o = o.replace(/\\+-/, \"-\");\n    }\n\n    o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function ($$, $1, $2, $3) {\n      return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n    });\n  } else o = val.toExponential(idx);\n\n  if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o.charAt(o.length - 1);\n  if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n  return o.replace(\"e\", \"E\");\n}\n\nfunction write_num_int(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n    var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n    if (val >= 0) return write_num_int('n', ffmt, val);\n    return '(' + write_num_int('n', ffmt, -val) + ')';\n  }\n\n  if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n  if (fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n  if (fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n  if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_int(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val);\n  var o;\n  var r\n  /*:?Array<string>*/\n  ,\n      ri,\n      ff,\n      aval = Math.abs(val),\n      sign = val < 0 ? \"-\" : \"\";\n  if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);\n\n  if (fmt.match(/^[#?]+$/)) {\n    o = \"\" + val;\n    if (val === 0) o = \"\";\n    return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n  }\n\n  if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);\n  if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf(\"0\"));\n\n  if (r = fmt.match(dec1)) {\n    /*:: if(!Array.isArray(r)) throw new Error(\"unreachable\"); */\n    o = (\"\" + val).replace(/^([^\\.]+)$/, \"$1.\" + hashq(r[1])).replace(/\\.$/, \".\" + hashq(r[1]));\n    o = o.replace(/\\.(\\d*)$/, function ($$, $1) {\n      /*:: if(!Array.isArray(r)) throw new Error(\"unreachable\"); */\n      return \".\" + $1 + fill(\"0\", hashq(r[1]).length - $1.length);\n    });\n    return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n  }\n\n  fmt = fmt.replace(/^#+([0.])/, \"$1\");\n\n  if (r = fmt.match(/^(0*)\\.(#*)$/)) {\n    return sign + (\"\" + aval).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n  }\n\n  if (r = fmt.match(/^#{1,3},##0(\\.?)$/)) return sign + commaify(\"\" + aval);\n\n  if (r = fmt.match(/^#,##0\\.([#0]*0)$/)) {\n    return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val) + \".\" + fill('0', r[1].length);\n  }\n\n  if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, \"\"), val);\n\n  if (r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) {\n    o = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n    ri = 0;\n    return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function (x) {\n      return ri < o.length ? o.charAt(ri++) : x === '0' ? '0' : \"\";\n    }));\n  }\n\n  if (fmt.match(phone)) {\n    o = write_num_int(type, \"##########\", val);\n    return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n  }\n\n  var oa = \"\";\n\n  if (r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n    ri = Math.min(\n    /*::String(*/\n    r[4]\n    /*::)*/\n    .length, 7);\n    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);\n    o = \"\" + sign;\n    oa = write_num(\"n\",\n    /*::String(*/\n    r[1]\n    /*::)*/\n    , ff[1]);\n    if (oa.charAt(oa.length - 1) == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n    o += oa +\n    /*::String(*/\n    r[2]\n    /*::)*/\n    + \"/\" +\n    /*::String(*/\n    r[3]\n    /*::)*/\n    ;\n    oa = rpad_(ff[2], ri);\n    if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n    o += oa;\n    return o;\n  }\n\n  if (r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n    ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);\n    return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n  }\n\n  if (r = fmt.match(/^[#0?]+$/)) {\n    o = \"\" + val;\n    if (fmt.length <= o.length) return o;\n    return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n  }\n\n  if (r = fmt.match(/^([#0]+)\\.([#0]+)$/)) {\n    o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n    ri = o.indexOf(\".\");\n    var lres = fmt.indexOf(\".\") - ri,\n        rres = fmt.length - o.length - lres;\n    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n  }\n\n  if (r = fmt.match(/^00,000\\.([#0]*0)$/)) {\n    return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function ($$) {\n      return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n    }) + \".\" + pad0(0, r[1].length);\n  }\n\n  switch (fmt) {\n    case \"###,###\":\n    case \"##,###\":\n    case \"#,###\":\n      var x = commaify(\"\" + aval);\n      return x !== \"0\" ? sign + x : \"\";\n\n    default:\n      if (fmt.match(/\\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(\".\")), val) + hashq(fmt.slice(fmt.lastIndexOf(\".\")));\n  }\n\n  throw new Error(\"unsupported format |\" + fmt + \"|\");\n}\n\nfunction write_num(type\n/*:string*/\n, fmt\n/*:string*/\n, val\n/*:number*/\n)\n/*:string*/\n{\n  return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n}\n\nfunction SSF_split_fmt(fmt\n/*:string*/\n)\n/*:Array<string>*/\n{\n  var out\n  /*:Array<string>*/\n  = [];\n  var in_str = false\n  /*, cc*/\n  ;\n\n  for (var i = 0, j = 0; i < fmt.length; ++i) {\n    switch (\n    /*cc=*/\n    fmt.charCodeAt(i)) {\n      case 34:\n        /* '\"' */\n        in_str = !in_str;\n        break;\n\n      case 95:\n      case 42:\n      case 92:\n        /* '_' '*' '\\\\' */\n        ++i;\n        break;\n\n      case 59:\n        /* ';' */\n        out[out.length] = fmt.substr(j, i - j);\n        j = i + 1;\n    }\n  }\n\n  out[out.length] = fmt.substr(j);\n  if (in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n  return out;\n}\n\nvar SSF_abstime = /\\[[HhMmSs\\u0E0A\\u0E19\\u0E17]*\\]/;\n\nfunction fmt_is_date(fmt\n/*:string*/\n)\n/*:boolean*/\n{\n  var i = 0,\n\n  /*cc = 0,*/\n  c = \"\",\n      o = \"\";\n\n  while (i < fmt.length) {\n    switch (c = fmt.charAt(i)) {\n      case 'G':\n        if (SSF_isgeneral(fmt, i)) i += 6;\n        i++;\n        break;\n\n      case '\"':\n        for (;\n        /*cc=*/\n        fmt.charCodeAt(++i) !== 34 && i < fmt.length;) {\n          /*empty*/\n        }\n\n        ++i;\n        break;\n\n      case '\\\\':\n        i += 2;\n        break;\n\n      case '_':\n        i += 2;\n        break;\n\n      case '@':\n        ++i;\n        break;\n\n      case 'B':\n      case 'b':\n        if (fmt.charAt(i + 1) === \"1\" || fmt.charAt(i + 1) === \"2\") return true;\n\n      /* falls through */\n\n      case 'M':\n      case 'D':\n      case 'Y':\n      case 'H':\n      case 'S':\n      case 'E':\n      /* falls through */\n\n      case 'm':\n      case 'd':\n      case 'y':\n      case 'h':\n      case 's':\n      case 'e':\n      case 'g':\n        return true;\n\n      case 'A':\n      case 'a':\n      case '上':\n        if (fmt.substr(i, 3).toUpperCase() === \"A/P\") return true;\n        if (fmt.substr(i, 5).toUpperCase() === \"AM/PM\") return true;\n        if (fmt.substr(i, 5).toUpperCase() === \"上午/下午\") return true;\n        ++i;\n        break;\n\n      case '[':\n        o = c;\n\n        while (fmt.charAt(i++) !== ']' && i < fmt.length) {\n          o += fmt.charAt(i);\n        }\n\n        if (o.match(SSF_abstime)) return true;\n        break;\n\n      case '.':\n      /* falls through */\n\n      case '0':\n      case '#':\n        while (i < fmt.length && (\"0#?.,E+-%\".indexOf(c = fmt.charAt(++i)) > -1 || c == '\\\\' && fmt.charAt(i + 1) == \"-\" && \"0#\".indexOf(fmt.charAt(i + 2)) > -1)) {\n          /* empty */\n        }\n\n        break;\n\n      case '?':\n        while (fmt.charAt(++i) === c) {\n          /* empty */\n        }\n\n        break;\n\n      case '*':\n        ++i;\n        if (fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i;\n        break;\n\n      case '(':\n      case ')':\n        ++i;\n        break;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        while (i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1) {\n          /* empty */\n        }\n\n        break;\n\n      case ' ':\n        ++i;\n        break;\n\n      default:\n        ++i;\n        break;\n    }\n  }\n\n  return false;\n}\n\nfunction eval_fmt(fmt\n/*:string*/\n, v\n/*:any*/\n, opts\n/*:any*/\n, flen\n/*:number*/\n) {\n  var out = [],\n      o = \"\",\n      i = 0,\n      c = \"\",\n      lst = 't',\n      dt,\n      j,\n      cc;\n  var hr = 'H';\n  /* Tokenize */\n\n  while (i < fmt.length) {\n    switch (c = fmt.charAt(i)) {\n      case 'G':\n        /* General */\n        if (!SSF_isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n        out[out.length] = {\n          t: 'G',\n          v: 'General'\n        };\n        i += 7;\n        break;\n\n      case '\"':\n        /* Literal text */\n        for (o = \"\"; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) {\n          o += String.fromCharCode(cc);\n        }\n\n        out[out.length] = {\n          t: 't',\n          v: o\n        };\n        ++i;\n        break;\n\n      case '\\\\':\n        var w = fmt.charAt(++i),\n            t = w === \"(\" || w === \")\" ? w : 't';\n        out[out.length] = {\n          t: t,\n          v: w\n        };\n        ++i;\n        break;\n\n      case '_':\n        out[out.length] = {\n          t: 't',\n          v: \" \"\n        };\n        i += 2;\n        break;\n\n      case '@':\n        /* Text Placeholder */\n        out[out.length] = {\n          t: 'T',\n          v: v\n        };\n        ++i;\n        break;\n\n      case 'B':\n      case 'b':\n        if (fmt.charAt(i + 1) === \"1\" || fmt.charAt(i + 1) === \"2\") {\n          if (dt == null) {\n            dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === \"2\");\n            if (dt == null) return \"\";\n          }\n\n          out[out.length] = {\n            t: 'X',\n            v: fmt.substr(i, 2)\n          };\n          lst = c;\n          i += 2;\n          break;\n        }\n\n      /* falls through */\n\n      case 'M':\n      case 'D':\n      case 'Y':\n      case 'H':\n      case 'S':\n      case 'E':\n        c = c.toLowerCase();\n\n      /* falls through */\n\n      case 'm':\n      case 'd':\n      case 'y':\n      case 'h':\n      case 's':\n      case 'e':\n      case 'g':\n        if (v < 0) return \"\";\n\n        if (dt == null) {\n          dt = SSF_parse_date_code(v, opts);\n          if (dt == null) return \"\";\n        }\n\n        o = c;\n\n        while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c) {\n          o += c;\n        }\n\n        if (c === 'm' && lst.toLowerCase() === 'h') c = 'M';\n        if (c === 'h') c = hr;\n        out[out.length] = {\n          t: c,\n          v: o\n        };\n        lst = c;\n        break;\n\n      case 'A':\n      case 'a':\n      case '上':\n        var q = {\n          t: c,\n          v: c\n        };\n        if (dt == null) dt = SSF_parse_date_code(v, opts);\n\n        if (fmt.substr(i, 3).toUpperCase() === \"A/P\") {\n          if (dt != null) q.v = dt.H >= 12 ? fmt.charAt(i + 2) : c;\n          q.t = 'T';\n          hr = 'h';\n          i += 3;\n        } else if (fmt.substr(i, 5).toUpperCase() === \"AM/PM\") {\n          if (dt != null) q.v = dt.H >= 12 ? \"PM\" : \"AM\";\n          q.t = 'T';\n          i += 5;\n          hr = 'h';\n        } else if (fmt.substr(i, 5).toUpperCase() === \"上午/下午\") {\n          if (dt != null) q.v = dt.H >= 12 ? \"下午\" : \"上午\";\n          q.t = 'T';\n          i += 5;\n          hr = 'h';\n        } else {\n          q.t = \"t\";\n          ++i;\n        }\n\n        if (dt == null && q.t === 'T') return \"\";\n        out[out.length] = q;\n        lst = c;\n        break;\n\n      case '[':\n        o = c;\n\n        while (fmt.charAt(i++) !== ']' && i < fmt.length) {\n          o += fmt.charAt(i);\n        }\n\n        if (o.slice(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\n        if (o.match(SSF_abstime)) {\n          if (dt == null) {\n            dt = SSF_parse_date_code(v, opts);\n            if (dt == null) return \"\";\n          }\n\n          out[out.length] = {\n            t: 'Z',\n            v: o.toLowerCase()\n          };\n          lst = o.charAt(1);\n        } else if (o.indexOf(\"$\") > -1) {\n          o = (o.match(/\\$([^-\\[\\]]*)/) || [])[1] || \"$\";\n          if (!fmt_is_date(fmt)) out[out.length] = {\n            t: 't',\n            v: o\n          };\n        }\n\n        break;\n\n      /* Numbers */\n\n      case '.':\n        if (dt != null) {\n          o = c;\n\n          while (++i < fmt.length && (c = fmt.charAt(i)) === \"0\") {\n            o += c;\n          }\n\n          out[out.length] = {\n            t: 's',\n            v: o\n          };\n          break;\n        }\n\n      /* falls through */\n\n      case '0':\n      case '#':\n        o = c;\n\n        while (++i < fmt.length && \"0#?.,E+-%\".indexOf(c = fmt.charAt(i)) > -1) {\n          o += c;\n        }\n\n        out[out.length] = {\n          t: 'n',\n          v: o\n        };\n        break;\n\n      case '?':\n        o = c;\n\n        while (fmt.charAt(++i) === c) {\n          o += c;\n        }\n\n        out[out.length] = {\n          t: c,\n          v: o\n        };\n        lst = c;\n        break;\n\n      case '*':\n        ++i;\n        if (fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i;\n        break;\n      // **\n\n      case '(':\n      case ')':\n        out[out.length] = {\n          t: flen === 1 ? 't' : c,\n          v: c\n        };\n        ++i;\n        break;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        o = c;\n\n        while (i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1) {\n          o += fmt.charAt(i);\n        }\n\n        out[out.length] = {\n          t: 'D',\n          v: o\n        };\n        break;\n\n      case ' ':\n        out[out.length] = {\n          t: c,\n          v: c\n        };\n        ++i;\n        break;\n\n      case '$':\n        out[out.length] = {\n          t: 't',\n          v: '$'\n        };\n        ++i;\n        break;\n\n      default:\n        if (\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n        out[out.length] = {\n          t: 't',\n          v: c\n        };\n        ++i;\n        break;\n    }\n  }\n  /* Scan for date/time parts */\n\n\n  var bt = 0,\n      ss0 = 0,\n      ssm;\n\n  for (i = out.length - 1, lst = 't'; i >= 0; --i) {\n    switch (out[i].t) {\n      case 'h':\n      case 'H':\n        out[i].t = hr;\n        lst = 'h';\n        if (bt < 1) bt = 1;\n        break;\n\n      case 's':\n        if (ssm = out[i].v.match(/\\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);\n        if (bt < 3) bt = 3;\n\n      /* falls through */\n\n      case 'd':\n      case 'y':\n      case 'M':\n      case 'e':\n        lst = out[i].t;\n        break;\n\n      case 'm':\n        if (lst === 's') {\n          out[i].t = 'M';\n          if (bt < 2) bt = 2;\n        }\n\n        break;\n\n      case 'X':\n        /*if(out[i].v === \"B2\");*/\n        break;\n\n      case 'Z':\n        if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n        if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n        if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n    }\n  }\n  /* time rounding depends on presence of minute / second / usec fields */\n\n\n  switch (bt) {\n    case 0:\n      break;\n\n    case 1:\n      /*::if(!dt) break;*/\n      if (dt.u >= 0.5) {\n        dt.u = 0;\n        ++dt.S;\n      }\n\n      if (dt.S >= 60) {\n        dt.S = 0;\n        ++dt.M;\n      }\n\n      if (dt.M >= 60) {\n        dt.M = 0;\n        ++dt.H;\n      }\n\n      break;\n\n    case 2:\n      /*::if(!dt) break;*/\n      if (dt.u >= 0.5) {\n        dt.u = 0;\n        ++dt.S;\n      }\n\n      if (dt.S >= 60) {\n        dt.S = 0;\n        ++dt.M;\n      }\n\n      break;\n  }\n  /* replace fields */\n\n\n  var nstr = \"\",\n      jj;\n\n  for (i = 0; i < out.length; ++i) {\n    switch (out[i].t) {\n      case 't':\n      case 'T':\n      case ' ':\n      case 'D':\n        break;\n\n      case 'X':\n        out[i].v = \"\";\n        out[i].t = \";\";\n        break;\n\n      case 'd':\n      case 'm':\n      case 'y':\n      case 'h':\n      case 'H':\n      case 'M':\n      case 's':\n      case 'e':\n      case 'b':\n      case 'Z':\n        /*::if(!dt) throw \"unreachable\"; */\n        out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n        out[i].t = 't';\n        break;\n\n      case 'n':\n      case '?':\n        jj = i + 1;\n\n        while (out[jj] != null && ((c = out[jj].t) === \"?\" || c === \"D\" || (c === \" \" || c === \"t\") && out[jj + 1] != null && (out[jj + 1].t === '?' || out[jj + 1].t === \"t\" && out[jj + 1].v === '/') || out[i].t === '(' && (c === ' ' || c === 'n' || c === ')') || c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj + 1] != null && out[jj + 1].t == '?'))) {\n          out[i].v += out[jj].v;\n          out[jj] = {\n            v: \"\",\n            t: \";\"\n          };\n          ++jj;\n        }\n\n        nstr += out[i].v;\n        i = jj - 1;\n        break;\n\n      case 'G':\n        out[i].t = 't';\n        out[i].v = SSF_general(v, opts);\n        break;\n    }\n  }\n\n  var vv = \"\",\n      myv,\n      ostr;\n\n  if (nstr.length > 0) {\n    if (nstr.charCodeAt(0) == 40)\n      /* '(' */\n      {\n        myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;\n        ostr = write_num('n', nstr, myv);\n      } else {\n      myv = v < 0 && flen > 1 ? -v : v;\n      ostr = write_num('n', nstr, myv);\n\n      if (myv < 0 && out[0] && out[0].t == 't') {\n        ostr = ostr.substr(1);\n        out[0].v = \"-\" + out[0].v;\n      }\n    }\n\n    jj = ostr.length - 1;\n    var decpt = out.length;\n\n    for (i = 0; i < out.length; ++i) {\n      if (out[i] != null && out[i].t != 't' && out[i].v.indexOf(\".\") > -1) {\n        decpt = i;\n        break;\n      }\n    }\n\n    var lasti = out.length;\n\n    if (decpt === out.length && ostr.indexOf(\"E\") === -1) {\n      for (i = out.length - 1; i >= 0; --i) {\n        if (out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n\n        if (jj >= out[i].v.length - 1) {\n          jj -= out[i].v.length;\n          out[i].v = ostr.substr(jj + 1, out[i].v.length);\n        } else if (jj < 0) out[i].v = \"\";else {\n          out[i].v = ostr.substr(0, jj + 1);\n          jj = -1;\n        }\n\n        out[i].t = 't';\n        lasti = i;\n      }\n\n      if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n    } else if (decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n      jj = ostr.indexOf(\".\") - 1;\n\n      for (i = decpt; i >= 0; --i) {\n        if (out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;\n        j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") - 1 : out[i].v.length - 1;\n        vv = out[i].v.substr(j + 1);\n\n        for (; j >= 0; --j) {\n          if (jj >= 0 && (out[i].v.charAt(j) === \"0\" || out[i].v.charAt(j) === \"#\")) vv = ostr.charAt(jj--) + vv;\n        }\n\n        out[i].v = vv;\n        out[i].t = 't';\n        lasti = i;\n      }\n\n      if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n      jj = ostr.indexOf(\".\") + 1;\n\n      for (i = decpt; i < out.length; ++i) {\n        if (out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt) continue;\n        j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") + 1 : 0;\n        vv = out[i].v.substr(0, j);\n\n        for (; j < out[i].v.length; ++j) {\n          if (jj < ostr.length) vv += ostr.charAt(jj++);\n        }\n\n        out[i].v = vv;\n        out[i].t = 't';\n        lasti = i;\n      }\n    }\n  }\n\n  for (i = 0; i < out.length; ++i) {\n    if (out[i] != null && 'n?'.indexOf(out[i].t) > -1) {\n      myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === \"-\" ? -v : v;\n      out[i].v = write_num(out[i].t, out[i].v, myv);\n      out[i].t = 't';\n    }\n  }\n\n  var retval = \"\";\n\n  for (i = 0; i !== out.length; ++i) {\n    if (out[i] != null) retval += out[i].v;\n  }\n\n  return retval;\n}\n\nvar cfregex2 = /\\[(=|>[=]?|<[>=]?)(-?\\d+(?:\\.\\d*)?)\\]/;\n\nfunction chkcond(v, rr) {\n  if (rr == null) return false;\n  var thresh = parseFloat(rr[2]);\n\n  switch (rr[1]) {\n    case \"=\":\n      if (v == thresh) return true;\n      break;\n\n    case \">\":\n      if (v > thresh) return true;\n      break;\n\n    case \"<\":\n      if (v < thresh) return true;\n      break;\n\n    case \"<>\":\n      if (v != thresh) return true;\n      break;\n\n    case \">=\":\n      if (v >= thresh) return true;\n      break;\n\n    case \"<=\":\n      if (v <= thresh) return true;\n      break;\n  }\n\n  return false;\n}\n\nfunction choose_fmt(f\n/*:string*/\n, v\n/*:any*/\n) {\n  var fmt = SSF_split_fmt(f);\n  var l = fmt.length,\n      lat = fmt[l - 1].indexOf(\"@\");\n  if (l < 4 && lat > -1) --l;\n  if (fmt.length > 4) throw new Error(\"cannot find right format for |\" + fmt.join(\"|\") + \"|\");\n  if (typeof v !== \"number\") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : \"@\"];\n\n  switch (fmt.length) {\n    case 1:\n      fmt = lat > -1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"];\n      break;\n\n    case 2:\n      fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"];\n      break;\n\n    case 3:\n      fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"];\n      break;\n\n    case 4:\n      break;\n  }\n\n  var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n  if (fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\n  if (fmt[0].match(/\\[[=<>]/) != null || fmt[1].match(/\\[[=<>]/) != null) {\n    var m1 = fmt[0].match(cfregex2);\n    var m2 = fmt[1].match(cfregex2);\n    return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n  }\n\n  return [l, ff];\n}\n\nfunction SSF_format(fmt\n/*:string|number*/\n, v\n/*:any*/\n, o\n/*:?any*/\n) {\n  if (o == null) o = {};\n  var sfmt = \"\";\n\n  switch (typeof fmt) {\n    case \"string\":\n      if (fmt == \"m/d/yy\" && o.dateNF) sfmt = o.dateNF;else sfmt = fmt;\n      break;\n\n    case \"number\":\n      if (fmt == 14 && o.dateNF) sfmt = o.dateNF;else sfmt = (o.table != null ? o.table\n      /*:any*/\n      : table_fmt)[fmt];\n      if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];\n      if (sfmt == null) sfmt = SSF_default_str[fmt] || \"General\";\n      break;\n  }\n\n  if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);\n  if (v instanceof Date) v = datenum_local(v, o.date1904);\n  var f = choose_fmt(sfmt, v);\n  if (SSF_isgeneral(f[1])) return SSF_general(v, o);\n  if (v === true) v = \"TRUE\";else if (v === false) v = \"FALSE\";else if (v === \"\" || v == null) return \"\";\n  return eval_fmt(f[1], v, o, f[0]);\n}\n\nfunction SSF_load(fmt\n/*:string*/\n, idx\n/*:?number*/\n)\n/*:number*/\n{\n  if (typeof idx != 'number') {\n    idx = +idx || -1;\n    /*::if(typeof idx != 'number') return 0x188; */\n\n    for (var i = 0; i < 0x0188; ++i) {\n      /*::if(typeof idx != 'number') return 0x188; */\n      if (table_fmt[i] == undefined) {\n        if (idx < 0) idx = i;\n        continue;\n      }\n\n      if (table_fmt[i] == fmt) {\n        idx = i;\n        break;\n      }\n    }\n    /*::if(typeof idx != 'number') return 0x188; */\n\n\n    if (idx < 0) idx = 0x187;\n  }\n  /*::if(typeof idx != 'number') return 0x188; */\n\n\n  table_fmt[idx] = fmt;\n  return idx;\n}\n\nfunction SSF_load_table(tbl\n/*:SSFTable*/\n)\n/*:void*/\n{\n  for (var i = 0; i != 0x0188; ++i) {\n    if (tbl[i] !== undefined) SSF_load(tbl[i], i);\n  }\n}\n\nfunction make_ssf() {\n  table_fmt = SSF_init_table();\n}\n\nvar SSF = {\n  format: SSF_format,\n  load: SSF_load,\n  _table: table_fmt,\n  load_table: SSF_load_table,\n  parse_date_code: SSF_parse_date_code,\n  is_date: fmt_is_date,\n  get_table: function get_table() {\n    return SSF._table = table_fmt;\n  }\n};\nvar SSFImplicit\n/*{[number]:string}*/\n= {\n  \"5\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n  \"6\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n  \"7\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n  \"8\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n  \"23\": 'General',\n  \"24\": 'General',\n  \"25\": 'General',\n  \"26\": 'General',\n  \"27\": 'm/d/yy',\n  \"28\": 'm/d/yy',\n  \"29\": 'm/d/yy',\n  \"30\": 'm/d/yy',\n  \"31\": 'm/d/yy',\n  \"32\": 'h:mm:ss',\n  \"33\": 'h:mm:ss',\n  \"34\": 'h:mm:ss',\n  \"35\": 'h:mm:ss',\n  \"36\": 'm/d/yy',\n  \"41\": '_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)',\n  \"42\": '_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)',\n  \"43\": '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* \"-\"??_);_(@_)',\n  \"44\": '_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)',\n  \"50\": 'm/d/yy',\n  \"51\": 'm/d/yy',\n  \"52\": 'm/d/yy',\n  \"53\": 'm/d/yy',\n  \"54\": 'm/d/yy',\n  \"55\": 'm/d/yy',\n  \"56\": 'm/d/yy',\n  \"57\": 'm/d/yy',\n  \"58\": 'm/d/yy',\n  \"59\": '0',\n  \"60\": '0.00',\n  \"61\": '#,##0',\n  \"62\": '#,##0.00',\n  \"63\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n  \"64\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n  \"65\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n  \"66\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n  \"67\": '0%',\n  \"68\": '0.00%',\n  \"69\": '# ?/?',\n  \"70\": '# ??/??',\n  \"71\": 'm/d/yy',\n  \"72\": 'm/d/yy',\n  \"73\": 'd-mmm-yy',\n  \"74\": 'd-mmm',\n  \"75\": 'mmm-yy',\n  \"76\": 'h:mm',\n  \"77\": 'h:mm:ss',\n  \"78\": 'm/d/yy h:mm',\n  \"79\": 'mm:ss',\n  \"80\": '[h]:mm:ss',\n  \"81\": 'mmss.0'\n}\n/*:any*/\n;\n/* dateNF parse TODO: move to SSF */\n\nvar dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;\n\nfunction dateNF_regex(dateNF\n/*:string|number*/\n)\n/*:RegExp*/\n{\n  var fmt = typeof dateNF == \"number\" ? table_fmt[dateNF] : dateNF;\n  fmt = fmt.replace(dateNFregex, \"(\\\\d+)\");\n  return new RegExp(\"^\" + fmt + \"$\");\n}\n\nfunction dateNF_fix(str\n/*:string*/\n, dateNF\n/*:string*/\n, match\n/*:Array<string>*/\n)\n/*:string*/\n{\n  var Y = -1,\n      m = -1,\n      d = -1,\n      H = -1,\n      M = -1,\n      S = -1;\n  (dateNF.match(dateNFregex) || []).forEach(function (n, i) {\n    var v = parseInt(match[i + 1], 10);\n\n    switch (n.toLowerCase().charAt(0)) {\n      case 'y':\n        Y = v;\n        break;\n\n      case 'd':\n        d = v;\n        break;\n\n      case 'h':\n        H = v;\n        break;\n\n      case 's':\n        S = v;\n        break;\n\n      case 'm':\n        if (H >= 0) M = v;else m = v;\n        break;\n    }\n  });\n\n  if (S >= 0 && M == -1 && m >= 0) {\n    M = m;\n    m = -1;\n  }\n\n  var datestr = (\"\" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + \"-\" + (\"00\" + (m >= 1 ? m : 1)).slice(-2) + \"-\" + (\"00\" + (d >= 1 ? d : 1)).slice(-2);\n  if (datestr.length == 7) datestr = \"0\" + datestr;\n  if (datestr.length == 8) datestr = \"20\" + datestr;\n  var timestr = (\"00\" + (H >= 0 ? H : 0)).slice(-2) + \":\" + (\"00\" + (M >= 0 ? M : 0)).slice(-2) + \":\" + (\"00\" + (S >= 0 ? S : 0)).slice(-2);\n  if (H == -1 && M == -1 && S == -1) return datestr;\n  if (Y == -1 && m == -1 && d == -1) return timestr;\n  return datestr + \"T\" + timestr;\n}\n/* table of bad formats written by third-party tools */\n\n\nvar bad_formats = {\n  \"d.m\": \"d\\\\.m\" // Issue #2571 Google Sheets writes invalid format 'd.m', correct format is 'd\".\"m' or 'd\\\\.m'\n\n};\n\nfunction SSF__load(fmt, idx) {\n  return SSF_load(bad_formats[fmt] || fmt, idx);\n}\n/*::\ndeclare var ReadShift:any;\ndeclare var CheckField:any;\ndeclare var prep_blob:any;\ndeclare var __readUInt32LE:any;\ndeclare var __readInt32LE:any;\ndeclare var __toBuffer:any;\ndeclare var __utf16le:any;\ndeclare var bconcat:any;\ndeclare var s2a:any;\ndeclare var chr0:any;\ndeclare var chr1:any;\ndeclare var has_buf:boolean;\ndeclare var new_buf:any;\ndeclare var new_raw_buf:any;\ndeclare var new_unsafe_buf:any;\ndeclare var Buffer_from:any;\n*/\n\n/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*jshint eqnull:true */\n\n/*exported CFB */\n\n/*global Uint8Array:false, Uint16Array:false */\n\n/*::\ntype SectorEntry = {\n\tname?:string;\n\tnodes?:Array<number>;\n\tdata:RawBytes;\n};\ntype SectorList = {\n\t[k:string|number]:SectorEntry;\n\tname:?string;\n\tfat_addrs:Array<number>;\n\tssz:number;\n}\ntype CFBFiles = {[n:string]:CFBEntry};\n*/\n\n/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*exported CRC32 */\n\n\nvar CRC32 = /*#__PURE__*/function () {\n  var CRC32 = {};\n  CRC32.version = '1.2.0';\n  /* see perf/crc32table.js */\n\n  /*global Int32Array */\n\n  function signed_crc_table()\n  /*:any*/\n  {\n    var c = 0,\n        table\n    /*:Array<number>*/\n    = new Array(256);\n\n    for (var n = 0; n != 256; ++n) {\n      c = n;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      table[n] = c;\n    }\n\n    return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n  }\n\n  var T0 = signed_crc_table();\n\n  function slice_by_16_tables(T) {\n    var c = 0,\n        v = 0,\n        n = 0,\n        table\n    /*:Array<number>*/\n    = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096);\n\n    for (n = 0; n != 256; ++n) {\n      table[n] = T[n];\n    }\n\n    for (n = 0; n != 256; ++n) {\n      v = T[n];\n\n      for (c = 256 + n; c < 4096; c += 256) {\n        v = table[c] = v >>> 8 ^ T[v & 0xFF];\n      }\n    }\n\n    var out = [];\n\n    for (n = 1; n != 16; ++n) {\n      out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n    }\n\n    return out;\n  }\n\n  var TT = slice_by_16_tables(T0);\n  var T1 = TT[0],\n      T2 = TT[1],\n      T3 = TT[2],\n      T4 = TT[3],\n      T5 = TT[4];\n  var T6 = TT[5],\n      T7 = TT[6],\n      T8 = TT[7],\n      T9 = TT[8],\n      Ta = TT[9];\n  var Tb = TT[10],\n      Tc = TT[11],\n      Td = TT[12],\n      Te = TT[13],\n      Tf = TT[14];\n\n  function crc32_bstr(bstr\n  /*:string*/\n  , seed\n  /*:number*/\n  )\n  /*:number*/\n  {\n    var C = seed\n    /*:: ? 0 : 0 */\n    ^ -1;\n\n    for (var i = 0, L = bstr.length; i < L;) {\n      C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];\n    }\n\n    return ~C;\n  }\n\n  function crc32_buf(B\n  /*:Uint8Array|Array<number>*/\n  , seed\n  /*:number*/\n  )\n  /*:number*/\n  {\n    var C = seed\n    /*:: ? 0 : 0 */\n    ^ -1,\n        L = B.length - 15,\n        i = 0;\n\n    for (; i < L;) {\n      C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n    }\n\n    L += 15;\n\n    while (i < L) {\n      C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];\n    }\n\n    return ~C;\n  }\n\n  function crc32_str(str\n  /*:string*/\n  , seed\n  /*:number*/\n  )\n  /*:number*/\n  {\n    var C = seed ^ -1;\n\n    for (var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n      c = str.charCodeAt(i++);\n\n      if (c < 0x80) {\n        C = C >>> 8 ^ T0[(C ^ c) & 0xFF];\n      } else if (c < 0x800) {\n        C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n      } else if (c >= 0xD800 && c < 0xE000) {\n        c = (c & 1023) + 64;\n        d = str.charCodeAt(i++) & 1023;\n        C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];\n      } else {\n        C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n      }\n    }\n\n    return ~C;\n  }\n\n  CRC32.table = T0;\n  CRC32.bstr = crc32_bstr;\n  CRC32.buf = crc32_buf;\n  CRC32.str = crc32_str;\n  return CRC32;\n}();\n/* [MS-CFB] v20171201 */\n\n\nvar CFB = /*#__PURE__*/function _CFB() {\n  var exports\n  /*:CFBModule*/\n  =\n  /*::(*/\n  {}\n  /*:: :any)*/\n  ;\n  exports.version = '1.2.2';\n  /* [MS-CFB] 2.6.4 */\n\n  function namecmp(l\n  /*:string*/\n  , r\n  /*:string*/\n  )\n  /*:number*/\n  {\n    var L = l.split(\"/\"),\n        R = r.split(\"/\");\n\n    for (var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n      if (c = L[i].length - R[i].length) return c;\n      if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n    }\n\n    return L.length - R.length;\n  }\n\n  function dirname(p\n  /*:string*/\n  )\n  /*:string*/\n  {\n    if (p.charAt(p.length - 1) == \"/\") return p.slice(0, -1).indexOf(\"/\") === -1 ? p : dirname(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(0, c + 1);\n  }\n\n  function filename(p\n  /*:string*/\n  )\n  /*:string*/\n  {\n    if (p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(c + 1);\n  }\n  /* -------------------------------------------------------------------------- */\n\n  /* DOS Date format:\n     high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n     add 1980 to stored year\n     stored second should be doubled\n  */\n\n  /* write JS date to buf as a DOS date */\n\n\n  function write_dos_date(buf\n  /*:CFBlob*/\n  , date\n  /*:Date|string*/\n  ) {\n    if (typeof date === \"string\") date = new Date(date);\n    var hms\n    /*:number*/\n    = date.getHours();\n    hms = hms << 6 | date.getMinutes();\n    hms = hms << 5 | date.getSeconds() >>> 1;\n    buf.write_shift(2, hms);\n    var ymd\n    /*:number*/\n    = date.getFullYear() - 1980;\n    ymd = ymd << 4 | date.getMonth() + 1;\n    ymd = ymd << 5 | date.getDate();\n    buf.write_shift(2, ymd);\n  }\n  /* read four bytes from buf and interpret as a DOS date */\n\n\n  function parse_dos_date(buf\n  /*:CFBlob*/\n  )\n  /*:Date*/\n  {\n    var hms = buf.read_shift(2) & 0xFFFF;\n    var ymd = buf.read_shift(2) & 0xFFFF;\n    var val = new Date();\n    var d = ymd & 0x1F;\n    ymd >>>= 5;\n    var m = ymd & 0x0F;\n    ymd >>>= 4;\n    val.setMilliseconds(0);\n    val.setFullYear(ymd + 1980);\n    val.setMonth(m - 1);\n    val.setDate(d);\n    var S = hms & 0x1F;\n    hms >>>= 5;\n    var M = hms & 0x3F;\n    hms >>>= 6;\n    val.setHours(hms);\n    val.setMinutes(M);\n    val.setSeconds(S << 1);\n    return val;\n  }\n\n  function parse_extra_field(blob\n  /*:CFBlob*/\n  )\n  /*:any*/\n  {\n    prep_blob(blob, 0);\n    var o =\n    /*::(*/\n    {}\n    /*:: :any)*/\n    ;\n    var flags = 0;\n\n    while (blob.l <= blob.length - 4) {\n      var type = blob.read_shift(2);\n      var sz = blob.read_shift(2),\n          tgt = blob.l + sz;\n      var p = {};\n\n      switch (type) {\n        /* UNIX-style Timestamps */\n        case 0x5455:\n          {\n            flags = blob.read_shift(1);\n            if (flags & 1) p.mtime = blob.read_shift(4);\n            /* for some reason, CD flag corresponds to LFH */\n\n            if (sz > 5) {\n              if (flags & 2) p.atime = blob.read_shift(4);\n              if (flags & 4) p.ctime = blob.read_shift(4);\n            }\n\n            if (p.mtime) p.mt = new Date(p.mtime * 1000);\n          }\n          break;\n\n        /* ZIP64 Extended Information Field */\n\n        case 0x0001:\n          {\n            var sz1 = blob.read_shift(4),\n                sz2 = blob.read_shift(4);\n            p.usz = sz2 * Math.pow(2, 32) + sz1;\n            sz1 = blob.read_shift(4);\n            sz2 = blob.read_shift(4);\n            p.csz = sz2 * Math.pow(2, 32) + sz1; // NOTE: volume fields are skipped\n          }\n          break;\n      }\n\n      blob.l = tgt;\n      o[type] = p;\n    }\n\n    return o;\n  }\n\n  var fs\n  /*:: = require('fs'); */\n  ;\n\n  function get_fs() {\n    return fs || (fs = _fs);\n  }\n\n  function parse(file\n  /*:RawBytes*/\n  , options\n  /*:CFBReadOpts*/\n  )\n  /*:CFBContainer*/\n  {\n    if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\n    if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);\n    if (file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\n    var mver = 3;\n    var ssz = 512;\n    var nmfs = 0; // number of mini FAT sectors\n\n    var difat_sec_cnt = 0;\n    var dir_start = 0;\n    var minifat_start = 0;\n    var difat_start = 0;\n    var fat_addrs\n    /*:Array<number>*/\n    = []; // locations of FAT sectors\n\n    /* [MS-CFB] 2.2 Compound File Header */\n\n    var blob\n    /*:CFBlob*/\n    =\n    /*::(*/\n    file.slice(0, 512)\n    /*:: :any)*/\n    ;\n    prep_blob(blob, 0);\n    /* major version */\n\n    var mv = check_get_mver(blob);\n    mver = mv[0];\n\n    switch (mver) {\n      case 3:\n        ssz = 512;\n        break;\n\n      case 4:\n        ssz = 4096;\n        break;\n\n      case 0:\n        if (mv[1] == 0) return parse_zip(file, options);\n\n      /* falls through */\n\n      default:\n        throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n    }\n    /* reprocess header */\n\n\n    if (ssz !== 512) {\n      blob =\n      /*::(*/\n      file.slice(0, ssz)\n      /*:: :any)*/\n      ;\n      prep_blob(blob, 28\n      /* blob.l */\n      );\n    }\n    /* Save header for final object */\n\n\n    var header\n    /*:RawBytes*/\n    = file.slice(0, ssz);\n    check_shifts(blob, mver); // Number of Directory Sectors\n\n    var dir_cnt\n    /*:number*/\n    = blob.read_shift(4, 'i');\n    if (mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt); // Number of FAT Sectors\n\n    blob.l += 4; // First Directory Sector Location\n\n    dir_start = blob.read_shift(4, 'i'); // Transaction Signature\n\n    blob.l += 4; // Mini Stream Cutoff Size\n\n    blob.chk('00100000', 'Mini Stream Cutoff Size: '); // First Mini FAT Sector Location\n\n    minifat_start = blob.read_shift(4, 'i'); // Number of Mini FAT Sectors\n\n    nmfs = blob.read_shift(4, 'i'); // First DIFAT sector location\n\n    difat_start = blob.read_shift(4, 'i'); // Number of DIFAT Sectors\n\n    difat_sec_cnt = blob.read_shift(4, 'i'); // Grab FAT Sector Locations\n\n    for (var q = -1, j = 0; j < 109; ++j) {\n      /* 109 = (512 - blob.l)>>>2; */\n      q = blob.read_shift(4, 'i');\n      if (q < 0) break;\n      fat_addrs[j] = q;\n    }\n    /** Break the file up into sectors */\n\n\n    var sectors\n    /*:Array<RawBytes>*/\n    = sectorify(file, ssz);\n    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n    /** Chains */\n\n    var sector_list\n    /*:SectorList*/\n    = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n    sector_list[dir_start].name = \"!Directory\";\n    if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n    sector_list[fat_addrs[0]].name = \"!FAT\";\n    sector_list.fat_addrs = fat_addrs;\n    sector_list.ssz = ssz;\n    /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n    var files\n    /*:CFBFiles*/\n    = {},\n        Paths\n    /*:Array<string>*/\n    = [],\n        FileIndex\n    /*:CFBFileIndex*/\n    = [],\n        FullPaths\n    /*:Array<string>*/\n    = [];\n    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n    build_full_paths(FileIndex, FullPaths, Paths);\n    Paths.shift();\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    }; // $FlowIgnore\n\n    if (options && options.raw) o.raw = {\n      header: header,\n      sectors: sectors\n    };\n    return o;\n  } // parse\n\n  /* [MS-CFB] 2.2 Compound File Header -- read up to major version */\n\n\n  function check_get_mver(blob\n  /*:CFBlob*/\n  )\n  /*:[number, number]*/\n  {\n    if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0]; // header signature 8\n\n    blob.chk(HEADER_SIGNATURE, 'Header Signature: '); // clsid 16\n    //blob.chk(HEADER_CLSID, 'CLSID: ');\n\n    blob.l += 16; // minor version 2\n\n    var mver\n    /*:number*/\n    = blob.read_shift(2, 'u');\n    return [blob.read_shift(2, 'u'), mver];\n  }\n\n  function check_shifts(blob\n  /*:CFBlob*/\n  , mver\n  /*:number*/\n  )\n  /*:void*/\n  {\n    var shift = 0x09; // Byte Order\n    //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n\n    blob.l += 2; // Sector Shift\n\n    switch (shift = blob.read_shift(2)) {\n      case 0x09:\n        if (mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift);\n        break;\n\n      case 0x0c:\n        if (mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift);\n        break;\n\n      default:\n        throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n    } // Mini Sector Shift\n\n\n    blob.chk('0600', 'Mini Sector Shift: '); // Reserved\n\n    blob.chk('000000000000', 'Reserved: ');\n  }\n  /** Break the file up into sectors */\n\n\n  function sectorify(file\n  /*:RawBytes*/\n  , ssz\n  /*:number*/\n  )\n  /*:Array<RawBytes>*/\n  {\n    var nsectors = Math.ceil(file.length / ssz) - 1;\n    var sectors\n    /*:Array<RawBytes>*/\n    = [];\n\n    for (var i = 1; i < nsectors; ++i) {\n      sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);\n    }\n\n    sectors[nsectors - 1] = file.slice(nsectors * ssz);\n    return sectors;\n  }\n  /* [MS-CFB] 2.6.4 Red-Black Tree */\n\n\n  function build_full_paths(FI\n  /*:CFBFileIndex*/\n  , FP\n  /*:Array<string>*/\n  , Paths\n  /*:Array<string>*/\n  )\n  /*:void*/\n  {\n    var i = 0,\n        L = 0,\n        R = 0,\n        C = 0,\n        j = 0,\n        pl = Paths.length;\n    var dad\n    /*:Array<number>*/\n    = [],\n        q\n    /*:Array<number>*/\n    = [];\n\n    for (; i < pl; ++i) {\n      dad[i] = q[i] = i;\n      FP[i] = Paths[i];\n    }\n\n    for (; j < q.length; ++j) {\n      i = q[j];\n      L = FI[i].L;\n      R = FI[i].R;\n      C = FI[i].C;\n\n      if (dad[i] === i) {\n        if (L !== -1\n        /*NOSTREAM*/\n        && dad[L] !== L) dad[i] = dad[L];\n        if (R !== -1 && dad[R] !== R) dad[i] = dad[R];\n      }\n\n      if (C !== -1\n      /*NOSTREAM*/\n      ) dad[C] = i;\n\n      if (L !== -1 && i != dad[i]) {\n        dad[L] = dad[i];\n        if (q.lastIndexOf(L) < j) q.push(L);\n      }\n\n      if (R !== -1 && i != dad[i]) {\n        dad[R] = dad[i];\n        if (q.lastIndexOf(R) < j) q.push(R);\n      }\n    }\n\n    for (i = 1; i < pl; ++i) {\n      if (dad[i] === i) {\n        if (R !== -1\n        /*NOSTREAM*/\n        && dad[R] !== R) dad[i] = dad[R];else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];\n      }\n    }\n\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type === 0\n      /* unknown */\n      ) continue;\n      j = i;\n      if (j != dad[j]) do {\n        j = dad[j];\n        FP[i] = FP[j] + \"/\" + FP[i];\n      } while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n      dad[i] = -1;\n    }\n\n    FP[0] += \"/\";\n\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type !== 2\n      /* stream */\n      ) FP[i] += \"/\";\n    }\n  }\n\n  function get_mfat_entry(entry\n  /*:CFBEntry*/\n  , payload\n  /*:RawBytes*/\n  , mini\n  /*:?RawBytes*/\n  )\n  /*:CFBlob*/\n  {\n    var start = entry.start,\n        size = entry.size; //return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);\n\n    var o = [];\n    var idx = start;\n\n    while (mini && size > 0 && idx >= 0) {\n      o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n      size -= MSSZ;\n      idx = __readInt32LE(mini, idx * 4);\n    }\n\n    if (o.length === 0) return new_buf(0)\n    /*:any*/\n    ;\n    return bconcat(o).slice(0, entry.size)\n    /*:any*/\n    ;\n  }\n  /** Chase down the rest of the DIFAT chain to build a comprehensive list\n      DIFAT chains by storing the next sector number as the last 32 bits */\n\n\n  function sleuth_fat(idx\n  /*:number*/\n  , cnt\n  /*:number*/\n  , sectors\n  /*:Array<RawBytes>*/\n  , ssz\n  /*:number*/\n  , fat_addrs)\n  /*:void*/\n  {\n    var q\n    /*:number*/\n    = ENDOFCHAIN;\n\n    if (idx === ENDOFCHAIN) {\n      if (cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n    } else if (idx !== -1\n    /*FREESECT*/\n    ) {\n      var sector = sectors[idx],\n          m = (ssz >>> 2) - 1;\n      if (!sector) return;\n\n      for (var i = 0; i < m; ++i) {\n        if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;\n        fat_addrs.push(q);\n      }\n\n      if (cnt >= 1) sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);\n    }\n  }\n  /** Follow the linked list of sectors for a given starting point */\n\n\n  function get_sector_list(sectors\n  /*:Array<RawBytes>*/\n  , start\n  /*:number*/\n  , fat_addrs\n  /*:Array<number>*/\n  , ssz\n  /*:number*/\n  , chkd\n  /*:?Array<boolean>*/\n  )\n  /*:SectorEntry*/\n  {\n    var buf\n    /*:Array<number>*/\n    = [],\n        buf_chain\n    /*:Array<any>*/\n    = [];\n    if (!chkd) chkd = [];\n    var modulus = ssz - 1,\n        j = 0,\n        jj = 0;\n\n    for (j = start; j >= 0;) {\n      chkd[j] = true;\n      buf[buf.length] = j;\n      buf_chain.push(sectors[j]);\n      var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n      jj = j * 4 & modulus;\n      if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n      if (!sectors[addr]) break;\n      j = __readInt32LE(sectors[addr], jj);\n    }\n\n    return {\n      nodes: buf,\n      data: __toBuffer([buf_chain])\n    };\n  }\n  /** Chase down the sector linked lists */\n\n\n  function make_sector_list(sectors\n  /*:Array<RawBytes>*/\n  , dir_start\n  /*:number*/\n  , fat_addrs\n  /*:Array<number>*/\n  , ssz\n  /*:number*/\n  )\n  /*:SectorList*/\n  {\n    var sl = sectors.length,\n        sector_list\n    /*:SectorList*/\n    = []\n    /*:any*/\n    ;\n    var chkd\n    /*:Array<boolean>*/\n    = [],\n        buf\n    /*:Array<number>*/\n    = [],\n        buf_chain\n    /*:Array<RawBytes>*/\n    = [];\n    var modulus = ssz - 1,\n        i = 0,\n        j = 0,\n        k = 0,\n        jj = 0;\n\n    for (i = 0; i < sl; ++i) {\n      buf = []\n      /*:Array<number>*/\n      ;\n      k = i + dir_start;\n      if (k >= sl) k -= sl;\n      if (chkd[k]) continue;\n      buf_chain = [];\n      var seen = [];\n\n      for (j = k; j >= 0;) {\n        seen[j] = true;\n        chkd[j] = true;\n        buf[buf.length] = j;\n        buf_chain.push(sectors[j]);\n        var addr\n        /*:number*/\n        = fat_addrs[Math.floor(j * 4 / ssz)];\n        jj = j * 4 & modulus;\n        if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n        if (!sectors[addr]) break;\n        j = __readInt32LE(sectors[addr], jj);\n        if (seen[j]) break;\n      }\n\n      sector_list[k] = {\n        nodes: buf,\n        data: __toBuffer([buf_chain])\n      }\n      /*:SectorEntry*/\n      ;\n    }\n\n    return sector_list;\n  }\n  /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n\n  function read_directory(dir_start\n  /*:number*/\n  , sector_list\n  /*:SectorList*/\n  , sectors\n  /*:Array<RawBytes>*/\n  , Paths\n  /*:Array<string>*/\n  , nmfs, files, FileIndex, mini) {\n    var minifat_store = 0,\n        pl = Paths.length ? 2 : 0;\n    var sector = sector_list[dir_start].data;\n    var i = 0,\n        namelen = 0,\n        name;\n\n    for (; i < sector.length; i += 128) {\n      var blob\n      /*:CFBlob*/\n      =\n      /*::(*/\n      sector.slice(i, i + 128)\n      /*:: :any)*/\n      ;\n      prep_blob(blob, 64);\n      namelen = blob.read_shift(2);\n      name = __utf16le(blob, 0, namelen - pl);\n      Paths.push(name);\n      var o\n      /*:CFBEntry*/\n      = {\n        name: name,\n        type: blob.read_shift(1),\n        color: blob.read_shift(1),\n        L: blob.read_shift(4, 'i'),\n        R: blob.read_shift(4, 'i'),\n        C: blob.read_shift(4, 'i'),\n        clsid: blob.read_shift(16),\n        state: blob.read_shift(4, 'i'),\n        start: 0,\n        size: 0\n      };\n      var ctime\n      /*:number*/\n      = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);\n      var mtime\n      /*:number*/\n      = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);\n      o.start = blob.read_shift(4, 'i');\n      o.size = blob.read_shift(4, 'i');\n\n      if (o.size < 0 && o.start < 0) {\n        o.size = o.type = 0;\n        o.start = ENDOFCHAIN;\n        o.name = \"\";\n      }\n\n      if (o.type === 5) {\n        /* root */\n        minifat_store = o.start;\n        if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n        /*minifat_size = o.size;*/\n      } else if (o.size >= 4096\n      /* MSCSZ */\n      ) {\n        o.storage = 'fat';\n        if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n        sector_list[o.start].name = o.name;\n        o.content = sector_list[o.start].data.slice(0, o.size)\n        /*:any*/\n        ;\n      } else {\n        o.storage = 'minifat';\n        if (o.size < 0) o.size = 0;else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n          o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);\n        }\n      }\n\n      if (o.content) prep_blob(o.content, 0);\n      files[name] = o;\n      FileIndex.push(o);\n    }\n  }\n\n  function read_date(blob\n  /*:RawBytes|CFBlob*/\n  , offset\n  /*:number*/\n  )\n  /*:Date*/\n  {\n    return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);\n  }\n\n  function read_file(filename\n  /*:string*/\n  , options\n  /*:CFBReadOpts*/\n  ) {\n    get_fs();\n    return parse(fs.readFileSync(filename), options);\n  }\n\n  function read(blob\n  /*:RawBytes|string*/\n  , options\n  /*:CFBReadOpts*/\n  ) {\n    var type = options && options.type;\n\n    if (!type) {\n      if (has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n    }\n\n    switch (type || \"base64\") {\n      case \"file\":\n        /*:: if(typeof blob !== 'string') throw \"Must pass a filename when type='file'\"; */\n        return read_file(blob, options);\n\n      case \"base64\":\n        /*:: if(typeof blob !== 'string') throw \"Must pass a base64-encoded binary string when type='file'\"; */\n        return parse(s2a(Base64_decode(blob)), options);\n\n      case \"binary\":\n        /*:: if(typeof blob !== 'string') throw \"Must pass a binary string when type='file'\"; */\n        return parse(s2a(blob), options);\n    }\n\n    return parse(\n    /*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */\n    blob, options);\n  }\n\n  function init_cfb(cfb\n  /*:CFBContainer*/\n  , opts\n  /*:?any*/\n  )\n  /*:void*/\n  {\n    var o = opts || {},\n        root = o.root || \"Root Entry\";\n    if (!cfb.FullPaths) cfb.FullPaths = [];\n    if (!cfb.FileIndex) cfb.FileIndex = [];\n    if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n\n    if (cfb.FullPaths.length === 0) {\n      cfb.FullPaths[0] = root + \"/\";\n      cfb.FileIndex[0] = {\n        name: root,\n        type: 5\n      }\n      /*:any*/\n      ;\n    }\n\n    if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n    seed_cfb(cfb);\n  }\n\n  function seed_cfb(cfb\n  /*:CFBContainer*/\n  )\n  /*:void*/\n  {\n    var nm = \"\\x01Sh33tJ5\";\n    if (CFB.find(cfb, \"/\" + nm)) return;\n    var p = new_buf(4);\n    p[0] = 55;\n    p[1] = p[3] = 50;\n    p[2] = 54;\n    cfb.FileIndex.push({\n      name: nm,\n      type: 2,\n      content: p,\n      size: 4,\n      L: 69,\n      R: 69,\n      C: 69\n    }\n    /*:any*/\n    );\n    cfb.FullPaths.push(cfb.FullPaths[0] + nm);\n    rebuild_cfb(cfb);\n  }\n\n  function rebuild_cfb(cfb\n  /*:CFBContainer*/\n  , f\n  /*:?boolean*/\n  )\n  /*:void*/\n  {\n    init_cfb(cfb);\n    var gc = false,\n        s = false;\n\n    for (var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n      var _file = cfb.FileIndex[i];\n\n      switch (_file.type) {\n        case 0:\n          if (s) gc = true;else {\n            cfb.FileIndex.pop();\n            cfb.FullPaths.pop();\n          }\n          break;\n\n        case 1:\n        case 2:\n        case 5:\n          s = true;\n          if (isNaN(_file.R * _file.L * _file.C)) gc = true;\n          if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n          break;\n\n        default:\n          gc = true;\n          break;\n      }\n    }\n\n    if (!gc && !f) return;\n    var now = new Date(1987, 1, 19),\n        j = 0; // Track which names exist\n\n    var fullPaths = Object.create ? Object.create(null) : {};\n    var data\n    /*:Array<[string, CFBEntry]>*/\n    = [];\n\n    for (i = 0; i < cfb.FullPaths.length; ++i) {\n      fullPaths[cfb.FullPaths[i]] = true;\n      if (cfb.FileIndex[i].type === 0) continue;\n      data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n    }\n\n    for (i = 0; i < data.length; ++i) {\n      var dad = dirname(data[i][0]);\n      s = fullPaths[dad];\n\n      while (!s) {\n        while (dirname(dad) && !fullPaths[dirname(dad)]) {\n          dad = dirname(dad);\n        }\n\n        data.push([dad, {\n          name: filename(dad).replace(\"/\", \"\"),\n          type: 1,\n          clsid: HEADER_CLSID,\n          ct: now,\n          mt: now,\n          content: null\n        }\n        /*:any*/\n        ]); // Add name to set\n\n        fullPaths[dad] = true;\n        dad = dirname(data[i][0]);\n        s = fullPaths[dad];\n      }\n    }\n\n    data.sort(function (x, y) {\n      return namecmp(x[0], y[0]);\n    });\n    cfb.FullPaths = [];\n    cfb.FileIndex = [];\n\n    for (i = 0; i < data.length; ++i) {\n      cfb.FullPaths[i] = data[i][0];\n      cfb.FileIndex[i] = data[i][1];\n    }\n\n    for (i = 0; i < data.length; ++i) {\n      var elt = cfb.FileIndex[i];\n      var nm = cfb.FullPaths[i];\n      elt.name = filename(nm).replace(\"/\", \"\");\n      elt.L = elt.R = elt.C = -(elt.color = 1);\n      elt.size = elt.content ? elt.content.length : 0;\n      elt.start = 0;\n      elt.clsid = elt.clsid || HEADER_CLSID;\n\n      if (i === 0) {\n        elt.C = data.length > 1 ? 1 : -1;\n        elt.size = 0;\n        elt.type = 5;\n      } else if (nm.slice(-1) == \"/\") {\n        for (j = i + 1; j < data.length; ++j) {\n          if (dirname(cfb.FullPaths[j]) == nm) break;\n        }\n\n        elt.C = j >= data.length ? -1 : j;\n\n        for (j = i + 1; j < data.length; ++j) {\n          if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;\n        }\n\n        elt.R = j >= data.length ? -1 : j;\n        elt.type = 1;\n      } else {\n        if (dirname(cfb.FullPaths[i + 1] || \"\") == dirname(nm)) elt.R = i + 1;\n        elt.type = 2;\n      }\n    }\n  }\n\n  function _write(cfb\n  /*:CFBContainer*/\n  , options\n  /*:CFBWriteOpts*/\n  )\n  /*:RawBytes|string*/\n  {\n    var _opts = options || {};\n    /* MAD is order-sensitive, skip rebuild and sort */\n\n\n    if (_opts.fileType == 'mad') return write_mad(cfb, _opts);\n    rebuild_cfb(cfb);\n\n    switch (_opts.fileType) {\n      case 'zip':\n        return write_zip(cfb, _opts);\n      //case 'mad': return write_mad(cfb, _opts);\n    }\n\n    var L = function (cfb\n    /*:CFBContainer*/\n    )\n    /*:Array<number>*/\n    {\n      var mini_size = 0,\n          fat_size = 0;\n\n      for (var i = 0; i < cfb.FileIndex.length; ++i) {\n        var file = cfb.FileIndex[i];\n        if (!file.content) continue;\n        var flen = file.content.length;\n\n        if (flen > 0) {\n          if (flen < 0x1000) mini_size += flen + 0x3F >> 6;else fat_size += flen + 0x01FF >> 9;\n        }\n      }\n\n      var dir_cnt = cfb.FullPaths.length + 3 >> 2;\n      var mini_cnt = mini_size + 7 >> 3;\n      var mfat_cnt = mini_size + 0x7F >> 7;\n      var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n      var fat_cnt = fat_base + 0x7F >> 7;\n      var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n\n      while (fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt) {\n        difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n      }\n\n      var L = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n      cfb.FileIndex[0].size = mini_size << 6;\n      L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);\n      return L;\n    }(cfb);\n\n    var o = new_buf(L[7] << 9);\n    var i = 0,\n        T = 0;\n    {\n      for (i = 0; i < 8; ++i) {\n        o.write_shift(1, HEADER_SIG[i]);\n      }\n\n      for (i = 0; i < 8; ++i) {\n        o.write_shift(2, 0);\n      }\n\n      o.write_shift(2, 0x003E);\n      o.write_shift(2, 0x0003);\n      o.write_shift(2, 0xFFFE);\n      o.write_shift(2, 0x0009);\n      o.write_shift(2, 0x0006);\n\n      for (i = 0; i < 3; ++i) {\n        o.write_shift(2, 0);\n      }\n\n      o.write_shift(4, 0);\n      o.write_shift(4, L[2]);\n      o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n      o.write_shift(4, 0);\n      o.write_shift(4, 1 << 12);\n      o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[3]);\n      o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[1]);\n\n      for (i = 0; i < 109; ++i) {\n        o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n      }\n    }\n\n    if (L[1]) {\n      for (T = 0; T < L[1]; ++T) {\n        for (; i < 236 + T * 127; ++i) {\n          o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n        }\n\n        o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n      }\n    }\n\n    var chainit = function chainit(w\n    /*:number*/\n    )\n    /*:void*/\n    {\n      for (T += w; i < T - 1; ++i) {\n        o.write_shift(-4, i + 1);\n      }\n\n      if (w) {\n        ++i;\n        o.write_shift(-4, ENDOFCHAIN);\n      }\n    };\n\n    T = i = 0;\n\n    for (T += L[1]; i < T; ++i) {\n      o.write_shift(-4, consts.DIFSECT);\n    }\n\n    for (T += L[2]; i < T; ++i) {\n      o.write_shift(-4, consts.FATSECT);\n    }\n\n    chainit(L[3]);\n    chainit(L[4]);\n    var j\n    /*:number*/\n    = 0,\n        flen\n    /*:number*/\n    = 0;\n    var file\n    /*:CFBEntry*/\n    = cfb.FileIndex[0];\n\n    for (; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      /*:: if(file.content == null) throw new Error(\"unreachable\"); */\n\n      flen = file.content.length;\n      if (flen < 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x01FF >> 9);\n    }\n\n    chainit(L[6] + 7 >> 3);\n\n    while (o.l & 0x1FF) {\n      o.write_shift(-4, consts.ENDOFCHAIN);\n    }\n\n    T = i = 0;\n\n    for (j = 0; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      /*:: if(file.content == null) throw new Error(\"unreachable\"); */\n\n      flen = file.content.length;\n      if (!flen || flen >= 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x3F >> 6);\n    }\n\n    while (o.l & 0x1FF) {\n      o.write_shift(-4, consts.ENDOFCHAIN);\n    }\n\n    for (i = 0; i < L[4] << 2; ++i) {\n      var nm = cfb.FullPaths[i];\n\n      if (!nm || nm.length === 0) {\n        for (j = 0; j < 17; ++j) {\n          o.write_shift(4, 0);\n        }\n\n        for (j = 0; j < 3; ++j) {\n          o.write_shift(4, -1);\n        }\n\n        for (j = 0; j < 12; ++j) {\n          o.write_shift(4, 0);\n        }\n\n        continue;\n      }\n\n      file = cfb.FileIndex[i];\n      if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n\n      var _nm\n      /*:string*/\n      = i === 0 && _opts.root || file.name;\n\n      if (_nm.length > 32) {\n        console.error(\"Name \" + _nm + \" will be truncated to \" + _nm.slice(0, 32));\n        _nm = _nm.slice(0, 32);\n      }\n\n      flen = 2 * (_nm.length + 1);\n      o.write_shift(64, _nm, \"utf16le\");\n      o.write_shift(2, flen);\n      o.write_shift(1, file.type);\n      o.write_shift(1, file.color);\n      o.write_shift(-4, file.L);\n      o.write_shift(-4, file.R);\n      o.write_shift(-4, file.C);\n      if (!file.clsid) for (j = 0; j < 4; ++j) {\n        o.write_shift(4, 0);\n      } else o.write_shift(16, file.clsid, \"hex\");\n      o.write_shift(4, file.state || 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, file.start);\n      o.write_shift(4, file.size);\n      o.write_shift(4, 0);\n    }\n\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n      /*:: if(!file.content) throw new Error(\"unreachable\"); */\n\n      if (file.size >= 0x1000) {\n        o.l = file.start + 1 << 9;\n\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size); // o is a 0-filled Buffer so just set next offset\n\n          o.l += file.size + 511 & -512;\n        } else {\n          for (j = 0; j < file.size; ++j) {\n            o.write_shift(1, file.content[j]);\n          }\n\n          for (; j & 0x1FF; ++j) {\n            o.write_shift(1, 0);\n          }\n        }\n      }\n    }\n\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n      /*:: if(!file.content) throw new Error(\"unreachable\"); */\n\n      if (file.size > 0 && file.size < 0x1000) {\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size); // o is a 0-filled Buffer so just set next offset\n\n          o.l += file.size + 63 & -64;\n        } else {\n          for (j = 0; j < file.size; ++j) {\n            o.write_shift(1, file.content[j]);\n          }\n\n          for (; j & 0x3F; ++j) {\n            o.write_shift(1, 0);\n          }\n        }\n      }\n    }\n\n    if (has_buf) {\n      o.l = o.length;\n    } else {\n      // When using Buffer, already 0-filled\n      while (o.l < o.length) {\n        o.write_shift(1, 0);\n      }\n    }\n\n    return o;\n  }\n  /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\n\n\n  function find(cfb\n  /*:CFBContainer*/\n  , path\n  /*:string*/\n  )\n  /*:?CFBEntry*/\n  {\n    var UCFullPaths\n    /*:Array<string>*/\n    = cfb.FullPaths.map(function (x) {\n      return x.toUpperCase();\n    });\n    var UCPaths\n    /*:Array<string>*/\n    = UCFullPaths.map(function (x) {\n      var y = x.split(\"/\");\n      return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)];\n    });\n    var k\n    /*:boolean*/\n    = false;\n\n    if (path.charCodeAt(0) === 47\n    /* \"/\" */\n    ) {\n      k = true;\n      path = UCFullPaths[0].slice(0, -1) + path;\n    } else k = path.indexOf(\"/\") !== -1;\n\n    var UCPath\n    /*:string*/\n    = path.toUpperCase();\n    var w\n    /*:number*/\n    = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n    if (w !== -1) return cfb.FileIndex[w];\n    var m = !UCPath.match(chr1);\n    UCPath = UCPath.replace(chr0, '');\n    if (m) UCPath = UCPath.replace(chr1, '!');\n\n    for (w = 0; w < UCFullPaths.length; ++w) {\n      if ((m ? UCFullPaths[w].replace(chr1, '!') : UCFullPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n      if ((m ? UCPaths[w].replace(chr1, '!') : UCPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n    }\n\n    return null;\n  }\n  /** CFB Constants */\n\n\n  var MSSZ = 64;\n  /* Mini Sector Size = 1<<6 */\n  //var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n\n  /* 2.1 Compound File Sector Numbers and Types */\n\n  var ENDOFCHAIN = -2;\n  /* 2.2 Compound File Header */\n\n  var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\n  var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\n  var HEADER_CLSID = '00000000000000000000000000000000';\n  var consts = {\n    /* 2.1 Compund File Sector Numbers and Types */\n    MAXREGSECT: -6,\n    DIFSECT: -4,\n    FATSECT: -3,\n    ENDOFCHAIN: ENDOFCHAIN,\n    FREESECT: -1,\n\n    /* 2.2 Compound File Header */\n    HEADER_SIGNATURE: HEADER_SIGNATURE,\n    HEADER_MINOR_VERSION: '3e00',\n    MAXREGSID: -6,\n    NOSTREAM: -1,\n    HEADER_CLSID: HEADER_CLSID,\n\n    /* 2.6.1 Compound File Directory Entry */\n    EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root']\n  };\n\n  function write_file(cfb\n  /*:CFBContainer*/\n  , filename\n  /*:string*/\n  , options\n  /*:CFBWriteOpts*/\n  )\n  /*:void*/\n  {\n    get_fs();\n\n    var o = _write(cfb, options);\n    /*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error(\"unreachable\"); */\n\n\n    fs.writeFileSync(filename, o);\n  }\n\n  function a2s(o\n  /*:RawBytes*/\n  )\n  /*:string*/\n  {\n    var out = new Array(o.length);\n\n    for (var i = 0; i < o.length; ++i) {\n      out[i] = String.fromCharCode(o[i]);\n    }\n\n    return out.join(\"\");\n  }\n\n  function write(cfb\n  /*:CFBContainer*/\n  , options\n  /*:CFBWriteOpts*/\n  )\n  /*:RawBytes|string*/\n  {\n    var o = _write(cfb, options);\n\n    switch (options && options.type || \"buffer\") {\n      case \"file\":\n        get_fs();\n        fs.writeFileSync(options.filename, o\n        /*:any*/\n        );\n        return o;\n\n      case \"binary\":\n        return typeof o == \"string\" ? o : a2s(o);\n\n      case \"base64\":\n        return Base64_encode(typeof o == \"string\" ? o : a2s(o));\n\n      case \"buffer\":\n        if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n\n      /* falls through */\n\n      case \"array\":\n        return typeof o == \"string\" ? s2a(o) : o;\n    }\n\n    return o;\n  }\n  /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\n\n\n  var _zlib;\n\n  function use_zlib(zlib) {\n    try {\n      var InflateRaw = zlib.InflateRaw;\n      var InflRaw = new InflateRaw();\n\n      InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n\n      if (InflRaw.bytesRead) _zlib = zlib;else throw new Error(\"zlib does not expose bytesRead\");\n    } catch (e) {\n      console.error(\"cannot use native zlib: \" + (e.message || e));\n    }\n  }\n\n  function _inflateRawSync(payload, usz) {\n    if (!_zlib) return _inflate(payload, usz);\n    var InflateRaw = _zlib.InflateRaw;\n    var InflRaw = new InflateRaw();\n\n    var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n\n    payload.l += InflRaw.bytesRead;\n    return out;\n  }\n\n  function _deflateRawSync(payload) {\n    return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n  }\n\n  var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\n\n  var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];\n  /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\n\n  var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n\n  function bit_swap_8(n) {\n    var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;\n    return (t >> 16 | t >> 8 | t) & 0xFF;\n  }\n\n  var use_typed_arrays = typeof Uint8Array !== 'undefined';\n  var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];\n\n  for (var q = 0; q < 1 << 8; ++q) {\n    bitswap8[q] = bit_swap_8(q);\n  }\n\n  function bit_swap_n(n, b) {\n    var rev = bitswap8[n & 0xFF];\n    if (b <= 8) return rev >>> 8 - b;\n    rev = rev << 8 | bitswap8[n >> 8 & 0xFF];\n    if (b <= 16) return rev >>> 16 - b;\n    rev = rev << 8 | bitswap8[n >> 16 & 0xFF];\n    return rev >>> 24 - b;\n  }\n  /* helpers for unaligned bit reads */\n\n\n  function read_bits_2(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;\n  }\n\n  function read_bits_3(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;\n  }\n\n  function read_bits_4(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;\n  }\n\n  function read_bits_5(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;\n  }\n\n  function read_bits_7(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;\n  }\n  /* works up to n = 3 * 8 + 1 = 25 */\n\n\n  function read_bits_n(buf, bl, n) {\n    var w = bl & 7,\n        h = bl >>> 3,\n        f = (1 << n) - 1;\n    var v = buf[h] >>> w;\n    if (n < 8 - w) return v & f;\n    v |= buf[h + 1] << 8 - w;\n    if (n < 16 - w) return v & f;\n    v |= buf[h + 2] << 16 - w;\n    if (n < 24 - w) return v & f;\n    v |= buf[h + 3] << 24 - w;\n    return v & f;\n  }\n  /* helpers for unaligned bit writes */\n\n\n  function write_bits_3(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    if (w <= 5) buf[h] |= (v & 7) << w;else {\n      buf[h] |= v << w & 0xFF;\n      buf[h + 1] = (v & 7) >> 8 - w;\n    }\n    return bl + 3;\n  }\n\n  function write_bits_1(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v = (v & 1) << w;\n    buf[h] |= v;\n    return bl + 1;\n  }\n\n  function write_bits_8(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v;\n    return bl + 8;\n  }\n\n  function write_bits_16(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v & 0xFF;\n    buf[h + 2] = v >>> 8;\n    return bl + 16;\n  }\n  /* until ArrayBuffer#realloc is a thing, fake a realloc */\n\n\n  function realloc(b, sz\n  /*:number*/\n  ) {\n    var L = b.length,\n        M = 2 * L > sz ? 2 * L : sz + 5,\n        i = 0;\n    if (L >= sz) return b;\n\n    if (has_buf) {\n      var o = new_unsafe_buf(M); // $FlowIgnore\n\n      if (b.copy) b.copy(o);else for (; i < b.length; ++i) {\n        o[i] = b[i];\n      }\n      return o;\n    } else if (use_typed_arrays) {\n      var a = new Uint8Array(M);\n      if (a.set) a.set(b);else for (; i < L; ++i) {\n        a[i] = b[i];\n      }\n      return a;\n    }\n\n    b.length = M;\n    return b;\n  }\n  /* zero-filled arrays for older browsers */\n\n\n  function zero_fill_array(n) {\n    var o = new Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      o[i] = 0;\n    }\n\n    return o;\n  }\n  /* build tree (used for literals and lengths) */\n\n\n  function build_tree(clens, cmap, MAX\n  /*:number*/\n  )\n  /*:number*/\n  {\n    var maxlen = 1,\n        w = 0,\n        i = 0,\n        j = 0,\n        ccode = 0,\n        L = clens.length;\n    var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\n    for (i = 0; i < 32; ++i) {\n      bl_count[i] = 0;\n    }\n\n    for (i = L; i < MAX; ++i) {\n      clens[i] = 0;\n    }\n\n    L = clens.length;\n    var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n    /* build code tree */\n\n    for (i = 0; i < L; ++i) {\n      bl_count[w = clens[i]]++;\n      if (maxlen < w) maxlen = w;\n      ctree[i] = 0;\n    }\n\n    bl_count[0] = 0;\n\n    for (i = 1; i <= maxlen; ++i) {\n      bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;\n    }\n\n    for (i = 0; i < L; ++i) {\n      ccode = clens[i];\n      if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;\n    }\n    /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n\n\n    var cleni = 0;\n\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n\n      if (cleni != 0) {\n        ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;\n\n        for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j) {\n          cmap[ccode | j << cleni] = cleni & 15 | i << 4;\n        }\n      }\n    }\n\n    return maxlen;\n  }\n  /* Fixed Huffman */\n\n\n  var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\n  var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\n  if (!use_typed_arrays) {\n    for (var i = 0; i < 512; ++i) {\n      fix_lmap[i] = 0;\n    }\n\n    for (i = 0; i < 32; ++i) {\n      fix_dmap[i] = 0;\n    }\n  }\n\n  (function () {\n    var dlens\n    /*:Array<number>*/\n    = [];\n    var i = 0;\n\n    for (; i < 32; i++) {\n      dlens.push(5);\n    }\n\n    build_tree(dlens, fix_dmap, 32);\n    var clens\n    /*:Array<number>*/\n    = [];\n    i = 0;\n\n    for (; i <= 143; i++) {\n      clens.push(8);\n    }\n\n    for (; i <= 255; i++) {\n      clens.push(9);\n    }\n\n    for (; i <= 279; i++) {\n      clens.push(7);\n    }\n\n    for (; i <= 287; i++) {\n      clens.push(8);\n    }\n\n    build_tree(clens, fix_lmap, 288);\n  })();\n\n  var _deflateRaw = /*#__PURE__*/function _deflateRawIIFE() {\n    var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n    var j = 0,\n        k = 0;\n\n    for (; j < DST_LN.length - 1; ++j) {\n      for (; k < DST_LN[j + 1]; ++k) {\n        DST_LN_RE[k] = j;\n      }\n    }\n\n    for (; k < 32768; ++k) {\n      DST_LN_RE[k] = 29;\n    }\n\n    var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];\n\n    for (j = 0, k = 0; j < LEN_LN.length - 1; ++j) {\n      for (; k < LEN_LN[j + 1]; ++k) {\n        LEN_LN_RE[k] = j;\n      }\n    }\n\n    function write_stored(data, out) {\n      var boff = 0;\n\n      while (boff < data.length) {\n        var L = Math.min(0xFFFF, data.length - boff);\n        var h = boff + L == data.length;\n        out.write_shift(1, +h);\n        out.write_shift(2, L);\n        out.write_shift(2, ~L & 0xFFFF);\n\n        while (L-- > 0) {\n          out[out.l++] = data[boff++];\n        }\n      }\n\n      return out.l;\n    }\n    /* Fixed Huffman */\n\n\n    function write_huff_fixed(data, out) {\n      var bl = 0;\n      var boff = 0;\n      var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n\n      while (boff < data.length) {\n        var L =\n        /* data.length - boff; */\n        Math.min(0xFFFF, data.length - boff);\n        /* write a stored block for short data */\n\n        if (L < 10) {\n          bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n\n          if (bl & 7) bl += 8 - (bl & 7);\n          out.l = bl / 8 | 0;\n          out.write_shift(2, L);\n          out.write_shift(2, ~L & 0xFFFF);\n\n          while (L-- > 0) {\n            out[out.l++] = data[boff++];\n          }\n\n          bl = out.l * 8;\n          continue;\n        }\n\n        bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n\n        var hash = 0;\n\n        while (L-- > 0) {\n          var d = data[boff];\n          hash = (hash << 5 ^ d) & 0x7FFF;\n          var match = -1,\n              mlen = 0;\n\n          if (match = addrs[hash]) {\n            match |= boff & ~0x7FFF;\n            if (match > boff) match -= 0x8000;\n            if (match < boff) while (data[match + mlen] == data[boff + mlen] && mlen < 250) {\n              ++mlen;\n            }\n          }\n\n          if (mlen > 2) {\n            /* Copy Token  */\n            d = LEN_LN_RE[mlen];\n            if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;else {\n              write_bits_8(out, bl, 3);\n              bl += 5;\n              write_bits_8(out, bl, bitswap8[d - 23] >> 5);\n              bl += 3;\n            }\n            var len_eb = d < 8 ? 0 : d - 4 >> 2;\n\n            if (len_eb > 0) {\n              write_bits_16(out, bl, mlen - LEN_LN[d]);\n              bl += len_eb;\n            }\n\n            d = DST_LN_RE[boff - match];\n            bl = write_bits_8(out, bl, bitswap8[d] >> 3);\n            bl -= 3;\n            var dst_eb = d < 4 ? 0 : d - 2 >> 1;\n\n            if (dst_eb > 0) {\n              write_bits_16(out, bl, boff - match - DST_LN[d]);\n              bl += dst_eb;\n            }\n\n            for (var q = 0; q < mlen; ++q) {\n              addrs[hash] = boff & 0x7FFF;\n              hash = (hash << 5 ^ data[boff]) & 0x7FFF;\n              ++boff;\n            }\n\n            L -= mlen - 1;\n          } else {\n            /* Literal Token */\n            if (d <= 143) d = d + 48;else bl = write_bits_1(out, bl, 1);\n            bl = write_bits_8(out, bl, bitswap8[d]);\n            addrs[hash] = boff & 0x7FFF;\n            ++boff;\n          }\n        }\n\n        bl = write_bits_8(out, bl, 0) - 1;\n      }\n\n      out.l = (bl + 7) / 8 | 0;\n      return out.l;\n    }\n\n    return function _deflateRaw(data, out) {\n      if (data.length < 8) return write_stored(data, out);\n      return write_huff_fixed(data, out);\n    };\n  }();\n\n  function _deflate(data) {\n    var buf = new_buf(50 + Math.floor(data.length * 1.1));\n\n    var off = _deflateRaw(data, buf);\n\n    return buf.slice(0, off);\n  }\n  /* modified inflate function also moves original read head */\n\n\n  var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);\n  var dyn_len_1 = 1,\n      dyn_len_2 = 1;\n  /* 5.5.3 Expanding Huffman Codes */\n\n  function dyn(data, boff\n  /*:number*/\n  ) {\n    /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n    var _HLIT = read_bits_5(data, boff) + 257;\n\n    boff += 5;\n\n    var _HDIST = read_bits_5(data, boff) + 1;\n\n    boff += 5;\n\n    var _HCLEN = read_bits_4(data, boff) + 4;\n\n    boff += 4;\n    var w = 0;\n    /* grab and store code lengths */\n\n    var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n    var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var maxlen = 1;\n    var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var L = clens.length;\n    /* 19 */\n\n    for (var i = 0; i < _HCLEN; ++i) {\n      clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n      if (maxlen < w) maxlen = w;\n      bl_count[w]++;\n      boff += 3;\n    }\n    /* build code tree */\n\n\n    var ccode = 0;\n    bl_count[0] = 0;\n\n    for (i = 1; i <= maxlen; ++i) {\n      next_code[i] = ccode = ccode + bl_count[i - 1] << 1;\n    }\n\n    for (i = 0; i < L; ++i) {\n      if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n    }\n    /* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n\n\n    var cleni = 0;\n\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n\n      if (cleni != 0) {\n        ccode = bitswap8[ctree[i]] >> 8 - cleni;\n\n        for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) {\n          dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;\n        }\n      }\n    }\n    /* read literal and dist codes at once */\n\n\n    var hcodes\n    /*:Array<number>*/\n    = [];\n    maxlen = 1;\n\n    for (; hcodes.length < _HLIT + _HDIST;) {\n      ccode = dyn_cmap[read_bits_7(data, boff)];\n      boff += ccode & 7;\n\n      switch (ccode >>>= 3) {\n        case 16:\n          w = 3 + read_bits_2(data, boff);\n          boff += 2;\n          ccode = hcodes[hcodes.length - 1];\n\n          while (w-- > 0) {\n            hcodes.push(ccode);\n          }\n\n          break;\n\n        case 17:\n          w = 3 + read_bits_3(data, boff);\n          boff += 3;\n\n          while (w-- > 0) {\n            hcodes.push(0);\n          }\n\n          break;\n\n        case 18:\n          w = 11 + read_bits_7(data, boff);\n          boff += 7;\n\n          while (w-- > 0) {\n            hcodes.push(0);\n          }\n\n          break;\n\n        default:\n          hcodes.push(ccode);\n          if (maxlen < ccode) maxlen = ccode;\n          break;\n      }\n    }\n    /* build literal / length trees */\n\n\n    var h1 = hcodes.slice(0, _HLIT),\n        h2 = hcodes.slice(_HLIT);\n\n    for (i = _HLIT; i < 286; ++i) {\n      h1[i] = 0;\n    }\n\n    for (i = _HDIST; i < 30; ++i) {\n      h2[i] = 0;\n    }\n\n    dyn_len_1 = build_tree(h1, dyn_lmap, 286);\n    dyn_len_2 = build_tree(h2, dyn_dmap, 30);\n    return boff;\n  }\n  /* return [ data, bytesRead ] */\n\n\n  function inflate(data, usz\n  /*:number*/\n  ) {\n    /* shortcircuit for empty buffer [0x03, 0x00] */\n    if (data[0] == 3 && !(data[1] & 0x3)) {\n      return [new_raw_buf(usz), 2];\n    }\n    /* bit offset */\n\n\n    var boff = 0;\n    /* header includes final bit and type bits */\n\n    var header = 0;\n    var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);\n    var woff = 0;\n    var OL = outbuf.length >>> 0;\n    var max_len_1 = 0,\n        max_len_2 = 0;\n\n    while ((header & 1) == 0) {\n      header = read_bits_3(data, boff);\n      boff += 3;\n\n      if (header >>> 1 == 0) {\n        /* Stored block */\n        if (boff & 7) boff += 8 - (boff & 7);\n        /* 2 bytes sz, 2 bytes bit inverse */\n\n        var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;\n        boff += 32;\n        /* push sz bytes */\n\n        if (sz > 0) {\n          if (!usz && OL < woff + sz) {\n            outbuf = realloc(outbuf, woff + sz);\n            OL = outbuf.length;\n          }\n\n          while (sz-- > 0) {\n            outbuf[woff++] = data[boff >>> 3];\n            boff += 8;\n          }\n        }\n\n        continue;\n      } else if (header >> 1 == 1) {\n        /* Fixed Huffman */\n        max_len_1 = 9;\n        max_len_2 = 5;\n      } else {\n        /* Dynamic Huffman */\n        boff = dyn(data, boff);\n        max_len_1 = dyn_len_1;\n        max_len_2 = dyn_len_2;\n      }\n\n      for (;;) {\n        // while(true) is apparently out of vogue in modern JS circles\n        if (!usz && OL < woff + 32767) {\n          outbuf = realloc(outbuf, woff + 32767);\n          OL = outbuf.length;\n        }\n        /* ingest code and move read head */\n\n\n        var bits = read_bits_n(data, boff, max_len_1);\n        var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n        boff += code & 15;\n        code >>>= 4;\n        /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n\n        if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;else if (code == 256) break;else {\n          code -= 257;\n          var len_eb = code < 8 ? 0 : code - 4 >> 2;\n          if (len_eb > 5) len_eb = 0;\n          var tgt = woff + LEN_LN[code];\n          /* length extra bits */\n\n          if (len_eb > 0) {\n            tgt += read_bits_n(data, boff, len_eb);\n            boff += len_eb;\n          }\n          /* dist code */\n\n\n          bits = read_bits_n(data, boff, max_len_2);\n          code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n          boff += code & 15;\n          code >>>= 4;\n          var dst_eb = code < 4 ? 0 : code - 2 >> 1;\n          var dst = DST_LN[code];\n          /* dist extra bits */\n\n          if (dst_eb > 0) {\n            dst += read_bits_n(data, boff, dst_eb);\n            boff += dst_eb;\n          }\n          /* in the common case, manual byte copy is faster than TA set / Buffer copy */\n\n\n          if (!usz && OL < tgt) {\n            outbuf = realloc(outbuf, tgt + 100);\n            OL = outbuf.length;\n          }\n\n          while (woff < tgt) {\n            outbuf[woff] = outbuf[woff - dst];\n            ++woff;\n          }\n        }\n      }\n    }\n\n    if (usz) return [outbuf, boff + 7 >>> 3];\n    return [outbuf.slice(0, woff), boff + 7 >>> 3];\n  }\n\n  function _inflate(payload, usz) {\n    var data = payload.slice(payload.l || 0);\n    var out = inflate(data, usz);\n    payload.l += out[1];\n    return out[0];\n  }\n\n  function warn_or_throw(wrn, msg) {\n    if (wrn) {\n      if (typeof console !== 'undefined') console.error(msg);\n    } else throw new Error(msg);\n  }\n\n  function parse_zip(file\n  /*:RawBytes*/\n  , options\n  /*:CFBReadOpts*/\n  )\n  /*:CFBContainer*/\n  {\n    var blob\n    /*:CFBlob*/\n    =\n    /*::(*/\n    file\n    /*:: :any)*/\n    ;\n    prep_blob(blob, 0);\n    var FileIndex\n    /*:CFBFileIndex*/\n    = [],\n        FullPaths\n    /*:Array<string>*/\n    = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o, {\n      root: options.root\n    });\n    /* find end of central directory, start just after signature */\n\n    var i = blob.length - 4;\n\n    while ((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0) {\n      --i;\n    }\n\n    blob.l = i + 4;\n    /* parse end of central directory */\n\n    blob.l += 4;\n    var fcnt = blob.read_shift(2);\n    blob.l += 6;\n    var start_cd = blob.read_shift(4);\n    /* parse central directory */\n\n    blob.l = start_cd;\n\n    for (i = 0; i < fcnt; ++i) {\n      /* trust local file header instead of CD entry */\n      blob.l += 20;\n      var csz = blob.read_shift(4);\n      var usz = blob.read_shift(4);\n      var namelen = blob.read_shift(2);\n      var efsz = blob.read_shift(2);\n      var fcsz = blob.read_shift(2);\n      blob.l += 8;\n      var offset = blob.read_shift(4);\n      var EF = parse_extra_field(\n      /*::(*/\n      blob.slice(blob.l + namelen, blob.l + namelen + efsz)\n      /*:: :any)*/\n      );\n      blob.l += namelen + efsz + fcsz;\n      var L = blob.l;\n      blob.l = offset + 4;\n      /* ZIP64 lengths */\n\n      if (EF && EF[0x0001]) {\n        if ((EF[0x0001] || {}).usz) usz = EF[0x0001].usz;\n        if ((EF[0x0001] || {}).csz) csz = EF[0x0001].csz;\n      }\n\n      parse_local_file(blob, csz, usz, o, EF);\n      blob.l = L;\n    }\n\n    return o;\n  }\n  /* head starts just after local file header signature */\n\n\n  function parse_local_file(blob\n  /*:CFBlob*/\n  , csz\n  /*:number*/\n  , usz\n  /*:number*/\n  , o\n  /*:CFBContainer*/\n  , EF) {\n    /* [local file header] */\n    blob.l += 2;\n    var flags = blob.read_shift(2);\n    var meth = blob.read_shift(2);\n    var date = parse_dos_date(blob);\n    if (flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n    var crc32 = blob.read_shift(4);\n\n    var _csz = blob.read_shift(4);\n\n    var _usz = blob.read_shift(4);\n\n    var namelen = blob.read_shift(2);\n    var efsz = blob.read_shift(2); // TODO: flags & (1<<11) // UTF8\n\n    var name = \"\";\n\n    for (var i = 0; i < namelen; ++i) {\n      name += String.fromCharCode(blob[blob.l++]);\n    }\n\n    if (efsz) {\n      var ef = parse_extra_field(\n      /*::(*/\n      blob.slice(blob.l, blob.l + efsz)\n      /*:: :any)*/\n      );\n      if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;\n      if ((ef[0x0001] || {}).usz) _usz = ef[0x0001].usz;\n      if ((ef[0x0001] || {}).csz) _csz = ef[0x0001].csz;\n\n      if (EF) {\n        if ((EF[0x5455] || {}).mt) date = EF[0x5455].mt;\n        if ((EF[0x0001] || {}).usz) _usz = ef[0x0001].usz;\n        if ((EF[0x0001] || {}).csz) _csz = ef[0x0001].csz;\n      }\n    }\n\n    blob.l += efsz;\n    /* [encryption header] */\n\n    /* [file data] */\n\n    var data = blob.slice(blob.l, blob.l + _csz);\n\n    switch (meth) {\n      case 8:\n        data = _inflateRawSync(blob, _usz);\n        break;\n\n      case 0:\n        break;\n      // TODO: scan for magic number\n\n      default:\n        throw new Error(\"Unsupported ZIP Compression method \" + meth);\n    }\n    /* [data descriptor] */\n\n\n    var wrn = false;\n\n    if (flags & 8) {\n      crc32 = blob.read_shift(4);\n\n      if (crc32 == 0x08074b50) {\n        crc32 = blob.read_shift(4);\n        wrn = true;\n      }\n\n      _csz = blob.read_shift(4);\n      _usz = blob.read_shift(4);\n    }\n\n    if (_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n    if (_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz); //var _crc32 = CRC32.buf(data, 0);\n    //if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n\n    cfb_add(o, name, data, {\n      unsafe: true,\n      mt: date\n    });\n  }\n\n  function write_zip(cfb\n  /*:CFBContainer*/\n  , options\n  /*:CFBWriteOpts*/\n  )\n  /*:RawBytes*/\n  {\n    var _opts = options || {};\n\n    var out = [],\n        cdirs = [];\n    var o\n    /*:CFBlob*/\n    = new_buf(1);\n    var method = _opts.compression ? 8 : 0,\n        flags = 0;\n    var desc = false;\n    if (desc) flags |= 8;\n    var i = 0,\n        j = 0;\n    var start_cd = 0,\n        fcnt = 0;\n    var root = cfb.FullPaths[0],\n        fp = root,\n        fi = cfb.FileIndex[0];\n    var crcs = [];\n    var sz_cd = 0;\n\n    for (i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n      var start = start_cd;\n      /* TODO: CP437 filename */\n\n      var namebuf = new_buf(fp.length);\n\n      for (j = 0; j < fp.length; ++j) {\n        namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n      }\n\n      namebuf = namebuf.slice(0, namebuf.l);\n      crcs[fcnt] = typeof fi.content == \"string\" ? CRC32.bstr(fi.content, 0) : CRC32.buf(\n      /*::((*/\n      fi.content\n      /*::||[]):any)*/\n      , 0);\n      var outbuf = typeof fi.content == \"string\" ? s2a(fi.content) : fi.content\n      /*::||[]*/\n      ;\n      if (method == 8) outbuf = _deflateRawSync(outbuf);\n      /* local file header */\n\n      o = new_buf(30);\n      o.write_shift(4, 0x04034b50);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      /* TODO: last mod file time/date */\n\n      if (fi.mt) write_dos_date(o, fi.mt);else o.write_shift(4, 0);\n      o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);\n      o.write_shift(4, flags & 8 ? 0 : outbuf.length);\n      o.write_shift(4, flags & 8 ? 0 :\n      /*::(*/\n      fi.content\n      /*::||[])*/\n      .length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      start_cd += o.length;\n      out.push(o);\n      start_cd += namebuf.length;\n      out.push(namebuf);\n      /* TODO: extra fields? */\n\n      /* TODO: encryption header ? */\n\n      start_cd += outbuf.length;\n      out.push(outbuf);\n      /* data descriptor */\n\n      if (flags & 8) {\n        o = new_buf(12);\n        o.write_shift(-4, crcs[fcnt]);\n        o.write_shift(4, outbuf.length);\n        o.write_shift(4,\n        /*::(*/\n        fi.content\n        /*::||[])*/\n        .length);\n        start_cd += o.l;\n        out.push(o);\n      }\n      /* central directory */\n\n\n      o = new_buf(46);\n      o.write_shift(4, 0x02014b50);\n      o.write_shift(2, 0);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      o.write_shift(4, 0);\n      /* TODO: last mod file time/date */\n\n      o.write_shift(-4, crcs[fcnt]);\n      o.write_shift(4, outbuf.length);\n      o.write_shift(4,\n      /*::(*/\n      fi.content\n      /*::||[])*/\n      .length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, start);\n      sz_cd += o.l;\n      cdirs.push(o);\n      sz_cd += namebuf.length;\n      cdirs.push(namebuf);\n      ++fcnt;\n    }\n    /* end of central directory */\n\n\n    o = new_buf(22);\n    o.write_shift(4, 0x06054b50);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, fcnt);\n    o.write_shift(2, fcnt);\n    o.write_shift(4, sz_cd);\n    o.write_shift(4, start_cd);\n    o.write_shift(2, 0);\n    return bconcat([bconcat(out\n    /*:any*/\n    ), bconcat(cdirs), o]\n    /*:any*/\n    );\n  }\n\n  var ContentTypeMap = {\n    \"htm\": \"text/html\",\n    \"xml\": \"text/xml\",\n    \"gif\": \"image/gif\",\n    \"jpg\": \"image/jpeg\",\n    \"png\": \"image/png\",\n    \"mso\": \"application/x-mso\",\n    \"thmx\": \"application/vnd.ms-officetheme\",\n    \"sh33tj5\": \"application/octet-stream\"\n  }\n  /*:any*/\n  ;\n\n  function get_content_type(fi\n  /*:CFBEntry*/\n  , fp\n  /*:string*/\n  )\n  /*:string*/\n  {\n    if (fi.ctype) return fi.ctype;\n    var ext = fi.name || \"\",\n        m = ext.match(/\\.([^\\.]+)$/);\n    if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\n    if (fp) {\n      m = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n      if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n    }\n\n    return \"application/octet-stream\";\n  }\n  /* 76 character chunks TODO: intertwine encoding */\n\n\n  function write_base64_76(bstr\n  /*:string*/\n  )\n  /*:string*/\n  {\n    var data = Base64_encode(bstr);\n    var o = [];\n\n    for (var i = 0; i < data.length; i += 76) {\n      o.push(data.slice(i, i + 76));\n    }\n\n    return o.join(\"\\r\\n\") + \"\\r\\n\";\n  }\n  /*\n  Rules for QP:\n  \t- escape =## applies for all non-display characters and literal \"=\"\n  \t- space or tab at end of line must be encoded\n  \t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n  \t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n  \n  TODO: Some files from word appear to write line extensions with bare equals:\n  \n  ```\n  <table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n  =\"70%\"\n  ```\n  */\n\n\n  function write_quoted_printable(text\n  /*:string*/\n  )\n  /*:string*/\n  {\n    var encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function (c) {\n      var w = c.charCodeAt(0).toString(16).toUpperCase();\n      return \"=\" + (w.length == 1 ? \"0\" + w : w);\n    });\n    encoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n    if (encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n    encoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n    var o\n    /*:Array<string>*/\n    = [],\n        split = encoded.split(\"\\r\\n\");\n\n    for (var si = 0; si < split.length; ++si) {\n      var str = split[si];\n\n      if (str.length == 0) {\n        o.push(\"\");\n        continue;\n      }\n\n      for (var i = 0; i < str.length;) {\n        var end = 76;\n        var tmp = str.slice(i, i + end);\n        if (tmp.charAt(end - 1) == \"=\") end--;else if (tmp.charAt(end - 2) == \"=\") end -= 2;else if (tmp.charAt(end - 3) == \"=\") end -= 3;\n        tmp = str.slice(i, i + end);\n        i += end;\n        if (i < str.length) tmp += \"=\";\n        o.push(tmp);\n      }\n    }\n\n    return o.join(\"\\r\\n\");\n  }\n\n  function parse_quoted_printable(data\n  /*:Array<string>*/\n  )\n  /*:RawBytes*/\n  {\n    var o = [];\n    /* unify long lines */\n\n    for (var di = 0; di < data.length; ++di) {\n      var line = data[di];\n\n      while (di <= data.length && line.charAt(line.length - 1) == \"=\") {\n        line = line.slice(0, line.length - 1) + data[++di];\n      }\n\n      o.push(line);\n    }\n    /* decode */\n\n\n    for (var oi = 0; oi < o.length; ++oi) {\n      o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function ($$) {\n        return String.fromCharCode(parseInt($$.slice(1), 16));\n      });\n    }\n\n    return s2a(o.join(\"\\r\\n\"));\n  }\n\n  function parse_mime(cfb\n  /*:CFBContainer*/\n  , data\n  /*:Array<string>*/\n  , root\n  /*:string*/\n  )\n  /*:void*/\n  {\n    var fname = \"\",\n        cte = \"\",\n        ctype = \"\",\n        fdata;\n    var di = 0;\n\n    for (; di < 10; ++di) {\n      var line = data[di];\n      if (!line || line.match(/^\\s*$/)) break;\n      var m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n      if (m) switch (m[1].toLowerCase()) {\n        case \"content-location\":\n          fname = m[2].trim();\n          break;\n\n        case \"content-type\":\n          ctype = m[2].trim();\n          break;\n\n        case \"content-transfer-encoding\":\n          cte = m[2].trim();\n          break;\n      }\n    }\n\n    ++di;\n\n    switch (cte.toLowerCase()) {\n      case 'base64':\n        fdata = s2a(Base64_decode(data.slice(di).join(\"\")));\n        break;\n\n      case 'quoted-printable':\n        fdata = parse_quoted_printable(data.slice(di));\n        break;\n\n      default:\n        throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n    }\n\n    var file = cfb_add(cfb, fname.slice(root.length), fdata, {\n      unsafe: true\n    });\n    if (ctype) file.ctype = ctype;\n  }\n\n  function parse_mad(file\n  /*:RawBytes*/\n  , options\n  /*:CFBReadOpts*/\n  )\n  /*:CFBContainer*/\n  {\n    if (a2s(file.slice(0, 13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n    var root = options && options.root || \"\"; // $FlowIgnore\n\n    var data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n    var di = 0,\n        row = \"\";\n    /* if root is not specified, scan for the common prefix */\n\n    for (di = 0; di < data.length; ++di) {\n      row = data[di];\n      if (!/^Content-Location:/i.test(row)) continue;\n      row = row.slice(row.indexOf(\"file\"));\n      if (!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n      if (row.slice(0, root.length) == root) continue;\n\n      while (root.length > 0) {\n        root = root.slice(0, root.length - 1);\n        root = root.slice(0, root.lastIndexOf(\"/\") + 1);\n        if (row.slice(0, root.length) == root) break;\n      }\n    }\n\n    var mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n    if (!mboundary) throw new Error(\"MAD cannot find boundary\");\n    var boundary = \"--\" + (mboundary[1] || \"\");\n    var FileIndex\n    /*:CFBFileIndex*/\n    = [],\n        FullPaths\n    /*:Array<string>*/\n    = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o);\n    var start_di,\n        fcnt = 0;\n\n    for (di = 0; di < data.length; ++di) {\n      var line = data[di];\n      if (line !== boundary && line !== boundary + \"--\") continue;\n      if (fcnt++) parse_mime(o, data.slice(start_di, di), root);\n      start_di = di;\n    }\n\n    return o;\n  }\n\n  function write_mad(cfb\n  /*:CFBContainer*/\n  , options\n  /*:CFBWriteOpts*/\n  )\n  /*:string*/\n  {\n    var opts = options || {};\n    var boundary = opts.boundary || \"SheetJS\";\n    boundary = '------=' + boundary;\n    var out = ['MIME-Version: 1.0', 'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"', '', '', ''];\n    var root = cfb.FullPaths[0],\n        fp = root,\n        fi = cfb.FileIndex[0];\n\n    for (var i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n      /* Normalize filename */\n\n      fp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function (c) {\n        return \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n      }).replace(/[\\u0080-\\uFFFF]/g, function (u) {\n        return \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n      });\n      /* Extract content as binary string */\n\n      var ca = fi.content; // $FlowIgnore\n\n      var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n      /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */\n\n      var dispcnt = 0,\n          L = Math.min(1024, cstr.length),\n          cc = 0;\n\n      for (var csl = 0; csl <= L; ++csl) {\n        if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n      }\n\n      var qp = dispcnt >= L * 4 / 5;\n      out.push(boundary);\n      out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);\n      out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));\n      out.push('Content-Type: ' + get_content_type(fi, fp));\n      out.push('');\n      out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n    }\n\n    out.push(boundary + '--\\r\\n');\n    return out.join(\"\\r\\n\");\n  }\n\n  function cfb_new(opts\n  /*:?any*/\n  )\n  /*:CFBContainer*/\n  {\n    var o\n    /*:CFBContainer*/\n    = {}\n    /*:any*/\n    ;\n    init_cfb(o, opts);\n    return o;\n  }\n\n  function cfb_add(cfb\n  /*:CFBContainer*/\n  , name\n  /*:string*/\n  , content\n  /*:?RawBytes*/\n  , opts\n  /*:?any*/\n  )\n  /*:CFBEntry*/\n  {\n    var unsafe = opts && opts.unsafe;\n    if (!unsafe) init_cfb(cfb);\n    var file = !unsafe && CFB.find(cfb, name);\n\n    if (!file) {\n      var fpath\n      /*:string*/\n      = cfb.FullPaths[0];\n      if (name.slice(0, fpath.length) == fpath) fpath = name;else {\n        if (fpath.slice(-1) != \"/\") fpath += \"/\";\n        fpath = (fpath + name).replace(\"//\", \"/\");\n      }\n      file = {\n        name: filename(name),\n        type: 2\n      }\n      /*:any*/\n      ;\n      cfb.FileIndex.push(file);\n      cfb.FullPaths.push(fpath);\n      if (!unsafe) CFB.utils.cfb_gc(cfb);\n    }\n    /*:: if(!file) throw new Error(\"unreachable\"); */\n\n\n    file.content = content\n    /*:any*/\n    ;\n    file.size = content ? content.length : 0;\n\n    if (opts) {\n      if (opts.CLSID) file.clsid = opts.CLSID;\n      if (opts.mt) file.mt = opts.mt;\n      if (opts.ct) file.ct = opts.ct;\n    }\n\n    return file;\n  }\n\n  function cfb_del(cfb\n  /*:CFBContainer*/\n  , name\n  /*:string*/\n  )\n  /*:boolean*/\n  {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) {\n      if (cfb.FileIndex[j] == file) {\n        cfb.FileIndex.splice(j, 1);\n        cfb.FullPaths.splice(j, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function cfb_mov(cfb\n  /*:CFBContainer*/\n  , old_name\n  /*:string*/\n  , new_name\n  /*:string*/\n  )\n  /*:boolean*/\n  {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, old_name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) {\n      if (cfb.FileIndex[j] == file) {\n        cfb.FileIndex[j].name = filename(new_name);\n        cfb.FullPaths[j] = new_name;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function cfb_gc(cfb\n  /*:CFBContainer*/\n  )\n  /*:void*/\n  {\n    rebuild_cfb(cfb, true);\n  }\n\n  exports.find = find;\n  exports.read = read;\n  exports.parse = parse;\n  exports.write = write;\n  exports.writeFile = write_file;\n  exports.utils = {\n    cfb_new: cfb_new,\n    cfb_add: cfb_add,\n    cfb_del: cfb_del,\n    cfb_mov: cfb_mov,\n    cfb_gc: cfb_gc,\n    ReadShift: ReadShift,\n    CheckField: CheckField,\n    prep_blob: prep_blob,\n    bconcat: bconcat,\n    use_zlib: use_zlib,\n    _deflateRaw: _deflate,\n    _inflateRaw: _inflate,\n    consts: consts\n  };\n  return exports;\n}();\n\nvar _fs;\n\nfunction set_fs(fs) {\n  _fs = fs;\n}\n/* normalize data for blob ctor */\n\n\nfunction blobify(data) {\n  if (typeof data === \"string\") return s2ab(data);\n  if (Array.isArray(data)) return a2u(data);\n  return data;\n}\n/* write or download file */\n\n\nfunction write_dl(fname\n/*:string*/\n, payload\n/*:any*/\n, enc\n/*:?string*/\n) {\n  /*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */\n  if (typeof _fs !== 'undefined' && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);\n\n  if (typeof Deno !== 'undefined') {\n    /* in this spot, it's safe to assume typed arrays and TextEncoder/TextDecoder exist */\n    if (enc && typeof payload == \"string\") switch (enc) {\n      case \"utf8\":\n        payload = new TextEncoder(enc).encode(payload);\n        break;\n\n      case \"binary\":\n        payload = s2ab(payload);\n        break;\n\n      /* TODO: binary equivalent */\n\n      default:\n        throw new Error(\"Unsupported encoding \" + enc);\n    }\n    return Deno.writeFileSync(fname, payload);\n  }\n\n  var data = enc == \"utf8\" ? utf8write(payload) : payload;\n  /*:: declare var IE_SaveFile: any; */\n\n  if (typeof IE_SaveFile !== 'undefined') return IE_SaveFile(data, fname);\n\n  if (typeof Blob !== 'undefined') {\n    var blob = new Blob([blobify(data)], {\n      type: \"application/octet-stream\"\n    });\n    /*:: declare var navigator: any; */\n\n    if (typeof navigator !== 'undefined' && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);\n    /*:: declare var saveAs: any; */\n\n    if (typeof saveAs !== 'undefined') return saveAs(blob, fname);\n\n    if (typeof URL !== 'undefined' && typeof document !== 'undefined' && document.createElement && URL.createObjectURL) {\n      var url = URL.createObjectURL(blob);\n      /*:: declare var chrome: any; */\n\n      if (typeof chrome === 'object' && typeof (chrome.downloads || {}).download == \"function\") {\n        if (URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function () {\n          URL.revokeObjectURL(url);\n        }, 60000);\n        return chrome.downloads.download({\n          url: url,\n          filename: fname,\n          saveAs: true\n        });\n      }\n\n      var a = document.createElement(\"a\");\n\n      if (a.download != null) {\n        /*:: if(document.body == null) throw new Error(\"unreachable\"); */\n        a.download = fname;\n        a.href = url;\n        document.body.appendChild(a);\n        a.click();\n        /*:: if(document.body == null) throw new Error(\"unreachable\"); */\n\n        document.body.removeChild(a);\n        if (URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function () {\n          URL.revokeObjectURL(url);\n        }, 60000);\n        return url;\n      }\n    }\n  } // $FlowIgnore\n\n\n  if (typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try {\n    // extendscript\n    // $FlowIgnore\n    var out = File(fname);\n    out.open(\"w\");\n    out.encoding = \"binary\";\n    if (Array.isArray(payload)) payload = a2s(payload);\n    out.write(payload);\n    out.close();\n    return payload;\n  } catch (e) {\n    if (!e.message || !e.message.match(/onstruct/)) throw e;\n  }\n  throw new Error(\"cannot save file \" + fname);\n}\n/* read binary data from file */\n\n\nfunction read_binary(path\n/*:string*/\n) {\n  if (typeof _fs !== 'undefined') return _fs.readFileSync(path);\n  if (typeof Deno !== 'undefined') return Deno.readFileSync(path); // $FlowIgnore\n\n  if (typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try {\n    // extendscript\n    // $FlowIgnore\n    var infile = File(path);\n    infile.open(\"r\");\n    infile.encoding = \"binary\";\n    var data = infile.read();\n    infile.close();\n    return data;\n  } catch (e) {\n    if (!e.message || !e.message.match(/onstruct/)) throw e;\n  }\n  throw new Error(\"Cannot access file \" + path);\n}\n\nfunction keys(o\n/*:any*/\n)\n/*:Array<any>*/\n{\n  var ks = Object.keys(o),\n      o2 = [];\n\n  for (var i = 0; i < ks.length; ++i) {\n    if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);\n  }\n\n  return o2;\n}\n\nfunction evert_key(obj\n/*:any*/\n, key\n/*:string*/\n)\n/*:EvertType*/\n{\n  var o = []\n  /*:any*/\n  ,\n      K = keys(obj);\n\n  for (var i = 0; i !== K.length; ++i) {\n    if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];\n  }\n\n  return o;\n}\n\nfunction evert(obj\n/*:any*/\n)\n/*:EvertType*/\n{\n  var o = []\n  /*:any*/\n  ,\n      K = keys(obj);\n\n  for (var i = 0; i !== K.length; ++i) {\n    o[obj[K[i]]] = K[i];\n  }\n\n  return o;\n}\n\nfunction evert_num(obj\n/*:any*/\n)\n/*:EvertNumType*/\n{\n  var o = []\n  /*:any*/\n  ,\n      K = keys(obj);\n\n  for (var i = 0; i !== K.length; ++i) {\n    o[obj[K[i]]] = parseInt(K[i], 10);\n  }\n\n  return o;\n}\n\nfunction evert_arr(obj\n/*:any*/\n)\n/*:EvertArrType*/\n{\n  var o\n  /*:EvertArrType*/\n  = []\n  /*:any*/\n  ,\n      K = keys(obj);\n\n  for (var i = 0; i !== K.length; ++i) {\n    if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n    o[obj[K[i]]].push(K[i]);\n  }\n\n  return o;\n}\n\nvar basedate = /*#__PURE__*/new Date(1899, 11, 30, 0, 0, 0); // 2209161600000\n\nfunction datenum(v\n/*:Date*/\n, date1904\n/*:?boolean*/\n)\n/*:number*/\n{\n  var epoch = /*#__PURE__*/v.getTime();\n  if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1000;\n  var dnthresh = /*#__PURE__*/basedate.getTime() + ( /*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;\n  return (epoch - dnthresh) / (24 * 60 * 60 * 1000);\n}\n\nvar refdate = /*#__PURE__*/new Date();\nvar dnthresh = /*#__PURE__*/basedate.getTime() + ( /*#__PURE__*/refdate.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;\nvar refoffset = /*#__PURE__*/refdate.getTimezoneOffset();\n\nfunction numdate(v\n/*:number*/\n)\n/*:Date*/\n{\n  var out = new Date();\n  out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);\n\n  if (out.getTimezoneOffset() !== refoffset) {\n    out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);\n  }\n\n  return out;\n}\n/* ISO 8601 Duration */\n\n\nfunction parse_isodur(s) {\n  var sec = 0,\n      mt = 0,\n      time = false;\n  var m = s.match(/P([0-9\\.]+Y)?([0-9\\.]+M)?([0-9\\.]+D)?T([0-9\\.]+H)?([0-9\\.]+M)?([0-9\\.]+S)?/);\n  if (!m) throw new Error(\"|\" + s + \"| is not an ISO8601 Duration\");\n\n  for (var i = 1; i != m.length; ++i) {\n    if (!m[i]) continue;\n    mt = 1;\n    if (i > 3) time = true;\n\n    switch (m[i].slice(m[i].length - 1)) {\n      case 'Y':\n        throw new Error(\"Unsupported ISO Duration Field: \" + m[i].slice(m[i].length - 1));\n\n      case 'D':\n        mt *= 24;\n\n      /* falls through */\n\n      case 'H':\n        mt *= 60;\n\n      /* falls through */\n\n      case 'M':\n        if (!time) throw new Error(\"Unsupported ISO Duration Field: M\");else mt *= 60;\n\n      /* falls through */\n\n      case 'S':\n        break;\n    }\n\n    sec += mt * parseInt(m[i], 10);\n  }\n\n  return sec;\n}\n\nvar good_pd_date_1 = /*#__PURE__*/new Date('2017-02-19T19:06:09.000Z');\nvar good_pd_date = /*#__PURE__*/isNaN( /*#__PURE__*/good_pd_date_1.getFullYear()) ? /*#__PURE__*/new Date('2/19/17') : good_pd_date_1;\nvar good_pd = /*#__PURE__*/good_pd_date.getFullYear() == 2017;\n/* parses a date as a local date */\n\nfunction parseDate(str\n/*:string|Date*/\n, fixdate\n/*:?number*/\n)\n/*:Date*/\n{\n  var d = new Date(str);\n\n  if (good_pd) {\n    /*:: if(fixdate == null) fixdate = 0; */\n    if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);\n    return d;\n  }\n\n  if (str instanceof Date) return str;\n\n  if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {\n    var s = d.getFullYear();\n    if (str.indexOf(\"\" + s) > -1) return d;\n    d.setFullYear(d.getFullYear() + 100);\n    return d;\n  }\n\n  var n = str.match(/\\d+/g) || [\"2017\", \"2\", \"19\", \"0\", \"0\", \"0\"];\n  var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);\n  if (str.indexOf(\"Z\") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);\n  return out;\n}\n\nfunction cc2str(arr\n/*:Array<number>*/\n, debomit)\n/*:string*/\n{\n  if (has_buf && Buffer.isBuffer(arr)) {\n    if (debomit && buf_utf16le) {\n      // TODO: temporary patch\n      if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString(\"utf16le\"));\n      if (arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString(\"binary\")));\n    }\n\n    return arr.toString(\"binary\");\n  }\n\n  if (typeof TextDecoder !== \"undefined\") try {\n    if (debomit) {\n      if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder(\"utf-16le\").decode(arr.slice(2)));\n      if (arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder(\"utf-16be\").decode(arr.slice(2)));\n    }\n\n    var rev = {\n      \"\\u20AC\": \"\\x80\",\n      \"\\u201A\": \"\\x82\",\n      \"\\u0192\": \"\\x83\",\n      \"\\u201E\": \"\\x84\",\n      \"\\u2026\": \"\\x85\",\n      \"\\u2020\": \"\\x86\",\n      \"\\u2021\": \"\\x87\",\n      \"\\u02C6\": \"\\x88\",\n      \"\\u2030\": \"\\x89\",\n      \"\\u0160\": \"\\x8a\",\n      \"\\u2039\": \"\\x8b\",\n      \"\\u0152\": \"\\x8c\",\n      \"\\u017D\": \"\\x8e\",\n      \"\\u2018\": \"\\x91\",\n      \"\\u2019\": \"\\x92\",\n      \"\\u201C\": \"\\x93\",\n      \"\\u201D\": \"\\x94\",\n      \"\\u2022\": \"\\x95\",\n      \"\\u2013\": \"\\x96\",\n      \"\\u2014\": \"\\x97\",\n      \"\\u02DC\": \"\\x98\",\n      \"\\u2122\": \"\\x99\",\n      \"\\u0161\": \"\\x9a\",\n      \"\\u203A\": \"\\x9b\",\n      \"\\u0153\": \"\\x9c\",\n      \"\\u017E\": \"\\x9e\",\n      \"\\u0178\": \"\\x9f\"\n    };\n    if (Array.isArray(arr)) arr = new Uint8Array(arr);\n    return new TextDecoder(\"latin1\").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function (c) {\n      return rev[c] || c;\n    });\n  } catch (e) {}\n  var o = [];\n\n  for (var i = 0; i != arr.length; ++i) {\n    o.push(String.fromCharCode(arr[i]));\n  }\n\n  return o.join(\"\");\n}\n\nfunction dup(o\n/*:any*/\n)\n/*:any*/\n{\n  if (typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));\n  if (typeof o != 'object' || o == null) return o;\n  if (o instanceof Date) return new Date(o.getTime());\n  var out = {};\n\n  for (var k in o) {\n    if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);\n  }\n\n  return out;\n}\n\nfunction fill(c\n/*:string*/\n, l\n/*:number*/\n)\n/*:string*/\n{\n  var o = \"\";\n\n  while (o.length < l) {\n    o += c;\n  }\n\n  return o;\n}\n/* TODO: stress test */\n\n\nfunction fuzzynum(s\n/*:string*/\n)\n/*:number*/\n{\n  var v\n  /*:number*/\n  = Number(s);\n  if (!isNaN(v)) return isFinite(v) ? v : NaN;\n  if (!/\\d/.test(s)) return v;\n  var wt = 1;\n  var ss = s.replace(/([\\d]),([\\d])/g, \"$1$2\").replace(/[$]/g, \"\").replace(/[%]/g, function () {\n    wt *= 100;\n    return \"\";\n  });\n  if (!isNaN(v = Number(ss))) return v / wt;\n  ss = ss.replace(/[(](.*)[)]/, function ($$, $1) {\n    wt = -wt;\n    return $1;\n  });\n  if (!isNaN(v = Number(ss))) return v / wt;\n  return v;\n}\n/* NOTE: Chrome rejects bare times like 1:23 PM */\n\n\nvar FDRE1 = /^(0?\\d|1[0-2])(?:|:([0-5]?\\d)(?:|(\\.\\d+)(?:|:([0-5]?\\d))|:([0-5]?\\d)(|\\.\\d+)))\\s+([ap])m?$/;\n\nfunction fuzzytime1(M)\n/*:Date*/\n{\n  /* TODO: 1904 adjustment, keep in sync with base date */\n  if (!M[2]) return new Date(1899, 11, 30, +M[1] % 12 + (M[7] == \"p\" ? 12 : 0), 0, 0, 0);\n\n  if (M[3]) {\n    if (M[4]) return new Date(1899, 11, 30, +M[1] % 12 + (M[7] == \"p\" ? 12 : 0), +M[2], +M[4], parseFloat(M[3]) * 1000);else return new Date(1899, 11, 30, M[7] == \"p\" ? 12 : 0, +M[1], +M[2], parseFloat(M[3]) * 1000);\n  } else if (M[5]) return new Date(1899, 11, 30, +M[1] % 12 + (M[7] == \"p\" ? 12 : 0), +M[2], +M[5], M[6] ? parseFloat(M[6]) * 1000 : 0);else return new Date(1899, 11, 30, +M[1] % 12 + (M[7] == \"p\" ? 12 : 0), +M[2], 0, 0);\n}\n\nvar lower_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n\nfunction fuzzydate(s\n/*:string*/\n)\n/*:Date*/\n{\n  var lower = s.toLowerCase();\n  var lnos = lower.replace(/\\s+/g, \" \").trim();\n  var M = lnos.match(FDRE1);\n  if (M) return fuzzytime1(M);\n  var o = new Date(s),\n      n = new Date(NaN);\n  var y = o.getYear(),\n      m = o.getMonth(),\n      d = o.getDate();\n  if (isNaN(d)) return n;\n\n  if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {\n    lower = lower.replace(/[^a-z]/g, \"\").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, \"\");\n    if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;\n  } else if (lower.replace(/[ap]m?/, \"\").match(/[a-z]/)) return n;\n\n  if (y < 0 || y > 8099 || s.match(/[^-0-9:,\\/\\\\]/)) return n;\n  return o;\n}\n\nvar split_regex = /*#__PURE__*/function () {\n  var safe_split_regex = \"abacaba\".split(/(:?b)/i).length == 5;\n  return function split_regex(str\n  /*:string*/\n  , re, def\n  /*:string*/\n  )\n  /*:Array<string>*/\n  {\n    if (safe_split_regex || typeof re == \"string\") return str.split(re);\n    var p = str.split(re),\n        o = [p[0]];\n\n    for (var i = 1; i < p.length; ++i) {\n      o.push(def);\n      o.push(p[i]);\n    }\n\n    return o;\n  };\n}();\n\nfunction getdatastr(data)\n/*:?string*/\n{\n  if (!data) return null;\n  if (data.content && data.type) return cc2str(data.content, true);\n  if (data.data) return debom(data.data);\n  if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));\n  if (data.asBinary) return debom(data.asBinary());\n  if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));\n  return null;\n}\n\nfunction getdatabin(data) {\n  if (!data) return null;\n  if (data.data) return char_codes(data.data);\n  if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n\n  if (data._data && data._data.getContent) {\n    var o = data._data.getContent();\n\n    if (typeof o == \"string\") return char_codes(o);\n    return Array.prototype.slice.call(o);\n  }\n\n  if (data.content && data.type) return data.content;\n  return null;\n}\n\nfunction getdata(data) {\n  return data && data.name.slice(-4) === \".bin\" ? getdatabin(data) : getdatastr(data);\n}\n/* Part 2 Section 10.1.2 \"Mapping Content Types\" Names are case-insensitive */\n\n/* OASIS does not comment on filename case sensitivity */\n\n\nfunction safegetzipfile(zip, file\n/*:string*/\n) {\n  var k = zip.FullPaths || keys(zip.files);\n  var f = file.toLowerCase().replace(/[\\/]/g, '\\\\'),\n      g = f.replace(/\\\\/g, '\\/');\n\n  for (var i = 0; i < k.length; ++i) {\n    var n = k[i].replace(/^Root Entry[\\/]/, \"\").toLowerCase();\n    if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];\n  }\n\n  return null;\n}\n\nfunction getzipfile(zip, file\n/*:string*/\n) {\n  var o = safegetzipfile(zip, file);\n  if (o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n  return o;\n}\n\nfunction getzipdata(zip, file\n/*:string*/\n, safe\n/*:?boolean*/\n)\n/*:any*/\n{\n  if (!safe) return getdata(getzipfile(zip, file));\n  if (!file) return null;\n\n  try {\n    return getzipdata(zip, file);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getzipstr(zip, file\n/*:string*/\n, safe\n/*:?boolean*/\n)\n/*:?string*/\n{\n  if (!safe) return getdatastr(getzipfile(zip, file));\n  if (!file) return null;\n\n  try {\n    return getzipstr(zip, file);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getzipbin(zip, file\n/*:string*/\n, safe\n/*:?boolean*/\n)\n/*:any*/\n{\n  if (!safe) return getdatabin(getzipfile(zip, file));\n  if (!file) return null;\n\n  try {\n    return getzipbin(zip, file);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction zipentries(zip) {\n  var k = zip.FullPaths || keys(zip.files),\n      o = [];\n\n  for (var i = 0; i < k.length; ++i) {\n    if (k[i].slice(-1) != '/') o.push(k[i].replace(/^Root Entry[\\/]/, \"\"));\n  }\n\n  return o.sort();\n}\n\nfunction zip_add_file(zip, path, content) {\n  if (zip.FullPaths) {\n    if (typeof content == \"string\") {\n      var res;\n      if (has_buf) res = Buffer_from(content);\n      /* TODO: investigate performance in Edge 13 */\n      //else if(typeof TextEncoder !== \"undefined\") res = new TextEncoder().encode(content);\n      else res = utf8decode(content);\n      return CFB.utils.cfb_add(zip, path, res);\n    }\n\n    CFB.utils.cfb_add(zip, path, content);\n  } else zip.file(path, content);\n}\n\nfunction zip_new() {\n  return CFB.utils.cfb_new();\n}\n\nfunction zip_read(d, o) {\n  switch (o.type) {\n    case \"base64\":\n      return CFB.read(d, {\n        type: \"base64\"\n      });\n\n    case \"binary\":\n      return CFB.read(d, {\n        type: \"binary\"\n      });\n\n    case \"buffer\":\n    case \"array\":\n      return CFB.read(d, {\n        type: \"buffer\"\n      });\n  }\n\n  throw new Error(\"Unrecognized type \" + o.type);\n}\n\nfunction resolve_path(path\n/*:string*/\n, base\n/*:string*/\n)\n/*:string*/\n{\n  if (path.charAt(0) == \"/\") return path.slice(1);\n  var result = base.split('/');\n  if (base.slice(-1) != \"/\") result.pop(); // folder path\n\n  var target = path.split('/');\n\n  while (target.length !== 0) {\n    var step = target.shift();\n    if (step === '..') result.pop();else if (step !== '.') result.push(step);\n  }\n\n  return result.join('/');\n}\n\nvar XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\nvar attregexg = /([^\"\\s?>\\/]+)\\s*=\\s*((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:')|([^'\">\\s]+))/g;\nvar tagregex1 = /<[\\/\\?]?[a-zA-Z0-9:_-]+(?:\\s+[^\"\\s?>\\/]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^'\">\\s=]+))*\\s*[\\/\\?]?>/mg,\n    tagregex2 = /<[^>]*>/g;\nvar tagregex = /*#__PURE__*/XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;\nvar nsregex = /<\\w*:/,\n    nsregex2 = /<(\\/?)\\w+:/;\n\nfunction parsexmltag(tag\n/*:string*/\n, skip_root\n/*:?boolean*/\n, skip_LC\n/*:?boolean*/\n)\n/*:any*/\n{\n  var z = {}\n  /*:any*/\n  ;\n  var eq = 0,\n      c = 0;\n\n  for (; eq !== tag.length; ++eq) {\n    if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n  }\n\n  if (!skip_root) z[0] = tag.slice(0, eq);\n  if (eq === tag.length) return z;\n  var m = tag.match(attregexg),\n      j = 0,\n      v = \"\",\n      i = 0,\n      q = \"\",\n      cc = \"\",\n      quot = 1;\n  if (m) for (i = 0; i != m.length; ++i) {\n    cc = m[i];\n\n    for (c = 0; c != cc.length; ++c) {\n      if (cc.charCodeAt(c) === 61) break;\n    }\n\n    q = cc.slice(0, c).trim();\n\n    while (cc.charCodeAt(c + 1) == 32) {\n      ++c;\n    }\n\n    quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;\n    v = cc.slice(c + 1 + quot, cc.length - quot);\n\n    for (j = 0; j != q.length; ++j) {\n      if (q.charCodeAt(j) === 58) break;\n    }\n\n    if (j === q.length) {\n      if (q.indexOf(\"_\") > 0) q = q.slice(0, q.indexOf(\"_\")); // from ods\n\n      z[q] = v;\n      if (!skip_LC) z[q.toLowerCase()] = v;\n    } else {\n      var k = (j === 5 && q.slice(0, 5) === \"xmlns\" ? \"xmlns\" : \"\") + q.slice(j + 1);\n      if (z[k] && q.slice(j - 3, j) == \"ext\") continue; // from ods\n\n      z[k] = v;\n      if (!skip_LC) z[k.toLowerCase()] = v;\n    }\n  }\n  return z;\n}\n\nfunction strip_ns(x\n/*:string*/\n)\n/*:string*/\n{\n  return x.replace(nsregex2, \"<$1\");\n}\n\nvar encodings = {\n  '&quot;': '\"',\n  '&apos;': \"'\",\n  '&gt;': '>',\n  '&lt;': '<',\n  '&amp;': '&'\n};\nvar rencoding = /*#__PURE__*/evert(encodings); //var rencstr = \"&<>'\\\"\".split(\"\");\n// TODO: CP remap (need to read file version to determine OS)\n\nvar unescapexml\n/*:StringConv*/\n= /*#__PURE__*/function () {\n  /* 22.4.2.4 bstr (Basic String) */\n  var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/ig,\n      coderegex = /_x([\\da-fA-F]{4})_/ig;\n\n  function raw_unescapexml(text\n  /*:string*/\n  )\n  /*:string*/\n  {\n    var s = text + '',\n        i = s.indexOf(\"<![CDATA[\");\n    if (i == -1) return s.replace(encregex, function ($$, $1) {\n      return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf(\"x\") > -1 ? 16 : 10)) || $$;\n    }).replace(coderegex, function (m, c) {\n      return String.fromCharCode(parseInt(c, 16));\n    });\n    var j = s.indexOf(\"]]>\");\n    return raw_unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + raw_unescapexml(s.slice(j + 3));\n  }\n\n  return function unescapexml(text\n  /*:string*/\n  , xlsx\n  /*:boolean*/\n  ) {\n    var out = raw_unescapexml(text);\n    return xlsx ? out.replace(/\\r\\n/g, \"\\n\") : out;\n  };\n}();\n\nvar decregex = /[&<>'\"]/g,\n    charegex = /[\\u0000-\\u0008\\u000b-\\u001f\\uFFFE-\\uFFFF]/g;\n\nfunction escapexml(text\n/*:string*/\n)\n/*:string*/\n{\n  var s = text + '';\n  return s.replace(decregex, function (y) {\n    return rencoding[y];\n  }).replace(charegex, function (s) {\n    return \"_x\" + (\"000\" + s.charCodeAt(0).toString(16)).slice(-4) + \"_\";\n  });\n}\n\nfunction escapexmltag(text\n/*:string*/\n)\n/*:string*/\n{\n  return escapexml(text).replace(/ /g, \"_x0020_\");\n}\n\nvar htmlcharegex = /[\\u0000-\\u001f]/g;\n\nfunction escapehtml(text\n/*:string*/\n)\n/*:string*/\n{\n  var s = text + '';\n  return s.replace(decregex, function (y) {\n    return rencoding[y];\n  }).replace(/\\n/g, \"<br/>\").replace(htmlcharegex, function (s) {\n    return \"&#x\" + (\"000\" + s.charCodeAt(0).toString(16)).slice(-4) + \";\";\n  });\n}\n\nfunction escapexlml(text\n/*:string*/\n)\n/*:string*/\n{\n  var s = text + '';\n  return s.replace(decregex, function (y) {\n    return rencoding[y];\n  }).replace(htmlcharegex, function (s) {\n    return \"&#x\" + s.charCodeAt(0).toString(16).toUpperCase() + \";\";\n  });\n}\n/* TODO: handle codepages */\n\n\nvar xlml_fixstr\n/*:StringConv*/\n= /*#__PURE__*/function () {\n  var entregex = /&#(\\d+);/g;\n\n  function entrepl($$\n  /*:string*/\n  , $1\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return String.fromCharCode(parseInt($1, 10));\n  }\n\n  return function xlml_fixstr(str\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return str.replace(entregex, entrepl);\n  };\n}();\n\nfunction xlml_unfixstr(str\n/*:string*/\n)\n/*:string*/\n{\n  return str.replace(/(\\r\\n|[\\r\\n])/g, \"\\&#10;\");\n}\n/* note: xsd:boolean valid values: true / 1 / false / 0 */\n\n\nfunction parsexmlbool(value\n/*:any*/\n)\n/*:boolean*/\n{\n  switch (value) {\n    case 1:\n    case true:\n    case '1':\n    case 'true':\n      return true;\n\n    case 0:\n    case false:\n    case '0':\n    case 'false':\n      return false;\n    //default: throw new Error(\"Invalid xsd:boolean \" + value);\n  }\n\n  return false;\n}\n\nfunction utf8reada(orig\n/*:string*/\n)\n/*:string*/\n{\n  var out = \"\",\n      i = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      w = 0;\n\n  while (i < orig.length) {\n    c = orig.charCodeAt(i++);\n\n    if (c < 128) {\n      out += String.fromCharCode(c);\n      continue;\n    }\n\n    d = orig.charCodeAt(i++);\n\n    if (c > 191 && c < 224) {\n      f = (c & 31) << 6;\n      f |= d & 63;\n      out += String.fromCharCode(f);\n      continue;\n    }\n\n    e = orig.charCodeAt(i++);\n\n    if (c < 240) {\n      out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);\n      continue;\n    }\n\n    f = orig.charCodeAt(i++);\n    w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;\n    out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));\n    out += String.fromCharCode(0xDC00 + (w & 1023));\n  }\n\n  return out;\n}\n\nfunction utf8readb(data) {\n  var out = new_raw_buf(2 * data.length),\n      w,\n      i,\n      j = 1,\n      k = 0,\n      ww = 0,\n      c;\n\n  for (i = 0; i < data.length; i += j) {\n    j = 1;\n    if ((c = data.charCodeAt(i)) < 128) w = c;else if (c < 224) {\n      w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);\n      j = 2;\n    } else if (c < 240) {\n      w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);\n      j = 3;\n    } else {\n      j = 4;\n      w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);\n      w -= 65536;\n      ww = 0xD800 + (w >>> 10 & 1023);\n      w = 0xDC00 + (w & 1023);\n    }\n\n    if (ww !== 0) {\n      out[k++] = ww & 255;\n      out[k++] = ww >>> 8;\n      ww = 0;\n    }\n\n    out[k++] = w % 256;\n    out[k++] = w >>> 8;\n  }\n\n  return out.slice(0, k).toString('ucs2');\n}\n\nfunction utf8readc(data) {\n  return Buffer_from(data, 'binary').toString('utf8');\n}\n\nvar utf8corpus = \"foo bar baz\\xE2\\x98\\x83\\xF0\\x9F\\x8D\\xA3\";\nvar utf8read = has_buf && ( /*#__PURE__*/utf8readc(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/utf8readb(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readb) || utf8reada;\nvar utf8write\n/*:StringConv*/\n= has_buf ? function (data) {\n  return Buffer_from(data, 'utf8').toString(\"binary\");\n} : function (orig\n/*:string*/\n)\n/*:string*/\n{\n  var out\n  /*:Array<string>*/\n  = [],\n      i = 0,\n      c = 0,\n      d = 0;\n\n  while (i < orig.length) {\n    c = orig.charCodeAt(i++);\n\n    switch (true) {\n      case c < 128:\n        out.push(String.fromCharCode(c));\n        break;\n\n      case c < 2048:\n        out.push(String.fromCharCode(192 + (c >> 6)));\n        out.push(String.fromCharCode(128 + (c & 63)));\n        break;\n\n      case c >= 55296 && c < 57344:\n        c -= 55296;\n        d = orig.charCodeAt(i++) - 56320 + (c << 10);\n        out.push(String.fromCharCode(240 + (d >> 18 & 7)));\n        out.push(String.fromCharCode(144 + (d >> 12 & 63)));\n        out.push(String.fromCharCode(128 + (d >> 6 & 63)));\n        out.push(String.fromCharCode(128 + (d & 63)));\n        break;\n\n      default:\n        out.push(String.fromCharCode(224 + (c >> 12)));\n        out.push(String.fromCharCode(128 + (c >> 6 & 63)));\n        out.push(String.fromCharCode(128 + (c & 63)));\n    }\n  }\n\n  return out.join(\"\");\n}; // matches <foo>...</foo> extracts content\n\nvar matchtag = /*#__PURE__*/function () {\n  var mtcache\n  /*:{[k:string]:RegExp}*/\n  = {}\n  /*:any*/\n  ;\n  return function matchtag(f\n  /*:string*/\n  , g\n  /*:?string*/\n  )\n  /*:RegExp*/\n  {\n    var t = f + \"|\" + (g || \"\");\n    if (mtcache[t]) return mtcache[t];\n    return mtcache[t] = new RegExp('<(?:\\\\w+:)?' + f + '(?: xml:space=\"preserve\")?(?:[^>]*)>([\\\\s\\\\S]*?)</(?:\\\\w+:)?' + f + '>', g || \"\"\n    /*:any*/\n    );\n  };\n}();\n\nvar htmldecode\n/*:{(s:string):string}*/\n= /*#__PURE__*/function () {\n  var entities\n  /*:Array<[RegExp, string]>*/\n  = [['nbsp', ' '], ['middot', '·'], ['quot', '\"'], ['apos', \"'\"], ['gt', '>'], ['lt', '<'], ['amp', '&']].map(function (x\n  /*:[string, string]*/\n  ) {\n    return [new RegExp('&' + x[0] + ';', \"ig\"), x[1]];\n  });\n  return function htmldecode(str\n  /*:string*/\n  )\n  /*:string*/\n  {\n    var o = str // Remove new lines and spaces from start of content\n    .replace(/^[\\t\\n\\r ]+/, \"\") // Remove new lines and spaces from end of content\n    .replace(/[\\t\\n\\r ]+$/, \"\") // Added line which removes any white space characters after and before html tags\n    .replace(/>\\s+/g, \">\").replace(/\\s+</g, \"<\") // Replace remaining new lines and spaces with space\n    .replace(/[\\t\\n\\r ]+/g, \" \") // Replace <br> tags with new lines\n    .replace(/<\\s*[bB][rR]\\s*\\/?>/g, \"\\n\") // Strip HTML elements\n    .replace(/<[^>]*>/g, \"\");\n\n    for (var i = 0; i < entities.length; ++i) {\n      o = o.replace(entities[i][0], entities[i][1]);\n    }\n\n    return o;\n  };\n}();\n\nvar vtregex = /*#__PURE__*/function () {\n  var vt_cache = {};\n  return function vt_regex(bt) {\n    if (vt_cache[bt] !== undefined) return vt_cache[bt];\n    return vt_cache[bt] = new RegExp(\"<(?:vt:)?\" + bt + \">([\\\\s\\\\S]*?)</(?:vt:)?\" + bt + \">\", 'g');\n  };\n}();\n\nvar vtvregex = /<\\/?(?:vt:)?variant>/g,\n    vtmregex = /<(?:vt:)([^>]*)>([\\s\\S]*)</;\n\nfunction parseVector(data\n/*:string*/\n, opts)\n/*:Array<{v:string,t:string}>*/\n{\n  var h = parsexmltag(data);\n  var matches\n  /*:Array<string>*/\n  = data.match(vtregex(h.baseType)) || [];\n  var res\n  /*:Array<any>*/\n  = [];\n\n  if (matches.length != h.size) {\n    if (opts.WTF) throw new Error(\"unexpected vector length \" + matches.length + \" != \" + h.size);\n    return res;\n  }\n\n  matches.forEach(function (x\n  /*:string*/\n  ) {\n    var v = x.replace(vtvregex, \"\").match(vtmregex);\n    if (v) res.push({\n      v: utf8read(v[2]),\n      t: v[1]\n    });\n  });\n  return res;\n}\n\nvar wtregex = /(^\\s|\\s$|\\n)/;\n\nfunction writetag(f\n/*:string*/\n, g\n/*:string*/\n)\n/*:string*/\n{\n  return '<' + f + (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f + '>';\n}\n\nfunction wxt_helper(h)\n/*:string*/\n{\n  return keys(h).map(function (k) {\n    return \" \" + k + '=\"' + h[k] + '\"';\n  }).join(\"\");\n}\n\nfunction writextag(f\n/*:string*/\n, g\n/*:?string*/\n, h) {\n  return '<' + f + (h != null ? wxt_helper(h) : \"\") + (g != null ? (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f : \"/\") + '>';\n}\n\nfunction write_w3cdtf(d\n/*:Date*/\n, t\n/*:?boolean*/\n)\n/*:string*/\n{\n  try {\n    return d.toISOString().replace(/\\.\\d*/, \"\");\n  } catch (e) {\n    if (t) throw e;\n  }\n\n  return \"\";\n}\n\nfunction write_vt(s, xlsx\n/*:?boolean*/\n)\n/*:string*/\n{\n  switch (typeof s) {\n    case 'string':\n      var o = writextag('vt:lpwstr', escapexml(s));\n      if (xlsx) o = o.replace(/&quot;/g, \"_x0022_\");\n      return o;\n\n    case 'number':\n      return writextag((s | 0) == s ? 'vt:i4' : 'vt:r8', escapexml(String(s)));\n\n    case 'boolean':\n      return writextag('vt:bool', s ? 'true' : 'false');\n  }\n\n  if (s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));\n  throw new Error(\"Unable to serialize \" + s);\n}\n\nfunction xlml_normalize(d)\n/*:string*/\n{\n  if (has_buf &&\n  /*::typeof Buffer !== \"undefined\" && d != null && d instanceof Buffer &&*/\n  Buffer.isBuffer(d)) return d.toString('utf8');\n  if (typeof d === 'string') return d;\n  /* duktape */\n\n  if (typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));\n  throw new Error(\"Bad input format: expected Buffer or string\");\n}\n/* UOS uses CJK in tags */\n\n\nvar xlmlregex = /<(\\/?)([^\\s?><!\\/:]*:|)([^\\s?<>:\\/]+)(?:[\\s?:\\/](?:[^>=]|=\"[^\"]*?\")*)?>/mg; //var xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\n\nvar XMLNS = {\n  CORE_PROPS: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n  CUST_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\",\n  EXT_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\",\n  CT: 'http://schemas.openxmlformats.org/package/2006/content-types',\n  RELS: 'http://schemas.openxmlformats.org/package/2006/relationships',\n  TCMNT: 'http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments',\n  'dc': 'http://purl.org/dc/elements/1.1/',\n  'dcterms': 'http://purl.org/dc/terms/',\n  'dcmitype': 'http://purl.org/dc/dcmitype/',\n  'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',\n  'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',\n  'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n  'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n  'xsd': 'http://www.w3.org/2001/XMLSchema'\n}\n/*:any*/\n;\nvar XMLNS_main = ['http://schemas.openxmlformats.org/spreadsheetml/2006/main', 'http://purl.oclc.org/ooxml/spreadsheetml/main', 'http://schemas.microsoft.com/office/excel/2006/main', 'http://schemas.microsoft.com/office/excel/2006/2'];\nvar XLMLNS = {\n  'o': 'urn:schemas-microsoft-com:office:office',\n  'x': 'urn:schemas-microsoft-com:office:excel',\n  'ss': 'urn:schemas-microsoft-com:office:spreadsheet',\n  'dt': 'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',\n  'mv': 'http://macVmlSchemaUri',\n  'v': 'urn:schemas-microsoft-com:vml',\n  'html': 'http://www.w3.org/TR/REC-html40'\n}\n/*:any*/\n;\n\nfunction read_double_le(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  var s = 1 - 2 * (b[idx + 7] >>> 7);\n  var e = ((b[idx + 7] & 0x7f) << 4) + (b[idx + 6] >>> 4 & 0x0f);\n  var m = b[idx + 6] & 0x0f;\n\n  for (var i = 5; i >= 0; --i) {\n    m = m * 256 + b[idx + i];\n  }\n\n  if (e == 0x7ff) return m == 0 ? s * Infinity : NaN;\n  if (e == 0) e = -1022;else {\n    e -= 1023;\n    m += Math.pow(2, 52);\n  }\n  return s * Math.pow(2, e - 52) * m;\n}\n\nfunction write_double_le(b\n/*:RawBytes|CFBlob*/\n, v\n/*:number*/\n, idx\n/*:number*/\n) {\n  var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7,\n      e = 0,\n      m = 0;\n  var av = bs ? -v : v;\n\n  if (!isFinite(av)) {\n    e = 0x7ff;\n    m = isNaN(v) ? 0x6969 : 0;\n  } else if (av == 0) e = m = 0;else {\n    e = Math.floor(Math.log(av) / Math.LN2);\n    m = av * Math.pow(2, 52 - e);\n\n    if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {\n      e = -1022;\n    } else {\n      m -= Math.pow(2, 52);\n      e += 1023;\n    }\n  }\n\n  for (var i = 0; i <= 5; ++i, m /= 256) {\n    b[idx + i] = m & 0xff;\n  }\n\n  b[idx + 6] = (e & 0x0f) << 4 | m & 0xf;\n  b[idx + 7] = e >> 4 | bs;\n}\n\nvar ___toBuffer = function ___toBuffer(bufs\n/*:Array<Array<RawBytes> >*/\n)\n/*:RawBytes*/\n{\n  var x = [],\n      w = 10240;\n\n  for (var i = 0; i < bufs[0].length; ++i) {\n    if (bufs[0][i]) for (var j = 0, L = bufs[0][i].length; j < L; j += w) {\n      x.push.apply(x, bufs[0][i].slice(j, j + w));\n    }\n  }\n\n  return x;\n};\n\nvar __toBuffer = has_buf ? function (bufs) {\n  return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function (x) {\n    return Buffer.isBuffer(x) ? x : Buffer_from(x);\n  })) : ___toBuffer(bufs);\n} : ___toBuffer;\n\nvar ___utf16le = function ___utf16le(b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, e\n/*:number*/\n)\n/*:string*/\n{\n  var ss\n  /*:Array<string>*/\n  = [];\n\n  for (var i = s; i < e; i += 2) {\n    ss.push(String.fromCharCode(__readUInt16LE(b, i)));\n  }\n\n  return ss.join(\"\").replace(chr0, '');\n};\n\nvar __utf16le = has_buf ? function (b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, e\n/*:number*/\n)\n/*:string*/\n{\n  if (!Buffer.isBuffer(b)\n  /*:: || !(b instanceof Buffer)*/\n  || !buf_utf16le) return ___utf16le(b, s, e);\n  return b.toString('utf16le', s, e).replace(chr0, '')\n  /*.replace(chr1,'!')*/\n  ;\n} : ___utf16le;\n\nvar ___hexlify = function ___hexlify(b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, l\n/*:number*/\n)\n/*:string*/\n{\n  var ss\n  /*:Array<string>*/\n  = [];\n\n  for (var i = s; i < s + l; ++i) {\n    ss.push((\"0\" + b[i].toString(16)).slice(-2));\n  }\n\n  return ss.join(\"\");\n};\n\nvar __hexlify = has_buf ? function (b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, l\n/*:number*/\n)\n/*:string*/\n{\n  return Buffer.isBuffer(b)\n  /*:: && b instanceof Buffer*/\n  ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);\n} : ___hexlify;\n\nvar ___utf8 = function ___utf8(b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, e\n/*:number*/\n) {\n  var ss = [];\n\n  for (var i = s; i < e; i++) {\n    ss.push(String.fromCharCode(__readUInt8(b, i)));\n  }\n\n  return ss.join(\"\");\n};\n\nvar __utf8 = has_buf ? function utf8_b(b\n/*:RawBytes|CFBlob*/\n, s\n/*:number*/\n, e\n/*:number*/\n) {\n  return Buffer.isBuffer(b)\n  /*:: && (b instanceof Buffer)*/\n  ? b.toString('utf8', s, e) : ___utf8(b, s, e);\n} : ___utf8;\n\nvar ___lpstr = function ___lpstr(b\n/*:RawBytes|CFBlob*/\n, i\n/*:number*/\n) {\n  var len = __readUInt32LE(b, i);\n\n  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\n\nvar __lpstr = ___lpstr;\n\nvar ___cpstr = function ___cpstr(b\n/*:RawBytes|CFBlob*/\n, i\n/*:number*/\n) {\n  var len = __readUInt32LE(b, i);\n\n  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\n\nvar __cpstr = ___cpstr;\n\nvar ___lpwstr = function ___lpwstr(b\n/*:RawBytes|CFBlob*/\n, i\n/*:number*/\n) {\n  var len = 2 * __readUInt32LE(b, i);\n\n  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\n\nvar __lpwstr = ___lpwstr;\n\nvar ___lpp4 = function lpp4_(b\n/*:RawBytes|CFBlob*/\n, i\n/*:number*/\n) {\n  var len = __readUInt32LE(b, i);\n\n  return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : \"\";\n};\n\nvar __lpp4 = ___lpp4;\n\nvar ___8lpp4 = function ___8lpp4(b\n/*:RawBytes|CFBlob*/\n, i\n/*:number*/\n) {\n  var len = __readUInt32LE(b, i);\n\n  return len > 0 ? __utf8(b, i + 4, i + 4 + len) : \"\";\n};\n\nvar __8lpp4 = ___8lpp4;\n\nvar ___double = function ___double(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n) {\n  return read_double_le(b, idx);\n};\n\nvar __double = ___double;\n\nvar is_buf = function is_buf_a(a) {\n  return Array.isArray(a) || typeof Uint8Array !== \"undefined\" && a instanceof Uint8Array;\n};\n\nif (has_buf\n/*:: && typeof Buffer !== 'undefined'*/\n) {\n  __lpstr = function lpstr_b(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (!Buffer.isBuffer(b)\n    /*:: || !(b instanceof Buffer)*/\n    ) return ___lpstr(b, i);\n    var len = b.readUInt32LE(i);\n    return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : \"\";\n  };\n\n  __cpstr = function cpstr_b(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (!Buffer.isBuffer(b)\n    /*:: || !(b instanceof Buffer)*/\n    ) return ___cpstr(b, i);\n    var len = b.readUInt32LE(i);\n    return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : \"\";\n  };\n\n  __lpwstr = function lpwstr_b(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (!Buffer.isBuffer(b)\n    /*:: || !(b instanceof Buffer)*/\n    || !buf_utf16le) return ___lpwstr(b, i);\n    var len = 2 * b.readUInt32LE(i);\n    return b.toString('utf16le', i + 4, i + 4 + len - 1);\n  };\n\n  __lpp4 = function lpp4_b(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (!Buffer.isBuffer(b)\n    /*:: || !(b instanceof Buffer)*/\n    || !buf_utf16le) return ___lpp4(b, i);\n    var len = b.readUInt32LE(i);\n    return b.toString('utf16le', i + 4, i + 4 + len);\n  };\n\n  __8lpp4 = function lpp4_8b(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (!Buffer.isBuffer(b)\n    /*:: || !(b instanceof Buffer)*/\n    ) return ___8lpp4(b, i);\n    var len = b.readUInt32LE(i);\n    return b.toString('utf8', i + 4, i + 4 + len);\n  };\n\n  __double = function double_(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    if (Buffer.isBuffer(b)\n    /*::&& b instanceof Buffer*/\n    ) return b.readDoubleLE(i);\n    return ___double(b, i);\n  };\n\n  is_buf = function is_buf_b(a) {\n    return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== \"undefined\" && a instanceof Uint8Array;\n  };\n}\n/* from js-xls */\n\n\nfunction cpdoit() {\n  __utf16le = function __utf16le(b\n  /*:RawBytes|CFBlob*/\n  , s\n  /*:number*/\n  , e\n  /*:number*/\n  ) {\n    return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, '');\n  };\n\n  __utf8 = function __utf8(b\n  /*:RawBytes|CFBlob*/\n  , s\n  /*:number*/\n  , e\n  /*:number*/\n  ) {\n    return $cptable.utils.decode(65001, b.slice(s, e));\n  };\n\n  __lpstr = function __lpstr(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    var len = __readUInt32LE(b, i);\n\n    return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n  };\n\n  __cpstr = function __cpstr(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    var len = __readUInt32LE(b, i);\n\n    return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n  };\n\n  __lpwstr = function __lpwstr(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    var len = 2 * __readUInt32LE(b, i);\n\n    return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n  };\n\n  __lpp4 = function __lpp4(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    var len = __readUInt32LE(b, i);\n\n    return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : \"\";\n  };\n\n  __8lpp4 = function __8lpp4(b\n  /*:RawBytes|CFBlob*/\n  , i\n  /*:number*/\n  ) {\n    var len = __readUInt32LE(b, i);\n\n    return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : \"\";\n  };\n}\n\nif (typeof $cptable !== 'undefined') cpdoit();\n\nvar __readUInt8 = function __readUInt8(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  return b[idx];\n};\n\nvar __readUInt16LE = function __readUInt16LE(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  return b[idx + 1] * (1 << 8) + b[idx];\n};\n\nvar __readInt16LE = function __readInt16LE(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  var u = b[idx + 1] * (1 << 8) + b[idx];\n  return u < 0x8000 ? u : (0xffff - u + 1) * -1;\n};\n\nvar __readUInt32LE = function __readUInt32LE(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\n\nvar __readInt32LE = function __readInt32LE(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];\n};\n\nvar __readInt32BE = function __readInt32BE(b\n/*:RawBytes|CFBlob*/\n, idx\n/*:number*/\n)\n/*:number*/\n{\n  return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];\n};\n\nfunction ReadShift(size\n/*:number*/\n, t\n/*:?string*/\n)\n/*:number|string*/\n{\n  var o = \"\",\n      oI\n  /*:: :number = 0*/\n  ,\n      oR,\n      oo = [],\n      w,\n      vv,\n      i,\n      loc;\n\n  switch (t) {\n    case 'dbcs':\n      loc = this.l;\n      if (has_buf && Buffer.isBuffer(this) && buf_utf16le) o = this.slice(this.l, this.l + 2 * size).toString(\"utf16le\");else for (i = 0; i < size; ++i) {\n        o += String.fromCharCode(__readUInt16LE(this, loc));\n        loc += 2;\n      }\n      size *= 2;\n      break;\n\n    case 'utf8':\n      o = __utf8(this, this.l, this.l + size);\n      break;\n\n    case 'utf16le':\n      size *= 2;\n      o = __utf16le(this, this.l, this.l + size);\n      break;\n\n    case 'wstr':\n      if (typeof $cptable !== 'undefined') o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));else return ReadShift.call(this, size, 'dbcs');\n      size = 2 * size;\n      break;\n\n    /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */\n\n    case 'lpstr-ansi':\n      o = __lpstr(this, this.l);\n      size = 4 + __readUInt32LE(this, this.l);\n      break;\n\n    case 'lpstr-cp':\n      o = __cpstr(this, this.l);\n      size = 4 + __readUInt32LE(this, this.l);\n      break;\n\n    /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */\n\n    case 'lpwstr':\n      o = __lpwstr(this, this.l);\n      size = 4 + 2 * __readUInt32LE(this, this.l);\n      break;\n\n    /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */\n\n    case 'lpp4':\n      size = 4 + __readUInt32LE(this, this.l);\n      o = __lpp4(this, this.l);\n      if (size & 0x02) size += 2;\n      break;\n\n    /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */\n\n    case '8lpp4':\n      size = 4 + __readUInt32LE(this, this.l);\n      o = __8lpp4(this, this.l);\n      if (size & 0x03) size += 4 - (size & 0x03);\n      break;\n\n    case 'cstr':\n      size = 0;\n      o = \"\";\n\n      while ((w = __readUInt8(this, this.l + size++)) !== 0) {\n        oo.push(_getchar(w));\n      }\n\n      o = oo.join(\"\");\n      break;\n\n    case '_wstr':\n      size = 0;\n      o = \"\";\n\n      while ((w = __readUInt16LE(this, this.l + size)) !== 0) {\n        oo.push(_getchar(w));\n        size += 2;\n      }\n\n      size += 2;\n      o = oo.join(\"\");\n      break;\n\n    /* sbcs and dbcs support continue records in the SST way TODO codepages */\n\n    case 'dbcs-cont':\n      o = \"\";\n      loc = this.l;\n\n      for (i = 0; i < size; ++i) {\n        if (this.lens && this.lens.indexOf(loc) !== -1) {\n          w = __readUInt8(this, loc);\n          this.l = loc + 1;\n          vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');\n          return oo.join(\"\") + vv;\n        }\n\n        oo.push(_getchar(__readUInt16LE(this, loc)));\n        loc += 2;\n      }\n\n      o = oo.join(\"\");\n      size *= 2;\n      break;\n\n    case 'cpstr':\n      if (typeof $cptable !== 'undefined') {\n        o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));\n        break;\n      }\n\n    /* falls through */\n\n    case 'sbcs-cont':\n      o = \"\";\n      loc = this.l;\n\n      for (i = 0; i != size; ++i) {\n        if (this.lens && this.lens.indexOf(loc) !== -1) {\n          w = __readUInt8(this, loc);\n          this.l = loc + 1;\n          vv = ReadShift.call(this, size - i, w ? 'dbcs-cont' : 'sbcs-cont');\n          return oo.join(\"\") + vv;\n        }\n\n        oo.push(_getchar(__readUInt8(this, loc)));\n        loc += 1;\n      }\n\n      o = oo.join(\"\");\n      break;\n\n    default:\n      switch (size) {\n        case 1:\n          oI = __readUInt8(this, this.l);\n          this.l++;\n          return oI;\n\n        case 2:\n          oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l);\n          this.l += 2;\n          return oI;\n\n        case 4:\n        case -4:\n          if (t === 'i' || (this[this.l + 3] & 0x80) === 0) {\n            oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);\n            this.l += 4;\n            return oI;\n          } else {\n            oR = __readUInt32LE(this, this.l);\n            this.l += 4;\n          }\n\n          return oR;\n\n        case 8:\n        case -8:\n          if (t === 'f') {\n            if (size == 8) oR = __double(this, this.l);else oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);\n            this.l += 8;\n            return oR;\n          } else size = 8;\n\n        /* falls through */\n\n        case 16:\n          o = __hexlify(this, this.l, size);\n          break;\n      }\n\n  }\n\n  this.l += size;\n  return o;\n}\n\nvar __writeUInt32LE = function __writeUInt32LE(b\n/*:RawBytes|CFBlob*/\n, val\n/*:number*/\n, idx\n/*:number*/\n)\n/*:void*/\n{\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >>> 8 & 0xFF;\n  b[idx + 2] = val >>> 16 & 0xFF;\n  b[idx + 3] = val >>> 24 & 0xFF;\n};\n\nvar __writeInt32LE = function __writeInt32LE(b\n/*:RawBytes|CFBlob*/\n, val\n/*:number*/\n, idx\n/*:number*/\n)\n/*:void*/\n{\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >> 8 & 0xFF;\n  b[idx + 2] = val >> 16 & 0xFF;\n  b[idx + 3] = val >> 24 & 0xFF;\n};\n\nvar __writeUInt16LE = function __writeUInt16LE(b\n/*:RawBytes|CFBlob*/\n, val\n/*:number*/\n, idx\n/*:number*/\n)\n/*:void*/\n{\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >>> 8 & 0xFF;\n};\n\nfunction WriteShift(t\n/*:number*/\n, val\n/*:string|number*/\n, f\n/*:?string*/\n)\n/*:any*/\n{\n  var size = 0,\n      i = 0;\n\n  if (f === 'dbcs') {\n    /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */\n    for (i = 0; i != val.length; ++i) {\n      __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);\n    }\n\n    size = 2 * val.length;\n  } else if (f === 'sbcs' || f == 'cpstr') {\n    if (typeof $cptable !== 'undefined' && current_ansi == 874) {\n      /* TODO: use tables directly, don't encode */\n\n      /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */\n      for (i = 0; i != val.length; ++i) {\n        var cpp = $cptable.utils.encode(current_ansi, val.charAt(i));\n        this[this.l + i] = cpp[0];\n      }\n\n      size = val.length;\n    } else if (typeof $cptable !== 'undefined' && f == 'cpstr') {\n      cpp = $cptable.utils.encode(current_codepage, val);\n      /* replace null bytes with _ when relevant */\n\n      if (cpp.length == val.length) for (i = 0; i < val.length; ++i) {\n        if (cpp[i] == 0 && val.charCodeAt(i) != 0) cpp[i] = 0x5F;\n      }\n      if (cpp.length == 2 * val.length) for (i = 0; i < val.length; ++i) {\n        if (cpp[2 * i] == 0 && cpp[2 * i + 1] == 0 && val.charCodeAt(i) != 0) cpp[2 * i] = 0x5F;\n      }\n\n      for (i = 0; i < cpp.length; ++i) {\n        this[this.l + i] = cpp[i];\n      }\n\n      size = cpp.length;\n    } else {\n      /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */\n      val = val.replace(/[^\\x00-\\x7F]/g, \"_\");\n      /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */\n\n      for (i = 0; i != val.length; ++i) {\n        this[this.l + i] = val.charCodeAt(i) & 0xFF;\n      }\n\n      size = val.length;\n    }\n  } else if (f === 'hex') {\n    for (; i < t; ++i) {\n      /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */\n      this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;\n    }\n\n    return this;\n  } else if (f === 'utf16le') {\n    /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */\n    var end\n    /*:number*/\n    = Math.min(this.l + t, this.length);\n\n    for (i = 0; i < Math.min(val.length, t); ++i) {\n      var cc = val.charCodeAt(i);\n      this[this.l++] = cc & 0xff;\n      this[this.l++] = cc >> 8;\n    }\n\n    while (this.l < end) {\n      this[this.l++] = 0;\n    }\n\n    return this;\n  } else\n    /*:: if(typeof val === 'number') */\n    switch (t) {\n      case 1:\n        size = 1;\n        this[this.l] = val & 0xFF;\n        break;\n\n      case 2:\n        size = 2;\n        this[this.l] = val & 0xFF;\n        val >>>= 8;\n        this[this.l + 1] = val & 0xFF;\n        break;\n\n      case 3:\n        size = 3;\n        this[this.l] = val & 0xFF;\n        val >>>= 8;\n        this[this.l + 1] = val & 0xFF;\n        val >>>= 8;\n        this[this.l + 2] = val & 0xFF;\n        break;\n\n      case 4:\n        size = 4;\n\n        __writeUInt32LE(this, val, this.l);\n\n        break;\n\n      case 8:\n        size = 8;\n\n        if (f === 'f') {\n          write_double_le(this, val, this.l);\n          break;\n        }\n\n      /* falls through */\n\n      case 16:\n        break;\n\n      case -4:\n        size = 4;\n\n        __writeInt32LE(this, val, this.l);\n\n        break;\n    }\n\n  this.l += size;\n  return this;\n}\n\nfunction CheckField(hexstr\n/*:string*/\n, fld\n/*:string*/\n)\n/*:void*/\n{\n  var m = __hexlify(this, this.l, hexstr.length >> 1);\n\n  if (m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n  this.l += hexstr.length >> 1;\n}\n\nfunction prep_blob(blob, pos\n/*:number*/\n)\n/*:void*/\n{\n  blob.l = pos;\n  blob.read_shift =\n  /*::(*/\n  ReadShift\n  /*:: :any)*/\n  ;\n  blob.chk = CheckField;\n  blob.write_shift = WriteShift;\n}\n\nfunction parsenoop(blob, length\n/*:: :number, opts?:any */\n) {\n  blob.l += length;\n}\n\nfunction new_buf(sz\n/*:number*/\n)\n/*:Block*/\n{\n  var o = new_raw_buf(sz);\n  prep_blob(o, 0);\n  return o;\n}\n/* [MS-XLSB] 2.1.4 Record */\n\n\nfunction recordhopper(data, cb\n/*:RecordHopperCB*/\n, opts\n/*:?any*/\n) {\n  if (!data) return;\n  var tmpbyte, cntbyte, length;\n  prep_blob(data, data.l || 0);\n  var L = data.length,\n      RT = 0,\n      tgt = 0;\n\n  while (data.l < L) {\n    RT = data.read_shift(1);\n    if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);\n    var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n    tmpbyte = data.read_shift(1);\n    length = tmpbyte & 0x7F;\n\n    for (cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte) {\n      length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;\n    }\n\n    tgt = data.l + length;\n    var d = R.f && R.f(data, length, opts);\n    data.l = tgt;\n    if (cb(d, R, RT)) return;\n  }\n}\n/* control buffer usage for fixed-length buffers */\n\n\nfunction buf_array()\n/*:BufArray*/\n{\n  var bufs\n  /*:Array<Block>*/\n  = [],\n      blksz = has_buf ? 256 : 2048;\n\n  var newblk = function ba_newblk(sz\n  /*:number*/\n  )\n  /*:Block*/\n  {\n    var o\n    /*:Block*/\n    = new_buf(sz)\n    /*:any*/\n    ;\n    prep_blob(o, 0);\n    return o;\n  };\n\n  var curbuf\n  /*:Block*/\n  = newblk(blksz);\n\n  var endbuf = function ba_endbuf() {\n    if (!curbuf) return; // workaround for new Buffer(3).slice(0,0) bug in bun 0.1.3\n\n    if (curbuf.l) {\n      if (curbuf.length > curbuf.l) {\n        curbuf = curbuf.slice(0, curbuf.l);\n        curbuf.l = curbuf.length;\n      }\n\n      if (curbuf.length > 0) bufs.push(curbuf);\n    }\n\n    curbuf = null;\n  };\n\n  var next = function ba_next(sz\n  /*:number*/\n  )\n  /*:Block*/\n  {\n    if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;\n    endbuf();\n    return curbuf = newblk(Math.max(sz + 1, blksz));\n  };\n\n  var end = function ba_end() {\n    endbuf();\n    return bconcat(bufs);\n  };\n\n  var push = function ba_push(buf) {\n    endbuf();\n    curbuf = buf;\n    if (curbuf.l == null) curbuf.l = curbuf.length;\n    next(blksz);\n  };\n\n  return {\n    next: next,\n    push: push,\n    end: end,\n    _bufs: bufs\n  }\n  /*:any*/\n  ;\n}\n\nfunction write_record(ba\n/*:BufArray*/\n, type\n/*:number*/\n, payload, length\n/*:?number*/\n) {\n  var t\n  /*:number*/\n  = +type,\n      l;\n  if (isNaN(t)) return; // TODO: throw something here?\n\n  if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;\n  l = 1 + (t >= 0x80 ? 1 : 0) + 1\n  /* + length*/\n  ;\n  if (length >= 0x80) ++l;\n  if (length >= 0x4000) ++l;\n  if (length >= 0x200000) ++l;\n  var o = ba.next(l);\n  if (t <= 0x7F) o.write_shift(1, t);else {\n    o.write_shift(1, (t & 0x7F) + 0x80);\n    o.write_shift(1, t >> 7);\n  }\n\n  for (var i = 0; i != 4; ++i) {\n    if (length >= 0x80) {\n      o.write_shift(1, (length & 0x7F) + 0x80);\n      length >>= 7;\n    } else {\n      o.write_shift(1, length);\n      break;\n    }\n  }\n\n  if (\n  /*:: length != null &&*/\n  length > 0 && is_buf(payload)) ba.push(payload);\n}\n/* XLS ranges enforced */\n\n\nfunction shift_cell_xls(cell\n/*:CellAddress*/\n, tgt\n/*:any*/\n, opts\n/*:?any*/\n)\n/*:CellAddress*/\n{\n  var out = dup(cell);\n\n  if (tgt.s) {\n    if (out.cRel) out.c += tgt.s.c;\n    if (out.rRel) out.r += tgt.s.r;\n  } else {\n    if (out.cRel) out.c += tgt.c;\n    if (out.rRel) out.r += tgt.r;\n  }\n\n  if (!opts || opts.biff < 12) {\n    while (out.c >= 0x100) {\n      out.c -= 0x100;\n    }\n\n    while (out.r >= 0x10000) {\n      out.r -= 0x10000;\n    }\n  }\n\n  return out;\n}\n\nfunction shift_range_xls(cell, range, opts) {\n  var out = dup(cell);\n  out.s = shift_cell_xls(out.s, range.s, opts);\n  out.e = shift_cell_xls(out.e, range.s, opts);\n  return out;\n}\n\nfunction encode_cell_xls(c\n/*:CellAddress*/\n, biff\n/*:number*/\n)\n/*:string*/\n{\n  if (c.cRel && c.c < 0) {\n    c = dup(c);\n\n    while (c.c < 0) {\n      c.c += biff > 8 ? 0x4000 : 0x100;\n    }\n  }\n\n  if (c.rRel && c.r < 0) {\n    c = dup(c);\n\n    while (c.r < 0) {\n      c.r += biff > 8 ? 0x100000 : biff > 5 ? 0x10000 : 0x4000;\n    }\n  }\n\n  var s = encode_cell(c);\n  if (!c.cRel && c.cRel != null) s = fix_col(s);\n  if (!c.rRel && c.rRel != null) s = fix_row(s);\n  return s;\n}\n\nfunction encode_range_xls(r, opts)\n/*:string*/\n{\n  if (r.s.r == 0 && !r.s.rRel) {\n    if (r.e.r == (opts.biff >= 12 ? 0xFFFFF : opts.biff >= 8 ? 0x10000 : 0x4000) && !r.e.rRel) {\n      return (r.s.cRel ? \"\" : \"$\") + encode_col(r.s.c) + \":\" + (r.e.cRel ? \"\" : \"$\") + encode_col(r.e.c);\n    }\n  }\n\n  if (r.s.c == 0 && !r.s.cRel) {\n    if (r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {\n      return (r.s.rRel ? \"\" : \"$\") + encode_row(r.s.r) + \":\" + (r.e.rRel ? \"\" : \"$\") + encode_row(r.e.r);\n    }\n  }\n\n  return encode_cell_xls(r.s, opts.biff) + \":\" + encode_cell_xls(r.e, opts.biff);\n}\n\nfunction decode_row(rowstr\n/*:string*/\n)\n/*:number*/\n{\n  return parseInt(unfix_row(rowstr), 10) - 1;\n}\n\nfunction encode_row(row\n/*:number*/\n)\n/*:string*/\n{\n  return \"\" + (row + 1);\n}\n\nfunction fix_row(cstr\n/*:string*/\n)\n/*:string*/\n{\n  return cstr.replace(/([A-Z]|^)(\\d+)$/, \"$1$$$2\");\n}\n\nfunction unfix_row(cstr\n/*:string*/\n)\n/*:string*/\n{\n  return cstr.replace(/\\$(\\d+)$/, \"$1\");\n}\n\nfunction decode_col(colstr\n/*:string*/\n)\n/*:number*/\n{\n  var c = unfix_col(colstr),\n      d = 0,\n      i = 0;\n\n  for (; i !== c.length; ++i) {\n    d = 26 * d + c.charCodeAt(i) - 64;\n  }\n\n  return d - 1;\n}\n\nfunction encode_col(col\n/*:number*/\n)\n/*:string*/\n{\n  if (col < 0) throw new Error(\"invalid column \" + col);\n  var s = \"\";\n\n  for (++col; col; col = Math.floor((col - 1) / 26)) {\n    s = String.fromCharCode((col - 1) % 26 + 65) + s;\n  }\n\n  return s;\n}\n\nfunction fix_col(cstr\n/*:string*/\n)\n/*:string*/\n{\n  return cstr.replace(/^([A-Z])/, \"$$$1\");\n}\n\nfunction unfix_col(cstr\n/*:string*/\n)\n/*:string*/\n{\n  return cstr.replace(/^\\$([A-Z])/, \"$1\");\n}\n\nfunction split_cell(cstr\n/*:string*/\n)\n/*:Array<string>*/\n{\n  return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/, \"$1,$2\").split(\",\");\n} //function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }\n\n\nfunction decode_cell(cstr\n/*:string*/\n)\n/*:CellAddress*/\n{\n  var R = 0,\n      C = 0;\n\n  for (var i = 0; i < cstr.length; ++i) {\n    var cc = cstr.charCodeAt(i);\n    if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);\n  }\n\n  return {\n    c: C - 1,\n    r: R - 1\n  };\n} //function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }\n\n\nfunction encode_cell(cell\n/*:CellAddress*/\n)\n/*:string*/\n{\n  var col = cell.c + 1;\n  var s = \"\";\n\n  for (; col; col = (col - 1) / 26 | 0) {\n    s = String.fromCharCode((col - 1) % 26 + 65) + s;\n  }\n\n  return s + (cell.r + 1);\n}\n\nfunction decode_range(range\n/*:string*/\n)\n/*:Range*/\n{\n  var idx = range.indexOf(\":\");\n  if (idx == -1) return {\n    s: decode_cell(range),\n    e: decode_cell(range)\n  };\n  return {\n    s: decode_cell(range.slice(0, idx)),\n    e: decode_cell(range.slice(idx + 1))\n  };\n}\n/*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */\n\n\nfunction encode_range(cs\n/*:CellAddrSpec|Range*/\n, ce\n/*:?CellAddrSpec*/\n)\n/*:string*/\n{\n  if (typeof ce === 'undefined' || typeof ce === 'number') {\n    /*:: if(!(cs instanceof Range)) throw \"unreachable\"; */\n    return encode_range(cs.s, cs.e);\n  }\n  /*:: if((cs instanceof Range)) throw \"unreachable\"; */\n\n\n  if (typeof cs !== 'string') cs = encode_cell(cs\n  /*:any*/\n  );\n  if (typeof ce !== 'string') ce = encode_cell(ce\n  /*:any*/\n  );\n  /*:: if(typeof cs !== 'string') throw \"unreachable\"; */\n\n  /*:: if(typeof ce !== 'string') throw \"unreachable\"; */\n\n  return cs == ce ? cs : cs + \":\" + ce;\n}\n\nfunction fix_range(a1\n/*:string*/\n)\n/*:string*/\n{\n  var s = decode_range(a1);\n  return \"$\" + encode_col(s.s.c) + \"$\" + encode_row(s.s.r) + \":$\" + encode_col(s.e.c) + \"$\" + encode_row(s.e.r);\n} // List of invalid characters needs to be tested further\n\n\nfunction formula_quote_sheet_name(sname\n/*:string*/\n, opts)\n/*:string*/\n{\n  if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error(\"empty sheet name\");\n  if (/[^\\w\\u4E00-\\u9FFF\\u3040-\\u30FF]/.test(sname)) return \"'\" + sname.replace(/'/g, \"''\") + \"'\";\n  return sname;\n}\n\nfunction safe_decode_range(range\n/*:string*/\n)\n/*:Range*/\n{\n  var o = {\n    s: {\n      c: 0,\n      r: 0\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  var idx = 0,\n      i = 0,\n      cc = 0;\n  var len = range.length;\n\n  for (idx = 0; i < len; ++i) {\n    if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n    idx = 26 * idx + cc;\n  }\n\n  o.s.c = --idx;\n\n  for (idx = 0; i < len; ++i) {\n    if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n    idx = 10 * idx + cc;\n  }\n\n  o.s.r = --idx;\n\n  if (i === len || cc != 10) {\n    o.e.c = o.s.c;\n    o.e.r = o.s.r;\n    return o;\n  }\n\n  ++i;\n\n  for (idx = 0; i != len; ++i) {\n    if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n    idx = 26 * idx + cc;\n  }\n\n  o.e.c = --idx;\n\n  for (idx = 0; i != len; ++i) {\n    if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n    idx = 10 * idx + cc;\n  }\n\n  o.e.r = --idx;\n  return o;\n}\n\nfunction safe_format_cell(cell\n/*:Cell*/\n, v\n/*:any*/\n) {\n  var q = cell.t == 'd' && v instanceof Date;\n  if (cell.z != null) try {\n    return cell.w = SSF_format(cell.z, q ? datenum(v) : v);\n  } catch (e) {}\n\n  try {\n    return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);\n  } catch (e) {\n    return '' + v;\n  }\n}\n\nfunction format_cell(cell\n/*:Cell*/\n, v\n/*:any*/\n, o\n/*:any*/\n) {\n  if (cell == null || cell.t == null || cell.t == 'z') return \"\";\n  if (cell.w !== undefined) return cell.w;\n  if (cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;\n  if (cell.t == \"e\") return BErr[cell.v] || cell.v;\n  if (v == undefined) return safe_format_cell(cell, cell.v);\n  return safe_format_cell(cell, v);\n}\n\nfunction sheet_to_workbook(sheet\n/*:Worksheet*/\n, opts)\n/*:Workbook*/\n{\n  var n = opts && opts.sheet ? opts.sheet : \"Sheet1\";\n  var sheets = {};\n  sheets[n] = sheet;\n  return {\n    SheetNames: [n],\n    Sheets: sheets\n  };\n}\n\nfunction sheet_add_aoa(_ws\n/*:?Worksheet*/\n, data\n/*:AOA*/\n, opts\n/*:?any*/\n)\n/*:Worksheet*/\n{\n  var o = opts || {};\n  var dense = _ws ? Array.isArray(_ws) : o.dense;\n  if (DENSE != null && dense == null) dense = DENSE;\n  var ws\n  /*:Worksheet*/\n  = _ws || (dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  );\n  var _R = 0,\n      _C = 0;\n\n  if (ws && o.origin != null) {\n    if (typeof o.origin == 'number') _R = o.origin;else {\n      var _origin\n      /*:CellAddress*/\n      = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n\n      _R = _origin.r;\n      _C = _origin.c;\n    }\n    if (!ws[\"!ref\"]) ws[\"!ref\"] = \"A1:A1\";\n  }\n\n  var range\n  /*:Range*/\n  = {\n    s: {\n      c: 10000000,\n      r: 10000000\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  }\n  /*:any*/\n  ;\n\n  if (ws['!ref']) {\n    var _range = safe_decode_range(ws['!ref']);\n\n    range.s.c = _range.s.c;\n    range.s.r = _range.s.r;\n    range.e.c = Math.max(range.e.c, _range.e.c);\n    range.e.r = Math.max(range.e.r, _range.e.r);\n    if (_R == -1) range.e.r = _R = _range.e.r + 1;\n  }\n\n  for (var R = 0; R != data.length; ++R) {\n    if (!data[R]) continue;\n    if (!Array.isArray(data[R])) throw new Error(\"aoa_to_sheet expects an array of arrays\");\n\n    for (var C = 0; C != data[R].length; ++C) {\n      if (typeof data[R][C] === 'undefined') continue;\n      var cell\n      /*:Cell*/\n      = {\n        v: data[R][C]\n      }\n      /*:any*/\n      ;\n\n      var __R = _R + R,\n          __C = _C + C;\n\n      if (range.s.r > __R) range.s.r = __R;\n      if (range.s.c > __C) range.s.c = __C;\n      if (range.e.r < __R) range.e.r = __R;\n      if (range.e.c < __C) range.e.c = __C;\n      if (data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];else {\n        if (Array.isArray(cell.v)) {\n          cell.f = data[R][C][1];\n          cell.v = cell.v[0];\n        }\n\n        if (cell.v === null) {\n          if (cell.f) cell.t = 'n';else if (o.nullError) {\n            cell.t = 'e';\n            cell.v = 0;\n          } else if (!o.sheetStubs) continue;else cell.t = 'z';\n        } else if (typeof cell.v === 'number') cell.t = 'n';else if (typeof cell.v === 'boolean') cell.t = 'b';else if (cell.v instanceof Date) {\n          cell.z = o.dateNF || table_fmt[14];\n\n          if (o.cellDates) {\n            cell.t = 'd';\n            cell.w = SSF_format(cell.z, datenum(cell.v, o.date1904));\n          } else {\n            cell.t = 'n';\n            cell.v = datenum(cell.v, o.date1904);\n            cell.w = SSF_format(cell.z, cell.v);\n          }\n        } else cell.t = 's';\n      }\n\n      if (dense) {\n        if (!ws[__R]) ws[__R] = [];\n        if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;\n        ws[__R][__C] = cell;\n      } else {\n        var cell_ref = encode_cell({\n          c: __C,\n          r: __R\n        }\n        /*:any*/\n        );\n        if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;\n        ws[cell_ref] = cell;\n      }\n    }\n  }\n\n  if (range.s.c < 10000000) ws['!ref'] = encode_range(range);\n  return ws;\n}\n\nfunction aoa_to_sheet(data\n/*:AOA*/\n, opts\n/*:?any*/\n)\n/*:Worksheet*/\n{\n  return sheet_add_aoa(null, data, opts);\n}\n\nfunction parse_Int32LE(data) {\n  return data.read_shift(4, 'i');\n}\n\nfunction write_UInt32LE(x\n/*:number*/\n, o) {\n  if (!o) o = new_buf(4);\n  o.write_shift(4, x);\n  return o;\n}\n/* [MS-XLSB] 2.5.168 */\n\n\nfunction parse_XLWideString(data\n/*::, length*/\n)\n/*:string*/\n{\n  var cchCharacters = data.read_shift(4);\n  return cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\n\nfunction write_XLWideString(data\n/*:string*/\n, o) {\n  var _null = false;\n\n  if (o == null) {\n    _null = true;\n    o = new_buf(4 + 2 * data.length);\n  }\n\n  o.write_shift(4, data.length);\n  if (data.length > 0) o.write_shift(0, data, 'dbcs');\n  return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.91 */\n//function parse_LPWideString(data/*::, length*/)/*:string*/ {\n//\tvar cchCharacters = data.read_shift(2);\n//\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, \"utf16le\");\n//}\n\n/* [MS-XLSB] 2.5.143 */\n\n\nfunction parse_StrRun(data) {\n  return {\n    ich: data.read_shift(2),\n    ifnt: data.read_shift(2)\n  };\n}\n\nfunction write_StrRun(run, o) {\n  if (!o) o = new_buf(4);\n  o.write_shift(2, run.ich || 0);\n  o.write_shift(2, run.ifnt || 0);\n  return o;\n}\n/* [MS-XLSB] 2.5.121 */\n\n\nfunction parse_RichStr(data, length\n/*:number*/\n)\n/*:XLString*/\n{\n  var start = data.l;\n  var flags = data.read_shift(1);\n  var str = parse_XLWideString(data);\n  var rgsStrRun = [];\n  var z = {\n    t: str,\n    h: str\n  }\n  /*:any*/\n  ;\n\n  if ((flags & 1) !== 0) {\n    /* fRichStr */\n\n    /* TODO: formatted string */\n    var dwSizeStrRun = data.read_shift(4);\n\n    for (var i = 0; i != dwSizeStrRun; ++i) {\n      rgsStrRun.push(parse_StrRun(data));\n    }\n\n    z.r = rgsStrRun;\n  } else z.r = [{\n    ich: 0,\n    ifnt: 0\n  }]; //if((flags & 2) !== 0) { /* fExtStr */\n  //\t/* TODO: phonetic string */\n  //}\n\n\n  data.l = start + length;\n  return z;\n}\n\nfunction write_RichStr(str\n/*:XLString*/\n, o\n/*:?Block*/\n)\n/*:Block*/\n{\n  /* TODO: formatted string */\n  var _null = false;\n\n  if (o == null) {\n    _null = true;\n    o = new_buf(15 + 4 * str.t.length);\n  }\n\n  o.write_shift(1, 0);\n  write_XLWideString(str.t, o);\n  return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */\n\n\nvar parse_BrtCommentText = parse_RichStr;\n\nfunction write_BrtCommentText(str\n/*:XLString*/\n, o\n/*:?Block*/\n)\n/*:Block*/\n{\n  /* TODO: formatted string */\n  var _null = false;\n\n  if (o == null) {\n    _null = true;\n    o = new_buf(23 + 4 * str.t.length);\n  }\n\n  o.write_shift(1, 1);\n  write_XLWideString(str.t, o);\n  o.write_shift(4, 1);\n  write_StrRun({\n    ich: 0,\n    ifnt: 0\n  }, o);\n  return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.9 */\n\n\nfunction parse_XLSBCell(data)\n/*:any*/\n{\n  var col = data.read_shift(4);\n  var iStyleRef = data.read_shift(2);\n  iStyleRef += data.read_shift(1) << 16;\n  data.l++; //var fPhShow = data.read_shift(1);\n\n  return {\n    c: col,\n    iStyleRef: iStyleRef\n  };\n}\n\nfunction write_XLSBCell(cell\n/*:any*/\n, o\n/*:?Block*/\n) {\n  if (o == null) o = new_buf(8);\n  o.write_shift(-4, cell.c);\n  o.write_shift(3, cell.iStyleRef || cell.s);\n  o.write_shift(1, 0);\n  /* fPhShow */\n\n  return o;\n}\n/* Short XLSB Cell does not include column */\n\n\nfunction parse_XLSBShortCell(data)\n/*:any*/\n{\n  var iStyleRef = data.read_shift(2);\n  iStyleRef += data.read_shift(1) << 16;\n  data.l++; //var fPhShow = data.read_shift(1);\n\n  return {\n    c: -1,\n    iStyleRef: iStyleRef\n  };\n}\n\nfunction write_XLSBShortCell(cell\n/*:any*/\n, o\n/*:?Block*/\n) {\n  if (o == null) o = new_buf(4);\n  o.write_shift(3, cell.iStyleRef || cell.s);\n  o.write_shift(1, 0);\n  /* fPhShow */\n\n  return o;\n}\n/* [MS-XLSB] 2.5.21 */\n\n\nvar parse_XLSBCodeName = parse_XLWideString;\nvar write_XLSBCodeName = write_XLWideString;\n/* [MS-XLSB] 2.5.166 */\n\nfunction parse_XLNullableWideString(data\n/*::, length*/\n)\n/*:string*/\n{\n  var cchCharacters = data.read_shift(4);\n  return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\n\nfunction write_XLNullableWideString(data\n/*:string*/\n, o) {\n  var _null = false;\n\n  if (o == null) {\n    _null = true;\n    o = new_buf(127);\n  }\n\n  o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n  if (data.length > 0) o.write_shift(0, data, 'dbcs');\n  return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.165 */\n\n\nvar parse_XLNameWideString = parse_XLWideString; //var write_XLNameWideString = write_XLWideString;\n\n/* [MS-XLSB] 2.5.114 */\n\nvar parse_RelID = parse_XLNullableWideString;\nvar write_RelID = write_XLNullableWideString;\n/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */\n\nfunction parse_RkNumber(data)\n/*:number*/\n{\n  var b = data.slice(data.l, data.l + 4);\n  var fX100 = b[0] & 1,\n      fInt = b[0] & 2;\n  data.l += 4;\n  var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0] & 0xFC, b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;\n  return fX100 ? RK / 100 : RK;\n}\n\nfunction write_RkNumber(data\n/*:number*/\n, o) {\n  if (o == null) o = new_buf(4);\n  var fX100 = 0,\n      fInt = 0,\n      d100 = data * 100;\n\n  if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {\n    fInt = 1;\n  } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {\n    fInt = 1;\n    fX100 = 1;\n  }\n\n  if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));else throw new Error(\"unsupported RkNumber \" + data); // TODO\n}\n/* [MS-XLSB] 2.5.117 RfX */\n\n\nfunction parse_RfX(data\n/*::, length*/\n)\n/*:Range*/\n{\n  var cell\n  /*:Range*/\n  = {\n    s: {},\n    e: {}\n  }\n  /*:any*/\n  ;\n  cell.s.r = data.read_shift(4);\n  cell.e.r = data.read_shift(4);\n  cell.s.c = data.read_shift(4);\n  cell.e.c = data.read_shift(4);\n  return cell;\n}\n\nfunction write_RfX(r\n/*:Range*/\n, o) {\n  if (!o) o = new_buf(16);\n  o.write_shift(4, r.s.r);\n  o.write_shift(4, r.e.r);\n  o.write_shift(4, r.s.c);\n  o.write_shift(4, r.e.c);\n  return o;\n}\n/* [MS-XLSB] 2.5.153 UncheckedRfX */\n\n\nvar parse_UncheckedRfX = parse_RfX;\nvar write_UncheckedRfX = write_RfX;\n/* [MS-XLSB] 2.5.155 UncheckedSqRfX */\n//function parse_UncheckedSqRfX(data) {\n//\tvar cnt = data.read_shift(4);\n//\tvar out = [];\n//\tfor(var i = 0; i < cnt; ++i) {\n//\t\tvar rng = parse_UncheckedRfX(data);\n//\t\tout.push(encode_range(rng));\n//\t}\n//\treturn out.join(\",\");\n//}\n//function write_UncheckedSqRfX(sqrfx/*:string*/) {\n//\tvar parts = sqrfx.split(/\\s*,\\s*/);\n//\tvar o = new_buf(4); o.write_shift(4, parts.length);\n//\tvar out = [o];\n//\tparts.forEach(function(rng) {\n//\t\tout.push(write_UncheckedRfX(safe_decode_range(rng)));\n//\t});\n//\treturn bconcat(out);\n//}\n\n/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */\n\n/* TODO: error checking, NaN and Infinity values are not valid Xnum */\n\nfunction parse_Xnum(data\n/*::, length*/\n) {\n  if (data.length - data.l < 8) throw \"XLS Xnum Buffer underflow\";\n  return data.read_shift(8, 'f');\n}\n\nfunction write_Xnum(data, o) {\n  return (o || new_buf(8)).write_shift(8, data, 'f');\n}\n/* [MS-XLSB] 2.4.324 BrtColor */\n\n\nfunction parse_BrtColor(data\n/*::, length*/\n) {\n  var out = {};\n  var d = data.read_shift(1); //var fValidRGB = d & 1;\n\n  var xColorType = d >>> 1;\n  var index = data.read_shift(1);\n  var nTS = data.read_shift(2, 'i');\n  var bR = data.read_shift(1);\n  var bG = data.read_shift(1);\n  var bB = data.read_shift(1);\n  data.l++; //var bAlpha = data.read_shift(1);\n\n  switch (xColorType) {\n    case 0:\n      out.auto = 1;\n      break;\n\n    case 1:\n      out.index = index;\n      var icv = XLSIcv[index];\n      /* automatic pseudo index 81 */\n\n      if (icv) out.rgb = rgb2Hex(icv);\n      break;\n\n    case 2:\n      /* if(!fValidRGB) throw new Error(\"invalid\"); */\n      out.rgb = rgb2Hex([bR, bG, bB]);\n      break;\n\n    case 3:\n      out.theme = index;\n      break;\n  }\n\n  if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;\n  return out;\n}\n\nfunction write_BrtColor(color, o) {\n  if (!o) o = new_buf(8);\n\n  if (!color || color.auto) {\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    return o;\n  }\n\n  if (color.index != null) {\n    o.write_shift(1, 0x02);\n    o.write_shift(1, color.index);\n  } else if (color.theme != null) {\n    o.write_shift(1, 0x06);\n    o.write_shift(1, color.theme);\n  } else {\n    o.write_shift(1, 0x05);\n    o.write_shift(1, 0);\n  }\n\n  var nTS = color.tint || 0;\n  if (nTS > 0) nTS *= 32767;else if (nTS < 0) nTS *= 32768;\n  o.write_shift(2, nTS);\n\n  if (!color.rgb || color.theme != null) {\n    o.write_shift(2, 0);\n    o.write_shift(1, 0);\n    o.write_shift(1, 0);\n  } else {\n    var rgb = color.rgb || 'FFFFFF';\n    if (typeof rgb == 'number') rgb = (\"000000\" + rgb.toString(16)).slice(-6);\n    o.write_shift(1, parseInt(rgb.slice(0, 2), 16));\n    o.write_shift(1, parseInt(rgb.slice(2, 4), 16));\n    o.write_shift(1, parseInt(rgb.slice(4, 6), 16));\n    o.write_shift(1, 0xFF);\n  }\n\n  return o;\n}\n/* [MS-XLSB] 2.5.52 */\n\n\nfunction parse_FontFlags(data\n/*::, length, opts*/\n) {\n  var d = data.read_shift(1);\n  data.l++;\n  var out = {\n    fBold: d & 0x01,\n    fItalic: d & 0x02,\n    fUnderline: d & 0x04,\n    fStrikeout: d & 0x08,\n    fOutline: d & 0x10,\n    fShadow: d & 0x20,\n    fCondense: d & 0x40,\n    fExtend: d & 0x80\n  };\n  return out;\n}\n\nfunction write_FontFlags(font, o) {\n  if (!o) o = new_buf(2);\n  var grbit = (font.italic ? 0x02 : 0) | (font.strike ? 0x08 : 0) | (font.outline ? 0x10 : 0) | (font.shadow ? 0x20 : 0) | (font.condense ? 0x40 : 0) | (font.extend ? 0x80 : 0);\n  o.write_shift(1, grbit);\n  o.write_shift(1, 0);\n  return o;\n}\n/* [MS-OLEDS] 2.3.1 and 2.3.2 */\n\n\nfunction parse_ClipboardFormatOrString(o, w\n/*:number*/\n)\n/*:string*/\n{\n  // $FlowIgnore\n  var ClipFmt = {\n    2: \"BITMAP\",\n    3: \"METAFILEPICT\",\n    8: \"DIB\",\n    14: \"ENHMETAFILE\"\n  };\n  var m\n  /*:number*/\n  = o.read_shift(4);\n\n  switch (m) {\n    case 0x00000000:\n      return \"\";\n\n    case 0xffffffff:\n    case 0xfffffffe:\n      return ClipFmt[o.read_shift(4)] || \"\";\n  }\n\n  if (m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n  o.l -= 4;\n  return o.read_shift(0, w == 1 ? \"lpstr\" : \"lpwstr\");\n}\n\nfunction parse_ClipboardFormatOrAnsiString(o) {\n  return parse_ClipboardFormatOrString(o, 1);\n}\n\nfunction parse_ClipboardFormatOrUnicodeString(o) {\n  return parse_ClipboardFormatOrString(o, 2);\n}\n/* [MS-OLEPS] 2.2 PropertyType */\n// Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars\n//var VT_EMPTY    = 0x0000;\n//var VT_NULL     = 0x0001;\n\n\nvar VT_I2 = 0x0002;\nvar VT_I4 = 0x0003; //var VT_R4       = 0x0004;\n//var VT_R8       = 0x0005;\n//var VT_CY       = 0x0006;\n//var VT_DATE     = 0x0007;\n//var VT_BSTR     = 0x0008;\n//var VT_ERROR    = 0x000A;\n\nvar VT_BOOL = 0x000B;\nvar VT_VARIANT = 0x000C; //var VT_DECIMAL  = 0x000E;\n//var VT_I1       = 0x0010;\n//var VT_UI1      = 0x0011;\n//var VT_UI2      = 0x0012;\n\nvar VT_UI4 = 0x0013; //var VT_I8       = 0x0014;\n//var VT_UI8      = 0x0015;\n//var VT_INT      = 0x0016;\n//var VT_UINT     = 0x0017;\n//var VT_LPSTR    = 0x001E;\n//var VT_LPWSTR   = 0x001F;\n\nvar VT_FILETIME = 0x0040;\nvar VT_BLOB = 0x0041; //var VT_STREAM   = 0x0042;\n//var VT_STORAGE  = 0x0043;\n//var VT_STREAMED_Object  = 0x0044;\n//var VT_STORED_Object    = 0x0045;\n//var VT_BLOB_Object      = 0x0046;\n\nvar VT_CF = 0x0047; //var VT_CLSID    = 0x0048;\n//var VT_VERSIONED_STREAM = 0x0049;\n//var VT_VECTOR   = 0x1000;\n\nvar VT_VECTOR_VARIANT = 0x100C;\nvar VT_VECTOR_LPSTR = 0x101E; //var VT_ARRAY    = 0x2000;\n\nvar VT_STRING = 0x0050; // 2.3.3.1.11 VtString\n\nvar VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString\n\nvar VT_CUSTOM = [VT_STRING, VT_USTR];\n/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */\n\nvar DocSummaryPIDDSI = {\n  /*::[*/\n  0x01\n  /*::]*/\n  : {\n    n: 'CodePage',\n    t: VT_I2\n  },\n\n  /*::[*/\n  0x02\n  /*::]*/\n  : {\n    n: 'Category',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x03\n  /*::]*/\n  : {\n    n: 'PresentationFormat',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x04\n  /*::]*/\n  : {\n    n: 'ByteCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x05\n  /*::]*/\n  : {\n    n: 'LineCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x06\n  /*::]*/\n  : {\n    n: 'ParagraphCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : {\n    n: 'SlideCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x08\n  /*::]*/\n  : {\n    n: 'NoteCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x09\n  /*::]*/\n  : {\n    n: 'HiddenCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x0a\n  /*::]*/\n  : {\n    n: 'MultimediaClipCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x0b\n  /*::]*/\n  : {\n    n: 'ScaleCrop',\n    t: VT_BOOL\n  },\n\n  /*::[*/\n  0x0c\n  /*::]*/\n  : {\n    n: 'HeadingPairs',\n    t: VT_VECTOR_VARIANT\n    /* VT_VECTOR | VT_VARIANT */\n\n  },\n\n  /*::[*/\n  0x0d\n  /*::]*/\n  : {\n    n: 'TitlesOfParts',\n    t: VT_VECTOR_LPSTR\n    /* VT_VECTOR | VT_LPSTR */\n\n  },\n\n  /*::[*/\n  0x0e\n  /*::]*/\n  : {\n    n: 'Manager',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x0f\n  /*::]*/\n  : {\n    n: 'Company',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : {\n    n: 'LinksUpToDate',\n    t: VT_BOOL\n  },\n\n  /*::[*/\n  0x11\n  /*::]*/\n  : {\n    n: 'CharacterCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x13\n  /*::]*/\n  : {\n    n: 'SharedDoc',\n    t: VT_BOOL\n  },\n\n  /*::[*/\n  0x16\n  /*::]*/\n  : {\n    n: 'HyperlinksChanged',\n    t: VT_BOOL\n  },\n\n  /*::[*/\n  0x17\n  /*::]*/\n  : {\n    n: 'AppVersion',\n    t: VT_I4,\n    p: 'version'\n  },\n\n  /*::[*/\n  0x18\n  /*::]*/\n  : {\n    n: 'DigSig',\n    t: VT_BLOB\n  },\n\n  /*::[*/\n  0x1A\n  /*::]*/\n  : {\n    n: 'ContentType',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x1B\n  /*::]*/\n  : {\n    n: 'ContentStatus',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x1C\n  /*::]*/\n  : {\n    n: 'Language',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x1D\n  /*::]*/\n  : {\n    n: 'Version',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : {},\n\n  /* [MS-OLEPS] 2.18 */\n\n  /*::[*/\n  0x80000000\n  /*::]*/\n  : {\n    n: 'Locale',\n    t: VT_UI4\n  },\n\n  /*::[*/\n  0x80000003\n  /*::]*/\n  : {\n    n: 'Behavior',\n    t: VT_UI4\n  },\n\n  /*::[*/\n  0x72627262\n  /*::]*/\n  : {}\n};\n/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */\n\nvar SummaryPIDSI = {\n  /*::[*/\n  0x01\n  /*::]*/\n  : {\n    n: 'CodePage',\n    t: VT_I2\n  },\n\n  /*::[*/\n  0x02\n  /*::]*/\n  : {\n    n: 'Title',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x03\n  /*::]*/\n  : {\n    n: 'Subject',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x04\n  /*::]*/\n  : {\n    n: 'Author',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x05\n  /*::]*/\n  : {\n    n: 'Keywords',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x06\n  /*::]*/\n  : {\n    n: 'Comments',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : {\n    n: 'Template',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x08\n  /*::]*/\n  : {\n    n: 'LastAuthor',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x09\n  /*::]*/\n  : {\n    n: 'RevNumber',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x0A\n  /*::]*/\n  : {\n    n: 'EditTime',\n    t: VT_FILETIME\n  },\n\n  /*::[*/\n  0x0B\n  /*::]*/\n  : {\n    n: 'LastPrinted',\n    t: VT_FILETIME\n  },\n\n  /*::[*/\n  0x0C\n  /*::]*/\n  : {\n    n: 'CreatedDate',\n    t: VT_FILETIME\n  },\n\n  /*::[*/\n  0x0D\n  /*::]*/\n  : {\n    n: 'ModifiedDate',\n    t: VT_FILETIME\n  },\n\n  /*::[*/\n  0x0E\n  /*::]*/\n  : {\n    n: 'PageCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x0F\n  /*::]*/\n  : {\n    n: 'WordCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : {\n    n: 'CharCount',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0x11\n  /*::]*/\n  : {\n    n: 'Thumbnail',\n    t: VT_CF\n  },\n\n  /*::[*/\n  0x12\n  /*::]*/\n  : {\n    n: 'Application',\n    t: VT_STRING\n  },\n\n  /*::[*/\n  0x13\n  /*::]*/\n  : {\n    n: 'DocSecurity',\n    t: VT_I4\n  },\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : {},\n\n  /* [MS-OLEPS] 2.18 */\n\n  /*::[*/\n  0x80000000\n  /*::]*/\n  : {\n    n: 'Locale',\n    t: VT_UI4\n  },\n\n  /*::[*/\n  0x80000003\n  /*::]*/\n  : {\n    n: 'Behavior',\n    t: VT_UI4\n  },\n\n  /*::[*/\n  0x72627262\n  /*::]*/\n  : {}\n};\n/* [MS-XLS] 2.4.63 Country/Region codes */\n\nvar CountryEnum = {\n  /*::[*/\n  0x0001\n  /*::]*/\n  : \"US\",\n  // United States\n\n  /*::[*/\n  0x0002\n  /*::]*/\n  : \"CA\",\n  // Canada\n\n  /*::[*/\n  0x0003\n  /*::]*/\n  : \"\",\n  // Latin America (except Brazil)\n\n  /*::[*/\n  0x0007\n  /*::]*/\n  : \"RU\",\n  // Russia\n\n  /*::[*/\n  0x0014\n  /*::]*/\n  : \"EG\",\n  // Egypt\n\n  /*::[*/\n  0x001E\n  /*::]*/\n  : \"GR\",\n  // Greece\n\n  /*::[*/\n  0x001F\n  /*::]*/\n  : \"NL\",\n  // Netherlands\n\n  /*::[*/\n  0x0020\n  /*::]*/\n  : \"BE\",\n  // Belgium\n\n  /*::[*/\n  0x0021\n  /*::]*/\n  : \"FR\",\n  // France\n\n  /*::[*/\n  0x0022\n  /*::]*/\n  : \"ES\",\n  // Spain\n\n  /*::[*/\n  0x0024\n  /*::]*/\n  : \"HU\",\n  // Hungary\n\n  /*::[*/\n  0x0027\n  /*::]*/\n  : \"IT\",\n  // Italy\n\n  /*::[*/\n  0x0029\n  /*::]*/\n  : \"CH\",\n  // Switzerland\n\n  /*::[*/\n  0x002B\n  /*::]*/\n  : \"AT\",\n  // Austria\n\n  /*::[*/\n  0x002C\n  /*::]*/\n  : \"GB\",\n  // United Kingdom\n\n  /*::[*/\n  0x002D\n  /*::]*/\n  : \"DK\",\n  // Denmark\n\n  /*::[*/\n  0x002E\n  /*::]*/\n  : \"SE\",\n  // Sweden\n\n  /*::[*/\n  0x002F\n  /*::]*/\n  : \"NO\",\n  // Norway\n\n  /*::[*/\n  0x0030\n  /*::]*/\n  : \"PL\",\n  // Poland\n\n  /*::[*/\n  0x0031\n  /*::]*/\n  : \"DE\",\n  // Germany\n\n  /*::[*/\n  0x0034\n  /*::]*/\n  : \"MX\",\n  // Mexico\n\n  /*::[*/\n  0x0037\n  /*::]*/\n  : \"BR\",\n  // Brazil\n\n  /*::[*/\n  0x003d\n  /*::]*/\n  : \"AU\",\n  // Australia\n\n  /*::[*/\n  0x0040\n  /*::]*/\n  : \"NZ\",\n  // New Zealand\n\n  /*::[*/\n  0x0042\n  /*::]*/\n  : \"TH\",\n  // Thailand\n\n  /*::[*/\n  0x0051\n  /*::]*/\n  : \"JP\",\n  // Japan\n\n  /*::[*/\n  0x0052\n  /*::]*/\n  : \"KR\",\n  // Korea\n\n  /*::[*/\n  0x0054\n  /*::]*/\n  : \"VN\",\n  // Viet Nam\n\n  /*::[*/\n  0x0056\n  /*::]*/\n  : \"CN\",\n  // China\n\n  /*::[*/\n  0x005A\n  /*::]*/\n  : \"TR\",\n  // Turkey\n\n  /*::[*/\n  0x0069\n  /*::]*/\n  : \"JS\",\n  // Ramastan\n\n  /*::[*/\n  0x00D5\n  /*::]*/\n  : \"DZ\",\n  // Algeria\n\n  /*::[*/\n  0x00D8\n  /*::]*/\n  : \"MA\",\n  // Morocco\n\n  /*::[*/\n  0x00DA\n  /*::]*/\n  : \"LY\",\n  // Libya\n\n  /*::[*/\n  0x015F\n  /*::]*/\n  : \"PT\",\n  // Portugal\n\n  /*::[*/\n  0x0162\n  /*::]*/\n  : \"IS\",\n  // Iceland\n\n  /*::[*/\n  0x0166\n  /*::]*/\n  : \"FI\",\n  // Finland\n\n  /*::[*/\n  0x01A4\n  /*::]*/\n  : \"CZ\",\n  // Czech Republic\n\n  /*::[*/\n  0x0376\n  /*::]*/\n  : \"TW\",\n  // Taiwan\n\n  /*::[*/\n  0x03C1\n  /*::]*/\n  : \"LB\",\n  // Lebanon\n\n  /*::[*/\n  0x03C2\n  /*::]*/\n  : \"JO\",\n  // Jordan\n\n  /*::[*/\n  0x03C3\n  /*::]*/\n  : \"SY\",\n  // Syria\n\n  /*::[*/\n  0x03C4\n  /*::]*/\n  : \"IQ\",\n  // Iraq\n\n  /*::[*/\n  0x03C5\n  /*::]*/\n  : \"KW\",\n  // Kuwait\n\n  /*::[*/\n  0x03C6\n  /*::]*/\n  : \"SA\",\n  // Saudi Arabia\n\n  /*::[*/\n  0x03CB\n  /*::]*/\n  : \"AE\",\n  // United Arab Emirates\n\n  /*::[*/\n  0x03CC\n  /*::]*/\n  : \"IL\",\n  // Israel\n\n  /*::[*/\n  0x03CE\n  /*::]*/\n  : \"QA\",\n  // Qatar\n\n  /*::[*/\n  0x03D5\n  /*::]*/\n  : \"IR\",\n  // Iran\n\n  /*::[*/\n  0xFFFF\n  /*::]*/\n  : \"US\" // United States\n\n};\n/* [MS-XLS] 2.5.127 */\n\nvar XLSFillPattern = [null, 'solid', 'mediumGray', 'darkGray', 'lightGray', 'darkHorizontal', 'darkVertical', 'darkDown', 'darkUp', 'darkGrid', 'darkTrellis', 'lightHorizontal', 'lightVertical', 'lightDown', 'lightUp', 'lightGrid', 'lightTrellis', 'gray125', 'gray0625'];\n\nfunction rgbify(arr\n/*:Array<number>*/\n)\n/*:Array<[number, number, number]>*/\n{\n  return arr.map(function (x) {\n    return [x >> 16 & 255, x >> 8 & 255, x & 255];\n  });\n}\n/* [MS-XLS] 2.5.161 */\n\n/* [MS-XLSB] 2.5.75 Icv */\n\n\nvar _XLSIcv = /*#__PURE__*/rgbify([\n/* Color Constants */\n0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF,\n/* Overridable Defaults */\n0x000000, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF, 0x800000, 0x008000, 0x000080, 0x808000, 0x800080, 0x008080, 0xC0C0C0, 0x808080, 0x9999FF, 0x993366, 0xFFFFCC, 0xCCFFFF, 0x660066, 0xFF8080, 0x0066CC, 0xCCCCFF, 0x000080, 0xFF00FF, 0xFFFF00, 0x00FFFF, 0x800080, 0x800000, 0x008080, 0x0000FF, 0x00CCFF, 0xCCFFFF, 0xCCFFCC, 0xFFFF99, 0x99CCFF, 0xFF99CC, 0xCC99FF, 0xFFCC99, 0x3366FF, 0x33CCCC, 0x99CC00, 0xFFCC00, 0xFF9900, 0xFF6600, 0x666699, 0x969696, 0x003366, 0x339966, 0x003300, 0x333300, 0x993300, 0x993366, 0x333399, 0x333333,\n/* Other entries to appease BIFF8/12 */\n0x000000,\n/* 0x40 icvForeground ?? */\n0xFFFFFF,\n/* 0x41 icvBackground ?? */\n0x000000,\n/* 0x42 icvFrame ?? */\n0x000000,\n/* 0x43 icv3D ?? */\n0x000000,\n/* 0x44 icv3DText ?? */\n0x000000,\n/* 0x45 icv3DHilite ?? */\n0x000000,\n/* 0x46 icv3DShadow ?? */\n0x000000,\n/* 0x47 icvHilite ?? */\n0x000000,\n/* 0x48 icvCtlText ?? */\n0x000000,\n/* 0x49 icvCtlScrl ?? */\n0x000000,\n/* 0x4A icvCtlInv ?? */\n0x000000,\n/* 0x4B icvCtlBody ?? */\n0x000000,\n/* 0x4C icvCtlFrame ?? */\n0x000000,\n/* 0x4D icvCtlFore ?? */\n0x000000,\n/* 0x4E icvCtlBack ?? */\n0x000000,\n/* 0x4F icvCtlNeutral */\n0x000000,\n/* 0x50 icvInfoBk ?? */\n0x000000\n/* 0x51 icvInfoText ?? */\n]);\n\nvar XLSIcv = /*#__PURE__*/dup(_XLSIcv);\n/* [MS-XLSB] 2.5.97.2 */\n\nvar BErr = {\n  /*::[*/\n  0x00\n  /*::]*/\n  : \"#NULL!\",\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : \"#DIV/0!\",\n\n  /*::[*/\n  0x0F\n  /*::]*/\n  : \"#VALUE!\",\n\n  /*::[*/\n  0x17\n  /*::]*/\n  : \"#REF!\",\n\n  /*::[*/\n  0x1D\n  /*::]*/\n  : \"#NAME?\",\n\n  /*::[*/\n  0x24\n  /*::]*/\n  : \"#NUM!\",\n\n  /*::[*/\n  0x2A\n  /*::]*/\n  : \"#N/A\",\n\n  /*::[*/\n  0x2B\n  /*::]*/\n  : \"#GETTING_DATA\",\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : \"#WTF?\"\n}; //var RBErr = evert_num(BErr);\n\nvar RBErr = {\n  \"#NULL!\": 0x00,\n  \"#DIV/0!\": 0x07,\n  \"#VALUE!\": 0x0F,\n  \"#REF!\": 0x17,\n  \"#NAME?\": 0x1D,\n  \"#NUM!\": 0x24,\n  \"#N/A\": 0x2A,\n  \"#GETTING_DATA\": 0x2B,\n  \"#WTF?\": 0xFF\n};\nvar XLSLblBuiltIn = [\"_xlnm.Consolidate_Area\", \"_xlnm.Auto_Open\", \"_xlnm.Auto_Close\", \"_xlnm.Extract\", \"_xlnm.Database\", \"_xlnm.Criteria\", \"_xlnm.Print_Area\", \"_xlnm.Print_Titles\", \"_xlnm.Recorder\", \"_xlnm.Data_Form\", \"_xlnm.Auto_Activate\", \"_xlnm.Auto_Deactivate\", \"_xlnm.Sheet_Title\", \"_xlnm._FilterDatabase\"];\n/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */\n\n/* 12.3 Part Summary <SpreadsheetML> */\n\n/* 14.2 Part Summary <DrawingML> */\n\n/* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */\n\nvar ct2type\n/*{[string]:string}*/\n= {\n  /* Workbook */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n  \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\": \"workbooks\",\n  \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\": \"workbooks\",\n  \"application/vnd.ms-excel.addin.macroEnabled.main+xml\": \"workbooks\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\": \"workbooks\",\n\n  /* Worksheet */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\": \"sheets\",\n  \"application/vnd.ms-excel.worksheet\": \"sheets\",\n  \"application/vnd.ms-excel.binIndexWs\": \"TODO\",\n\n  /* Binary Index */\n\n  /* Chartsheet */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": \"charts\",\n  \"application/vnd.ms-excel.chartsheet\": \"charts\",\n\n  /* Macrosheet */\n  \"application/vnd.ms-excel.macrosheet+xml\": \"macros\",\n  \"application/vnd.ms-excel.macrosheet\": \"macros\",\n  \"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n  \"application/vnd.ms-excel.binIndexMs\": \"TODO\",\n\n  /* Binary Index */\n\n  /* Dialogsheet */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": \"dialogs\",\n  \"application/vnd.ms-excel.dialogsheet\": \"dialogs\",\n\n  /* Shared Strings */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\": \"strs\",\n  \"application/vnd.ms-excel.sharedStrings\": \"strs\",\n\n  /* Styles */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\": \"styles\",\n  \"application/vnd.ms-excel.styles\": \"styles\",\n\n  /* File Properties */\n  \"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n  \"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n  \"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n\n  /* Custom Data Properties */\n  \"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty\": \"TODO\",\n\n  /* Comments */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": \"comments\",\n  \"application/vnd.ms-excel.comments\": \"comments\",\n  \"application/vnd.ms-excel.threadedcomments+xml\": \"threadedcomments\",\n  \"application/vnd.ms-excel.person+xml\": \"people\",\n\n  /* Metadata (Stock/Geography and Dynamic Array) */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"metadata\",\n  \"application/vnd.ms-excel.sheetMetadata\": \"metadata\",\n\n  /* PivotTable */\n  \"application/vnd.ms-excel.pivotTable\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n\n  /* Chart Objects */\n  \"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n\n  /* Chart Colors */\n  \"application/vnd.ms-office.chartcolorstyle+xml\": \"TODO\",\n\n  /* Chart Style */\n  \"application/vnd.ms-office.chartstyle+xml\": \"TODO\",\n\n  /* Chart Advanced */\n  \"application/vnd.ms-office.chartex+xml\": \"TODO\",\n\n  /* Calculation Chain */\n  \"application/vnd.ms-excel.calcChain\": \"calcchains\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n\n  /* Printer Settings */\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n\n  /* ActiveX */\n  \"application/vnd.ms-office.activeX\": \"TODO\",\n  \"application/vnd.ms-office.activeX+xml\": \"TODO\",\n\n  /* Custom Toolbars */\n  \"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n\n  /* External Data Connections */\n  \"application/vnd.ms-excel.connections\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n\n  /* External Links */\n  \"application/vnd.ms-excel.externalLink\": \"links\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"links\",\n\n  /* PivotCache */\n  \"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n  \"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n\n  /* Query Table */\n  \"application/vnd.ms-excel.queryTable\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n\n  /* Shared Workbook */\n  \"application/vnd.ms-excel.userNames\": \"TODO\",\n  \"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n  \"application/vnd.ms-excel.revisionLog\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n\n  /* Single Cell Table */\n  \"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n\n  /* Slicer */\n  \"application/vnd.ms-excel.slicer\": \"TODO\",\n  \"application/vnd.ms-excel.slicerCache\": \"TODO\",\n  \"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n  \"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n\n  /* Sort Map */\n  \"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n\n  /* Table */\n  \"application/vnd.ms-excel.table\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n\n  /* Themes */\n  \"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n\n  /* Theme Override */\n  \"application/vnd.openxmlformats-officedocument.themeOverride+xml\": \"TODO\",\n\n  /* Timeline */\n  \"application/vnd.ms-excel.Timeline+xml\": \"TODO\",\n\n  /* verify */\n  \"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\",\n\n  /* verify */\n\n  /* VBA */\n  \"application/vnd.ms-office.vbaProject\": \"vba\",\n  \"application/vnd.ms-office.vbaProjectSignature\": \"TODO\",\n\n  /* Volatile Dependencies */\n  \"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n\n  /* Control Properties */\n  \"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n\n  /* Data Model */\n  \"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n\n  /* Survey */\n  \"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n\n  /* Drawing */\n  \"application/vnd.openxmlformats-officedocument.drawing+xml\": \"drawings\",\n  \"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n\n  /* VML */\n  \"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n  \"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n  \"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n\n  /* Image */\n  \"image/png\": \"TODO\",\n  \"sheet\": \"js\"\n}\n/*:any*/\n;\nvar CT_LIST = {\n  workbooks: {\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n    xlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n    xlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n    xlam: \"application/vnd.ms-excel.addin.macroEnabled.main+xml\",\n    xltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n  },\n  strs: {\n    /* Shared Strings */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n    xlsb: \"application/vnd.ms-excel.sharedStrings\"\n  },\n  comments: {\n    /* Comments */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\",\n    xlsb: \"application/vnd.ms-excel.comments\"\n  },\n  sheets: {\n    /* Worksheet */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n    xlsb: \"application/vnd.ms-excel.worksheet\"\n  },\n  charts: {\n    /* Chartsheet */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\",\n    xlsb: \"application/vnd.ms-excel.chartsheet\"\n  },\n  dialogs: {\n    /* Dialogsheet */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\",\n    xlsb: \"application/vnd.ms-excel.dialogsheet\"\n  },\n  macros: {\n    /* Macrosheet (Excel 4.0 Macros) */\n    xlsx: \"application/vnd.ms-excel.macrosheet+xml\",\n    xlsb: \"application/vnd.ms-excel.macrosheet\"\n  },\n  metadata: {\n    /* Metadata (Stock/Geography and Dynamic Array) */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\",\n    xlsb: \"application/vnd.ms-excel.sheetMetadata\"\n  },\n  styles: {\n    /* Styles */\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n    xlsb: \"application/vnd.ms-excel.styles\"\n  }\n};\n\nfunction new_ct()\n/*:any*/\n{\n  return {\n    workbooks: [],\n    sheets: [],\n    charts: [],\n    dialogs: [],\n    macros: [],\n    rels: [],\n    strs: [],\n    comments: [],\n    threadedcomments: [],\n    links: [],\n    coreprops: [],\n    extprops: [],\n    custprops: [],\n    themes: [],\n    styles: [],\n    calcchains: [],\n    vba: [],\n    drawings: [],\n    metadata: [],\n    people: [],\n    TODO: [],\n    xmlns: \"\"\n  }\n  /*:any*/\n  ;\n}\n\nfunction parse_ct(data\n/*:?string*/\n) {\n  var ct = new_ct();\n  if (!data || !data.match) return ct;\n  var ctext = {};\n  (data.match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (y[0].replace(nsregex, \"<\")) {\n      case '<?xml':\n        break;\n\n      case '<Types':\n        ct.xmlns = y['xmlns' + (y[0].match(/<(\\w+):/) || [\"\", \"\"])[1]];\n        break;\n\n      case '<Default':\n        ctext[y.Extension.toLowerCase()] = y.ContentType;\n        break;\n\n      case '<Override':\n        if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);\n        break;\n    }\n  });\n  if (ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n  ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n  ct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n  ct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n  ct.defaults = ctext;\n  delete ct.calcchains;\n  return ct;\n}\n\nfunction write_ct(ct, opts, raw)\n/*:string*/\n{\n  var type2ct\n  /*{[string]:Array<string>}*/\n  = evert_arr(ct2type);\n  var o\n  /*:Array<string>*/\n  = [],\n      v;\n\n  if (!raw) {\n    o[o.length] = XML_HEADER;\n    o[o.length] = writextag('Types', null, {\n      'xmlns': XMLNS.CT,\n      'xmlns:xsd': XMLNS.xsd,\n      'xmlns:xsi': XMLNS.xsi\n    });\n    o = o.concat([['xml', 'application/xml'], ['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'], ['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'], ['data', 'application/vnd.openxmlformats-officedocument.model+data'],\n    /* from test files */\n    ['bmp', 'image/bmp'], ['png', 'image/png'], ['gif', 'image/gif'], ['emf', 'image/x-emf'], ['wmf', 'image/x-wmf'], ['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'], ['tif', 'image/tiff'], ['tiff', 'image/tiff'], ['pdf', 'application/pdf'], ['rels', 'application/vnd.openxmlformats-package.relationships+xml']].map(function (x) {\n      return writextag('Default', null, {\n        'Extension': x[0],\n        'ContentType': x[1]\n      });\n    }));\n  }\n  /* only write first instance */\n\n\n  var f1 = function f1(w) {\n    if (ct[w] && ct[w].length > 0) {\n      v = ct[w][0];\n      o[o.length] = writextag('Override', null, {\n        'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n        'ContentType': CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx']\n      });\n    }\n  };\n  /* book type-specific */\n\n\n  var f2 = function f2(w) {\n    (ct[w] || []).forEach(function (v) {\n      o[o.length] = writextag('Override', null, {\n        'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n        'ContentType': CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx']\n      });\n    });\n  };\n  /* standard type */\n\n\n  var f3 = function f3(t) {\n    (ct[t] || []).forEach(function (v) {\n      o[o.length] = writextag('Override', null, {\n        'PartName': (v[0] == '/' ? \"\" : \"/\") + v,\n        'ContentType': type2ct[t][0]\n      });\n    });\n  };\n\n  f1('workbooks');\n  f2('sheets');\n  f2('charts');\n  f3('themes');\n  ['strs', 'styles'].forEach(f1);\n  ['coreprops', 'extprops', 'custprops'].forEach(f3);\n  f3('vba');\n  f3('comments');\n  f3('threadedcomments');\n  f3('drawings');\n  f2('metadata');\n  f3('people');\n\n  if (!raw && o.length > 2) {\n    o[o.length] = '</Types>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* 9.3 Relationships */\n\n\nvar RELS = {\n  WB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n  SHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n  HLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n  VML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing\",\n  XPATH: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath\",\n  XMISS: \"http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing\",\n  XLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink\",\n  CXML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml\",\n  CXMLP: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps\",\n  CMNT: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\",\n  CORE_PROPS: \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\n  EXT_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties',\n  CUST_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties',\n  SST: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\",\n  STY: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n  THEME: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\n  CHART: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart\",\n  CHARTEX: \"http://schemas.microsoft.com/office/2014/relationships/chartEx\",\n  CS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet\",\n  WS: [\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\", \"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet\"],\n  DS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet\",\n  MS: \"http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet\",\n  IMG: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n  DRAW: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\",\n  XLMETA: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata\",\n  TCMNT: \"http://schemas.microsoft.com/office/2017/10/relationships/threadedComment\",\n  PEOPLE: \"http://schemas.microsoft.com/office/2017/10/relationships/person\",\n  CONN: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/connections\",\n  VBA: \"http://schemas.microsoft.com/office/2006/relationships/vbaProject\"\n}\n/*:any*/\n;\n/* 9.3.3 Representing Relationships */\n\nfunction get_rels_path(file\n/*:string*/\n)\n/*:string*/\n{\n  var n = file.lastIndexOf(\"/\");\n  return file.slice(0, n + 1) + '_rels/' + file.slice(n + 1) + \".rels\";\n}\n\nfunction parse_rels(data\n/*:?string*/\n, currentFilePath\n/*:string*/\n) {\n  var rels = {\n    \"!id\": {}\n  };\n  if (!data) return rels;\n\n  if (currentFilePath.charAt(0) !== '/') {\n    currentFilePath = '/' + currentFilePath;\n  }\n\n  var hash = {};\n  (data.match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n    /* 9.3.2.2 OPC_Relationships */\n\n    if (y[0] === '<Relationship') {\n      var rel = {};\n      rel.Type = y.Type;\n      rel.Target = y.Target;\n      rel.Id = y.Id;\n      if (y.TargetMode) rel.TargetMode = y.TargetMode;\n      var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);\n      rels[canonictarget] = rel;\n      hash[y.Id] = rel;\n    }\n  });\n  rels[\"!id\"] = hash;\n  return rels;\n}\n/* TODO */\n\n\nfunction write_rels(rels)\n/*:string*/\n{\n  var o = [XML_HEADER, writextag('Relationships', null, {\n    //'xmlns:ns0': XMLNS.RELS,\n    'xmlns': XMLNS.RELS\n  })];\n  keys(rels['!id']).forEach(function (rid) {\n    o[o.length] = writextag('Relationship', null, rels['!id'][rid]);\n  });\n\n  if (o.length > 2) {\n    o[o.length] = '</Relationships>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n\nfunction add_rels(rels, rId\n/*:number*/\n, f, type, relobj, targetmode\n/*:?string*/\n)\n/*:number*/\n{\n  if (!relobj) relobj = {};\n  if (!rels['!id']) rels['!id'] = {};\n  if (!rels['!idx']) rels['!idx'] = 1;\n  if (rId < 0) for (rId = rels['!idx']; rels['!id']['rId' + rId]; ++rId) {\n    /* empty */\n  }\n  rels['!idx'] = rId + 1;\n  relobj.Id = 'rId' + rId;\n  relobj.Type = type;\n  relobj.Target = f;\n  if (targetmode) relobj.TargetMode = targetmode;else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1) relobj.TargetMode = \"External\";\n  if (rels['!id'][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n  rels['!id'][relobj.Id] = relobj;\n  rels[('/' + relobj.Target).replace(\"//\", \"/\")] = relobj;\n  return rId;\n}\n/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */\n\n/* Part 3 Section 4 Manifest File */\n\n\nvar CT_ODS = \"application/vnd.oasis.opendocument.spreadsheet\";\n\nfunction parse_manifest(d, opts) {\n  var str = xlml_normalize(d);\n  var Rn;\n  var FEtag;\n\n  while (Rn = xlmlregex.exec(str)) {\n    switch (Rn[3]) {\n      case 'manifest':\n        break;\n      // 4.2 <manifest:manifest>\n\n      case 'file-entry':\n        // 4.3 <manifest:file-entry>\n        FEtag = parsexmltag(Rn[0], false);\n        if (FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error(\"This OpenDocument is not a spreadsheet\");\n        break;\n\n      case 'encryption-data': // 4.4 <manifest:encryption-data>\n\n      case 'algorithm': // 4.5 <manifest:algorithm>\n\n      case 'start-key-generation': // 4.6 <manifest:start-key-generation>\n\n      case 'key-derivation':\n        // 4.7 <manifest:key-derivation>\n        throw new Error(\"Unsupported ODS Encryption\");\n\n      default:\n        if (opts && opts.WTF) throw Rn;\n    }\n  }\n}\n\nfunction write_manifest(manifest\n/*:Array<Array<string> >*/\n)\n/*:string*/\n{\n  var o = [XML_HEADER];\n  o.push('<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n');\n  o.push('  <manifest:file-entry manifest:full-path=\"/\" manifest:version=\"1.2\" manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\"/>\\n');\n\n  for (var i = 0; i < manifest.length; ++i) {\n    o.push('  <manifest:file-entry manifest:full-path=\"' + manifest[i][0] + '\" manifest:media-type=\"' + manifest[i][1] + '\"/>\\n');\n  }\n\n  o.push('</manifest:manifest>');\n  return o.join(\"\");\n}\n/* Part 3 Section 6 Metadata Manifest File */\n\n\nfunction write_rdf_type(file\n/*:string*/\n, res\n/*:string*/\n, tag\n/*:?string*/\n) {\n  return ['  <rdf:Description rdf:about=\"' + file + '\">\\n', '    <rdf:type rdf:resource=\"http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || \"odf\") + '#' + res + '\"/>\\n', '  </rdf:Description>\\n'].join(\"\");\n}\n\nfunction write_rdf_has(base\n/*:string*/\n, file\n/*:string*/\n) {\n  return ['  <rdf:Description rdf:about=\"' + base + '\">\\n', '    <ns0:hasPart xmlns:ns0=\"http://docs.oasis-open.org/ns/office/1.2/meta/pkg#\" rdf:resource=\"' + file + '\"/>\\n', '  </rdf:Description>\\n'].join(\"\");\n}\n\nfunction write_rdf(rdf) {\n  var o = [XML_HEADER];\n  o.push('<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\\n');\n\n  for (var i = 0; i != rdf.length; ++i) {\n    o.push(write_rdf_type(rdf[i][0], rdf[i][1]));\n    o.push(write_rdf_has(\"\", rdf[i][0]));\n  }\n\n  o.push(write_rdf_type(\"\", \"Document\", \"pkg\"));\n  o.push('</rdf:RDF>');\n  return o.join(\"\");\n}\n/* TODO: pull properties */\n\n\nfunction\n  /*:: wb: Workbook, opts: any*/\nwrite_meta_ods()\n/*:string*/\n{\n  return '<office:document-meta xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" xmlns:meta=\"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" office:version=\"1.2\"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';\n}\n/* ECMA-376 Part II 11.1 Core Properties Part */\n\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\n\nvar CORE_PROPS\n/*:Array<Array<string> >*/\n= [[\"cp:category\", \"Category\"], [\"cp:contentStatus\", \"ContentStatus\"], [\"cp:keywords\", \"Keywords\"], [\"cp:lastModifiedBy\", \"LastAuthor\"], [\"cp:lastPrinted\", \"LastPrinted\"], [\"cp:revision\", \"RevNumber\"], [\"cp:version\", \"Version\"], [\"dc:creator\", \"Author\"], [\"dc:description\", \"Comments\"], [\"dc:identifier\", \"Identifier\"], [\"dc:language\", \"Language\"], [\"dc:subject\", \"Subject\"], [\"dc:title\", \"Title\"], [\"dcterms:created\", \"CreatedDate\", 'date'], [\"dcterms:modified\", \"ModifiedDate\", 'date']];\n\nvar CORE_PROPS_REGEX\n/*:Array<RegExp>*/\n= /*#__PURE__*/function () {\n  var r = new Array(CORE_PROPS.length);\n\n  for (var i = 0; i < CORE_PROPS.length; ++i) {\n    var f = CORE_PROPS[i];\n    var g = \"(?:\" + f[0].slice(0, f[0].indexOf(\":\")) + \":)\" + f[0].slice(f[0].indexOf(\":\") + 1);\n    r[i] = new RegExp(\"<\" + g + \"[^>]*>([\\\\s\\\\S]*?)<\\/\" + g + \">\");\n  }\n\n  return r;\n}();\n\nfunction parse_core_props(data) {\n  var p = {};\n  data = utf8read(data);\n\n  for (var i = 0; i < CORE_PROPS.length; ++i) {\n    var f = CORE_PROPS[i],\n        cur = data.match(CORE_PROPS_REGEX[i]);\n    if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);\n    if (f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);\n  }\n\n  return p;\n}\n\nfunction cp_doit(f, g, h, o, p) {\n  if (p[f] != null || g == null || g === \"\") return;\n  p[f] = g;\n  g = escapexml(g);\n  o[o.length] = h ? writextag(f, g, h) : writetag(f, g);\n}\n\nfunction write_core_props(cp, _opts) {\n  var opts = _opts || {};\n  var o = [XML_HEADER, writextag('cp:coreProperties', null, {\n    //'xmlns': XMLNS.CORE_PROPS,\n    'xmlns:cp': XMLNS.CORE_PROPS,\n    'xmlns:dc': XMLNS.dc,\n    'xmlns:dcterms': XMLNS.dcterms,\n    'xmlns:dcmitype': XMLNS.dcmitype,\n    'xmlns:xsi': XMLNS.xsi\n  })],\n      p = {};\n  if (!cp && !opts.Props) return o.join(\"\");\n\n  if (cp) {\n    if (cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\n      \"xsi:type\": \"dcterms:W3CDTF\"\n    }, o, p);\n    if (cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\n      \"xsi:type\": \"dcterms:W3CDTF\"\n    }, o, p);\n  }\n\n  for (var i = 0; i != CORE_PROPS.length; ++i) {\n    var f = CORE_PROPS[i];\n    var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;\n    if (v === true) v = \"1\";else if (v === false) v = \"0\";else if (typeof v == \"number\") v = String(v);\n    if (v != null) cp_doit(f[0], v, null, o, p);\n  }\n\n  if (o.length > 2) {\n    o[o.length] = '</cp:coreProperties>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* 15.2.12.3 Extended File Properties Part */\n\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\n\nvar EXT_PROPS\n/*:Array<Array<string> >*/\n= [[\"Application\", \"Application\", \"string\"], [\"AppVersion\", \"AppVersion\", \"string\"], [\"Company\", \"Company\", \"string\"], [\"DocSecurity\", \"DocSecurity\", \"string\"], [\"Manager\", \"Manager\", \"string\"], [\"HyperlinksChanged\", \"HyperlinksChanged\", \"bool\"], [\"SharedDoc\", \"SharedDoc\", \"bool\"], [\"LinksUpToDate\", \"LinksUpToDate\", \"bool\"], [\"ScaleCrop\", \"ScaleCrop\", \"bool\"], [\"HeadingPairs\", \"HeadingPairs\", \"raw\"], [\"TitlesOfParts\", \"TitlesOfParts\", \"raw\"]];\nvar PseudoPropsPairs = [\"Worksheets\", \"SheetNames\", \"NamedRanges\", \"DefinedNames\", \"Chartsheets\", \"ChartNames\"];\n\nfunction load_props_pairs(HP\n/*:string|Array<Array<any>>*/\n, TOP, props, opts) {\n  var v = [];\n  if (typeof HP == \"string\") v = parseVector(HP, opts);else for (var j = 0; j < HP.length; ++j) {\n    v = v.concat(HP[j].map(function (hp) {\n      return {\n        v: hp\n      };\n    }));\n  }\n  var parts = typeof TOP == \"string\" ? parseVector(TOP, opts).map(function (x) {\n    return x.v;\n  }) : TOP;\n  var idx = 0,\n      len = 0;\n  if (parts.length > 0) for (var i = 0; i !== v.length; i += 2) {\n    len = +v[i + 1].v;\n\n    switch (v[i].v) {\n      case \"Worksheets\":\n      case \"工作表\":\n      case \"Листы\":\n      case \"أوراق العمل\":\n      case \"ワークシート\":\n      case \"גליונות עבודה\":\n      case \"Arbeitsblätter\":\n      case \"Çalışma Sayfaları\":\n      case \"Feuilles de calcul\":\n      case \"Fogli di lavoro\":\n      case \"Folhas de cálculo\":\n      case \"Planilhas\":\n      case \"Regneark\":\n      case \"Hojas de cálculo\":\n      case \"Werkbladen\":\n        props.Worksheets = len;\n        props.SheetNames = parts.slice(idx, idx + len);\n        break;\n\n      case \"Named Ranges\":\n      case \"Rangos con nombre\":\n      case \"名前付き一覧\":\n      case \"Benannte Bereiche\":\n      case \"Navngivne områder\":\n        props.NamedRanges = len;\n        props.DefinedNames = parts.slice(idx, idx + len);\n        break;\n\n      case \"Charts\":\n      case \"Diagramme\":\n        props.Chartsheets = len;\n        props.ChartNames = parts.slice(idx, idx + len);\n        break;\n    }\n\n    idx += len;\n  }\n}\n\nfunction parse_ext_props(data, p, opts) {\n  var q = {};\n  if (!p) p = {};\n  data = utf8read(data);\n  EXT_PROPS.forEach(function (f) {\n    var xml = (data.match(matchtag(f[0])) || [])[1];\n\n    switch (f[2]) {\n      case \"string\":\n        if (xml) p[f[1]] = unescapexml(xml);\n        break;\n\n      case \"bool\":\n        p[f[1]] = xml === \"true\";\n        break;\n\n      case \"raw\":\n        var cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>([\\\\s\\\\S]*?)<\\/\" + f[0] + \">\"));\n        if (cur && cur.length > 0) q[f[1]] = cur[1];\n        break;\n    }\n  });\n  if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);\n  return p;\n}\n\nfunction write_ext_props(cp\n/*::, opts*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [],\n      W = writextag;\n  if (!cp) cp = {};\n  cp.Application = \"SheetJS\";\n  o[o.length] = XML_HEADER;\n  o[o.length] = writextag('Properties', null, {\n    'xmlns': XMLNS.EXT_PROPS,\n    'xmlns:vt': XMLNS.vt\n  });\n  EXT_PROPS.forEach(function (f) {\n    if (cp[f[1]] === undefined) return;\n    var v;\n\n    switch (f[2]) {\n      case 'string':\n        v = escapexml(String(cp[f[1]]));\n        break;\n\n      case 'bool':\n        v = cp[f[1]] ? 'true' : 'false';\n        break;\n    }\n\n    if (v !== undefined) o[o.length] = W(f[0], v);\n  });\n  /* TODO: HeadingPairs, TitlesOfParts */\n\n  o[o.length] = W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>') + W('vt:variant', W('vt:i4', String(cp.Worksheets))), {\n    size: 2,\n    baseType: \"variant\"\n  }));\n  o[o.length] = W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function (s) {\n    return \"<vt:lpstr>\" + escapexml(s) + \"</vt:lpstr>\";\n  }).join(\"\"), {\n    size: cp.Worksheets,\n    baseType: \"lpstr\"\n  }));\n\n  if (o.length > 2) {\n    o[o.length] = '</Properties>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* 15.2.12.2 Custom File Properties Part */\n\n\nvar custregex = /<[^>]+>[^<]*/g;\n\nfunction parse_cust_props(data\n/*:string*/\n, opts) {\n  var p = {},\n      name = \"\";\n  var m = data.match(custregex);\n  if (m) for (var i = 0; i != m.length; ++i) {\n    var x = m[i],\n        y = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<?xml':\n        break;\n\n      case '<Properties':\n        break;\n\n      case '<property':\n        name = unescapexml(y.name);\n        break;\n\n      case '</property>':\n        name = null;\n        break;\n\n      default:\n        if (x.indexOf('<vt:') === 0) {\n          var toks = x.split('>');\n          var type = toks[0].slice(4),\n              text = toks[1];\n          /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */\n\n          switch (type) {\n            case 'lpstr':\n            case 'bstr':\n            case 'lpwstr':\n              p[name] = unescapexml(text);\n              break;\n\n            case 'bool':\n              p[name] = parsexmlbool(text);\n              break;\n\n            case 'i1':\n            case 'i2':\n            case 'i4':\n            case 'i8':\n            case 'int':\n            case 'uint':\n              p[name] = parseInt(text, 10);\n              break;\n\n            case 'r4':\n            case 'r8':\n            case 'decimal':\n              p[name] = parseFloat(text);\n              break;\n\n            case 'filetime':\n            case 'date':\n              p[name] = parseDate(text);\n              break;\n\n            case 'cy':\n            case 'error':\n              p[name] = unescapexml(text);\n              break;\n\n            default:\n              if (type.slice(-1) == '/') break;\n              if (opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);\n          }\n        } else if (x.slice(0, 2) === \"</\") {\n          /* empty */\n        } else if (opts.WTF) throw new Error(x);\n\n    }\n  }\n  return p;\n}\n\nfunction write_cust_props(cp\n/*::, opts*/\n)\n/*:string*/\n{\n  var o = [XML_HEADER, writextag('Properties', null, {\n    'xmlns': XMLNS.CUST_PROPS,\n    'xmlns:vt': XMLNS.vt\n  })];\n  if (!cp) return o.join(\"\");\n  var pid = 1;\n  keys(cp).forEach(function custprop(k) {\n    ++pid;\n    o[o.length] = writextag('property', write_vt(cp[k], true), {\n      'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',\n      'pid': pid,\n      'name': escapexml(k)\n    });\n  });\n\n  if (o.length > 2) {\n    o[o.length] = '</Properties>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* Common Name -> XLML Name */\n\n\nvar XLMLDocPropsMap = {\n  Title: 'Title',\n  Subject: 'Subject',\n  Author: 'Author',\n  Keywords: 'Keywords',\n  Comments: 'Description',\n  LastAuthor: 'LastAuthor',\n  RevNumber: 'Revision',\n  Application: 'AppName',\n\n  /* TotalTime: 'TotalTime', */\n  LastPrinted: 'LastPrinted',\n  CreatedDate: 'Created',\n  ModifiedDate: 'LastSaved',\n\n  /* Pages */\n\n  /* Words */\n\n  /* Characters */\n  Category: 'Category',\n\n  /* PresentationFormat */\n  Manager: 'Manager',\n  Company: 'Company',\n\n  /* Guid */\n\n  /* HyperlinkBase */\n\n  /* Bytes */\n\n  /* Lines */\n\n  /* Paragraphs */\n\n  /* CharactersWithSpaces */\n  AppVersion: 'Version',\n  ContentStatus: 'ContentStatus',\n\n  /* NOTE: missing from schema */\n  Identifier: 'Identifier',\n\n  /* NOTE: missing from schema */\n  Language: 'Language'\n  /* NOTE: missing from schema */\n\n};\nvar evert_XLMLDPM;\n\nfunction xlml_set_prop(Props, tag\n/*:string*/\n, val) {\n  if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);\n  tag = evert_XLMLDPM[tag] || tag;\n  Props[tag] = val;\n}\n\nfunction xlml_write_docprops(Props, opts) {\n  var o\n  /*:Array<string>*/\n  = [];\n  keys(XLMLDocPropsMap).map(function (m) {\n    for (var i = 0; i < CORE_PROPS.length; ++i) {\n      if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];\n    }\n\n    for (i = 0; i < EXT_PROPS.length; ++i) {\n      if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];\n    }\n\n    throw m;\n  }).forEach(function (p) {\n    if (Props[p[1]] == null) return;\n    var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];\n\n    switch (p[2]) {\n      case 'date':\n        m = new Date(m).toISOString().replace(/\\.\\d*Z/, \"Z\");\n        break;\n    }\n\n    if (typeof m == 'number') m = String(m);else if (m === true || m === false) {\n      m = m ? \"1\" : \"0\";\n    } else if (m instanceof Date) m = new Date(m).toISOString().replace(/\\.\\d*Z/, \"\");\n    o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));\n  });\n  return writextag('DocumentProperties', o.join(\"\"), {\n    xmlns: XLMLNS.o\n  });\n}\n\nfunction xlml_write_custprops(Props, Custprops\n/*::, opts*/\n) {\n  var BLACKLIST = [\"Worksheets\", \"SheetNames\"];\n  var T = 'CustomDocumentProperties';\n  var o\n  /*:Array<string>*/\n  = [];\n  if (Props) keys(Props).forEach(function (k) {\n    /*:: if(!Props) return; */\n    if (!Object.prototype.hasOwnProperty.call(Props, k)) return;\n\n    for (var i = 0; i < CORE_PROPS.length; ++i) {\n      if (k == CORE_PROPS[i][1]) return;\n    }\n\n    for (i = 0; i < EXT_PROPS.length; ++i) {\n      if (k == EXT_PROPS[i][1]) return;\n    }\n\n    for (i = 0; i < BLACKLIST.length; ++i) {\n      if (k == BLACKLIST[i]) return;\n    }\n\n    var m = Props[k];\n    var t = \"string\";\n\n    if (typeof m == 'number') {\n      t = \"float\";\n      m = String(m);\n    } else if (m === true || m === false) {\n      t = \"boolean\";\n      m = m ? \"1\" : \"0\";\n    } else m = String(m);\n\n    o.push(writextag(escapexmltag(k), m, {\n      \"dt:dt\": t\n    }));\n  });\n  if (Custprops) keys(Custprops).forEach(function (k) {\n    /*:: if(!Custprops) return; */\n    if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;\n    if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;\n    var m = Custprops[k];\n    var t = \"string\";\n\n    if (typeof m == 'number') {\n      t = \"float\";\n      m = String(m);\n    } else if (m === true || m === false) {\n      t = \"boolean\";\n      m = m ? \"1\" : \"0\";\n    } else if (m instanceof Date) {\n      t = \"dateTime.tz\";\n      m = m.toISOString();\n    } else m = String(m);\n\n    o.push(writextag(escapexmltag(k), m, {\n      \"dt:dt\": t\n    }));\n  });\n  return '<' + T + ' xmlns=\"' + XLMLNS.o + '\">' + o.join(\"\") + '</' + T + '>';\n}\n/* [MS-DTYP] 2.3.3 FILETIME */\n\n/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */\n\n/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */\n\n\nfunction parse_FILETIME(blob) {\n  var dwLowDateTime = blob.read_shift(4),\n      dwHighDateTime = blob.read_shift(4);\n  return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\\.000/, \"\");\n}\n\nfunction write_FILETIME(time\n/*:string|Date*/\n) {\n  var date = typeof time == \"string\" ? new Date(Date.parse(time)) : time;\n  var t = date.getTime() / 1000 + 11644473600;\n  var l = t % Math.pow(2, 32),\n      h = (t - l) / Math.pow(2, 32);\n  l *= 1e7;\n  h *= 1e7;\n  var w = l / Math.pow(2, 32) | 0;\n\n  if (w > 0) {\n    l = l % Math.pow(2, 32);\n    h += w;\n  }\n\n  var o = new_buf(8);\n  o.write_shift(4, l);\n  o.write_shift(4, h);\n  return o;\n}\n/* [MS-OSHARED] 2.3.3.1.4 Lpstr */\n\n\nfunction parse_lpstr(blob, type, pad\n/*:?number*/\n) {\n  var start = blob.l;\n  var str = blob.read_shift(0, 'lpstr-cp');\n  if (pad) while (blob.l - start & 3) {\n    ++blob.l;\n  }\n  return str;\n}\n/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */\n\n\nfunction parse_lpwstr(blob, type, pad) {\n  var str = blob.read_shift(0, 'lpwstr');\n  if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;\n  return str;\n}\n/* [MS-OSHARED] 2.3.3.1.11 VtString */\n\n/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */\n\n\nfunction parse_VtStringBase(blob, stringType, pad) {\n  if (stringType === 0x1F\n  /*VT_LPWSTR*/\n  ) return parse_lpwstr(blob);\n  return parse_lpstr(blob, stringType, pad);\n}\n\nfunction parse_VtString(blob, t\n/*:number*/\n, pad\n/*:?boolean*/\n) {\n  return parse_VtStringBase(blob, t, pad === false ? 0 : 4);\n}\n\nfunction parse_VtUnalignedString(blob, t\n/*:number*/\n) {\n  if (!t) throw new Error(\"VtUnalignedString must have positive length\");\n  return parse_VtStringBase(blob, t, 0);\n}\n/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */\n\n\nfunction parse_VtVecLpwstrValue(blob)\n/*:Array<string>*/\n{\n  var length = blob.read_shift(4);\n  var ret\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i != length; ++i) {\n    var start = blob.l;\n    ret[i] = blob.read_shift(0, 'lpwstr').replace(chr0, '');\n    if (blob.l - start & 0x02) blob.l += 2;\n  }\n\n  return ret;\n}\n/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */\n\n\nfunction parse_VtVecUnalignedLpstrValue(blob)\n/*:Array<string>*/\n{\n  var length = blob.read_shift(4);\n  var ret\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i != length; ++i) {\n    ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0, '');\n  }\n\n  return ret;\n}\n/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */\n\n\nfunction parse_VtHeadingPair(blob) {\n  var start = blob.l;\n  var headingString = parse_TypedPropertyValue(blob, VT_USTR);\n  if (blob[blob.l] == 0x00 && blob[blob.l + 1] == 0x00 && blob.l - start & 0x02) blob.l += 2;\n  var headerParts = parse_TypedPropertyValue(blob, VT_I4);\n  return [headingString, headerParts];\n}\n/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */\n\n\nfunction parse_VtVecHeadingPairValue(blob) {\n  var cElements = blob.read_shift(4);\n  var out = [];\n\n  for (var i = 0; i < cElements / 2; ++i) {\n    out.push(parse_VtHeadingPair(blob));\n  }\n\n  return out;\n}\n/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */\n\n\nfunction parse_dictionary(blob, CodePage) {\n  var cnt = blob.read_shift(4);\n  var dict\n  /*:{[number]:string}*/\n  = {}\n  /*:any*/\n  ;\n\n  for (var j = 0; j != cnt; ++j) {\n    var pid = blob.read_shift(4);\n    var len = blob.read_shift(4);\n    dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? 'utf16le' : 'utf8').replace(chr0, '').replace(chr1, '!');\n    if (CodePage === 0x4B0 && len % 2) blob.l += 2;\n  }\n\n  if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;\n  return dict;\n}\n/* [MS-OLEPS] 2.9 BLOB */\n\n\nfunction parse_BLOB(blob) {\n  var size = blob.read_shift(4);\n  var bytes = blob.slice(blob.l, blob.l + size);\n  blob.l += size;\n  if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;\n  return bytes;\n}\n/* [MS-OLEPS] 2.11 ClipboardData */\n\n\nfunction parse_ClipboardData(blob) {\n  // TODO\n  var o = {};\n  o.Size = blob.read_shift(4); //o.Format = blob.read_shift(4);\n\n  blob.l += o.Size + 3 - (o.Size - 1) % 4;\n  return o;\n}\n/* [MS-OLEPS] 2.15 TypedPropertyValue */\n\n\nfunction parse_TypedPropertyValue(blob, type\n/*:number*/\n, _opts)\n/*:any*/\n{\n  var t = blob.read_shift(2),\n      ret,\n      opts = _opts || {};\n  blob.l += 2;\n  if (type !== VT_VARIANT) if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error('Expected type ' + type + ' saw ' + t);\n\n  switch (type === VT_VARIANT ? t : type) {\n    case 0x02\n    /*VT_I2*/\n    :\n      ret = blob.read_shift(2, 'i');\n      if (!opts.raw) blob.l += 2;\n      return ret;\n\n    case 0x03\n    /*VT_I4*/\n    :\n      ret = blob.read_shift(4, 'i');\n      return ret;\n\n    case 0x0B\n    /*VT_BOOL*/\n    :\n      return blob.read_shift(4) !== 0x0;\n\n    case 0x13\n    /*VT_UI4*/\n    :\n      ret = blob.read_shift(4);\n      return ret;\n\n    case 0x1E\n    /*VT_LPSTR*/\n    :\n      return parse_lpstr(blob, t, 4).replace(chr0, '');\n\n    case 0x1F\n    /*VT_LPWSTR*/\n    :\n      return parse_lpwstr(blob);\n\n    case 0x40\n    /*VT_FILETIME*/\n    :\n      return parse_FILETIME(blob);\n\n    case 0x41\n    /*VT_BLOB*/\n    :\n      return parse_BLOB(blob);\n\n    case 0x47\n    /*VT_CF*/\n    :\n      return parse_ClipboardData(blob);\n\n    case 0x50\n    /*VT_STRING*/\n    :\n      return parse_VtString(blob, t, !opts.raw).replace(chr0, '');\n\n    case 0x51\n    /*VT_USTR*/\n    :\n      return parse_VtUnalignedString(blob, t\n      /*, 4*/\n      ).replace(chr0, '');\n\n    case 0x100C\n    /*VT_VECTOR|VT_VARIANT*/\n    :\n      return parse_VtVecHeadingPairValue(blob);\n\n    case 0x101E\n    /*VT_VECTOR|VT_LPSTR*/\n    :\n    case 0x101F\n    /*VT_VECTOR|VT_LPWSTR*/\n    :\n      return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);\n\n    default:\n      throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n  }\n}\n\nfunction write_TypedPropertyValue(type\n/*:number*/\n, value) {\n  var o = new_buf(4),\n      p = new_buf(4);\n  o.write_shift(4, type == 0x50 ? 0x1F : type);\n\n  switch (type) {\n    case 0x03\n    /*VT_I4*/\n    :\n      p.write_shift(-4, value);\n      break;\n\n    case 0x05\n    /*VT_I4*/\n    :\n      p = new_buf(8);\n      p.write_shift(8, value, 'f');\n      break;\n\n    case 0x0B\n    /*VT_BOOL*/\n    :\n      p.write_shift(4, value ? 0x01 : 0x00);\n      break;\n\n    case 0x40\n    /*VT_FILETIME*/\n    :\n      /*:: if(typeof value !== \"string\" && !(value instanceof Date)) throw \"unreachable\"; */\n      p = write_FILETIME(value);\n      break;\n\n    case 0x1F\n    /*VT_LPWSTR*/\n    :\n    case 0x50\n    /*VT_STRING*/\n    :\n      /*:: if(typeof value !== \"string\") throw \"unreachable\"; */\n      p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n      p.write_shift(4, value.length + 1);\n      p.write_shift(0, value, \"dbcs\");\n\n      while (p.l != p.length) {\n        p.write_shift(1, 0);\n      }\n\n      break;\n\n    default:\n      throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + value);\n  }\n\n  return bconcat([o, p]);\n}\n/* [MS-OLEPS] 2.20 PropertySet */\n\n\nfunction parse_PropertySet(blob, PIDSI) {\n  var start_addr = blob.l;\n  var size = blob.read_shift(4);\n  var NumProps = blob.read_shift(4);\n  var Props = [],\n      i = 0;\n  var CodePage = 0;\n  var Dictionary = -1,\n      DictObj\n  /*:{[number]:string}*/\n  = {}\n  /*:any*/\n  ;\n\n  for (i = 0; i != NumProps; ++i) {\n    var PropID = blob.read_shift(4);\n    var Offset = blob.read_shift(4);\n    Props[i] = [PropID, Offset + start_addr];\n  }\n\n  Props.sort(function (x, y) {\n    return x[1] - y[1];\n  });\n  var PropH = {};\n\n  for (i = 0; i != NumProps; ++i) {\n    if (blob.l !== Props[i][1]) {\n      var fail = true;\n      if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) {\n        case 0x02\n        /*VT_I2*/\n        :\n          if (blob.l + 2 === Props[i][1]) {\n            blob.l += 2;\n            fail = false;\n          }\n\n          break;\n\n        case 0x50\n        /*VT_STRING*/\n        :\n          if (blob.l <= Props[i][1]) {\n            blob.l = Props[i][1];\n            fail = false;\n          }\n\n          break;\n\n        case 0x100C\n        /*VT_VECTOR|VT_VARIANT*/\n        :\n          if (blob.l <= Props[i][1]) {\n            blob.l = Props[i][1];\n            fail = false;\n          }\n\n          break;\n      }\n\n      if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {\n        fail = false;\n        blob.l = Props[i][1];\n      }\n\n      if (fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + ' at ' + blob.l + ' :' + i);\n    }\n\n    if (PIDSI) {\n      if (Props[i][0] == 0 && Props.length > i + 1 && Props[i][1] == Props[i + 1][1]) continue; // R9\n\n      var piddsi = PIDSI[Props[i][0]];\n      PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {\n        raw: true\n      });\n      if (piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + (\"0000\" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);\n      if (piddsi.n == \"CodePage\") switch (PropH[piddsi.n]) {\n        case 0:\n          PropH[piddsi.n] = 1252;\n\n        /* falls through */\n\n        case 874:\n        case 932:\n        case 936:\n        case 949:\n        case 950:\n        case 1250:\n        case 1251:\n        case 1253:\n        case 1254:\n        case 1255:\n        case 1256:\n        case 1257:\n        case 1258:\n        case 10000:\n        case 1200:\n        case 1201:\n        case 1252:\n        case 65000:\n        case -536:\n        case 65001:\n        case -535:\n          set_cp(CodePage = PropH[piddsi.n] >>> 0 & 0xFFFF);\n          break;\n\n        default:\n          throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n      }\n    } else {\n      if (Props[i][0] === 0x1) {\n        CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2)\n        /*:number*/\n        ;\n        set_cp(CodePage);\n\n        if (Dictionary !== -1) {\n          var oldpos = blob.l;\n          blob.l = Props[Dictionary][1];\n          DictObj = parse_dictionary(blob, CodePage);\n          blob.l = oldpos;\n        }\n      } else if (Props[i][0] === 0) {\n        if (CodePage === 0) {\n          Dictionary = i;\n          blob.l = Props[i + 1][1];\n          continue;\n        }\n\n        DictObj = parse_dictionary(blob, CodePage);\n      } else {\n        var name = DictObj[Props[i][0]];\n        var val;\n        /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */\n\n        switch (blob[blob.l]) {\n          case 0x41\n          /*VT_BLOB*/\n          :\n            blob.l += 4;\n            val = parse_BLOB(blob);\n            break;\n\n          case 0x1E\n          /*VT_LPSTR*/\n          :\n            blob.l += 4;\n            val = parse_VtString(blob, blob[blob.l - 4]).replace(/\\u0000+$/, \"\");\n            break;\n\n          case 0x1F\n          /*VT_LPWSTR*/\n          :\n            blob.l += 4;\n            val = parse_VtString(blob, blob[blob.l - 4]).replace(/\\u0000+$/, \"\");\n            break;\n\n          case 0x03\n          /*VT_I4*/\n          :\n            blob.l += 4;\n            val = blob.read_shift(4, 'i');\n            break;\n\n          case 0x13\n          /*VT_UI4*/\n          :\n            blob.l += 4;\n            val = blob.read_shift(4);\n            break;\n\n          case 0x05\n          /*VT_R8*/\n          :\n            blob.l += 4;\n            val = blob.read_shift(8, 'f');\n            break;\n\n          case 0x0B\n          /*VT_BOOL*/\n          :\n            blob.l += 4;\n            val = parsebool(blob, 4);\n            break;\n\n          case 0x40\n          /*VT_FILETIME*/\n          :\n            blob.l += 4;\n            val = parseDate(parse_FILETIME(blob));\n            break;\n\n          default:\n            throw new Error(\"unparsed value: \" + blob[blob.l]);\n        }\n\n        PropH[name] = val;\n      }\n    }\n  }\n\n  blob.l = start_addr + size;\n  /* step ahead to skip padding */\n\n  return PropH;\n}\n\nvar XLSPSSkip = [\"CodePage\", \"Thumbnail\", \"_PID_LINKBASE\", \"_PID_HLINKS\", \"SystemIdentifier\", \"FMTID\"];\n\nfunction guess_property_type(val\n/*:any*/\n)\n/*:number*/\n{\n  switch (typeof val) {\n    case \"boolean\":\n      return 0x0B;\n\n    case \"number\":\n      return (val | 0) == val ? 0x03 : 0x05;\n\n    case \"string\":\n      return 0x1F;\n\n    case \"object\":\n      if (val instanceof Date) return 0x40;\n      break;\n  }\n\n  return -1;\n}\n\nfunction write_PropertySet(entries, RE, PIDSI) {\n  var hdr = new_buf(8),\n      piao = [],\n      prop = [];\n  var sz = 8,\n      i = 0;\n  var pr = new_buf(8),\n      pio = new_buf(8);\n  pr.write_shift(4, 0x0002);\n  pr.write_shift(4, 0x04B0);\n  pio.write_shift(4, 0x0001);\n  prop.push(pr);\n  piao.push(pio);\n  sz += 8 + pr.length;\n\n  if (!RE) {\n    pio = new_buf(8);\n    pio.write_shift(4, 0);\n    piao.unshift(pio);\n    var bufs = [new_buf(4)];\n    bufs[0].write_shift(4, entries.length);\n\n    for (i = 0; i < entries.length; ++i) {\n      var value = entries[i][0];\n      pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n      pr.write_shift(4, i + 2);\n      pr.write_shift(4, value.length + 1);\n      pr.write_shift(0, value, \"dbcs\");\n\n      while (pr.l != pr.length) {\n        pr.write_shift(1, 0);\n      }\n\n      bufs.push(pr);\n    }\n\n    pr = bconcat(bufs);\n    prop.unshift(pr);\n    sz += 8 + pr.length;\n  }\n\n  for (i = 0; i < entries.length; ++i) {\n    if (RE && !RE[entries[i][0]]) continue;\n    if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;\n    if (entries[i][1] == null) continue;\n    var val = entries[i][1],\n        idx = 0;\n\n    if (RE) {\n      idx = +RE[entries[i][0]];\n      var pinfo = PIDSI\n      /*:: || {}*/\n      [idx]\n      /*:: || {} */\n      ;\n\n      if (pinfo.p == \"version\" && typeof val == \"string\") {\n        /*:: if(typeof val !== \"string\") throw \"unreachable\"; */\n        var arr = val.split(\".\");\n        val = (+arr[0] << 16) + (+arr[1] || 0);\n      }\n\n      pr = write_TypedPropertyValue(pinfo.t, val);\n    } else {\n      var T = guess_property_type(val);\n\n      if (T == -1) {\n        T = 0x1F;\n        val = String(val);\n      }\n\n      pr = write_TypedPropertyValue(T, val);\n    }\n\n    prop.push(pr);\n    pio = new_buf(8);\n    pio.write_shift(4, !RE ? 2 + i : idx);\n    piao.push(pio);\n    sz += 8 + pr.length;\n  }\n\n  var w = 8 * (prop.length + 1);\n\n  for (i = 0; i < prop.length; ++i) {\n    piao[i].write_shift(4, w);\n    w += prop[i].length;\n  }\n\n  hdr.write_shift(4, sz);\n  hdr.write_shift(4, prop.length);\n  return bconcat([hdr].concat(piao).concat(prop));\n}\n/* [MS-OLEPS] 2.21 PropertySetStream */\n\n\nfunction parse_PropertySetStream(file, PIDSI, clsid) {\n  var blob = file.content;\n  if (!blob) return {}\n  /*:any*/\n  ;\n  prep_blob(blob, 0);\n  var NumSets,\n      FMTID0,\n      FMTID1,\n      Offset0,\n      Offset1 = 0;\n  blob.chk('feff', 'Byte Order: ');\n  /*var vers = */\n\n  blob.read_shift(2); // TODO: check version\n\n  var SystemIdentifier = blob.read_shift(4);\n  var CLSID = blob.read_shift(16);\n  if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error(\"Bad PropertySet CLSID \" + CLSID);\n  NumSets = blob.read_shift(4);\n  if (NumSets !== 1 && NumSets !== 2) throw new Error(\"Unrecognized #Sets: \" + NumSets);\n  FMTID0 = blob.read_shift(16);\n  Offset0 = blob.read_shift(4);\n  if (NumSets === 1 && Offset0 !== blob.l) throw new Error(\"Length mismatch: \" + Offset0 + \" !== \" + blob.l);else if (NumSets === 2) {\n    FMTID1 = blob.read_shift(16);\n    Offset1 = blob.read_shift(4);\n  }\n  var PSet0 = parse_PropertySet(blob, PIDSI);\n  var rval = {\n    SystemIdentifier: SystemIdentifier\n  }\n  /*:any*/\n  ;\n\n  for (var y in PSet0) {\n    rval[y] = PSet0[y];\n  } //rval.blob = blob;\n\n\n  rval.FMTID = FMTID0; //rval.PSet0 = PSet0;\n\n  if (NumSets === 1) return rval;\n  if (Offset1 - blob.l == 2) blob.l += 2;\n  if (blob.l !== Offset1) throw new Error(\"Length mismatch 2: \" + blob.l + \" !== \" + Offset1);\n  var PSet1;\n\n  try {\n    PSet1 = parse_PropertySet(blob, null);\n  } catch (e) {\n    /* empty */\n  }\n\n  for (y in PSet1) {\n    rval[y] = PSet1[y];\n  }\n\n  rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1\n\n  return rval;\n}\n\nfunction write_PropertySetStream(entries, clsid, RE, PIDSI\n/*:{[key:string|number]:any}*/\n, entries2\n/*:?any*/\n, clsid2\n/*:?any*/\n) {\n  var hdr = new_buf(entries2 ? 68 : 48);\n  var bufs = [hdr];\n  hdr.write_shift(2, 0xFFFE);\n  hdr.write_shift(2, 0x0000);\n  /* TODO: type 1 props */\n\n  hdr.write_shift(4, 0x32363237);\n  hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, \"hex\");\n  hdr.write_shift(4, entries2 ? 2 : 1);\n  hdr.write_shift(16, clsid, \"hex\");\n  hdr.write_shift(4, entries2 ? 68 : 48);\n  var ps0 = write_PropertySet(entries, RE, PIDSI);\n  bufs.push(ps0);\n\n  if (entries2) {\n    var ps1 = write_PropertySet(entries2, null, null);\n    hdr.write_shift(16, clsid2, \"hex\");\n    hdr.write_shift(4, 68 + ps0.length);\n    bufs.push(ps1);\n  }\n\n  return bconcat(bufs);\n}\n\nfunction parsenoop2(blob, length) {\n  blob.read_shift(length);\n  return null;\n}\n\nfunction writezeroes(n, o) {\n  if (!o) o = new_buf(n);\n\n  for (var j = 0; j < n; ++j) {\n    o.write_shift(1, 0);\n  }\n\n  return o;\n}\n\nfunction parslurp(blob, length, cb) {\n  var arr = [],\n      target = blob.l + length;\n\n  while (blob.l < target) {\n    arr.push(cb(blob, target - blob.l));\n  }\n\n  if (target !== blob.l) throw new Error(\"Slurp error\");\n  return arr;\n}\n\nfunction parsebool(blob, length\n/*:number*/\n) {\n  return blob.read_shift(length) === 0x1;\n}\n\nfunction writebool(v\n/*:any*/\n, o) {\n  if (!o) o = new_buf(2);\n  o.write_shift(2, +!!v);\n  return o;\n}\n\nfunction parseuint16(blob\n/*::, length:?number, opts:?any*/\n) {\n  return blob.read_shift(2, 'u');\n}\n\nfunction writeuint16(v\n/*:number*/\n, o) {\n  if (!o) o = new_buf(2);\n  o.write_shift(2, v);\n  return o;\n}\n\nfunction parseuint16a(blob, length\n/*:: :?number, opts:?any*/\n) {\n  return parslurp(blob, length, parseuint16);\n}\n/* --- 2.5 Structures --- */\n\n/* [MS-XLS] 2.5.10 Bes (boolean or error) */\n\n\nfunction parse_Bes(blob\n/*::, length*/\n) {\n  var v = blob.read_shift(1),\n      t = blob.read_shift(1);\n  return t === 0x01 ? v : v === 0x01;\n}\n\nfunction write_Bes(v, t\n/*:string*/\n, o) {\n  if (!o) o = new_buf(2);\n  o.write_shift(1, t == 'e' ? +v : +!!v);\n  o.write_shift(1, t == 'e' ? 1 : 0);\n  return o;\n}\n/* [MS-XLS] 2.5.240 ShortXLUnicodeString */\n\n\nfunction parse_ShortXLUnicodeString(blob, length, opts) {\n  var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);\n  var encoding = 'sbcs-cont';\n  var cp = current_codepage;\n  if (opts && opts.biff >= 8) current_codepage = 1200;\n\n  if (!opts || opts.biff == 8) {\n    var fHighByte = blob.read_shift(1);\n\n    if (fHighByte) {\n      encoding = 'dbcs-cont';\n    }\n  } else if (opts.biff == 12) {\n    encoding = 'wstr';\n  }\n\n  if (opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';\n  var o = cch ? blob.read_shift(cch, encoding) : \"\";\n  current_codepage = cp;\n  return o;\n}\n/* 2.5.293 XLUnicodeRichExtendedString */\n\n\nfunction parse_XLUnicodeRichExtendedString(blob) {\n  var cp = current_codepage;\n  current_codepage = 1200;\n  var cch = blob.read_shift(2),\n      flags = blob.read_shift(1);\n  var\n  /*fHighByte = flags & 0x1,*/\n  fExtSt = flags & 0x4,\n      fRichSt = flags & 0x8;\n  var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n\n  var cRun = 0,\n      cbExtRst;\n  var z = {};\n  if (fRichSt) cRun = blob.read_shift(2);\n  if (fExtSt) cbExtRst = blob.read_shift(4);\n  var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';\n  var msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n  if (fRichSt) blob.l += 4 * cRun; //TODO: parse this\n\n  if (fExtSt) blob.l += cbExtRst; //TODO: parse this\n\n  z.t = msg;\n\n  if (!fRichSt) {\n    z.raw = \"<t>\" + z.t + \"</t>\";\n    z.r = z.t;\n  }\n\n  current_codepage = cp;\n  return z;\n}\n\nfunction write_XLUnicodeRichExtendedString(xlstr\n/*:: :XLString, opts*/\n) {\n  var str = xlstr.t || \"\",\n      nfmts = 1;\n  var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));\n  hdr.write_shift(2, str.length);\n  hdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);\n  if (nfmts > 1) hdr.write_shift(2, nfmts);\n  var otext = new_buf(2 * str.length);\n  otext.write_shift(2 * str.length, str, 'utf16le');\n  var out = [hdr, otext];\n  return bconcat(out);\n}\n/* 2.5.296 XLUnicodeStringNoCch */\n\n\nfunction parse_XLUnicodeStringNoCch(blob, cch, opts) {\n  var retval;\n\n  if (opts) {\n    if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');\n    if (opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');\n  }\n\n  var fHighByte = blob.read_shift(1);\n\n  if (fHighByte === 0) {\n    retval = blob.read_shift(cch, 'sbcs-cont');\n  } else {\n    retval = blob.read_shift(cch, 'dbcs-cont');\n  }\n\n  return retval;\n}\n/* 2.5.294 XLUnicodeString */\n\n\nfunction parse_XLUnicodeString(blob, length, opts) {\n  var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n\n  if (cch === 0) {\n    blob.l++;\n    return \"\";\n  }\n\n  return parse_XLUnicodeStringNoCch(blob, cch, opts);\n}\n/* BIFF5 override */\n\n\nfunction parse_XLUnicodeString2(blob, length, opts) {\n  if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);\n  var cch = blob.read_shift(1);\n\n  if (cch === 0) {\n    blob.l++;\n    return \"\";\n  }\n\n  return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? 'cpstr' : 'sbcs-cont');\n}\n/* TODO: BIFF5 and lower, codepage awareness */\n\n\nfunction write_XLUnicodeString(str, opts, o) {\n  if (!o) o = new_buf(3 + 2 * str.length);\n  o.write_shift(2, str.length);\n  o.write_shift(1, 1);\n  o.write_shift(31, str, 'utf16le');\n  return o;\n}\n/* [MS-XLS] 2.5.61 ControlInfo */\n\n\nfunction parse_ControlInfo(blob\n/*::, length, opts*/\n) {\n  var flags = blob.read_shift(1);\n  blob.l++;\n  var accel = blob.read_shift(2);\n  blob.l += 2;\n  return [flags, accel];\n}\n/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */\n\n\nfunction parse_URLMoniker(blob\n/*::, length, opts*/\n) {\n  var len = blob.read_shift(4),\n      start = blob.l;\n  var extra = false;\n\n  if (len > 24) {\n    /* look ahead */\n    blob.l += len - 24;\n    if (blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n    blob.l = start;\n  }\n\n  var url = blob.read_shift((extra ? len - 24 : len) >> 1, 'utf16le').replace(chr0, \"\");\n  if (extra) blob.l += 24;\n  return url;\n}\n/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */\n\n\nfunction parse_FileMoniker(blob\n/*::, length*/\n) {\n  var cAnti = blob.read_shift(2);\n  var preamble = \"\";\n\n  while (cAnti-- > 0) {\n    preamble += \"../\";\n  }\n\n  var ansiPath = blob.read_shift(0, 'lpstr-ansi');\n  blob.l += 2; //var endServer = blob.read_shift(2);\n\n  if (blob.read_shift(2) != 0xDEAD) throw new Error(\"Bad FileMoniker\");\n  var sz = blob.read_shift(4);\n  if (sz === 0) return preamble + ansiPath.replace(/\\\\/g, \"/\");\n  var bytes = blob.read_shift(4);\n  if (blob.read_shift(2) != 3) throw new Error(\"Bad FileMoniker\");\n  var unicodePath = blob.read_shift(bytes >> 1, 'utf16le').replace(chr0, \"\");\n  return preamble + unicodePath;\n}\n/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */\n\n\nfunction parse_HyperlinkMoniker(blob, length) {\n  var clsid = blob.read_shift(16);\n  length -= 16;\n\n  switch (clsid) {\n    case \"e0c9ea79f9bace118c8200aa004ba90b\":\n      return parse_URLMoniker(blob, length);\n\n    case \"0303000000000000c000000000000046\":\n      return parse_FileMoniker(blob, length);\n\n    default:\n      throw new Error(\"Unsupported Moniker \" + clsid);\n  }\n}\n/* [MS-OSHARED] 2.3.7.9 HyperlinkString */\n\n\nfunction parse_HyperlinkString(blob\n/*::, length*/\n) {\n  var len = blob.read_shift(4);\n  var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, \"\") : \"\";\n  return o;\n}\n\nfunction write_HyperlinkString(str\n/*:string*/\n, o) {\n  if (!o) o = new_buf(6 + str.length * 2);\n  o.write_shift(4, 1 + str.length);\n\n  for (var i = 0; i < str.length; ++i) {\n    o.write_shift(2, str.charCodeAt(i));\n  }\n\n  o.write_shift(2, 0);\n  return o;\n}\n/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */\n\n\nfunction parse_Hyperlink(blob, length)\n/*:Hyperlink*/\n{\n  var end = blob.l + length;\n  var sVer = blob.read_shift(4);\n  if (sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n  var flags = blob.read_shift(2);\n  blob.l += 2;\n  var displayName,\n      targetFrameName,\n      moniker,\n      oleMoniker,\n      Loc = \"\",\n      guid,\n      fileTime;\n  if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n  if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n  if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n  if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n  if (flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);\n  if (flags & 0x0020) guid = blob.read_shift(16);\n  if (flags & 0x0040) fileTime = parse_FILETIME(blob\n  /*, 8*/\n  );\n  blob.l = end;\n  var target = targetFrameName || moniker || oleMoniker || \"\";\n  if (target && Loc) target += \"#\" + Loc;\n  if (!target) target = \"#\" + Loc;\n  if (flags & 0x0002 && target.charAt(0) == \"/\" && target.charAt(1) != \"/\") target = \"file://\" + target;\n  var out = {\n    Target: target\n  }\n  /*:any*/\n  ;\n  if (guid) out.guid = guid;\n  if (fileTime) out.time = fileTime;\n  if (displayName) out.Tooltip = displayName;\n  return out;\n}\n\nfunction write_Hyperlink(hl) {\n  var out = new_buf(512),\n      i = 0;\n  var Target = hl.Target;\n  if (Target.slice(0, 7) == \"file://\") Target = Target.slice(7);\n  var hashidx = Target.indexOf(\"#\");\n  var F = hashidx > -1 ? 0x1f : 0x17;\n\n  switch (Target.charAt(0)) {\n    case \"#\":\n      F = 0x1c;\n      break;\n\n    case \".\":\n      F &= ~2;\n      break;\n  }\n\n  out.write_shift(4, 2);\n  out.write_shift(4, F);\n  var data = [8, 6815827, 6619237, 4849780, 83];\n\n  for (i = 0; i < data.length; ++i) {\n    out.write_shift(4, data[i]);\n  }\n\n  if (F == 0x1C) {\n    Target = Target.slice(1);\n    write_HyperlinkString(Target, out);\n  } else if (F & 0x02) {\n    data = \"e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n\n    for (i = 0; i < data.length; ++i) {\n      out.write_shift(1, parseInt(data[i], 16));\n    }\n\n    var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;\n    out.write_shift(4, 2 * (Pretarget.length + 1));\n\n    for (i = 0; i < Pretarget.length; ++i) {\n      out.write_shift(2, Pretarget.charCodeAt(i));\n    }\n\n    out.write_shift(2, 0);\n    if (F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : \"\", out);\n  } else {\n    data = \"03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46\".split(\" \");\n\n    for (i = 0; i < data.length; ++i) {\n      out.write_shift(1, parseInt(data[i], 16));\n    }\n\n    var P = 0;\n\n    while (Target.slice(P * 3, P * 3 + 3) == \"../\" || Target.slice(P * 3, P * 3 + 3) == \"..\\\\\") {\n      ++P;\n    }\n\n    out.write_shift(2, P);\n    out.write_shift(4, Target.length - 3 * P + 1);\n\n    for (i = 0; i < Target.length - 3 * P; ++i) {\n      out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);\n    }\n\n    out.write_shift(1, 0);\n    out.write_shift(2, 0xFFFF);\n    out.write_shift(2, 0xDEAD);\n\n    for (i = 0; i < 6; ++i) {\n      out.write_shift(4, 0);\n    }\n  }\n\n  return out.slice(0, out.l);\n}\n/* 2.5.178 LongRGBA */\n\n\nfunction parse_LongRGBA(blob\n/*::, length*/\n) {\n  var r = blob.read_shift(1),\n      g = blob.read_shift(1),\n      b = blob.read_shift(1),\n      a = blob.read_shift(1);\n  return [r, g, b, a];\n}\n/* 2.5.177 LongRGB */\n\n\nfunction parse_LongRGB(blob, length) {\n  var x = parse_LongRGBA(blob, length);\n  x[3] = 0;\n  return x;\n}\n/* [MS-XLS] 2.5.19 */\n\n\nfunction parse_XLSCell(blob\n/*::, length*/\n)\n/*:Cell*/\n{\n  var rw = blob.read_shift(2); // 0-indexed\n\n  var col = blob.read_shift(2);\n  var ixfe = blob.read_shift(2);\n  return {\n    r: rw,\n    c: col,\n    ixfe: ixfe\n  }\n  /*:any*/\n  ;\n}\n\nfunction write_XLSCell(R\n/*:number*/\n, C\n/*:number*/\n, ixfe\n/*:?number*/\n, o) {\n  if (!o) o = new_buf(6);\n  o.write_shift(2, R);\n  o.write_shift(2, C);\n  o.write_shift(2, ixfe || 0);\n  return o;\n}\n/* [MS-XLS] 2.5.134 */\n\n\nfunction parse_frtHeader(blob) {\n  var rt = blob.read_shift(2);\n  var flags = blob.read_shift(2); // TODO: parse these flags\n\n  blob.l += 8;\n  return {\n    type: rt,\n    flags: flags\n  };\n}\n\nfunction parse_OptXLUnicodeString(blob, length, opts) {\n  return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts);\n}\n/* [MS-XLS] 2.5.344 */\n\n\nfunction parse_XTI(blob, length, opts) {\n  var w = opts.biff > 8 ? 4 : 2;\n  var iSupBook = blob.read_shift(w),\n      itabFirst = blob.read_shift(w, 'i'),\n      itabLast = blob.read_shift(w, 'i');\n  return [iSupBook, itabFirst, itabLast];\n}\n/* [MS-XLS] 2.5.218 */\n\n\nfunction parse_RkRec(blob) {\n  var ixfe = blob.read_shift(2);\n  var RK = parse_RkNumber(blob);\n  return [ixfe, RK];\n}\n/* [MS-XLS] 2.5.1 */\n\n\nfunction parse_AddinUdf(blob, length, opts) {\n  blob.l += 4;\n  length -= 4;\n  var l = blob.l + length;\n  var udfName = parse_ShortXLUnicodeString(blob, length, opts);\n  var cb = blob.read_shift(2);\n  l -= blob.l;\n  if (cb !== l) throw new Error(\"Malformed AddinUdf: padding = \" + l + \" != \" + cb);\n  blob.l += cb;\n  return udfName;\n}\n/* [MS-XLS] 2.5.209 TODO: Check sizes */\n\n\nfunction parse_Ref8U(blob\n/*::, length*/\n) {\n  var rwFirst = blob.read_shift(2);\n  var rwLast = blob.read_shift(2);\n  var colFirst = blob.read_shift(2);\n  var colLast = blob.read_shift(2);\n  return {\n    s: {\n      c: colFirst,\n      r: rwFirst\n    },\n    e: {\n      c: colLast,\n      r: rwLast\n    }\n  };\n}\n\nfunction write_Ref8U(r\n/*:Range*/\n, o) {\n  if (!o) o = new_buf(8);\n  o.write_shift(2, r.s.r);\n  o.write_shift(2, r.e.r);\n  o.write_shift(2, r.s.c);\n  o.write_shift(2, r.e.c);\n  return o;\n}\n/* [MS-XLS] 2.5.211 */\n\n\nfunction parse_RefU(blob\n/*::, length*/\n) {\n  var rwFirst = blob.read_shift(2);\n  var rwLast = blob.read_shift(2);\n  var colFirst = blob.read_shift(1);\n  var colLast = blob.read_shift(1);\n  return {\n    s: {\n      c: colFirst,\n      r: rwFirst\n    },\n    e: {\n      c: colLast,\n      r: rwLast\n    }\n  };\n}\n/* [MS-XLS] 2.5.207 */\n\n\nvar parse_Ref = parse_RefU;\n/* [MS-XLS] 2.5.143 */\n\nfunction parse_FtCmo(blob\n/*::, length*/\n) {\n  blob.l += 4;\n  var ot = blob.read_shift(2);\n  var id = blob.read_shift(2);\n  var flags = blob.read_shift(2);\n  blob.l += 12;\n  return [id, ot, flags];\n}\n/* [MS-XLS] 2.5.149 */\n\n\nfunction parse_FtNts(blob) {\n  var out = {};\n  blob.l += 4;\n  blob.l += 16; // GUID TODO\n\n  out.fSharedNote = blob.read_shift(2);\n  blob.l += 4;\n  return out;\n}\n/* [MS-XLS] 2.5.142 */\n\n\nfunction parse_FtCf(blob) {\n  var out = {};\n  blob.l += 4;\n  blob.cf = blob.read_shift(2);\n  return out;\n}\n/* [MS-XLS] 2.5.140 - 2.5.154 and friends */\n\n\nfunction parse_FtSkip(blob) {\n  blob.l += 2;\n  blob.l += blob.read_shift(2);\n}\n\nvar FtTab = {\n  /*::[*/\n  0x00\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtEnd */\n\n  /*::[*/\n  0x04\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtMacro */\n\n  /*::[*/\n  0x05\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtButton */\n\n  /*::[*/\n  0x06\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtGmo */\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : parse_FtCf,\n\n  /* FtCf */\n\n  /*::[*/\n  0x08\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtPioGrbit */\n\n  /*::[*/\n  0x09\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtPictFmla */\n\n  /*::[*/\n  0x0A\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtCbls */\n\n  /*::[*/\n  0x0B\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtRbo */\n\n  /*::[*/\n  0x0C\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtSbs */\n\n  /*::[*/\n  0x0D\n  /*::]*/\n  : parse_FtNts,\n\n  /* FtNts */\n\n  /*::[*/\n  0x0E\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtSbsFmla */\n\n  /*::[*/\n  0x0F\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtGboData */\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtEdoData */\n\n  /*::[*/\n  0x11\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtRboData */\n\n  /*::[*/\n  0x12\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtCblsData */\n\n  /*::[*/\n  0x13\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtLbsData */\n\n  /*::[*/\n  0x14\n  /*::]*/\n  : parse_FtSkip,\n\n  /* FtCblsFmla */\n\n  /*::[*/\n  0x15\n  /*::]*/\n  : parse_FtCmo\n};\n\nfunction parse_FtArray(blob, length\n/*::, ot*/\n) {\n  var tgt = blob.l + length;\n  var fts = [];\n\n  while (blob.l < tgt) {\n    var ft = blob.read_shift(2);\n    blob.l -= 2;\n\n    try {\n      fts.push(FtTab[ft](blob, tgt - blob.l));\n    } catch (e) {\n      blob.l = tgt;\n      return fts;\n    }\n  }\n\n  if (blob.l != tgt) blob.l = tgt; //throw new Error(\"bad Object Ft-sequence\");\n\n  return fts;\n}\n/* --- 2.4 Records --- */\n\n/* [MS-XLS] 2.4.21 */\n\n\nfunction parse_BOF(blob, length) {\n  var o = {\n    BIFFVer: 0,\n    dt: 0\n  };\n  o.BIFFVer = blob.read_shift(2);\n  length -= 2;\n\n  if (length >= 2) {\n    o.dt = blob.read_shift(2);\n    blob.l -= 2;\n  }\n\n  switch (o.BIFFVer) {\n    case 0x0600:\n    /* BIFF8 */\n\n    case 0x0500:\n    /* BIFF5 */\n\n    case 0x0400:\n    /* BIFF4 */\n\n    case 0x0300:\n    /* BIFF3 */\n\n    case 0x0200:\n    /* BIFF2 */\n\n    case 0x0002:\n    case 0x0007:\n      /* BIFF2 */\n      break;\n\n    default:\n      if (length > 6) throw new Error(\"Unexpected BIFF Ver \" + o.BIFFVer);\n  }\n\n  blob.read_shift(length);\n  return o;\n}\n\nfunction write_BOF(wb\n/*:Workbook*/\n, t\n/*:number*/\n, o) {\n  var h = 0x0600,\n      w = 16;\n\n  switch (o.bookType) {\n    case 'biff8':\n      break;\n\n    case 'biff5':\n      h = 0x0500;\n      w = 8;\n      break;\n\n    case 'biff4':\n      h = 0x0004;\n      w = 6;\n      break;\n\n    case 'biff3':\n      h = 0x0003;\n      w = 6;\n      break;\n\n    case 'biff2':\n      h = 0x0002;\n      w = 4;\n      break;\n\n    case 'xla':\n      break;\n\n    default:\n      throw new Error(\"unsupported BIFF version\");\n  }\n\n  var out = new_buf(w);\n  out.write_shift(2, h);\n  out.write_shift(2, t);\n  if (w > 4) out.write_shift(2, 0x7262);\n  if (w > 6) out.write_shift(2, 0x07CD);\n\n  if (w > 8) {\n    out.write_shift(2, 0xC009);\n    out.write_shift(2, 0x0001);\n    out.write_shift(2, 0x0706);\n    out.write_shift(2, 0x0000);\n  }\n\n  return out;\n}\n/* [MS-XLS] 2.4.146 */\n\n\nfunction parse_InterfaceHdr(blob, length) {\n  if (length === 0) return 0x04b0;\n\n  if (blob.read_shift(2) !== 0x04b0) {\n    /* empty */\n  }\n\n  return 0x04b0;\n}\n/* [MS-XLS] 2.4.349 */\n\n\nfunction parse_WriteAccess(blob, length, opts) {\n  if (opts.enc) {\n    blob.l += length;\n    return \"\";\n  }\n\n  var l = blob.l; // TODO: make sure XLUnicodeString doesnt overrun\n\n  var UserName = parse_XLUnicodeString2(blob, 0, opts);\n  blob.read_shift(length + l - blob.l);\n  return UserName;\n}\n\nfunction write_WriteAccess(s\n/*:string*/\n, opts) {\n  var b8 = !opts || opts.biff == 8;\n  var o = new_buf(b8 ? 112 : 54);\n  o.write_shift(opts.biff == 8 ? 2 : 1, 7);\n  if (b8) o.write_shift(1, 0);\n  o.write_shift(4, 0x33336853);\n  o.write_shift(4, 0x00534A74 | (b8 ? 0 : 0x20000000));\n\n  while (o.l < o.length) {\n    o.write_shift(1, b8 ? 0 : 32);\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.4.351 */\n\n\nfunction parse_WsBool(blob, length, opts) {\n  var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);\n  return {\n    fDialog: flags & 0x10,\n    fBelow: flags & 0x40,\n    fRight: flags & 0x80\n  };\n}\n/* [MS-XLS] 2.4.28 */\n\n\nfunction parse_BoundSheet8(blob, length, opts) {\n  var pos = blob.read_shift(4);\n  var hidden = blob.read_shift(1) & 0x03;\n  var dt = blob.read_shift(1);\n\n  switch (dt) {\n    case 0:\n      dt = 'Worksheet';\n      break;\n\n    case 1:\n      dt = 'Macrosheet';\n      break;\n\n    case 2:\n      dt = 'Chartsheet';\n      break;\n\n    case 6:\n      dt = 'VBAModule';\n      break;\n  }\n\n  var name = parse_ShortXLUnicodeString(blob, 0, opts);\n  if (name.length === 0) name = \"Sheet1\";\n  return {\n    pos: pos,\n    hs: hidden,\n    dt: dt,\n    name: name\n  };\n}\n\nfunction write_BoundSheet8(data, opts) {\n  var w = !opts || opts.biff >= 8 ? 2 : 1;\n  var o = new_buf(8 + w * data.name.length);\n  o.write_shift(4, data.pos);\n  o.write_shift(1, data.hs || 0);\n  o.write_shift(1, data.dt);\n  o.write_shift(1, data.name.length);\n  if (opts.biff >= 8) o.write_shift(1, 1);\n  o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? 'sbcs' : 'utf16le');\n  var out = o.slice(0, o.l);\n  out.l = o.l;\n  return out;\n}\n/* [MS-XLS] 2.4.265 TODO */\n\n\nfunction parse_SST(blob, length)\n/*:SST*/\n{\n  var end = blob.l + length;\n  var cnt = blob.read_shift(4);\n  var ucnt = blob.read_shift(4);\n  var strs\n  /*:SST*/\n  = []\n  /*:any*/\n  ;\n\n  for (var i = 0; i != ucnt && blob.l < end; ++i) {\n    strs.push(parse_XLUnicodeRichExtendedString(blob));\n  }\n\n  strs.Count = cnt;\n  strs.Unique = ucnt;\n  return strs;\n}\n\nfunction write_SST(sst, opts) {\n  var header = new_buf(8);\n  header.write_shift(4, sst.Count);\n  header.write_shift(4, sst.Unique);\n  var strs = [];\n\n  for (var j = 0; j < sst.length; ++j) {\n    strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);\n  }\n\n  var o = bconcat([header].concat(strs));\n  /*::(*/\n\n  o\n  /*:: :any)*/\n  .parts = [header.length].concat(strs.map(function (str) {\n    return str.length;\n  }));\n  return o;\n}\n/* [MS-XLS] 2.4.107 */\n\n\nfunction parse_ExtSST(blob, length) {\n  var extsst = {};\n  extsst.dsst = blob.read_shift(2);\n  blob.l += length - 2;\n  return extsst;\n}\n/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */\n\n\nfunction parse_Row(blob) {\n  var z = {}\n  /*:any*/\n  ;\n  z.r = blob.read_shift(2);\n  z.c = blob.read_shift(2);\n  z.cnt = blob.read_shift(2) - z.c;\n  var miyRw = blob.read_shift(2);\n  blob.l += 4; // reserved(2), unused(2)\n\n  var flags = blob.read_shift(1); // various flags\n\n  blob.l += 3; // reserved(8), ixfe(12), flags(4)\n\n  if (flags & 0x07) z.level = flags & 0x07; // collapsed: flags & 0x10\n\n  if (flags & 0x20) z.hidden = true;\n  if (flags & 0x40) z.hpt = miyRw / 20;\n  return z;\n}\n/* [MS-XLS] 2.4.125 */\n\n\nfunction parse_ForceFullCalculation(blob) {\n  var header = parse_frtHeader(blob);\n  if (header.type != 0x08A3) throw new Error(\"Invalid Future Record \" + header.type);\n  var fullcalc = blob.read_shift(4);\n  return fullcalc !== 0x0;\n}\n/* [MS-XLS] 2.4.215 rt */\n\n\nfunction parse_RecalcId(blob) {\n  blob.read_shift(2);\n  return blob.read_shift(4);\n}\n/* [MS-XLS] 2.4.87 */\n\n\nfunction parse_DefaultRowHeight(blob, length, opts) {\n  var f = 0;\n\n  if (!(opts && opts.biff == 2)) {\n    f = blob.read_shift(2);\n  }\n\n  var miyRw = blob.read_shift(2);\n\n  if (opts && opts.biff == 2) {\n    f = 1 - (miyRw >> 15);\n    miyRw &= 0x7fff;\n  }\n\n  var fl = {\n    Unsynced: f & 1,\n    DyZero: (f & 2) >> 1,\n    ExAsc: (f & 4) >> 2,\n    ExDsc: (f & 8) >> 3\n  };\n  return [fl, miyRw];\n}\n/* [MS-XLS] 2.4.345 TODO */\n\n\nfunction parse_Window1(blob) {\n  var xWn = blob.read_shift(2),\n      yWn = blob.read_shift(2),\n      dxWn = blob.read_shift(2),\n      dyWn = blob.read_shift(2);\n  var flags = blob.read_shift(2),\n      iTabCur = blob.read_shift(2),\n      iTabFirst = blob.read_shift(2);\n  var ctabSel = blob.read_shift(2),\n      wTabRatio = blob.read_shift(2);\n  return {\n    Pos: [xWn, yWn],\n    Dim: [dxWn, dyWn],\n    Flags: flags,\n    CurTab: iTabCur,\n    FirstTab: iTabFirst,\n    Selected: ctabSel,\n    TabRatio: wTabRatio\n  };\n}\n\nfunction\n  /*::opts*/\nwrite_Window1() {\n  var o = new_buf(18);\n  o.write_shift(2, 0);\n  o.write_shift(2, 0);\n  o.write_shift(2, 0x7260);\n  o.write_shift(2, 0x44c0);\n  o.write_shift(2, 0x38);\n  o.write_shift(2, 0);\n  o.write_shift(2, 0);\n  o.write_shift(2, 1);\n  o.write_shift(2, 0x01f4);\n  return o;\n}\n/* [MS-XLS] 2.4.346 TODO */\n\n\nfunction parse_Window2(blob, length, opts) {\n  if (opts && opts.biff >= 2 && opts.biff < 5) return {};\n  var f = blob.read_shift(2);\n  return {\n    RTL: f & 0x40\n  };\n}\n\nfunction write_Window2(view) {\n  var o = new_buf(18),\n      f = 0x6b6;\n  if (view && view.RTL) f |= 0x40;\n  o.write_shift(2, f);\n  o.write_shift(4, 0);\n  o.write_shift(4, 64);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  return o;\n}\n/* [MS-XLS] 2.4.189 TODO */\n\n\nfunction\n  /*blob, length, opts*/\nparse_Pane() {}\n/* [MS-XLS] 2.4.122 TODO */\n\n\nfunction parse_Font(blob, length, opts) {\n  var o\n  /*:any*/\n  = {\n    dyHeight: blob.read_shift(2),\n    fl: blob.read_shift(2)\n  };\n\n  switch (opts && opts.biff || 8) {\n    case 2:\n      break;\n\n    case 3:\n    case 4:\n      blob.l += 2;\n      break;\n\n    default:\n      blob.l += 10;\n      break;\n  }\n\n  o.name = parse_ShortXLUnicodeString(blob, 0, opts);\n  return o;\n}\n\nfunction write_Font(data, opts) {\n  var name = data.name || \"Arial\";\n  var b5 = opts && opts.biff == 5,\n      w = b5 ? 15 + name.length : 16 + 2 * name.length;\n  var o = new_buf(w);\n  o.write_shift(2, (data.sz || 12) * 20);\n  o.write_shift(4, 0);\n  o.write_shift(2, 400);\n  o.write_shift(4, 0);\n  o.write_shift(2, 0);\n  o.write_shift(1, name.length);\n  if (!b5) o.write_shift(1, 1);\n  o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? \"sbcs\" : \"utf16le\");\n  return o;\n}\n/* [MS-XLS] 2.4.149 */\n\n\nfunction parse_LabelSst(blob) {\n  var cell = parse_XLSCell(blob);\n  cell.isst = blob.read_shift(4);\n  return cell;\n}\n\nfunction write_LabelSst(R\n/*:number*/\n, C\n/*:number*/\n, v\n/*:number*/\n, os\n/*:number*/\n\n/*::, opts*/\n) {\n  var o = new_buf(10);\n  write_XLSCell(R, C, os, o);\n  o.write_shift(4, v);\n  return o;\n}\n/* [MS-XLS] 2.4.148 */\n\n\nfunction parse_Label(blob, length, opts) {\n  if (opts.biffguess && opts.biff == 2) opts.biff = 5;\n  var target = blob.l + length;\n  var cell = parse_XLSCell(blob, 6);\n  if (opts.biff == 2) blob.l++;\n  var str = parse_XLUnicodeString(blob, target - blob.l, opts);\n  cell.val = str;\n  return cell;\n}\n\nfunction write_Label(R\n/*:number*/\n, C\n/*:number*/\n, v\n/*:string*/\n, os\n/*:number*/\n, opts) {\n  var b8 = !opts || opts.biff == 8;\n  var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);\n  write_XLSCell(R, C, os, o);\n  o.write_shift(2, v.length);\n  if (b8) o.write_shift(1, 1);\n  o.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');\n  return o;\n}\n/* [MS-XLS] 2.4.126 Number Formats */\n\n\nfunction parse_Format(blob, length, opts) {\n  var numFmtId = blob.read_shift(2);\n  var fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n  return [numFmtId, fmtstr];\n}\n\nfunction write_Format(i\n/*:number*/\n, f\n/*:string*/\n, opts, o) {\n  var b5 = opts && opts.biff == 5;\n  if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);\n  o.write_shift(2, i);\n  o.write_shift(b5 ? 1 : 2, f.length);\n  if (!b5) o.write_shift(1, 1);\n  o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? 'sbcs' : 'utf16le');\n  var out = o.length > o.l ? o.slice(0, o.l) : o;\n  if (out.l == null) out.l = out.length;\n  return out;\n}\n\nvar parse_BIFF2Format = parse_XLUnicodeString2;\n/* [MS-XLS] 2.4.90 */\n\nfunction parse_Dimensions(blob, length, opts) {\n  var end = blob.l + length;\n  var w = opts.biff == 8 || !opts.biff ? 4 : 2;\n  var r = blob.read_shift(w),\n      R = blob.read_shift(w);\n  var c = blob.read_shift(2),\n      C = blob.read_shift(2);\n  blob.l = end;\n  return {\n    s: {\n      r: r,\n      c: c\n    },\n    e: {\n      r: R,\n      c: C\n    }\n  };\n}\n\nfunction write_Dimensions(range, opts) {\n  var w = opts.biff == 8 || !opts.biff ? 4 : 2;\n  var o = new_buf(2 * w + 6);\n  o.write_shift(w, range.s.r);\n  o.write_shift(w, range.e.r + 1);\n  o.write_shift(2, range.s.c);\n  o.write_shift(2, range.e.c + 1);\n  o.write_shift(2, 0);\n  return o;\n}\n/* [MS-XLS] 2.4.220 */\n\n\nfunction parse_RK(blob) {\n  var rw = blob.read_shift(2),\n      col = blob.read_shift(2);\n  var rkrec = parse_RkRec(blob);\n  return {\n    r: rw,\n    c: col,\n    ixfe: rkrec[0],\n    rknum: rkrec[1]\n  };\n}\n/* [MS-XLS] 2.4.175 */\n\n\nfunction parse_MulRk(blob, length) {\n  var target = blob.l + length - 2;\n  var rw = blob.read_shift(2),\n      col = blob.read_shift(2);\n  var rkrecs = [];\n\n  while (blob.l < target) {\n    rkrecs.push(parse_RkRec(blob));\n  }\n\n  if (blob.l !== target) throw new Error(\"MulRK read error\");\n  var lastcol = blob.read_shift(2);\n  if (rkrecs.length != lastcol - col + 1) throw new Error(\"MulRK length mismatch\");\n  return {\n    r: rw,\n    c: col,\n    C: lastcol,\n    rkrec: rkrecs\n  };\n}\n/* [MS-XLS] 2.4.174 */\n\n\nfunction parse_MulBlank(blob, length) {\n  var target = blob.l + length - 2;\n  var rw = blob.read_shift(2),\n      col = blob.read_shift(2);\n  var ixfes = [];\n\n  while (blob.l < target) {\n    ixfes.push(blob.read_shift(2));\n  }\n\n  if (blob.l !== target) throw new Error(\"MulBlank read error\");\n  var lastcol = blob.read_shift(2);\n  if (ixfes.length != lastcol - col + 1) throw new Error(\"MulBlank length mismatch\");\n  return {\n    r: rw,\n    c: col,\n    C: lastcol,\n    ixfe: ixfes\n  };\n}\n/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */\n\n\nfunction parse_CellStyleXF(blob, length, style, opts) {\n  var o = {};\n  var a = blob.read_shift(4),\n      b = blob.read_shift(4);\n  var c = blob.read_shift(4),\n      d = blob.read_shift(2);\n  o.patternType = XLSFillPattern[c >> 26];\n  if (!opts.cellStyles) return o;\n  o.alc = a & 0x07;\n  o.fWrap = a >> 3 & 0x01;\n  o.alcV = a >> 4 & 0x07;\n  o.fJustLast = a >> 7 & 0x01;\n  o.trot = a >> 8 & 0xFF;\n  o.cIndent = a >> 16 & 0x0F;\n  o.fShrinkToFit = a >> 20 & 0x01;\n  o.iReadOrder = a >> 22 & 0x02;\n  o.fAtrNum = a >> 26 & 0x01;\n  o.fAtrFnt = a >> 27 & 0x01;\n  o.fAtrAlc = a >> 28 & 0x01;\n  o.fAtrBdr = a >> 29 & 0x01;\n  o.fAtrPat = a >> 30 & 0x01;\n  o.fAtrProt = a >> 31 & 0x01;\n  o.dgLeft = b & 0x0F;\n  o.dgRight = b >> 4 & 0x0F;\n  o.dgTop = b >> 8 & 0x0F;\n  o.dgBottom = b >> 12 & 0x0F;\n  o.icvLeft = b >> 16 & 0x7F;\n  o.icvRight = b >> 23 & 0x7F;\n  o.grbitDiag = b >> 30 & 0x03;\n  o.icvTop = c & 0x7F;\n  o.icvBottom = c >> 7 & 0x7F;\n  o.icvDiag = c >> 14 & 0x7F;\n  o.dgDiag = c >> 21 & 0x0F;\n  o.icvFore = d & 0x7F;\n  o.icvBack = d >> 7 & 0x7F;\n  o.fsxButton = d >> 14 & 0x01;\n  return o;\n} //function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}\n//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}\n\n/* [MS-XLS] 2.4.353 TODO: actually do this right */\n\n\nfunction parse_XF(blob, length, opts) {\n  var o = {};\n  o.ifnt = blob.read_shift(2);\n  o.numFmtId = blob.read_shift(2);\n  o.flags = blob.read_shift(2);\n  o.fStyle = o.flags >> 2 & 0x01;\n  length -= 6;\n  o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);\n  return o;\n}\n\nfunction write_XF(data, ixfeP, opts, o) {\n  var b5 = opts && opts.biff == 5;\n  if (!o) o = new_buf(b5 ? 16 : 20);\n  o.write_shift(2, 0);\n\n  if (data.style) {\n    o.write_shift(2, data.numFmtId || 0);\n    o.write_shift(2, 0xFFF4);\n  } else {\n    o.write_shift(2, data.numFmtId || 0);\n    o.write_shift(2, ixfeP << 4);\n  }\n\n  var f = 0;\n  if (data.numFmtId > 0 && b5) f |= 0x0400;\n  o.write_shift(4, f);\n  o.write_shift(4, 0);\n  if (!b5) o.write_shift(4, 0);\n  o.write_shift(2, 0);\n  return o;\n}\n/* [MS-XLS] 2.4.134 */\n\n\nfunction parse_Guts(blob) {\n  blob.l += 4;\n  var out = [blob.read_shift(2), blob.read_shift(2)];\n  if (out[0] !== 0) out[0]--;\n  if (out[1] !== 0) out[1]--;\n  if (out[0] > 7 || out[1] > 7) throw new Error(\"Bad Gutters: \" + out.join(\"|\"));\n  return out;\n}\n\nfunction write_Guts(guts\n/*:Array<number>*/\n) {\n  var o = new_buf(8);\n  o.write_shift(4, 0);\n  o.write_shift(2, guts[0] ? guts[0] + 1 : 0);\n  o.write_shift(2, guts[1] ? guts[1] + 1 : 0);\n  return o;\n}\n/* [MS-XLS] 2.4.24 */\n\n\nfunction parse_BoolErr(blob, length, opts) {\n  var cell = parse_XLSCell(blob, 6);\n  if (opts.biff == 2 || length == 9) ++blob.l;\n  var val = parse_Bes(blob, 2);\n  cell.val = val;\n  cell.t = val === true || val === false ? 'b' : 'e';\n  return cell;\n}\n\nfunction write_BoolErr(R\n/*:number*/\n, C\n/*:number*/\n, v, os\n/*:number*/\n, opts, t\n/*:string*/\n) {\n  var o = new_buf(8);\n  write_XLSCell(R, C, os, o);\n  write_Bes(v, t, o);\n  return o;\n}\n/* [MS-XLS] 2.4.180 Number */\n\n\nfunction parse_Number(blob, length, opts) {\n  if (opts.biffguess && opts.biff == 2) opts.biff = 5;\n  var cell = parse_XLSCell(blob, 6);\n  var xnum = parse_Xnum(blob, 8);\n  cell.val = xnum;\n  return cell;\n}\n\nfunction write_Number(R\n/*:number*/\n, C\n/*:number*/\n, v, os\n/*:: :number, opts*/\n) {\n  var o = new_buf(14);\n  write_XLSCell(R, C, os, o);\n  write_Xnum(v, o);\n  return o;\n}\n\nvar parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n\n/* [MS-XLS] 2.4.271 */\n\nfunction parse_SupBook(blob, length, opts) {\n  var end = blob.l + length;\n  var ctab = blob.read_shift(2);\n  var cch = blob.read_shift(2);\n  opts.sbcch = cch;\n  if (cch == 0x0401 || cch == 0x3A01) return [cch, ctab];\n  if (cch < 0x01 || cch > 0xff) throw new Error(\"Unexpected SupBook type: \" + cch);\n  var virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n  /* TODO: 2.5.277 Virtual Path */\n\n  var rgst = [];\n\n  while (end > blob.l) {\n    rgst.push(parse_XLUnicodeString(blob));\n  }\n\n  return [cch, ctab, virtPath, rgst];\n}\n/* [MS-XLS] 2.4.105 TODO */\n\n\nfunction parse_ExternName(blob, length, opts) {\n  var flags = blob.read_shift(2);\n  var body;\n  var o = {\n    fBuiltIn: flags & 0x01,\n    fWantAdvise: flags >>> 1 & 0x01,\n    fWantPict: flags >>> 2 & 0x01,\n    fOle: flags >>> 3 & 0x01,\n    fOleLink: flags >>> 4 & 0x01,\n    cf: flags >>> 5 & 0x3FF,\n    fIcon: flags >>> 15 & 0x01\n  }\n  /*:any*/\n  ;\n  if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2, opts); //else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n\n  o.body = body || blob.read_shift(length - 2);\n  if (typeof body === \"string\") o.Name = body;\n  return o;\n}\n/* [MS-XLS] 2.4.150 TODO */\n\n\nfunction parse_Lbl(blob, length, opts) {\n  var target = blob.l + length;\n  var flags = blob.read_shift(2);\n  var chKey = blob.read_shift(1);\n  var cch = blob.read_shift(1);\n  var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n  var itab = 0;\n\n  if (!opts || opts.biff >= 5) {\n    if (opts.biff != 5) blob.l += 2;\n    itab = blob.read_shift(2);\n    if (opts.biff == 5) blob.l += 2;\n    blob.l += 4;\n  }\n\n  var name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n  if (flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];\n  var npflen = target - blob.l;\n  if (opts && opts.biff == 2) --npflen;\n  /*jshint -W018 */\n\n  var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);\n  /*jshint +W018 */\n\n  return {\n    chKey: chKey,\n    Name: name,\n    itab: itab,\n    rgce: rgce\n  };\n}\n/* [MS-XLS] 2.4.106 TODO: verify filename encoding */\n\n\nfunction parse_ExternSheet(blob, length, opts) {\n  if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);\n  var o = [],\n      target = blob.l + length,\n      len = blob.read_shift(opts.biff > 8 ? 4 : 2);\n\n  while (len-- !== 0) {\n    o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));\n  } // [iSupBook, itabFirst, itabLast];\n\n\n  if (blob.l != target) throw new Error(\"Bad ExternSheet: \" + blob.l + \" != \" + target);\n  return o;\n}\n\nfunction parse_BIFF5ExternSheet(blob, length, opts) {\n  if (blob[blob.l + 1] == 0x03) blob[blob.l]++;\n  var o = parse_ShortXLUnicodeString(blob, length, opts);\n  return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;\n}\n/* [MS-XLS] 2.4.176 TODO: check older biff */\n\n\nfunction parse_NameCmt(blob, length, opts) {\n  if (opts.biff < 8) {\n    blob.l += length;\n    return;\n  }\n\n  var cchName = blob.read_shift(2);\n  var cchComment = blob.read_shift(2);\n  var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);\n  var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);\n  return [name, comment];\n}\n/* [MS-XLS] 2.4.260 */\n\n\nfunction parse_ShrFmla(blob, length, opts) {\n  var ref = parse_RefU(blob, 6);\n  blob.l++;\n  var cUse = blob.read_shift(1);\n  length -= 8;\n  return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];\n}\n/* [MS-XLS] 2.4.4 TODO */\n\n\nfunction parse_Array(blob, length, opts) {\n  var ref = parse_Ref(blob, 6);\n  /* TODO: fAlwaysCalc */\n\n  switch (opts.biff) {\n    case 2:\n      blob.l++;\n      length -= 7;\n      break;\n\n    case 3:\n    case 4:\n      blob.l += 2;\n      length -= 8;\n      break;\n\n    default:\n      blob.l += 6;\n      length -= 12;\n  }\n\n  return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n}\n/* [MS-XLS] 2.4.173 */\n\n\nfunction parse_MTRSettings(blob) {\n  var fMTREnabled = blob.read_shift(4) !== 0x00;\n  var fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n  var cUserThreadCount = blob.read_shift(4);\n  return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n}\n/* [MS-XLS] 2.5.186 TODO: BIFF5 */\n\n\nfunction parse_NoteSh(blob, length, opts) {\n  if (opts.biff < 8) return;\n  var row = blob.read_shift(2),\n      col = blob.read_shift(2);\n  var flags = blob.read_shift(2),\n      idObj = blob.read_shift(2);\n  var stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n  if (opts.biff < 8) blob.read_shift(1);\n  return [{\n    r: row,\n    c: col\n  }, stAuthor, idObj, flags];\n}\n/* [MS-XLS] 2.4.179 */\n\n\nfunction parse_Note(blob, length, opts) {\n  /* TODO: Support revisions */\n  return parse_NoteSh(blob, length, opts);\n}\n/* [MS-XLS] 2.4.168 */\n\n\nfunction parse_MergeCells(blob, length)\n/*:Array<Range>*/\n{\n  var merges\n  /*:Array<Range>*/\n  = [];\n  var cmcs = blob.read_shift(2);\n\n  while (cmcs--) {\n    merges.push(parse_Ref8U(blob, length));\n  }\n\n  return merges;\n}\n\nfunction write_MergeCells(merges\n/*:Array<Range>*/\n) {\n  var o = new_buf(2 + merges.length * 8);\n  o.write_shift(2, merges.length);\n\n  for (var i = 0; i < merges.length; ++i) {\n    write_Ref8U(merges[i], o);\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.4.181 TODO: parse all the things! */\n\n\nfunction parse_Obj(blob, length, opts) {\n  if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);\n  var cmo = parse_FtCmo(blob, 22); // id, ot, flags\n\n  var fts = parse_FtArray(blob, length - 22, cmo[1]);\n  return {\n    cmo: cmo,\n    ft: fts\n  };\n}\n/* from older spec */\n\n\nvar parse_BIFF5OT = {\n  0x08: function _(blob, length) {\n    var tgt = blob.l + length;\n    blob.l += 10; // todo\n\n    var cf = blob.read_shift(2);\n    blob.l += 4;\n    blob.l += 2; //var cbPictFmla = blob.read_shift(2);\n\n    blob.l += 2;\n    blob.l += 2; //var grbit = blob.read_shift(2);\n\n    blob.l += 4;\n    var cchName = blob.read_shift(1);\n    blob.l += cchName; // TODO: stName\n\n    blob.l = tgt; // TODO: fmla\n\n    return {\n      fmt: cf\n    };\n  }\n};\n\nfunction parse_BIFF5Obj(blob, length, opts) {\n  blob.l += 4; //var cnt = blob.read_shift(4);\n\n  var ot = blob.read_shift(2);\n  var id = blob.read_shift(2);\n  var grbit = blob.read_shift(2);\n  blob.l += 2; //var colL = blob.read_shift(2);\n\n  blob.l += 2; //var dxL = blob.read_shift(2);\n\n  blob.l += 2; //var rwT = blob.read_shift(2);\n\n  blob.l += 2; //var dyT = blob.read_shift(2);\n\n  blob.l += 2; //var colR = blob.read_shift(2);\n\n  blob.l += 2; //var dxR = blob.read_shift(2);\n\n  blob.l += 2; //var rwB = blob.read_shift(2);\n\n  blob.l += 2; //var dyB = blob.read_shift(2);\n\n  blob.l += 2; //var cbMacro = blob.read_shift(2);\n\n  blob.l += 6;\n  length -= 36;\n  var fts = [];\n  fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));\n  return {\n    cmo: [id, ot, grbit],\n    ft: fts\n  };\n}\n/* [MS-XLS] 2.4.329 TODO: parse properly */\n\n\nfunction parse_TxO(blob, length, opts) {\n  var s = blob.l;\n  var texts = \"\";\n\n  try {\n    blob.l += 4;\n    var ot = (opts.lastobj || {\n      cmo: [0, 0]\n    }).cmo[1];\n    var controlInfo; // eslint-disable-line no-unused-vars\n\n    if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6;else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars\n\n    var cchText = blob.read_shift(2);\n    /*var cbRuns = */\n\n    blob.read_shift(2);\n    /*var ifntEmpty = */\n\n    parseuint16(blob, 2);\n    var len = blob.read_shift(2);\n    blob.l += len; //var fmla = parse_ObjFmla(blob, s + length - blob.l);\n\n    for (var i = 1; i < blob.lens.length - 1; ++i) {\n      if (blob.l - s != blob.lens[i]) throw new Error(\"TxO: bad continue record\");\n      var hdr = blob[blob.l];\n      var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);\n      texts += t;\n      if (texts.length >= (hdr ? cchText : 2 * cchText)) break;\n    }\n\n    if (texts.length !== cchText && texts.length !== cchText * 2) {\n      throw new Error(\"cchText: \" + cchText + \" != \" + texts.length);\n    }\n\n    blob.l = s + length;\n    /* [MS-XLS] 2.5.272 TxORuns */\n    //\tvar rgTxoRuns = [];\n    //\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n    //\tvar cchText2 = blob.read_shift(2);\n    //\tif(cchText2 !== cchText) throw new Error(\"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText);\n    //\tblob.l += 6;\n    //\tif(s + length != blob.l) throw new Error(\"TxO \" + (s + length) + \", at \" + blob.l);\n\n    return {\n      t: texts\n    };\n  } catch (e) {\n    blob.l = s + length;\n    return {\n      t: texts\n    };\n  }\n}\n/* [MS-XLS] 2.4.140 */\n\n\nfunction parse_HLink(blob, length) {\n  var ref = parse_Ref8U(blob, 8);\n  blob.l += 16;\n  /* CLSID */\n\n  var hlink = parse_Hyperlink(blob, length - 24);\n  return [ref, hlink];\n}\n\nfunction write_HLink(hl) {\n  var O = new_buf(24);\n  var ref = decode_cell(hl[0]);\n  O.write_shift(2, ref.r);\n  O.write_shift(2, ref.r);\n  O.write_shift(2, ref.c);\n  O.write_shift(2, ref.c);\n  var clsid = \"d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n\n  for (var i = 0; i < 16; ++i) {\n    O.write_shift(1, parseInt(clsid[i], 16));\n  }\n\n  return bconcat([O, write_Hyperlink(hl[1])]);\n}\n/* [MS-XLS] 2.4.141 */\n\n\nfunction parse_HLinkTooltip(blob, length) {\n  blob.read_shift(2);\n  var ref = parse_Ref8U(blob, 8);\n  var wzTooltip = blob.read_shift((length - 10) / 2, 'dbcs-cont');\n  wzTooltip = wzTooltip.replace(chr0, \"\");\n  return [ref, wzTooltip];\n}\n\nfunction write_HLinkTooltip(hl) {\n  var TT = hl[1].Tooltip;\n  var O = new_buf(10 + 2 * (TT.length + 1));\n  O.write_shift(2, 0x0800);\n  var ref = decode_cell(hl[0]);\n  O.write_shift(2, ref.r);\n  O.write_shift(2, ref.r);\n  O.write_shift(2, ref.c);\n  O.write_shift(2, ref.c);\n\n  for (var i = 0; i < TT.length; ++i) {\n    O.write_shift(2, TT.charCodeAt(i));\n  }\n\n  O.write_shift(2, 0);\n  return O;\n}\n/* [MS-XLS] 2.4.63 */\n\n\nfunction parse_Country(blob)\n/*:[string|number, string|number]*/\n{\n  var o = [0, 0],\n      d;\n  d = blob.read_shift(2);\n  o[0] = CountryEnum[d] || d;\n  d = blob.read_shift(2);\n  o[1] = CountryEnum[d] || d;\n  return o;\n}\n\nfunction write_Country(o) {\n  if (!o) o = new_buf(4);\n  o.write_shift(2, 0x01);\n  o.write_shift(2, 0x01);\n  return o;\n}\n/* [MS-XLS] 2.4.50 ClrtClient */\n\n\nfunction parse_ClrtClient(blob) {\n  var ccv = blob.read_shift(2);\n  var o = [];\n\n  while (ccv-- > 0) {\n    o.push(parse_LongRGB(blob, 8));\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.4.188 */\n\n\nfunction parse_Palette(blob) {\n  var ccv = blob.read_shift(2);\n  var o = [];\n\n  while (ccv-- > 0) {\n    o.push(parse_LongRGB(blob, 8));\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.4.354 */\n\n\nfunction parse_XFCRC(blob) {\n  blob.l += 2;\n  var o = {\n    cxfs: 0,\n    crc: 0\n  };\n  o.cxfs = blob.read_shift(2);\n  o.crc = blob.read_shift(4);\n  return o;\n}\n/* [MS-XLS] 2.4.53 TODO: parse flags */\n\n/* [MS-XLSB] 2.4.323 TODO: parse flags */\n\n\nfunction parse_ColInfo(blob, length, opts) {\n  if (!opts.cellStyles) return parsenoop(blob, length);\n  var w = opts && opts.biff >= 12 ? 4 : 2;\n  var colFirst = blob.read_shift(w);\n  var colLast = blob.read_shift(w);\n  var coldx = blob.read_shift(w);\n  var ixfe = blob.read_shift(w);\n  var flags = blob.read_shift(2);\n  if (w == 2) blob.l += 2;\n  var o = {\n    s: colFirst,\n    e: colLast,\n    w: coldx,\n    ixfe: ixfe,\n    flags: flags\n  }\n  /*:any*/\n  ;\n  if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 0x7;\n  return o;\n}\n\nfunction write_ColInfo(col, idx) {\n  var o = new_buf(12);\n  o.write_shift(2, idx);\n  o.write_shift(2, idx);\n  o.write_shift(2, col.width * 256);\n  o.write_shift(2, 0);\n  var f = 0;\n  if (col.hidden) f |= 1;\n  o.write_shift(1, f);\n  f = col.level || 0;\n  o.write_shift(1, f);\n  o.write_shift(2, 0);\n  return o;\n}\n/* [MS-XLS] 2.4.257 */\n\n\nfunction parse_Setup(blob, length) {\n  var o = {};\n  if (length < 32) return o;\n  blob.l += 16;\n  o.header = parse_Xnum(blob, 8);\n  o.footer = parse_Xnum(blob, 8);\n  blob.l += 2;\n  return o;\n}\n/* [MS-XLS] 2.4.261 */\n\n\nfunction parse_ShtProps(blob, length, opts) {\n  var def = {\n    area: false\n  };\n\n  if (opts.biff != 5) {\n    blob.l += length;\n    return def;\n  }\n\n  var d = blob.read_shift(1);\n  blob.l += 3;\n  if (d & 0x10) def.area = true;\n  return def;\n}\n/* [MS-XLS] 2.4.241 */\n\n\nfunction write_RRTabId(n\n/*:number*/\n) {\n  var out = new_buf(2 * n);\n\n  for (var i = 0; i < n; ++i) {\n    out.write_shift(2, i + 1);\n  }\n\n  return out;\n}\n\nvar parse_Blank = parse_XLSCell;\n/* [MS-XLS] 2.4.20 Just the cell */\n\nvar parse_Scl = parseuint16a;\n/* [MS-XLS] 2.4.247 num, den */\n\nvar parse_String = parse_XLUnicodeString;\n/* [MS-XLS] 2.4.268 */\n\n/* --- Specific to versions before BIFF8 --- */\n\nfunction parse_ImData(blob) {\n  var cf = blob.read_shift(2);\n  var env = blob.read_shift(2);\n  var lcb = blob.read_shift(4);\n  var o = {\n    fmt: cf,\n    env: env,\n    len: lcb,\n    data: blob.slice(blob.l, blob.l + lcb)\n  };\n  blob.l += lcb;\n  return o;\n}\n/* BIFF2_??? where ??? is the name from [XLS] */\n\n\nfunction parse_BIFF2STR(blob, length, opts) {\n  if (opts.biffguess && opts.biff == 5) opts.biff = 2;\n  var cell = parse_XLSCell(blob, 6);\n  ++blob.l;\n  var str = parse_XLUnicodeString2(blob, length - 7, opts);\n  cell.t = 'str';\n  cell.val = str;\n  return cell;\n}\n\nfunction parse_BIFF2NUM(blob\n/*::, length*/\n) {\n  var cell = parse_XLSCell(blob, 6);\n  ++blob.l;\n  var num = parse_Xnum(blob, 8);\n  cell.t = 'n';\n  cell.val = num;\n  return cell;\n}\n\nfunction write_BIFF2NUM(r\n/*:number*/\n, c\n/*:number*/\n, val\n/*:number*/\n) {\n  var out = new_buf(15);\n  write_BIFF2Cell(out, r, c);\n  out.write_shift(8, val, 'f');\n  return out;\n}\n\nfunction parse_BIFF2INT(blob) {\n  var cell = parse_XLSCell(blob, 6);\n  ++blob.l;\n  var num = blob.read_shift(2);\n  cell.t = 'n';\n  cell.val = num;\n  return cell;\n}\n\nfunction write_BIFF2INT(r\n/*:number*/\n, c\n/*:number*/\n, val\n/*:number*/\n) {\n  var out = new_buf(9);\n  write_BIFF2Cell(out, r, c);\n  out.write_shift(2, val);\n  return out;\n}\n\nfunction parse_BIFF2STRING(blob) {\n  var cch = blob.read_shift(1);\n\n  if (cch === 0) {\n    blob.l++;\n    return \"\";\n  }\n\n  return blob.read_shift(cch, 'sbcs-cont');\n}\n/* TODO: convert to BIFF8 font struct */\n\n\nfunction parse_BIFF2FONTXTRA(blob, length) {\n  blob.l += 6; // unknown\n\n  blob.l += 2; // font weight \"bls\"\n\n  blob.l += 1; // charset\n\n  blob.l += 3; // unknown\n\n  blob.l += 1; // font family\n\n  blob.l += length - 13;\n}\n/* TODO: parse rich text runs */\n\n\nfunction parse_RString(blob, length, opts) {\n  var end = blob.l + length;\n  var cell = parse_XLSCell(blob, 6);\n  var cch = blob.read_shift(2);\n  var str = parse_XLUnicodeStringNoCch(blob, cch, opts);\n  blob.l = end;\n  cell.t = 'str';\n  cell.val = str;\n  return cell;\n}\n\nvar DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];\n\nvar DBF = /*#__PURE__*/function () {\n  var dbf_codepage_map = {\n    /* Code Pages Supported by Visual FoxPro */\n\n    /*::[*/\n    0x01\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x02\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x03\n    /*::]*/\n    : 1252,\n\n    /*::[*/\n    0x04\n    /*::]*/\n    : 10000,\n\n    /*::[*/\n    0x64\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x65\n    /*::]*/\n    : 866,\n\n    /*::[*/\n    0x66\n    /*::]*/\n    : 865,\n\n    /*::[*/\n    0x67\n    /*::]*/\n    : 861,\n\n    /*::[*/\n    0x68\n    /*::]*/\n    : 895,\n\n    /*::[*/\n    0x69\n    /*::]*/\n    : 620,\n\n    /*::[*/\n    0x6A\n    /*::]*/\n    : 737,\n\n    /*::[*/\n    0x6B\n    /*::]*/\n    : 857,\n\n    /*::[*/\n    0x78\n    /*::]*/\n    : 950,\n\n    /*::[*/\n    0x79\n    /*::]*/\n    : 949,\n\n    /*::[*/\n    0x7A\n    /*::]*/\n    : 936,\n\n    /*::[*/\n    0x7B\n    /*::]*/\n    : 932,\n\n    /*::[*/\n    0x7C\n    /*::]*/\n    : 874,\n\n    /*::[*/\n    0x7D\n    /*::]*/\n    : 1255,\n\n    /*::[*/\n    0x7E\n    /*::]*/\n    : 1256,\n\n    /*::[*/\n    0x96\n    /*::]*/\n    : 10007,\n\n    /*::[*/\n    0x97\n    /*::]*/\n    : 10029,\n\n    /*::[*/\n    0x98\n    /*::]*/\n    : 10006,\n\n    /*::[*/\n    0xC8\n    /*::]*/\n    : 1250,\n\n    /*::[*/\n    0xC9\n    /*::]*/\n    : 1251,\n\n    /*::[*/\n    0xCA\n    /*::]*/\n    : 1254,\n\n    /*::[*/\n    0xCB\n    /*::]*/\n    : 1253,\n\n    /* shapefile DBF extension */\n\n    /*::[*/\n    0x00\n    /*::]*/\n    : 20127,\n\n    /*::[*/\n    0x08\n    /*::]*/\n    : 865,\n\n    /*::[*/\n    0x09\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x0A\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x0B\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x0D\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x0E\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x0F\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x10\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x11\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x12\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x13\n    /*::]*/\n    : 932,\n\n    /*::[*/\n    0x14\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x15\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x16\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x17\n    /*::]*/\n    : 865,\n\n    /*::[*/\n    0x18\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x19\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x1A\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x1B\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x1C\n    /*::]*/\n    : 863,\n\n    /*::[*/\n    0x1D\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x1F\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x22\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x23\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x24\n    /*::]*/\n    : 860,\n\n    /*::[*/\n    0x25\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x26\n    /*::]*/\n    : 866,\n\n    /*::[*/\n    0x37\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x40\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x4D\n    /*::]*/\n    : 936,\n\n    /*::[*/\n    0x4E\n    /*::]*/\n    : 949,\n\n    /*::[*/\n    0x4F\n    /*::]*/\n    : 950,\n\n    /*::[*/\n    0x50\n    /*::]*/\n    : 874,\n\n    /*::[*/\n    0x57\n    /*::]*/\n    : 1252,\n\n    /*::[*/\n    0x58\n    /*::]*/\n    : 1252,\n\n    /*::[*/\n    0x59\n    /*::]*/\n    : 1252,\n\n    /*::[*/\n    0x6C\n    /*::]*/\n    : 863,\n\n    /*::[*/\n    0x86\n    /*::]*/\n    : 737,\n\n    /*::[*/\n    0x87\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x88\n    /*::]*/\n    : 857,\n\n    /*::[*/\n    0xCC\n    /*::]*/\n    : 1257,\n\n    /*::[*/\n    0xFF\n    /*::]*/\n    : 16969\n  };\n  var dbf_reverse_map = evert({\n    /*::[*/\n    0x01\n    /*::]*/\n    : 437,\n\n    /*::[*/\n    0x02\n    /*::]*/\n    : 850,\n\n    /*::[*/\n    0x03\n    /*::]*/\n    : 1252,\n\n    /*::[*/\n    0x04\n    /*::]*/\n    : 10000,\n\n    /*::[*/\n    0x64\n    /*::]*/\n    : 852,\n\n    /*::[*/\n    0x65\n    /*::]*/\n    : 866,\n\n    /*::[*/\n    0x66\n    /*::]*/\n    : 865,\n\n    /*::[*/\n    0x67\n    /*::]*/\n    : 861,\n\n    /*::[*/\n    0x68\n    /*::]*/\n    : 895,\n\n    /*::[*/\n    0x69\n    /*::]*/\n    : 620,\n\n    /*::[*/\n    0x6A\n    /*::]*/\n    : 737,\n\n    /*::[*/\n    0x6B\n    /*::]*/\n    : 857,\n\n    /*::[*/\n    0x78\n    /*::]*/\n    : 950,\n\n    /*::[*/\n    0x79\n    /*::]*/\n    : 949,\n\n    /*::[*/\n    0x7A\n    /*::]*/\n    : 936,\n\n    /*::[*/\n    0x7B\n    /*::]*/\n    : 932,\n\n    /*::[*/\n    0x7C\n    /*::]*/\n    : 874,\n\n    /*::[*/\n    0x7D\n    /*::]*/\n    : 1255,\n\n    /*::[*/\n    0x7E\n    /*::]*/\n    : 1256,\n\n    /*::[*/\n    0x96\n    /*::]*/\n    : 10007,\n\n    /*::[*/\n    0x97\n    /*::]*/\n    : 10029,\n\n    /*::[*/\n    0x98\n    /*::]*/\n    : 10006,\n\n    /*::[*/\n    0xC8\n    /*::]*/\n    : 1250,\n\n    /*::[*/\n    0xC9\n    /*::]*/\n    : 1251,\n\n    /*::[*/\n    0xCA\n    /*::]*/\n    : 1254,\n\n    /*::[*/\n    0xCB\n    /*::]*/\n    : 1253,\n\n    /*::[*/\n    0x00\n    /*::]*/\n    : 20127\n  });\n  /* TODO: find an actual specification */\n\n  function dbf_to_aoa(buf, opts)\n  /*:AOA*/\n  {\n    var out\n    /*:AOA*/\n    = [];\n    var d\n    /*:Block*/\n    = new_raw_buf(1)\n    /*:any*/\n    ;\n\n    switch (opts.type) {\n      case 'base64':\n        d = s2a(Base64_decode(buf));\n        break;\n\n      case 'binary':\n        d = s2a(buf);\n        break;\n\n      case 'buffer':\n      case 'array':\n        d = buf;\n        break;\n    }\n\n    prep_blob(d, 0);\n    /* header */\n\n    var ft = d.read_shift(1);\n    var memo = !!(ft & 0x88);\n    var vfp = false,\n        l7 = false;\n\n    switch (ft) {\n      case 0x02:\n        break;\n      // dBASE II\n\n      case 0x03:\n        break;\n      // dBASE III\n\n      case 0x30:\n        vfp = true;\n        memo = true;\n        break;\n      // VFP\n\n      case 0x31:\n        vfp = true;\n        memo = true;\n        break;\n      // VFP with autoincrement\n      // 0x43 dBASE IV SQL table files\n      // 0x63 dBASE IV SQL system files\n\n      case 0x83:\n        break;\n      // dBASE III with memo\n\n      case 0x8B:\n        break;\n      // dBASE IV with memo\n\n      case 0x8C:\n        l7 = true;\n        break;\n      // dBASE Level 7 with memo\n      // case 0xCB dBASE IV SQL table files with memo\n\n      case 0xF5:\n        break;\n      // FoxPro 2.x with memo\n      // case 0xFB FoxBASE\n\n      default:\n        throw new Error(\"DBF Unsupported Version: \" + ft.toString(16));\n    }\n\n    var nrow = 0,\n        fpos = 0x0209;\n    if (ft == 0x02) nrow = d.read_shift(2);\n    d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD\n\n    if (ft != 0x02) nrow = d.read_shift(4);\n    if (nrow > 1048576) nrow = 1e6;\n    if (ft != 0x02) fpos = d.read_shift(2); // header length\n\n    var rlen = d.read_shift(2); // record length\n\n    var\n    /*flags = 0,*/\n    current_cp = opts.codepage || 1252;\n\n    if (ft != 0x02) {\n      // 20 reserved bytes\n      d.l += 16;\n      /*flags = */\n\n      d.read_shift(1); //if(memo && ((flags & 0x02) === 0)) throw new Error(\"DBF Flags \" + flags.toString(16) + \" ft \" + ft.toString(16));\n\n      /* codepage present in FoxPro and dBASE Level 7 */\n\n      if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];\n      d.l += 1;\n      d.l += 2;\n    }\n\n    if (l7) d.l += 36; // Level 7: 32 byte \"Language driver name\", 4 byte reserved\n\n    /*:: type DBFField = { name:string; len:number; type:string; } */\n\n    var fields\n    /*:Array<DBFField>*/\n    = [],\n        field\n    /*:DBFField*/\n    = {}\n    /*:any*/\n    ;\n    var hend = Math.min(d.length, ft == 0x02 ? 0x209 : fpos - 10 - (vfp ? 264 : 0));\n    var ww = l7 ? 32 : 11;\n\n    while (d.l < hend && d[d.l] != 0x0d) {\n      field = {}\n      /*:any*/\n      ;\n      field.name = (typeof $cptable !== \"undefined\" ? $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)) : a2s(d.slice(d.l, d.l + ww))).replace(/[\\u0000\\r\\n].*$/g, \"\");\n      d.l += ww;\n      field.type = String.fromCharCode(d.read_shift(1));\n      if (ft != 0x02 && !l7) field.offset = d.read_shift(4);\n      field.len = d.read_shift(1);\n      if (ft == 0x02) field.offset = d.read_shift(2);\n      field.dec = d.read_shift(1);\n      if (field.name.length) fields.push(field);\n      if (ft != 0x02) d.l += l7 ? 13 : 14;\n\n      switch (field.type) {\n        case 'B':\n          // Double (VFP) / Binary (dBASE L7)\n          if ((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);\n          break;\n\n        case 'G': // General (FoxPro and dBASE L7)\n\n        case 'P':\n          // Picture (FoxPro and dBASE L7)\n          if (opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);\n          break;\n\n        case '+': // Autoincrement (dBASE L7 only)\n\n        case '0': // _NullFlags (VFP only)\n\n        case '@': // Timestamp (dBASE L7 only)\n\n        case 'C': // Character (dBASE II)\n\n        case 'D': // Date (dBASE III)\n\n        case 'F': // Float (dBASE IV)\n\n        case 'I': // Long (VFP and dBASE L7)\n\n        case 'L': // Logical (dBASE II)\n\n        case 'M': // Memo (dBASE III)\n\n        case 'N': // Number (dBASE II)\n\n        case 'O': // Double (dBASE L7 only)\n\n        case 'T': // Datetime (VFP only)\n\n        case 'Y':\n          // Currency (VFP only)\n          break;\n\n        default:\n          throw new Error('Unknown Field Type: ' + field.type);\n      }\n    }\n\n    if (d[d.l] !== 0x0D) d.l = fpos - 1;\n    if (d.read_shift(1) !== 0x0D) throw new Error(\"DBF Terminator not found \" + d.l + \" \" + d[d.l]);\n    d.l = fpos;\n    /* data */\n\n    var R = 0,\n        C = 0;\n    out[0] = [];\n\n    for (C = 0; C != fields.length; ++C) {\n      out[0][C] = fields[C].name;\n    }\n\n    while (nrow-- > 0) {\n      if (d[d.l] === 0x2A) {\n        // TODO: record marked as deleted -- create a hidden row?\n        d.l += rlen;\n        continue;\n      }\n\n      ++d.l;\n      out[++R] = [];\n      C = 0;\n\n      for (C = 0; C != fields.length; ++C) {\n        var dd = d.slice(d.l, d.l + fields[C].len);\n        d.l += fields[C].len;\n        prep_blob(dd, 0);\n        var s = typeof $cptable !== \"undefined\" ? $cptable.utils.decode(current_cp, dd) : a2s(dd);\n\n        switch (fields[C].type) {\n          case 'C':\n            // NOTE: it is conventional to write '  /  /  ' for empty dates\n            if (s.trim().length) out[R][C] = s.replace(/\\s+$/, \"\");\n            break;\n\n          case 'D':\n            if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));else out[R][C] = s;\n            break;\n\n          case 'F':\n            out[R][C] = parseFloat(s.trim());\n            break;\n\n          case '+':\n          case 'I':\n            out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i');\n            break;\n\n          case 'L':\n            switch (s.trim().toUpperCase()) {\n              case 'Y':\n              case 'T':\n                out[R][C] = true;\n                break;\n\n              case 'N':\n              case 'F':\n                out[R][C] = false;\n                break;\n\n              case '':\n              case '?':\n                break;\n\n              default:\n                throw new Error(\"DBF Unrecognized L:|\" + s + \"|\");\n            }\n\n            break;\n\n          case 'M':\n            /* TODO: handle memo files */\n            if (!memo) throw new Error(\"DBF Unexpected MEMO for type \" + ft.toString(16));\n            out[R][C] = \"##MEMO##\" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));\n            break;\n\n          case 'N':\n            s = s.replace(/\\u0000/g, \"\").trim(); // NOTE: dBASE II interprets \"  .  \" as 0\n\n            if (s && s != \".\") out[R][C] = +s || 0;\n            break;\n\n          case '@':\n            // NOTE: dBASE specs appear to be incorrect\n            out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);\n            break;\n\n          case 'T':\n            out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4));\n            break;\n\n          case 'Y':\n            out[R][C] = dd.read_shift(4, 'i') / 1e4 + dd.read_shift(4, 'i') / 1e4 * Math.pow(2, 32);\n            break;\n\n          case 'O':\n            out[R][C] = -dd.read_shift(-8, 'f');\n            break;\n\n          case 'B':\n            if (vfp && fields[C].len == 8) {\n              out[R][C] = dd.read_shift(8, 'f');\n              break;\n            }\n\n          /* falls through */\n\n          case 'G':\n          case 'P':\n            dd.l += fields[C].len;\n            break;\n\n          case '0':\n            if (fields[C].name === '_NullFlags') break;\n\n          /* falls through */\n\n          default:\n            throw new Error(\"DBF Unsupported data type \" + fields[C].type);\n        }\n      }\n    }\n\n    if (ft != 0x02) if (d.l < d.length && d[d.l++] != 0x1A) throw new Error(\"DBF EOF Marker missing \" + (d.l - 1) + \" of \" + d.length + \" \" + d[d.l - 1].toString(16));\n    if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);\n    opts.DBF = fields;\n    return out;\n  }\n\n  function dbf_to_sheet(buf, opts)\n  /*:Worksheet*/\n  {\n    var o = opts || {};\n    if (!o.dateNF) o.dateNF = \"yyyymmdd\";\n    var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);\n    ws[\"!cols\"] = o.DBF.map(function (field) {\n      return {\n        wch: field.len,\n        DBF: field\n      };\n    });\n    delete o.DBF;\n    return ws;\n  }\n\n  function dbf_to_workbook(buf, opts)\n  /*:Workbook*/\n  {\n    try {\n      var o = sheet_to_workbook(dbf_to_sheet(buf, opts), opts);\n      o.bookType = \"dbf\";\n      return o;\n    } catch (e) {\n      if (opts && opts.WTF) throw e;\n    }\n\n    return {\n      SheetNames: [],\n      Sheets: {}\n    };\n  }\n\n  var _RLEN = {\n    'B': 8,\n    'C': 250,\n    'L': 1,\n    'D': 8,\n    '?': 0,\n    '': 0\n  };\n\n  function sheet_to_dbf(ws\n  /*:Worksheet*/\n  , opts\n  /*:WriteOpts*/\n  ) {\n    var o = opts || {};\n    var old_cp = current_codepage;\n    if (+o.codepage >= 0) set_cp(+o.codepage);\n    if (o.type == \"string\") throw new Error(\"Cannot write DBF to JS string\");\n    var ba = buf_array();\n    var aoa\n    /*:AOA*/\n    = sheet_to_json(ws, {\n      header: 1,\n      raw: true,\n      cellDates: true\n    });\n    var headers = aoa[0],\n        data = aoa.slice(1),\n        cols = ws[\"!cols\"] || [];\n    var i = 0,\n        j = 0,\n        hcnt = 0,\n        rlen = 1;\n\n    for (i = 0; i < headers.length; ++i) {\n      if (((cols[i] || {}).DBF || {}).name) {\n        headers[i] = cols[i].DBF.name;\n        ++hcnt;\n        continue;\n      }\n\n      if (headers[i] == null) continue;\n      ++hcnt;\n      if (typeof headers[i] === 'number') headers[i] = headers[i].toString(10);\n      if (typeof headers[i] !== 'string') throw new Error(\"DBF Invalid column name \" + headers[i] + \" |\" + typeof headers[i] + \"|\");\n      if (headers.indexOf(headers[i]) !== i) for (j = 0; j < 1024; ++j) {\n        if (headers.indexOf(headers[i] + \"_\" + j) == -1) {\n          headers[i] += \"_\" + j;\n          break;\n        }\n      }\n    }\n\n    var range = safe_decode_range(ws['!ref']);\n    var coltypes\n    /*:Array<string>*/\n    = [];\n    var colwidths\n    /*:Array<number>*/\n    = [];\n    var coldecimals\n    /*:Array<number>*/\n    = [];\n\n    for (i = 0; i <= range.e.c - range.s.c; ++i) {\n      var guess = '',\n          _guess = '',\n          maxlen = 0;\n      var col\n      /*:Array<any>*/\n      = [];\n\n      for (j = 0; j < data.length; ++j) {\n        if (data[j][i] != null) col.push(data[j][i]);\n      }\n\n      if (col.length == 0 || headers[i] == null) {\n        coltypes[i] = '?';\n        continue;\n      }\n\n      for (j = 0; j < col.length; ++j) {\n        switch (typeof col[j]) {\n          /* TODO: check if L2 compat is desired */\n          case 'number':\n            _guess = 'B';\n            break;\n\n          case 'string':\n            _guess = 'C';\n            break;\n\n          case 'boolean':\n            _guess = 'L';\n            break;\n\n          case 'object':\n            _guess = col[j] instanceof Date ? 'D' : 'C';\n            break;\n\n          default:\n            _guess = 'C';\n        }\n        /* TODO: cache the values instead of encoding twice */\n\n\n        maxlen = Math.max(maxlen, (typeof $cptable !== \"undefined\" && typeof col[j] == \"string\" ? $cptable.utils.encode(current_ansi, col[j]) : String(col[j])).length);\n        guess = guess && guess != _guess ? 'C' : _guess; //if(guess == 'C') break;\n      }\n\n      if (maxlen > 250) maxlen = 250;\n      _guess = ((cols[i] || {}).DBF || {}).type;\n      /* TODO: more fine grained control over DBF type resolution */\n\n      if (_guess == 'C') {\n        if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;\n      }\n\n      if (guess == 'B' && _guess == 'N') {\n        guess = 'N';\n        coldecimals[i] = cols[i].DBF.dec;\n        maxlen = cols[i].DBF.len;\n      }\n\n      colwidths[i] = guess == 'C' || _guess == 'N' ? maxlen : _RLEN[guess] || 0;\n      rlen += colwidths[i];\n      coltypes[i] = guess;\n    }\n\n    var h = ba.next(32);\n    h.write_shift(4, 0x13021130);\n    h.write_shift(4, data.length);\n    h.write_shift(2, 296 + 32 * hcnt);\n    h.write_shift(2, rlen);\n\n    for (i = 0; i < 4; ++i) {\n      h.write_shift(4, 0);\n    }\n\n    var cp = +dbf_reverse_map[\n    /*::String(*/\n    current_codepage\n    /*::)*/\n    ] || 0x03;\n    h.write_shift(4, 0x00000000 | cp << 8);\n\n    if (dbf_codepage_map[cp] != +o.codepage) {\n      console.error(\"DBF Unsupported codepage \" + current_codepage + \", using 1252\");\n      current_codepage = 1252;\n    }\n\n    for (i = 0, j = 0; i < headers.length; ++i) {\n      if (headers[i] == null) continue;\n      var hf = ba.next(32);\n      /* TODO: test how applications handle non-ASCII field names */\n\n      var _f = (headers[i].slice(-10) + \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\").slice(0, 11);\n\n      hf.write_shift(1, _f, \"sbcs\");\n      hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], \"sbcs\");\n      hf.write_shift(4, j);\n      hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);\n      hf.write_shift(1, coldecimals[i] || 0);\n      hf.write_shift(1, 0x02);\n      hf.write_shift(4, 0);\n      hf.write_shift(1, 0);\n      hf.write_shift(4, 0);\n      hf.write_shift(4, 0);\n      j += colwidths[i] || _RLEN[coltypes[i]] || 0;\n    }\n\n    var hb = ba.next(264);\n    hb.write_shift(4, 0x0000000D);\n\n    for (i = 0; i < 65; ++i) {\n      hb.write_shift(4, 0x00000000);\n    }\n\n    for (i = 0; i < data.length; ++i) {\n      var rout = ba.next(rlen);\n      rout.write_shift(1, 0);\n\n      for (j = 0; j < headers.length; ++j) {\n        if (headers[j] == null) continue;\n\n        switch (coltypes[j]) {\n          case 'L':\n            rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46);\n            break;\n\n          case 'B':\n            rout.write_shift(8, data[i][j] || 0, 'f');\n            break;\n\n          case 'N':\n            var _n = \"0\";\n            if (typeof data[i][j] == \"number\") _n = data[i][j].toFixed(coldecimals[j] || 0);\n\n            for (hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt) {\n              rout.write_shift(1, 0x20);\n            }\n\n            rout.write_shift(1, _n, \"sbcs\");\n            break;\n\n          case 'D':\n            if (!data[i][j]) rout.write_shift(8, \"00000000\", \"sbcs\");else {\n              rout.write_shift(4, (\"0000\" + data[i][j].getFullYear()).slice(-4), \"sbcs\");\n              rout.write_shift(2, (\"00\" + (data[i][j].getMonth() + 1)).slice(-2), \"sbcs\");\n              rout.write_shift(2, (\"00\" + data[i][j].getDate()).slice(-2), \"sbcs\");\n            }\n            break;\n\n          case 'C':\n            var _l = rout.l;\n\n            var _s = String(data[i][j] != null ? data[i][j] : \"\").slice(0, colwidths[j]);\n\n            rout.write_shift(1, _s, \"cpstr\");\n            _l += colwidths[j] - rout.l;\n\n            for (hcnt = 0; hcnt < _l; ++hcnt) {\n              rout.write_shift(1, 0x20);\n            }\n\n            break;\n        }\n      } // data\n\n    }\n\n    current_codepage = old_cp;\n    ba.next(1).write_shift(1, 0x1A);\n    return ba.end();\n  }\n\n  return {\n    to_workbook: dbf_to_workbook,\n    to_sheet: dbf_to_sheet,\n    from_sheet: sheet_to_dbf\n  };\n}();\n\nvar SYLK = /*#__PURE__*/function () {\n  /* TODO: stress test sequences */\n  var sylk_escapes = {\n    AA: 'À',\n    BA: 'Á',\n    CA: 'Â',\n    DA: 195,\n    HA: 'Ä',\n    JA: 197,\n    AE: 'È',\n    BE: 'É',\n    CE: 'Ê',\n    HE: 'Ë',\n    AI: 'Ì',\n    BI: 'Í',\n    CI: 'Î',\n    HI: 'Ï',\n    AO: 'Ò',\n    BO: 'Ó',\n    CO: 'Ô',\n    DO: 213,\n    HO: 'Ö',\n    AU: 'Ù',\n    BU: 'Ú',\n    CU: 'Û',\n    HU: 'Ü',\n    Aa: 'à',\n    Ba: 'á',\n    Ca: 'â',\n    Da: 227,\n    Ha: 'ä',\n    Ja: 229,\n    Ae: 'è',\n    Be: 'é',\n    Ce: 'ê',\n    He: 'ë',\n    Ai: 'ì',\n    Bi: 'í',\n    Ci: 'î',\n    Hi: 'ï',\n    Ao: 'ò',\n    Bo: 'ó',\n    Co: 'ô',\n    Do: 245,\n    Ho: 'ö',\n    Au: 'ù',\n    Bu: 'ú',\n    Cu: 'û',\n    Hu: 'ü',\n    KC: 'Ç',\n    Kc: 'ç',\n    q: 'æ',\n    z: 'œ',\n    a: 'Æ',\n    j: 'Œ',\n    DN: 209,\n    Dn: 241,\n    Hy: 255,\n    S: 169,\n    c: 170,\n    R: 174,\n    \"B \": 180,\n\n    /*::[*/\n    0\n    /*::]*/\n    : 176,\n\n    /*::[*/\n    1\n    /*::]*/\n    : 177,\n\n    /*::[*/\n    2\n    /*::]*/\n    : 178,\n\n    /*::[*/\n    3\n    /*::]*/\n    : 179,\n\n    /*::[*/\n    5\n    /*::]*/\n    : 181,\n\n    /*::[*/\n    6\n    /*::]*/\n    : 182,\n\n    /*::[*/\n    7\n    /*::]*/\n    : 183,\n    Q: 185,\n    k: 186,\n    b: 208,\n    i: 216,\n    l: 222,\n    s: 240,\n    y: 248,\n    \"!\": 161,\n    '\"': 162,\n    \"#\": 163,\n    \"(\": 164,\n    \"%\": 165,\n    \"'\": 167,\n    \"H \": 168,\n    \"+\": 171,\n    \";\": 187,\n    \"<\": 188,\n    \"=\": 189,\n    \">\": 190,\n    \"?\": 191,\n    \"{\": 223\n  }\n  /*:any*/\n  ;\n  var sylk_char_regex = new RegExp(\"\\x1BN(\" + keys(sylk_escapes).join(\"|\").replace(/\\|\\|\\|/, \"|\\\\||\").replace(/([?()+])/g, \"\\\\$1\") + \"|\\\\|)\", \"gm\");\n\n  var sylk_char_fn = function sylk_char_fn(_, $1) {\n    var o = sylk_escapes[$1];\n    return typeof o == \"number\" ? _getansi(o) : o;\n  };\n\n  var decode_sylk_char = function decode_sylk_char($$, $1, $2) {\n    var newcc = $1.charCodeAt(0) - 0x20 << 4 | $2.charCodeAt(0) - 0x30;\n    return newcc == 59 ? $$ : _getansi(newcc);\n  };\n\n  sylk_escapes[\"|\"] = 254;\n  /* https://oss.sheetjs.com/notes/sylk/ for more details */\n\n  function sylk_to_aoa(d\n  /*:RawData*/\n  , opts)\n  /*:[AOA, Worksheet]*/\n  {\n    switch (opts.type) {\n      case 'base64':\n        return sylk_to_aoa_str(Base64_decode(d), opts);\n\n      case 'binary':\n        return sylk_to_aoa_str(d, opts);\n\n      case 'buffer':\n        return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);\n\n      case 'array':\n        return sylk_to_aoa_str(cc2str(d), opts);\n    }\n\n    throw new Error(\"Unrecognized type \" + opts.type);\n  }\n\n  function sylk_to_aoa_str(str\n  /*:string*/\n  , opts)\n  /*:[AOA, Worksheet]*/\n  {\n    var records = str.split(/[\\n\\r]+/),\n        R = -1,\n        C = -1,\n        ri = 0,\n        rj = 0,\n        arr\n    /*:AOA*/\n    = [];\n    var formats\n    /*:Array<string>*/\n    = [];\n    var next_cell_format\n    /*:string|null*/\n    = null;\n    var sht = {},\n        rowinfo\n    /*:Array<RowInfo>*/\n    = [],\n        colinfo\n    /*:Array<ColInfo>*/\n    = [],\n        cw\n    /*:Array<string>*/\n    = [];\n    var Mval = 0,\n        j;\n    var wb = {\n      Workbook: {\n        WBProps: {},\n        Names: []\n      }\n    };\n    if (+opts.codepage >= 0) set_cp(+opts.codepage);\n\n    for (; ri !== records.length; ++ri) {\n      Mval = 0;\n      var rstr = records[ri].trim().replace(/\\x1B([\\x20-\\x2F])([\\x30-\\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);\n      var record = rstr.replace(/;;/g, \"\\0\").split(\";\").map(function (x) {\n        return x.replace(/\\u0000/g, \";\");\n      });\n      var RT = record[0],\n          val;\n      if (rstr.length > 0) switch (RT) {\n        case 'ID':\n          break;\n\n        /* header */\n\n        case 'E':\n          break;\n\n        /* EOF */\n\n        case 'B':\n          break;\n\n        /* dimensions */\n\n        case 'O':\n          /* workbook options */\n          for (rj = 1; rj < record.length; ++rj) {\n            switch (record[rj].charAt(0)) {\n              case 'V':\n                {\n                  var d1904 = parseInt(record[rj].slice(1), 10); // NOTE: it is technically an error if d1904 >= 5 or < 0\n\n                  if (d1904 >= 1 && d1904 <= 4) wb.Workbook.WBProps.date1904 = true;\n                }\n                break;\n            }\n          }\n\n          break;\n\n        case 'W':\n          break;\n\n        /* window */\n\n        case 'P':\n          switch (record[1].charAt(0)) {\n            case 'P':\n              formats.push(rstr.slice(3).replace(/;;/g, \";\"));\n              break;\n          }\n\n          break;\n\n        case 'NN':\n          {\n            /* defined name */\n            var nn = {\n              Sheet: 0\n            };\n\n            for (rj = 1; rj < record.length; ++rj) {\n              switch (record[rj].charAt(0)) {\n                case 'N':\n                  nn.Name = record[rj].slice(1);\n                  break;\n\n                case 'E':\n                  nn.Ref = (opts && opts.sheet || \"Sheet1\") + \"!\" + rc_to_a1(record[rj].slice(1));\n                  break;\n              }\n            }\n\n            wb.Workbook.Names.push(nn);\n          }\n          break;\n        // case 'NE': // ??\n        // case 'NU': // ??\n\n        case 'C':\n          /* cell */\n          var C_seen_K = false,\n              C_seen_X = false,\n              C_seen_S = false,\n              C_seen_E = false,\n              _R = -1,\n              _C = -1,\n              formula = \"\",\n              cell_t = \"z\";\n\n          for (rj = 1; rj < record.length; ++rj) {\n            switch (record[rj].charAt(0)) {\n              case 'A':\n                break;\n              // TODO: comment\n\n              case 'X':\n                C = parseInt(record[rj].slice(1), 10) - 1;\n                C_seen_X = true;\n                break;\n\n              case 'Y':\n                R = parseInt(record[rj].slice(1), 10) - 1;\n                if (!C_seen_X) C = 0;\n\n                for (j = arr.length; j <= R; ++j) {\n                  arr[j] = [];\n                }\n\n                break;\n\n              case 'K':\n                val = record[rj].slice(1);\n\n                if (val.charAt(0) === '\"') {\n                  val = val.slice(1, val.length - 1);\n                  cell_t = \"s\";\n                } else if (val === 'TRUE' || val === 'FALSE') {\n                  val = val === 'TRUE';\n                  cell_t = \"b\";\n                } else if (!isNaN(fuzzynum(val))) {\n                  val = fuzzynum(val);\n                  cell_t = \"n\";\n\n                  if (next_cell_format !== null && fmt_is_date(next_cell_format) && opts.cellDates) {\n                    val = numdate(wb.Workbook.WBProps.date1904 ? val + 1462 : val);\n                    cell_t = \"d\";\n                  }\n                } else if (!isNaN(fuzzydate(val).getDate())) {\n                  val = parseDate(val);\n                  cell_t = \"d\";\n\n                  if (!opts.cellDates) {\n                    cell_t = \"n\";\n                    val = datenum(val, wb.Workbook.WBProps.date1904);\n                  }\n                }\n\n                if (typeof $cptable !== 'undefined' && typeof val == \"string\" && (opts || {}).type != \"string\" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);\n                C_seen_K = true;\n                break;\n\n              case 'E':\n                C_seen_E = true;\n                formula = rc_to_a1(record[rj].slice(1), {\n                  r: R,\n                  c: C\n                });\n                break;\n\n              case 'S':\n                C_seen_S = true;\n                break;\n\n              case 'G':\n                break;\n              // unknown\n\n              case 'R':\n                _R = parseInt(record[rj].slice(1), 10) - 1;\n                break;\n\n              case 'C':\n                _C = parseInt(record[rj].slice(1), 10) - 1;\n                break;\n              // case 'P': // ??\n              // case 'D': // ??\n\n              default:\n                if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n            }\n          }\n\n          if (C_seen_K) {\n            if (!arr[R][C]) arr[R][C] = {\n              t: cell_t,\n              v: val\n            };else {\n              arr[R][C].t = cell_t;\n              arr[R][C].v = val;\n            }\n            if (next_cell_format) arr[R][C].z = next_cell_format;\n            if (opts.cellText !== false && next_cell_format) arr[R][C].w = SSF_format(arr[R][C].z, arr[R][C].v, {\n              date1904: wb.Workbook.WBProps.date1904\n            });\n            next_cell_format = null;\n          }\n\n          if (C_seen_S) {\n            if (C_seen_E) throw new Error(\"SYLK shared formula cannot have own formula\");\n            var shrbase = _R > -1 && arr[_R][_C];\n            if (!shrbase || !shrbase[1]) throw new Error(\"SYLK shared formula cannot find base\");\n            formula = shift_formula_str(shrbase[1], {\n              r: R - _R,\n              c: C - _C\n            });\n          }\n\n          if (formula) {\n            if (!arr[R][C]) arr[R][C] = {\n              t: 'n',\n              f: formula\n            };else arr[R][C].f = formula;\n          }\n\n          break;\n\n        case 'F':\n          /* Format */\n          var F_seen = 0;\n\n          for (rj = 1; rj < record.length; ++rj) {\n            switch (record[rj].charAt(0)) {\n              case 'X':\n                C = parseInt(record[rj].slice(1), 10) - 1;\n                ++F_seen;\n                break;\n\n              case 'Y':\n                R = parseInt(record[rj].slice(1), 10) - 1;\n                /*C = 0;*/\n\n                for (j = arr.length; j <= R; ++j) {\n                  arr[j] = [];\n                }\n\n                break;\n\n              case 'M':\n                Mval = parseInt(record[rj].slice(1), 10) / 20;\n                break;\n\n              case 'F':\n                break;\n\n              /* ??? */\n\n              case 'G':\n                break;\n\n              /* hide grid */\n\n              case 'P':\n                next_cell_format = formats[parseInt(record[rj].slice(1), 10)];\n                break;\n\n              case 'S':\n                break;\n\n              /* cell style */\n\n              case 'D':\n                break;\n\n              /* column */\n\n              case 'N':\n                break;\n\n              /* font */\n\n              case 'W':\n                cw = record[rj].slice(1).split(\" \");\n\n                for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {\n                  Mval = parseInt(cw[2], 10);\n                  colinfo[j - 1] = Mval === 0 ? {\n                    hidden: true\n                  } : {\n                    wch: Mval\n                  };\n                }\n\n                break;\n\n              case 'C':\n                /* default column format */\n                C = parseInt(record[rj].slice(1), 10) - 1;\n                if (!colinfo[C]) colinfo[C] = {};\n                break;\n\n              case 'R':\n                /* row properties */\n                R = parseInt(record[rj].slice(1), 10) - 1;\n                if (!rowinfo[R]) rowinfo[R] = {};\n\n                if (Mval > 0) {\n                  rowinfo[R].hpt = Mval;\n                  rowinfo[R].hpx = pt2px(Mval);\n                } else if (Mval === 0) rowinfo[R].hidden = true;\n\n                break;\n              // case 'K': // ??\n              // case 'E': // ??\n\n              default:\n                if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n            }\n          }\n\n          if (F_seen < 1) next_cell_format = null;\n          break;\n\n        default:\n          if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n      }\n    }\n\n    if (rowinfo.length > 0) sht['!rows'] = rowinfo;\n    if (colinfo.length > 0) sht['!cols'] = colinfo;\n    colinfo.forEach(function (col) {\n      process_col(col);\n    });\n    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n    return [arr, sht, wb];\n  }\n\n  function sylk_to_workbook(d\n  /*:RawData*/\n  , opts)\n  /*:Workbook*/\n  {\n    var aoasht = sylk_to_aoa(d, opts);\n    var aoa = aoasht[0],\n        ws = aoasht[1],\n        wb = aoasht[2];\n\n    var _opts = dup(opts);\n\n    _opts.date1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;\n    var o = aoa_to_sheet(aoa, _opts);\n    keys(ws).forEach(function (k) {\n      o[k] = ws[k];\n    });\n    var outwb = sheet_to_workbook(o, opts);\n    keys(wb).forEach(function (k) {\n      outwb[k] = wb[k];\n    });\n    outwb.bookType = \"sylk\";\n    return outwb;\n  }\n\n  function write_ws_cell_sylk(cell\n  /*:Cell*/\n  , ws\n  /*:Worksheet*/\n  , R\n  /*:number*/\n  , C\n  /*:number*/\n\n  /*::, opts*/\n  )\n  /*:string*/\n  {\n    var o = \"C;Y\" + (R + 1) + \";X\" + (C + 1) + \";K\";\n\n    switch (cell.t) {\n      case 'n':\n        o += cell.v || 0;\n        if (cell.f && !cell.F) o += \";E\" + a1_to_rc(cell.f, {\n          r: R,\n          c: C\n        });\n        break;\n\n      case 'b':\n        o += cell.v ? \"TRUE\" : \"FALSE\";\n        break;\n\n      case 'e':\n        o += cell.w || cell.v;\n        break;\n\n      case 'd':\n        o += '\"' + (cell.w || cell.v) + '\"';\n        break;\n\n      case 's':\n        o += '\"' + cell.v.replace(/\"/g, \"\").replace(/;/g, \";;\") + '\"';\n        break;\n    }\n\n    return o;\n  }\n\n  function write_ws_cols_sylk(out, cols) {\n    cols.forEach(function (col, i) {\n      var rec = \"F;W\" + (i + 1) + \" \" + (i + 1) + \" \";\n      if (col.hidden) rec += \"0\";else {\n        if (typeof col.width == 'number' && !col.wpx) col.wpx = width2px(col.width);\n        if (typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);\n        if (typeof col.wch == 'number') rec += Math.round(col.wch);\n      }\n      if (rec.charAt(rec.length - 1) != \" \") out.push(rec);\n    });\n  }\n\n  function write_ws_rows_sylk(out\n  /*:Array<string>*/\n  , rows\n  /*:Array<RowInfo>*/\n  ) {\n    rows.forEach(function (row, i) {\n      var rec = \"F;\";\n      if (row.hidden) rec += \"M0;\";else if (row.hpt) rec += \"M\" + 20 * row.hpt + \";\";else if (row.hpx) rec += \"M\" + 20 * px2pt(row.hpx) + \";\";\n      if (rec.length > 2) out.push(rec + \"R\" + (i + 1));\n    });\n  }\n\n  function sheet_to_sylk(ws\n  /*:Worksheet*/\n  , opts\n  /*:?any*/\n  , wb\n  /*:?WorkBook*/\n  )\n  /*:string*/\n  {\n    /* TODO: codepage */\n    var preamble\n    /*:Array<string>*/\n    = [\"ID;PSheetJS;N;E\"],\n        o\n    /*:Array<string>*/\n    = [];\n    var r = safe_decode_range(ws['!ref']),\n        cell\n    /*:Cell*/\n    ;\n    var dense = Array.isArray(ws);\n    var RS = \"\\r\\n\";\n    var d1904 = (((wb || {}).Workbook || {}).WBProps || {}).date1904;\n    preamble.push(\"P;PGeneral\");\n    preamble.push(\"F;P0;DG0G8;M255\");\n    if (ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);\n    if (ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);\n    preamble.push(\"B;Y\" + (r.e.r - r.s.r + 1) + \";X\" + (r.e.c - r.s.c + 1) + \";D\" + [r.s.c, r.s.r, r.e.c, r.e.r].join(\" \"));\n    preamble.push(\"O;L;D;B\" + (d1904 ? \";V4\" : \"\") + \";K47;G100 0.001\");\n\n    for (var R = r.s.r; R <= r.e.r; ++R) {\n      var p = [];\n\n      for (var C = r.s.c; C <= r.e.c; ++C) {\n        var coord = encode_cell({\n          r: R,\n          c: C\n        });\n        cell = dense ? (ws[R] || [])[C] : ws[coord];\n        if (!cell || cell.v == null && (!cell.f || cell.F)) continue;\n        p.push(write_ws_cell_sylk(cell, ws, R, C, opts)); // TODO: pass date1904 info\n      }\n\n      o.push(p.join(RS));\n    }\n\n    return preamble.join(RS) + RS + o.join(RS) + RS + \"E\" + RS;\n  }\n\n  return {\n    to_workbook: sylk_to_workbook,\n    from_sheet: sheet_to_sylk\n  };\n}();\n\nvar DIF = /*#__PURE__*/function () {\n  function dif_to_aoa(d\n  /*:RawData*/\n  , opts)\n  /*:AOA*/\n  {\n    switch (opts.type) {\n      case 'base64':\n        return dif_to_aoa_str(Base64_decode(d), opts);\n\n      case 'binary':\n        return dif_to_aoa_str(d, opts);\n\n      case 'buffer':\n        return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);\n\n      case 'array':\n        return dif_to_aoa_str(cc2str(d), opts);\n    }\n\n    throw new Error(\"Unrecognized type \" + opts.type);\n  }\n\n  function dif_to_aoa_str(str\n  /*:string*/\n  , opts)\n  /*:AOA*/\n  {\n    var records = str.split('\\n'),\n        R = -1,\n        C = -1,\n        ri = 0,\n        arr\n    /*:AOA*/\n    = [];\n\n    for (; ri !== records.length; ++ri) {\n      if (records[ri].trim() === 'BOT') {\n        arr[++R] = [];\n        C = 0;\n        continue;\n      }\n\n      if (R < 0) continue;\n      var metadata = records[ri].trim().split(\",\");\n      var type = metadata[0],\n          value = metadata[1];\n      ++ri;\n      var data = records[ri] || \"\";\n\n      while ((data.match(/[\"]/g) || []).length & 1 && ri < records.length - 1) {\n        data += \"\\n\" + records[++ri];\n      }\n\n      data = data.trim();\n\n      switch (+type) {\n        case -1:\n          if (data === 'BOT') {\n            arr[++R] = [];\n            C = 0;\n            continue;\n          } else if (data !== 'EOD') throw new Error(\"Unrecognized DIF special command \" + data);\n\n          break;\n\n        case 0:\n          if (data === 'TRUE') arr[R][C] = true;else if (data === 'FALSE') arr[R][C] = false;else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);else arr[R][C] = value;\n          ++C;\n          break;\n\n        case 1:\n          data = data.slice(1, data.length - 1);\n          data = data.replace(/\"\"/g, '\"');\n          if (DIF_XL && data && data.match(/^=\".*\"$/)) data = data.slice(2, -1);\n          arr[R][C++] = data !== '' ? data : null;\n          break;\n      }\n\n      if (data === 'EOD') break;\n    }\n\n    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n    return arr;\n  }\n\n  function dif_to_sheet(str\n  /*:string*/\n  , opts)\n  /*:Worksheet*/\n  {\n    return aoa_to_sheet(dif_to_aoa(str, opts), opts);\n  }\n\n  function dif_to_workbook(str\n  /*:string*/\n  , opts)\n  /*:Workbook*/\n  {\n    var o = sheet_to_workbook(dif_to_sheet(str, opts), opts);\n    o.bookType = \"dif\";\n    return o;\n  }\n\n  function make_value(v\n  /*:number*/\n  , s\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return \"0,\" + String(v) + \"\\r\\n\" + s;\n  }\n\n  function make_value_str(s\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return \"1,0\\r\\n\\\"\" + s.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  function sheet_to_dif(ws\n  /*:Worksheet*/\n\n  /*::, opts:?any*/\n  )\n  /*:string*/\n  {\n    var _DIF_XL = DIF_XL;\n    var r = safe_decode_range(ws['!ref']);\n    var dense = Array.isArray(ws);\n    var o\n    /*:Array<string>*/\n    = [\"TABLE\\r\\n0,1\\r\\n\\\"sheetjs\\\"\\r\\n\", \"VECTORS\\r\\n0,\" + (r.e.r - r.s.r + 1) + \"\\r\\n\\\"\\\"\\r\\n\", \"TUPLES\\r\\n0,\" + (r.e.c - r.s.c + 1) + \"\\r\\n\\\"\\\"\\r\\n\", \"DATA\\r\\n0,0\\r\\n\\\"\\\"\\r\\n\"];\n\n    for (var R = r.s.r; R <= r.e.r; ++R) {\n      var p = \"-1,0\\r\\nBOT\\r\\n\";\n\n      for (var C = r.s.c; C <= r.e.c; ++C) {\n        var cell\n        /*:Cell*/\n        = dense ? ws[R] && ws[R][C] : ws[encode_cell({\n          r: R,\n          c: C\n        })];\n\n        if (cell == null) {\n          p += \"1,0\\r\\n\\\"\\\"\\r\\n\";\n          continue;\n        }\n\n        switch (cell.t) {\n          case 'n':\n            if (_DIF_XL) {\n              if (cell.w != null) p += \"0,\" + cell.w + \"\\r\\nV\";else if (cell.v != null) p += make_value(cell.v, \"V\"); // TODO: should this call SSF_format?\n              else if (cell.f != null && !cell.F) p += make_value_str(\"=\" + cell.f);else p += \"1,0\\r\\n\\\"\\\"\";\n            } else {\n              if (cell.v == null) p += \"1,0\\r\\n\\\"\\\"\";else p += make_value(cell.v, \"V\");\n            }\n\n            break;\n\n          case 'b':\n            p += cell.v ? make_value(1, \"TRUE\") : make_value(0, \"FALSE\");\n            break;\n\n          case 's':\n            p += make_value_str(!_DIF_XL || isNaN(+cell.v) ? cell.v : '=\"' + cell.v + '\"');\n            break;\n\n          case 'd':\n            if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));\n            if (_DIF_XL) p += make_value(cell.w, \"V\");else p += make_value_str(cell.w);\n            break;\n\n          default:\n            p += \"1,0\\r\\n\\\"\\\"\";\n        }\n\n        p += \"\\r\\n\";\n      }\n\n      o.push(p);\n    }\n\n    return o.join(\"\") + \"-1,0\\r\\nEOD\";\n  }\n\n  return {\n    to_workbook: dif_to_workbook,\n    to_sheet: dif_to_sheet,\n    from_sheet: sheet_to_dif\n  };\n}();\n\nvar ETH = /*#__PURE__*/function () {\n  function decode(s\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return s.replace(/\\\\b/g, \"\\\\\").replace(/\\\\c/g, \":\").replace(/\\\\n/g, \"\\n\");\n  }\n\n  function encode(s\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return s.replace(/\\\\/g, \"\\\\b\").replace(/:/g, \"\\\\c\").replace(/\\n/g, \"\\\\n\");\n  }\n\n  function eth_to_aoa(str\n  /*:string*/\n  , opts)\n  /*:AOA*/\n  {\n    var records = str.split('\\n'),\n        R = -1,\n        C = -1,\n        ri = 0,\n        arr\n    /*:AOA*/\n    = [];\n\n    for (; ri !== records.length; ++ri) {\n      var record = records[ri].trim().split(\":\");\n      if (record[0] !== 'cell') continue;\n      var addr = decode_cell(record[1]);\n      if (arr.length <= addr.r) for (R = arr.length; R <= addr.r; ++R) {\n        if (!arr[R]) arr[R] = [];\n      }\n      R = addr.r;\n      C = addr.c;\n\n      switch (record[2]) {\n        case 't':\n          arr[R][C] = decode(record[3]);\n          break;\n\n        case 'v':\n          arr[R][C] = +record[3];\n          break;\n\n        case 'vtf':\n          var _f = record[record.length - 1];\n\n        /* falls through */\n\n        case 'vtc':\n          switch (record[3]) {\n            case 'nl':\n              arr[R][C] = +record[4] ? true : false;\n              break;\n\n            default:\n              arr[R][C] = +record[4];\n              break;\n          }\n\n          if (record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];\n      }\n    }\n\n    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n    return arr;\n  }\n\n  function eth_to_sheet(d\n  /*:string*/\n  , opts)\n  /*:Worksheet*/\n  {\n    return aoa_to_sheet(eth_to_aoa(d, opts), opts);\n  }\n\n  function eth_to_workbook(d\n  /*:string*/\n  , opts)\n  /*:Workbook*/\n  {\n    return sheet_to_workbook(eth_to_sheet(d, opts), opts);\n  }\n\n  var header = [\"socialcalc:version:1.5\", \"MIME-Version: 1.0\", \"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave\"].join(\"\\n\");\n  var sep = [\"--SocialCalcSpreadsheetControlSave\", \"Content-type: text/plain; charset=UTF-8\"].join(\"\\n\") + \"\\n\";\n  /* TODO: the other parts */\n\n  var meta = [\"# SocialCalc Spreadsheet Control Save\", \"part:sheet\"].join(\"\\n\");\n  var end = \"--SocialCalcSpreadsheetControlSave--\";\n\n  function sheet_to_eth_data(ws\n  /*:Worksheet*/\n  )\n  /*:string*/\n  {\n    if (!ws || !ws['!ref']) return \"\";\n    var o\n    /*:Array<string>*/\n    = [],\n        oo\n    /*:Array<string>*/\n    = [],\n        cell,\n        coord = \"\";\n    var r = decode_range(ws['!ref']);\n    var dense = Array.isArray(ws);\n\n    for (var R = r.s.r; R <= r.e.r; ++R) {\n      for (var C = r.s.c; C <= r.e.c; ++C) {\n        coord = encode_cell({\n          r: R,\n          c: C\n        });\n        cell = dense ? (ws[R] || [])[C] : ws[coord];\n        if (!cell || cell.v == null || cell.t === 'z') continue;\n        oo = [\"cell\", coord, 't'];\n\n        switch (cell.t) {\n          case 's':\n          case 'str':\n            oo.push(encode(cell.v));\n            break;\n\n          case 'n':\n            if (!cell.f) {\n              oo[2] = 'v';\n              oo[3] = cell.v;\n            } else {\n              oo[2] = 'vtf';\n              oo[3] = 'n';\n              oo[4] = cell.v;\n              oo[5] = encode(cell.f);\n            }\n\n            break;\n\n          case 'b':\n            oo[2] = 'vt' + (cell.f ? 'f' : 'c');\n            oo[3] = 'nl';\n            oo[4] = cell.v ? \"1\" : \"0\";\n            oo[5] = encode(cell.f || (cell.v ? 'TRUE' : 'FALSE'));\n            break;\n\n          case 'd':\n            var t = datenum(parseDate(cell.v));\n            oo[2] = 'vtc';\n            oo[3] = 'nd';\n            oo[4] = \"\" + t;\n            oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);\n            break;\n\n          case 'e':\n            continue;\n        }\n\n        o.push(oo.join(\":\"));\n      }\n    }\n\n    o.push(\"sheet:c:\" + (r.e.c - r.s.c + 1) + \":r:\" + (r.e.r - r.s.r + 1) + \":tvf:1\");\n    o.push(\"valueformat:1:text-wiki\"); //o.push(\"copiedfrom:\" + ws['!ref']); // clipboard only\n\n    return o.join(\"\\n\");\n  }\n\n  function sheet_to_eth(ws\n  /*:Worksheet*/\n\n  /*::, opts:?any*/\n  )\n  /*:string*/\n  {\n    return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join(\"\\n\"); // return [\"version:1.5\", sheet_to_eth_data(ws)].join(\"\\n\"); // clipboard form\n  }\n\n  return {\n    to_workbook: eth_to_workbook,\n    to_sheet: eth_to_sheet,\n    from_sheet: sheet_to_eth\n  };\n}();\n\nvar PRN = /*#__PURE__*/function () {\n  function set_text_arr(data\n  /*:string*/\n  , arr\n  /*:AOA*/\n  , R\n  /*:number*/\n  , C\n  /*:number*/\n  , o\n  /*:any*/\n  ) {\n    if (o.raw) arr[R][C] = data;else if (data === \"\") {\n      /* empty */\n    } else if (data === 'TRUE') arr[R][C] = true;else if (data === 'FALSE') arr[R][C] = false;else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);else arr[R][C] = data;\n  }\n\n  function prn_to_aoa_str(f\n  /*:string*/\n  , opts)\n  /*:AOA*/\n  {\n    var o = opts || {};\n    var arr\n    /*:AOA*/\n    = []\n    /*:any*/\n    ;\n    if (!f || f.length === 0) return arr;\n    var lines = f.split(/[\\r\\n]/);\n    var L = lines.length - 1;\n\n    while (L >= 0 && lines[L].length === 0) {\n      --L;\n    }\n\n    var start = 10,\n        idx = 0;\n    var R = 0;\n\n    for (; R <= L; ++R) {\n      idx = lines[R].indexOf(\" \");\n      if (idx == -1) idx = lines[R].length;else idx++;\n      start = Math.max(start, idx);\n    }\n\n    for (R = 0; R <= L; ++R) {\n      arr[R] = [];\n      /* TODO: confirm that widths are always 10 */\n\n      var C = 0;\n      set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);\n\n      for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C) {\n        set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);\n      }\n    }\n\n    if (o.sheetRows) arr = arr.slice(0, o.sheetRows);\n    return arr;\n  } // List of accepted CSV separators\n\n\n  var guess_seps = {\n    /*::[*/\n    0x2C\n    /*::]*/\n    : ',',\n\n    /*::[*/\n    0x09\n    /*::]*/\n    : \"\\t\",\n\n    /*::[*/\n    0x3B\n    /*::]*/\n    : ';',\n\n    /*::[*/\n    0x7C\n    /*::]*/\n    : '|'\n  }; // CSV separator weights to be used in case of equal numbers\n\n  var guess_sep_weights = {\n    /*::[*/\n    0x2C\n    /*::]*/\n    : 3,\n\n    /*::[*/\n    0x09\n    /*::]*/\n    : 2,\n\n    /*::[*/\n    0x3B\n    /*::]*/\n    : 1,\n\n    /*::[*/\n    0x7C\n    /*::]*/\n    : 0\n  };\n\n  function guess_sep(str) {\n    var cnt = {},\n        instr = false,\n        end = 0,\n        cc = 0;\n\n    for (; end < str.length; ++end) {\n      if ((cc = str.charCodeAt(end)) == 0x22) instr = !instr;else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;\n    }\n\n    cc = [];\n\n    for (end in cnt) {\n      if (Object.prototype.hasOwnProperty.call(cnt, end)) {\n        cc.push([cnt[end], end]);\n      }\n    }\n\n    if (!cc.length) {\n      cnt = guess_sep_weights;\n\n      for (end in cnt) {\n        if (Object.prototype.hasOwnProperty.call(cnt, end)) {\n          cc.push([cnt[end], end]);\n        }\n      }\n    }\n\n    cc.sort(function (a, b) {\n      return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];\n    });\n    return guess_seps[cc.pop()[1]] || 0x2C;\n  }\n\n  function dsv_to_sheet_str(str\n  /*:string*/\n  , opts)\n  /*:Worksheet*/\n  {\n    var o = opts || {};\n    var sep = \"\";\n    if (DENSE != null && o.dense == null) o.dense = DENSE;\n    var ws\n    /*:Worksheet*/\n    = o.dense ? []\n    /*:any*/\n    : {}\n    /*:any*/\n    ;\n    var range\n    /*:Range*/\n    = {\n      s: {\n        c: 0,\n        r: 0\n      },\n      e: {\n        c: 0,\n        r: 0\n      }\n    }\n    /*:any*/\n    ;\n\n    if (str.slice(0, 4) == \"sep=\") {\n      // If the line ends in \\r\\n\n      if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {\n        sep = str.charAt(4);\n        str = str.slice(7);\n      } // If line ends in \\r OR \\n\n      else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {\n        sep = str.charAt(4);\n        str = str.slice(6);\n      } else sep = guess_sep(str.slice(0, 1024));\n    } else if (o && o.FS) sep = o.FS;else sep = guess_sep(str.slice(0, 1024));\n\n    var R = 0,\n        C = 0,\n        v = 0;\n    var start = 0,\n        end = 0,\n        sepcc = sep.charCodeAt(0),\n        instr = false,\n        cc = 0,\n        startcc = str.charCodeAt(0);\n\n    var _re\n    /*:?RegExp*/\n    = o.dateNF != null ? dateNF_regex(o.dateNF) : null;\n\n    function finish_cell() {\n      var s = str.slice(start, end);\n      if (s.slice(-1) == \"\\r\") s = s.slice(0, -1);\n      var cell = {}\n      /*:any*/\n      ;\n      if (s.charAt(0) == '\"' && s.charAt(s.length - 1) == '\"') s = s.slice(1, -1).replace(/\"\"/g, '\"');\n      if (s.length === 0) cell.t = 'z';else if (o.raw) {\n        cell.t = 's';\n        cell.v = s;\n      } else if (s.trim().length === 0) {\n        cell.t = 's';\n        cell.v = s;\n      } else if (s.charCodeAt(0) == 0x3D) {\n        if (s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) {\n          cell.t = 's';\n          cell.v = s.slice(2, -1).replace(/\"\"/g, '\"');\n        } else if (fuzzyfmla(s)) {\n          cell.t = 'n';\n          cell.f = s.slice(1);\n        } else {\n          cell.t = 's';\n          cell.v = s;\n        }\n      } else if (s == \"TRUE\") {\n        cell.t = 'b';\n        cell.v = true;\n      } else if (s == \"FALSE\") {\n        cell.t = 'b';\n        cell.v = false;\n      } else if (!isNaN(v = fuzzynum(s))) {\n        cell.t = 'n';\n        if (o.cellText !== false) cell.w = s;\n        cell.v = v;\n      } else if (!isNaN((v = fuzzydate(s)).getDate()) || _re && s.match(_re)) {\n        cell.z = o.dateNF || table_fmt[14];\n        var k = 0;\n\n        if (_re && s.match(_re)) {\n          s = dateNF_fix(s, o.dateNF, s.match(_re) || []);\n          k = 1;\n          v = parseDate(s, k);\n        }\n\n        if (o.cellDates) {\n          cell.t = 'd';\n          cell.v = v;\n        } else {\n          cell.t = 'n';\n          cell.v = datenum(v);\n        }\n\n        if (o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);\n        if (!o.cellNF) delete cell.z;\n      } else {\n        cell.t = 's';\n        cell.v = s;\n      }\n\n      if (cell.t == 'z') {} else if (o.dense) {\n        if (!ws[R]) ws[R] = [];\n        ws[R][C] = cell;\n      } else ws[encode_cell({\n        c: C,\n        r: R\n      })] = cell;\n\n      start = end + 1;\n      startcc = str.charCodeAt(start);\n      if (range.e.c < C) range.e.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (cc == sepcc) ++C;else {\n        C = 0;\n        ++R;\n        if (o.sheetRows && o.sheetRows <= R) return true;\n      }\n    }\n\n    outer: for (; end < str.length; ++end) {\n      switch (cc = str.charCodeAt(end)) {\n        case 0x22:\n          if (startcc === 0x22) instr = !instr;\n          break;\n\n        case 0x0d:\n          if (instr) break;\n          if (str.charCodeAt(end + 1) == 0x0a) ++end;\n\n        /* falls through */\n\n        case sepcc:\n        case 0x0a:\n          if (!instr && finish_cell()) break outer;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    if (end - start > 0) finish_cell();\n    ws['!ref'] = encode_range(range);\n    return ws;\n  }\n\n  function prn_to_sheet_str(str\n  /*:string*/\n  , opts)\n  /*:Worksheet*/\n  {\n    if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);\n    if (opts.FS) return dsv_to_sheet_str(str, opts);\n    if (str.slice(0, 4) == \"sep=\") return dsv_to_sheet_str(str, opts);\n    if (str.indexOf(\"\\t\") >= 0 || str.indexOf(\",\") >= 0 || str.indexOf(\";\") >= 0) return dsv_to_sheet_str(str, opts);\n    return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);\n  }\n\n  function prn_to_sheet(d\n  /*:RawData*/\n  , opts)\n  /*:Worksheet*/\n  {\n    var str = \"\",\n        bytes = opts.type == 'string' ? [0, 0, 0, 0] : firstbyte(d, opts);\n\n    switch (opts.type) {\n      case 'base64':\n        str = Base64_decode(d);\n        break;\n\n      case 'binary':\n        str = d;\n        break;\n\n      case 'buffer':\n        if (opts.codepage == 65001) str = d.toString('utf8'); // TODO: test if buf\n        else if (opts.codepage && typeof $cptable !== 'undefined') str = $cptable.utils.decode(opts.codepage, d);else str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);\n        break;\n\n      case 'array':\n        str = cc2str(d);\n        break;\n\n      case 'string':\n        str = d;\n        break;\n\n      default:\n        throw new Error(\"Unrecognized type \" + opts.type);\n    }\n\n    if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));else if (opts.type != 'string' && opts.type != 'buffer' && opts.codepage == 65001) str = utf8read(str);else if (opts.type == 'binary' && typeof $cptable !== 'undefined' && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));\n    if (str.slice(0, 19) == \"socialcalc:version:\") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);\n    return prn_to_sheet_str(str, opts);\n  }\n\n  function prn_to_workbook(d\n  /*:RawData*/\n  , opts)\n  /*:Workbook*/\n  {\n    return sheet_to_workbook(prn_to_sheet(d, opts), opts);\n  }\n\n  function sheet_to_prn(ws\n  /*:Worksheet*/\n\n  /*::, opts:?any*/\n  )\n  /*:string*/\n  {\n    var o\n    /*:Array<string>*/\n    = [];\n    var r = safe_decode_range(ws['!ref']),\n        cell\n    /*:Cell*/\n    ;\n    var dense = Array.isArray(ws);\n\n    for (var R = r.s.r; R <= r.e.r; ++R) {\n      var oo\n      /*:Array<string>*/\n      = [];\n\n      for (var C = r.s.c; C <= r.e.c; ++C) {\n        var coord = encode_cell({\n          r: R,\n          c: C\n        });\n        cell = dense ? (ws[R] || [])[C] : ws[coord];\n\n        if (!cell || cell.v == null) {\n          oo.push(\"          \");\n          continue;\n        }\n\n        var w = (cell.w || (format_cell(cell), cell.w) || \"\").slice(0, 10);\n\n        while (w.length < 10) {\n          w += \" \";\n        }\n\n        oo.push(w + (C === 0 ? \" \" : \"\"));\n      }\n\n      o.push(oo.join(\"\"));\n    }\n\n    return o.join(\"\\n\");\n  }\n\n  return {\n    to_workbook: prn_to_workbook,\n    to_sheet: prn_to_sheet,\n    from_sheet: sheet_to_prn\n  };\n}();\n/* Excel defaults to SYLK but warns if data is not valid */\n\n\nfunction read_wb_ID(d, opts) {\n  var o = opts || {},\n      OLD_WTF = !!o.WTF;\n  o.WTF = true;\n\n  try {\n    var out = SYLK.to_workbook(d, o);\n    o.WTF = OLD_WTF;\n    return out;\n  } catch (e) {\n    o.WTF = OLD_WTF;\n    if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;\n    return PRN.to_workbook(d, opts);\n  }\n}\n\nvar WK_ = /*#__PURE__*/function () {\n  function lotushopper(data, cb\n  /*:RecordHopperCB*/\n  , opts\n  /*:any*/\n  ) {\n    if (!data) return;\n    prep_blob(data, data.l || 0);\n    var Enum = opts.Enum || WK1Enum;\n\n    while (data.l < data.length) {\n      var RT = data.read_shift(2);\n      var R = Enum[RT] || Enum[0xFFFF];\n      var length = data.read_shift(2);\n      var tgt = data.l + length;\n      var d = R.f && R.f(data, length, opts);\n      data.l = tgt;\n      if (cb(d, R, RT)) return;\n    }\n  }\n\n  function lotus_to_workbook(d\n  /*:RawData*/\n  , opts) {\n    switch (opts.type) {\n      case 'base64':\n        return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);\n\n      case 'binary':\n        return lotus_to_workbook_buf(s2a(d), opts);\n\n      case 'buffer':\n      case 'array':\n        return lotus_to_workbook_buf(d, opts);\n    }\n\n    throw \"Unsupported type \" + opts.type;\n  }\n\n  function lotus_to_workbook_buf(d, opts)\n  /*:Workbook*/\n  {\n    if (!d) return d;\n    var o = opts || {};\n    if (DENSE != null && o.dense == null) o.dense = DENSE;\n    var s\n    /*:Worksheet*/\n    = o.dense ? [] : {}\n    /*:any*/\n    ,\n        n = \"Sheet1\",\n        next_n = \"\",\n        sidx = 0;\n    var sheets = {},\n        snames = [],\n        realnames = [];\n    var refguess = {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: 0,\n        c: 0\n      }\n    };\n    var sheetRows = o.sheetRows || 0;\n    if (d[4] == 0x51 && d[5] == 0x50 && d[6] == 0x57) return qpw_to_workbook_buf(d, opts);\n\n    if (d[2] == 0x00) {\n      if (d[3] == 0x08 || d[3] == 0x09) {\n        if (d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error(\"Unsupported Works 3 for Mac file\");\n      }\n    }\n\n    if (d[2] == 0x02) {\n      o.Enum = WK1Enum;\n      lotushopper(d, function (val, R, RT) {\n        switch (RT) {\n          case 0x00:\n            /* BOF */\n            o.vers = val;\n            if (val >= 0x1000) o.qpro = true;\n            break;\n\n          case 0xFF:\n            /* BOF (works 3+) */\n            o.vers = val;\n            o.works = true;\n            break;\n\n          case 0x06:\n            refguess = val;\n            break;\n\n          /* RANGE */\n\n          case 0xCC:\n            if (val) next_n = val;\n            break;\n\n          /* SHEETNAMECS */\n\n          case 0xDE:\n            next_n = val;\n            break;\n\n          /* SHEETNAMELP */\n\n          case 0x0F:\n          /* LABEL */\n\n          case 0x33:\n            /* STRING */\n            if ((!o.qpro && !o.works || RT == 0x33) && val[1].v.charCodeAt(0) < 0x30) val[1].v = val[1].v.slice(1);\n            if (o.works || o.works2) val[1].v = val[1].v.replace(/\\r\\n/g, \"\\n\");\n\n          /* falls through */\n\n          case 0x0D:\n          /* INTEGER */\n\n          case 0x0E:\n          /* NUMBER */\n\n          case 0x10:\n            /* FORMULA */\n\n            /* TODO: actual translation of the format code */\n            if (RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {\n              val[1].z = o.dateNF || table_fmt[14];\n\n              if (o.cellDates) {\n                val[1].t = 'd';\n                val[1].v = numdate(val[1].v);\n              }\n            }\n\n            if (o.qpro) {\n              if (val[3] > sidx) {\n                s[\"!ref\"] = encode_range(refguess);\n                sheets[n] = s;\n                snames.push(n);\n                s = o.dense ? [] : {};\n                refguess = {\n                  s: {\n                    r: 0,\n                    c: 0\n                  },\n                  e: {\n                    r: 0,\n                    c: 0\n                  }\n                };\n                sidx = val[3];\n                n = next_n || \"Sheet\" + (sidx + 1);\n                next_n = \"\";\n              }\n            }\n\n            var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];\n\n            if (tmpcell) {\n              tmpcell.t = val[1].t;\n              tmpcell.v = val[1].v;\n              if (val[1].z != null) tmpcell.z = val[1].z;\n              if (val[1].f != null) tmpcell.f = val[1].f;\n              break;\n            }\n\n            if (o.dense) {\n              if (!s[val[0].r]) s[val[0].r] = [];\n              s[val[0].r][val[0].c] = val[1];\n            } else s[encode_cell(val[0])] = val[1];\n\n            break;\n\n          case 0x5405:\n            o.works2 = true;\n            break;\n\n          default:\n        }\n      }, o);\n    } else if (d[2] == 0x1A || d[2] == 0x0E) {\n      o.Enum = WK3Enum;\n\n      if (d[2] == 0x0E) {\n        o.qpro = true;\n        d.l = 0;\n      }\n\n      lotushopper(d, function (val, R, RT) {\n        switch (RT) {\n          case 0xCC:\n            n = val;\n            break;\n\n          /* SHEETNAMECS */\n\n          case 0x16:\n            /* LABEL16 */\n            if (val[1].v.charCodeAt(0) < 0x30) val[1].v = val[1].v.slice(1); // TODO: R9 appears to encode control codes this way -- verify against other versions\n\n            val[1].v = val[1].v.replace(/\\x0F./g, function ($$) {\n              return String.fromCharCode($$.charCodeAt(1) - 0x20);\n            }).replace(/\\r\\n/g, \"\\n\");\n\n          /* falls through */\n\n          case 0x17:\n          /* NUMBER17 */\n\n          case 0x18:\n          /* NUMBER18 */\n\n          case 0x19:\n          /* FORMULA19 */\n\n          case 0x25:\n          /* NUMBER25 */\n\n          case 0x27:\n          /* NUMBER27 */\n\n          case 0x28:\n            /* FORMULA28 */\n            if (val[3] > sidx) {\n              s[\"!ref\"] = encode_range(refguess);\n              sheets[n] = s;\n              snames.push(n);\n              s = o.dense ? [] : {};\n              refguess = {\n                s: {\n                  r: 0,\n                  c: 0\n                },\n                e: {\n                  r: 0,\n                  c: 0\n                }\n              };\n              sidx = val[3];\n              n = \"Sheet\" + (sidx + 1);\n            }\n\n            if (sheetRows > 0 && val[0].r >= sheetRows) break;\n\n            if (o.dense) {\n              if (!s[val[0].r]) s[val[0].r] = [];\n              s[val[0].r][val[0].c] = val[1];\n            } else s[encode_cell(val[0])] = val[1];\n\n            if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;\n            if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;\n            break;\n\n          case 0x1B:\n            /* XFORMAT */\n            if (val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];\n            break;\n\n          case 0x0601:\n            /* SHEETINFOQP */\n            realnames[val[0]] = val[1];\n            if (val[0] == sidx) n = val[1];\n            break;\n\n          default:\n            break;\n        }\n      }, o);\n    } else throw new Error(\"Unrecognized LOTUS BOF \" + d[2]);\n\n    s[\"!ref\"] = encode_range(refguess);\n    sheets[next_n || n] = s;\n    snames.push(next_n || n);\n    if (!realnames.length) return {\n      SheetNames: snames,\n      Sheets: sheets\n    };\n    var osheets = {},\n        rnames = [];\n    /* TODO: verify no collisions */\n\n    for (var i = 0; i < realnames.length; ++i) {\n      if (sheets[snames[i]]) {\n        rnames.push(realnames[i] || snames[i]);\n        osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];\n      } else {\n        rnames.push(realnames[i]);\n        osheets[realnames[i]] = {\n          \"!ref\": \"A1\"\n        };\n      }\n    }\n\n    return {\n      SheetNames: rnames,\n      Sheets: osheets\n    };\n  }\n\n  function sheet_to_wk1(ws\n  /*:Worksheet*/\n  , opts\n  /*:WriteOpts*/\n  ) {\n    var o = opts || {};\n    if (+o.codepage >= 0) set_cp(+o.codepage);\n    if (o.type == \"string\") throw new Error(\"Cannot write WK1 to JS string\");\n    var ba = buf_array();\n    var range = safe_decode_range(ws[\"!ref\"]);\n    var dense = Array.isArray(ws);\n    var cols = [];\n    write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));\n    write_biff_rec(ba, 0x06, write_RANGE(range));\n    var max_R = Math.min(range.e.r, 8191);\n\n    for (var R = range.s.r; R <= max_R; ++R) {\n      var rr = encode_row(R);\n\n      for (var C = range.s.c; C <= range.e.c; ++C) {\n        if (R === range.s.r) cols[C] = encode_col(C);\n        var ref = cols[C] + rr;\n        var cell = dense ? (ws[R] || [])[C] : ws[ref];\n        if (!cell || cell.t == \"z\") continue;\n        /* TODO: formula records */\n\n        if (cell.t == \"n\") {\n          if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));\n        } else {\n          var str = format_cell(cell);\n          write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));\n        }\n      }\n    }\n\n    write_biff_rec(ba, 0x01);\n    return ba.end();\n  }\n\n  function book_to_wk3(wb\n  /*:Workbook*/\n  , opts\n  /*:WriteOpts*/\n  ) {\n    var o = opts || {};\n    if (+o.codepage >= 0) set_cp(+o.codepage);\n    if (o.type == \"string\") throw new Error(\"Cannot write WK3 to JS string\");\n    var ba = buf_array();\n    write_biff_rec(ba, 0x00, write_BOF_WK3(wb));\n\n    for (var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) {\n      if ((wb.Sheets[wb.SheetNames[i]] || {})[\"!ref\"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));\n    }\n\n    var wsidx = 0;\n\n    for (i = 0; i < wb.SheetNames.length; ++i) {\n      var ws = wb.Sheets[wb.SheetNames[i]];\n      if (!ws || !ws[\"!ref\"]) continue;\n      var range = safe_decode_range(ws[\"!ref\"]);\n      var dense = Array.isArray(ws);\n      var cols = [];\n      var max_R = Math.min(range.e.r, 8191);\n\n      for (var R = range.s.r; R <= max_R; ++R) {\n        var rr = encode_row(R);\n\n        for (var C = range.s.c; C <= range.e.c; ++C) {\n          if (R === range.s.r) cols[C] = encode_col(C);\n          var ref = cols[C] + rr;\n          var cell = dense ? (ws[R] || [])[C] : ws[ref];\n          if (!cell || cell.t == \"z\") continue;\n          /* TODO: FORMULA19 NUMBER18 records */\n\n          if (cell.t == \"n\") {\n            write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));\n          } else {\n            var str = format_cell(cell);\n            /* TODO: max len? */\n\n            write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));\n          }\n        }\n      }\n\n      ++wsidx;\n    }\n\n    write_biff_rec(ba, 0x01);\n    return ba.end();\n  }\n\n  function write_BOF_WK1(v\n  /*:number*/\n  ) {\n    var out = new_buf(2);\n    out.write_shift(2, v);\n    return out;\n  }\n\n  function write_BOF_WK3(wb\n  /*:Workbook*/\n  ) {\n    var out = new_buf(26);\n    out.write_shift(2, 0x1000);\n    out.write_shift(2, 0x0004);\n    out.write_shift(4, 0x0000);\n    var rows = 0,\n        cols = 0,\n        wscnt = 0;\n\n    for (var i = 0; i < wb.SheetNames.length; ++i) {\n      var name = wb.SheetNames[i];\n      var ws = wb.Sheets[name];\n      if (!ws || !ws[\"!ref\"]) continue;\n      ++wscnt;\n      var range = decode_range(ws[\"!ref\"]);\n      if (rows < range.e.r) rows = range.e.r;\n      if (cols < range.e.c) cols = range.e.c;\n    }\n\n    if (rows > 8191) rows = 8191;\n    out.write_shift(2, rows);\n    out.write_shift(1, wscnt);\n    out.write_shift(1, cols);\n    out.write_shift(2, 0x00);\n    out.write_shift(2, 0x00);\n    out.write_shift(1, 0x01);\n    out.write_shift(1, 0x02);\n    out.write_shift(4, 0);\n    out.write_shift(4, 0);\n    return out;\n  }\n\n  function parse_RANGE(blob, length, opts) {\n    var o = {\n      s: {\n        c: 0,\n        r: 0\n      },\n      e: {\n        c: 0,\n        r: 0\n      }\n    };\n\n    if (length == 8 && opts.qpro) {\n      o.s.c = blob.read_shift(1);\n      blob.l++;\n      o.s.r = blob.read_shift(2);\n      o.e.c = blob.read_shift(1);\n      blob.l++;\n      o.e.r = blob.read_shift(2);\n      return o;\n    }\n\n    o.s.c = blob.read_shift(2);\n    o.s.r = blob.read_shift(2);\n    if (length == 12 && opts.qpro) blob.l += 2;\n    o.e.c = blob.read_shift(2);\n    o.e.r = blob.read_shift(2);\n    if (length == 12 && opts.qpro) blob.l += 2;\n    if (o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;\n    return o;\n  }\n\n  function write_RANGE(range) {\n    var out = new_buf(8);\n    out.write_shift(2, range.s.c);\n    out.write_shift(2, range.s.r);\n    out.write_shift(2, range.e.c);\n    out.write_shift(2, range.e.r);\n    return out;\n  }\n\n  function parse_cell(blob, length, opts) {\n    var o = [{\n      c: 0,\n      r: 0\n    }, {\n      t: 'n',\n      v: 0\n    }, 0, 0];\n\n    if (opts.qpro && opts.vers != 0x5120) {\n      o[0].c = blob.read_shift(1);\n      o[3] = blob.read_shift(1);\n      o[0].r = blob.read_shift(2);\n      blob.l += 2;\n    } else if (opts.works) {\n      // TODO: verify with more complex works3-4 examples\n      o[0].c = blob.read_shift(2);\n      o[0].r = blob.read_shift(2);\n      o[2] = blob.read_shift(2);\n    } else {\n      o[2] = blob.read_shift(1);\n      o[0].c = blob.read_shift(2);\n      o[0].r = blob.read_shift(2);\n    }\n\n    return o;\n  }\n\n  function parse_LABEL(blob, length, opts) {\n    var tgt = blob.l + length;\n    var o = parse_cell(blob, length, opts);\n    o[1].t = 's';\n\n    if (opts.vers == 0x5120) {\n      blob.l++;\n      var len = blob.read_shift(1);\n      o[1].v = blob.read_shift(len, 'utf8');\n      return o;\n    }\n\n    if (opts.qpro) blob.l++;\n    o[1].v = blob.read_shift(tgt - blob.l, 'cstr');\n    return o;\n  }\n\n  function write_LABEL(R, C, s) {\n    /* TODO: encoding */\n    var o = new_buf(7 + s.length);\n    o.write_shift(1, 0xFF);\n    o.write_shift(2, C);\n    o.write_shift(2, R);\n    o.write_shift(1, 0x27); // ??\n\n    for (var i = 0; i < o.length; ++i) {\n      var cc = s.charCodeAt(i);\n      o.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n    }\n\n    o.write_shift(1, 0);\n    return o;\n  }\n\n  function parse_STRING(blob, length, opts) {\n    var tgt = blob.l + length;\n    var o = parse_cell(blob, length, opts);\n    o[1].t = 's';\n\n    if (opts.vers == 0x5120) {\n      var len = blob.read_shift(1);\n      o[1].v = blob.read_shift(len, 'utf8');\n      return o;\n    }\n\n    o[1].v = blob.read_shift(tgt - blob.l, 'cstr');\n    return o;\n  }\n\n  function parse_INTEGER(blob, length, opts) {\n    var o = parse_cell(blob, length, opts);\n    o[1].v = blob.read_shift(2, 'i');\n    return o;\n  }\n\n  function write_INTEGER(R, C, v) {\n    var o = new_buf(7);\n    o.write_shift(1, 0xFF);\n    o.write_shift(2, C);\n    o.write_shift(2, R);\n    o.write_shift(2, v, 'i');\n    return o;\n  }\n\n  function parse_NUMBER(blob, length, opts) {\n    var o = parse_cell(blob, length, opts);\n    o[1].v = blob.read_shift(8, 'f');\n    return o;\n  }\n\n  function write_NUMBER(R, C, v) {\n    var o = new_buf(13);\n    o.write_shift(1, 0xFF);\n    o.write_shift(2, C);\n    o.write_shift(2, R);\n    o.write_shift(8, v, 'f');\n    return o;\n  }\n\n  function parse_FORMULA(blob, length, opts) {\n    var tgt = blob.l + length;\n    var o = parse_cell(blob, length, opts);\n    /* TODO: formula */\n\n    o[1].v = blob.read_shift(8, 'f');\n    if (opts.qpro) blob.l = tgt;else {\n      var flen = blob.read_shift(2);\n      wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);\n      blob.l += flen;\n    }\n    return o;\n  }\n\n  function wk1_parse_rc(B, V, col) {\n    var rel = V & 0x8000;\n    V &= ~0x8000;\n    V = (rel ? B : 0) + (V >= 0x2000 ? V - 0x4000 : V);\n    return (rel ? \"\" : \"$\") + (col ? encode_col(V) : encode_row(V));\n  }\n  /* var oprec = [\n  \t8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,\n  \t3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8\n  ]; */\n\n  /* TODO: flesh out */\n\n\n  var FuncTab = {\n    0x1F: [\"NA\", 0],\n    // 0x20: [\"ERR\", 0],\n    0x21: [\"ABS\", 1],\n    0x22: [\"TRUNC\", 1],\n    0x23: [\"SQRT\", 1],\n    0x24: [\"LOG\", 1],\n    0x25: [\"LN\", 1],\n    0x26: [\"PI\", 0],\n    0x27: [\"SIN\", 1],\n    0x28: [\"COS\", 1],\n    0x29: [\"TAN\", 1],\n    0x2A: [\"ATAN2\", 2],\n    0x2B: [\"ATAN\", 1],\n    0x2C: [\"ASIN\", 1],\n    0x2D: [\"ACOS\", 1],\n    0x2E: [\"EXP\", 1],\n    0x2F: [\"MOD\", 2],\n    // 0x30\n    0x31: [\"ISNA\", 1],\n    0x32: [\"ISERR\", 1],\n    0x33: [\"FALSE\", 0],\n    0x34: [\"TRUE\", 0],\n    0x35: [\"RAND\", 0],\n    // 0x36 DATE\n    // 0x37 NOW\n    // 0x38 PMT\n    // 0x39 PV\n    // 0x3A FV\n    // 0x3B IF\n    // 0x3C DAY\n    // 0x3D MONTH\n    // 0x3E YEAR\n    0x3F: [\"ROUND\", 2],\n    // 0x40 TIME\n    // 0x41 HOUR\n    // 0x42 MINUTE\n    // 0x43 SECOND\n    0x44: [\"ISNUMBER\", 1],\n    0x45: [\"ISTEXT\", 1],\n    0x46: [\"LEN\", 1],\n    0x47: [\"VALUE\", 1],\n    // 0x48: [\"FIXED\", ?? 1],\n    0x49: [\"MID\", 3],\n    0x4A: [\"CHAR\", 1],\n    // 0x4B\n    // 0x4C FIND\n    // 0x4D DATEVALUE\n    // 0x4E TIMEVALUE\n    // 0x4F CELL\n    0x50: [\"SUM\", 69],\n    0x51: [\"AVERAGEA\", 69],\n    0x52: [\"COUNTA\", 69],\n    0x53: [\"MINA\", 69],\n    0x54: [\"MAXA\", 69],\n    // 0x55 VLOOKUP\n    // 0x56 NPV\n    // 0x57 VAR\n    // 0x58 STD\n    // 0x59 IRR\n    // 0x5A HLOOKUP\n    // 0x5B DSUM\n    // 0x5C DAVERAGE\n    // 0x5D DCOUNTA\n    // 0x5E DMIN\n    // 0x5F DMAX\n    // 0x60 DVARP\n    // 0x61 DSTDEVP\n    // 0x62 INDEX\n    // 0x63 COLS\n    // 0x64 ROWS\n    // 0x65 REPEAT\n    0x66: [\"UPPER\", 1],\n    0x67: [\"LOWER\", 1],\n    // 0x68 LEFT\n    // 0x69 RIGHT\n    // 0x6A REPLACE\n    0x6B: [\"PROPER\", 1],\n    // 0x6C CELL\n    0x6D: [\"TRIM\", 1],\n    // 0x6E CLEAN\n    0x6F: [\"T\", 1] // 0x70 V\n\n  };\n  var BinOpTab = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", // eslint-disable-line no-mixed-spaces-and-tabs\n  \"\", \"+\", \"-\", \"*\", \"/\", \"^\", \"=\", \"<>\", // eslint-disable-line no-mixed-spaces-and-tabs\n  \"<=\", \">=\", \"<\", \">\", \"\", \"\", \"\", \"\", // eslint-disable-line no-mixed-spaces-and-tabs\n  \"&\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" // eslint-disable-line no-mixed-spaces-and-tabs\n  ];\n\n  function wk1_fmla_to_csf(blob, o) {\n    prep_blob(blob, 0);\n    var out = [],\n        argc = 0,\n        R = \"\",\n        C = \"\",\n        argL = \"\",\n        argR = \"\";\n\n    while (blob.l < blob.length) {\n      var cc = blob[blob.l++];\n\n      switch (cc) {\n        case 0x00:\n          out.push(blob.read_shift(8, 'f'));\n          break;\n\n        case 0x01:\n          {\n            C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n            R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n            out.push(C + R);\n          }\n          break;\n\n        case 0x02:\n          {\n            var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n            var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n            C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n            R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n            out.push(c + r + \":\" + C + R);\n          }\n          break;\n\n        case 0x03:\n          if (blob.l < blob.length) {\n            console.error(\"WK1 premature formula end\");\n            return;\n          }\n\n          break;\n\n        case 0x04:\n          out.push(\"(\" + out.pop() + \")\");\n          break;\n\n        case 0x05:\n          out.push(blob.read_shift(2));\n          break;\n\n        case 0x06:\n          {\n            /* TODO: text encoding */\n            var Z = \"\";\n\n            while (cc = blob[blob.l++]) {\n              Z += String.fromCharCode(cc);\n            }\n\n            out.push('\"' + Z.replace(/\"/g, '\"\"') + '\"');\n          }\n          break;\n\n        case 0x08:\n          out.push(\"-\" + out.pop());\n          break;\n\n        case 0x17:\n          out.push(\"+\" + out.pop());\n          break;\n\n        case 0x16:\n          out.push(\"NOT(\" + out.pop() + \")\");\n          break;\n\n        case 0x14:\n        case 0x15:\n          {\n            argR = out.pop();\n            argL = out.pop();\n            out.push([\"AND\", \"OR\"][cc - 0x14] + \"(\" + argL + \",\" + argR + \")\");\n          }\n          break;\n\n        default:\n          if (cc < 0x20 && BinOpTab[cc]) {\n            argR = out.pop();\n            argL = out.pop();\n            out.push(argL + BinOpTab[cc] + argR);\n          } else if (FuncTab[cc]) {\n            argc = FuncTab[cc][1];\n            if (argc == 69) argc = blob[blob.l++];\n\n            if (argc > out.length) {\n              console.error(\"WK1 bad formula parse 0x\" + cc.toString(16) + \":|\" + out.join(\"|\") + \"|\");\n              return;\n            }\n\n            var args = out.slice(-argc);\n            out.length -= argc;\n            out.push(FuncTab[cc][0] + \"(\" + args.join(\",\") + \")\");\n          } else if (cc <= 0x07) return console.error(\"WK1 invalid opcode \" + cc.toString(16));else if (cc <= 0x18) return console.error(\"WK1 unsupported op \" + cc.toString(16));else if (cc <= 0x1E) return console.error(\"WK1 invalid opcode \" + cc.toString(16));else if (cc <= 0x73) return console.error(\"WK1 unsupported function opcode \" + cc.toString(16)); // possible future functions ??\n          else return console.error(\"WK1 unrecognized opcode \" + cc.toString(16));\n\n      }\n    }\n\n    if (out.length == 1) o[1].f = \"\" + out[0];else console.error(\"WK1 bad formula parse |\" + out.join(\"|\") + \"|\");\n  }\n\n  function parse_cell_3(blob\n  /*::, length*/\n  ) {\n    var o = [{\n      c: 0,\n      r: 0\n    }, {\n      t: 'n',\n      v: 0\n    }, 0];\n    o[0].r = blob.read_shift(2);\n    o[3] = blob[blob.l++];\n    o[0].c = blob[blob.l++];\n    return o;\n  }\n\n  function parse_LABEL_16(blob, length) {\n    var o = parse_cell_3(blob, length);\n    o[1].t = 's';\n    o[1].v = blob.read_shift(length - 4, 'cstr');\n    return o;\n  }\n\n  function write_LABEL_16(R, C, wsidx, s) {\n    /* TODO: encoding */\n    var o = new_buf(6 + s.length);\n    o.write_shift(2, R);\n    o.write_shift(1, wsidx);\n    o.write_shift(1, C);\n    o.write_shift(1, 0x27);\n\n    for (var i = 0; i < s.length; ++i) {\n      var cc = s.charCodeAt(i);\n      o.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n    }\n\n    o.write_shift(1, 0);\n    return o;\n  }\n\n  function parse_NUMBER_18(blob, length) {\n    var o = parse_cell_3(blob, length);\n    o[1].v = blob.read_shift(2);\n    var v = o[1].v >> 1;\n\n    if (o[1].v & 0x1) {\n      switch (v & 0x07) {\n        case 0:\n          v = (v >> 3) * 5000;\n          break;\n\n        case 1:\n          v = (v >> 3) * 500;\n          break;\n\n        case 2:\n          v = (v >> 3) / 20;\n          break;\n\n        case 3:\n          v = (v >> 3) / 200;\n          break;\n\n        case 4:\n          v = (v >> 3) / 2000;\n          break;\n\n        case 5:\n          v = (v >> 3) / 20000;\n          break;\n\n        case 6:\n          v = (v >> 3) / 16;\n          break;\n\n        case 7:\n          v = (v >> 3) / 64;\n          break;\n      }\n    }\n\n    o[1].v = v;\n    return o;\n  }\n\n  function parse_NUMBER_17(blob, length) {\n    var o = parse_cell_3(blob, length);\n    var v1 = blob.read_shift(4);\n    var v2 = blob.read_shift(4);\n    var e = blob.read_shift(2);\n\n    if (e == 0xFFFF) {\n      if (v1 === 0 && v2 === 0xC0000000) {\n        o[1].t = \"e\";\n        o[1].v = 0x0F;\n      } // ERR -> #VALUE!\n      else if (v1 === 0 && v2 === 0xD0000000) {\n        o[1].t = \"e\";\n        o[1].v = 0x2A;\n      } // NA -> #N/A\n      else o[1].v = 0;\n\n      return o;\n    }\n\n    var s = e & 0x8000;\n    e = (e & 0x7FFF) - 16446;\n    o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));\n    return o;\n  }\n\n  function write_NUMBER_17(R, C, wsidx, v) {\n    var o = new_buf(14);\n    o.write_shift(2, R);\n    o.write_shift(1, wsidx);\n    o.write_shift(1, C);\n\n    if (v == 0) {\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(2, 0xFFFF);\n      return o;\n    }\n\n    var s = 0,\n        e = 0,\n        v1 = 0,\n        v2 = 0;\n\n    if (v < 0) {\n      s = 1;\n      v = -v;\n    }\n\n    e = Math.log2(v) | 0;\n    v /= Math.pow(2, e - 31);\n    v2 = v >>> 0;\n\n    if ((v2 & 0x80000000) == 0) {\n      v /= 2;\n      ++e;\n      v2 = v >>> 0;\n    }\n\n    v -= v2;\n    v2 |= 0x80000000;\n    v2 >>>= 0;\n    v *= Math.pow(2, 32);\n    v1 = v >>> 0;\n    o.write_shift(4, v1);\n    o.write_shift(4, v2);\n    e += 0x3FFF + (s ? 0x8000 : 0);\n    o.write_shift(2, e);\n    return o;\n  }\n\n  function parse_FORMULA_19(blob, length) {\n    var o = parse_NUMBER_17(blob, 14);\n    blob.l += length - 14;\n    /* TODO: WK3 formula */\n\n    return o;\n  }\n\n  function parse_NUMBER_25(blob, length) {\n    var o = parse_cell_3(blob, length);\n    var v1 = blob.read_shift(4);\n    o[1].v = v1 >> 6;\n    return o;\n  }\n\n  function parse_NUMBER_27(blob, length) {\n    var o = parse_cell_3(blob, length);\n    var v1 = blob.read_shift(8, 'f');\n    o[1].v = v1;\n    return o;\n  }\n\n  function parse_FORMULA_28(blob, length) {\n    var o = parse_NUMBER_27(blob, 12);\n    blob.l += length - 12;\n    /* TODO: formula */\n\n    return o;\n  }\n\n  function parse_SHEETNAMECS(blob, length) {\n    return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, 'cstr') : \"\";\n  }\n\n  function parse_SHEETNAMELP(blob, length) {\n    var len = blob[blob.l++];\n    if (len > length - 1) len = length - 1;\n    var o = \"\";\n\n    while (o.length < len) {\n      o += String.fromCharCode(blob[blob.l++]);\n    }\n\n    return o;\n  }\n\n  function parse_SHEETINFOQP(blob, length, opts) {\n    if (!opts.qpro || length < 21) return;\n    var id = blob.read_shift(1);\n    blob.l += 17;\n    blob.l += 1; //var len = blob.read_shift(1);\n\n    blob.l += 2;\n    var nm = blob.read_shift(length - 21, 'cstr');\n    return [id, nm];\n  }\n\n  function parse_XFORMAT(blob, length) {\n    var o = {},\n        tgt = blob.l + length;\n\n    while (blob.l < tgt) {\n      var dt = blob.read_shift(2);\n\n      if (dt == 0x36b0) {\n        o[dt] = [0, \"\"];\n        o[dt][0] = blob.read_shift(2);\n\n        while (blob[blob.l]) {\n          o[dt][1] += String.fromCharCode(blob[blob.l]);\n          blob.l++;\n        }\n\n        blob.l++;\n      } // TODO: 0x3a99 ??\n\n    }\n\n    return o;\n  }\n\n  function write_XFORMAT_SHEETNAME(name, wsidx) {\n    var out = new_buf(5 + name.length);\n    out.write_shift(2, 0x36b0);\n    out.write_shift(2, wsidx);\n\n    for (var i = 0; i < name.length; ++i) {\n      var cc = name.charCodeAt(i);\n      out[out.l++] = cc > 0x7F ? 0x5F : cc;\n    }\n\n    out[out.l++] = 0;\n    return out;\n  }\n\n  var WK1Enum = {\n    /*::[*/\n    0x0000\n    /*::]*/\n    : {\n      n: \"BOF\",\n      f: parseuint16\n    },\n\n    /*::[*/\n    0x0001\n    /*::]*/\n    : {\n      n: \"EOF\"\n    },\n\n    /*::[*/\n    0x0002\n    /*::]*/\n    : {\n      n: \"CALCMODE\"\n    },\n\n    /*::[*/\n    0x0003\n    /*::]*/\n    : {\n      n: \"CALCORDER\"\n    },\n\n    /*::[*/\n    0x0004\n    /*::]*/\n    : {\n      n: \"SPLIT\"\n    },\n\n    /*::[*/\n    0x0005\n    /*::]*/\n    : {\n      n: \"SYNC\"\n    },\n\n    /*::[*/\n    0x0006\n    /*::]*/\n    : {\n      n: \"RANGE\",\n      f: parse_RANGE\n    },\n\n    /*::[*/\n    0x0007\n    /*::]*/\n    : {\n      n: \"WINDOW1\"\n    },\n\n    /*::[*/\n    0x0008\n    /*::]*/\n    : {\n      n: \"COLW1\"\n    },\n\n    /*::[*/\n    0x0009\n    /*::]*/\n    : {\n      n: \"WINTWO\"\n    },\n\n    /*::[*/\n    0x000A\n    /*::]*/\n    : {\n      n: \"COLW2\"\n    },\n\n    /*::[*/\n    0x000B\n    /*::]*/\n    : {\n      n: \"NAME\"\n    },\n\n    /*::[*/\n    0x000C\n    /*::]*/\n    : {\n      n: \"BLANK\"\n    },\n\n    /*::[*/\n    0x000D\n    /*::]*/\n    : {\n      n: \"INTEGER\",\n      f: parse_INTEGER\n    },\n\n    /*::[*/\n    0x000E\n    /*::]*/\n    : {\n      n: \"NUMBER\",\n      f: parse_NUMBER\n    },\n\n    /*::[*/\n    0x000F\n    /*::]*/\n    : {\n      n: \"LABEL\",\n      f: parse_LABEL\n    },\n\n    /*::[*/\n    0x0010\n    /*::]*/\n    : {\n      n: \"FORMULA\",\n      f: parse_FORMULA\n    },\n\n    /*::[*/\n    0x0018\n    /*::]*/\n    : {\n      n: \"TABLE\"\n    },\n\n    /*::[*/\n    0x0019\n    /*::]*/\n    : {\n      n: \"ORANGE\"\n    },\n\n    /*::[*/\n    0x001A\n    /*::]*/\n    : {\n      n: \"PRANGE\"\n    },\n\n    /*::[*/\n    0x001B\n    /*::]*/\n    : {\n      n: \"SRANGE\"\n    },\n\n    /*::[*/\n    0x001C\n    /*::]*/\n    : {\n      n: \"FRANGE\"\n    },\n\n    /*::[*/\n    0x001D\n    /*::]*/\n    : {\n      n: \"KRANGE1\"\n    },\n\n    /*::[*/\n    0x0020\n    /*::]*/\n    : {\n      n: \"HRANGE\"\n    },\n\n    /*::[*/\n    0x0023\n    /*::]*/\n    : {\n      n: \"KRANGE2\"\n    },\n\n    /*::[*/\n    0x0024\n    /*::]*/\n    : {\n      n: \"PROTEC\"\n    },\n\n    /*::[*/\n    0x0025\n    /*::]*/\n    : {\n      n: \"FOOTER\"\n    },\n\n    /*::[*/\n    0x0026\n    /*::]*/\n    : {\n      n: \"HEADER\"\n    },\n\n    /*::[*/\n    0x0027\n    /*::]*/\n    : {\n      n: \"SETUP\"\n    },\n\n    /*::[*/\n    0x0028\n    /*::]*/\n    : {\n      n: \"MARGINS\"\n    },\n\n    /*::[*/\n    0x0029\n    /*::]*/\n    : {\n      n: \"LABELFMT\"\n    },\n\n    /*::[*/\n    0x002A\n    /*::]*/\n    : {\n      n: \"TITLES\"\n    },\n\n    /*::[*/\n    0x002B\n    /*::]*/\n    : {\n      n: \"SHEETJS\"\n    },\n\n    /*::[*/\n    0x002D\n    /*::]*/\n    : {\n      n: \"GRAPH\"\n    },\n\n    /*::[*/\n    0x002E\n    /*::]*/\n    : {\n      n: \"NGRAPH\"\n    },\n\n    /*::[*/\n    0x002F\n    /*::]*/\n    : {\n      n: \"CALCCOUNT\"\n    },\n\n    /*::[*/\n    0x0030\n    /*::]*/\n    : {\n      n: \"UNFORMATTED\"\n    },\n\n    /*::[*/\n    0x0031\n    /*::]*/\n    : {\n      n: \"CURSORW12\"\n    },\n\n    /*::[*/\n    0x0032\n    /*::]*/\n    : {\n      n: \"WINDOW\"\n    },\n\n    /*::[*/\n    0x0033\n    /*::]*/\n    : {\n      n: \"STRING\",\n      f: parse_STRING\n    },\n\n    /*::[*/\n    0x0037\n    /*::]*/\n    : {\n      n: \"PASSWORD\"\n    },\n\n    /*::[*/\n    0x0038\n    /*::]*/\n    : {\n      n: \"LOCKED\"\n    },\n\n    /*::[*/\n    0x003C\n    /*::]*/\n    : {\n      n: \"QUERY\"\n    },\n\n    /*::[*/\n    0x003D\n    /*::]*/\n    : {\n      n: \"QUERYNAME\"\n    },\n\n    /*::[*/\n    0x003E\n    /*::]*/\n    : {\n      n: \"PRINT\"\n    },\n\n    /*::[*/\n    0x003F\n    /*::]*/\n    : {\n      n: \"PRINTNAME\"\n    },\n\n    /*::[*/\n    0x0040\n    /*::]*/\n    : {\n      n: \"GRAPH2\"\n    },\n\n    /*::[*/\n    0x0041\n    /*::]*/\n    : {\n      n: \"GRAPHNAME\"\n    },\n\n    /*::[*/\n    0x0042\n    /*::]*/\n    : {\n      n: \"ZOOM\"\n    },\n\n    /*::[*/\n    0x0043\n    /*::]*/\n    : {\n      n: \"SYMSPLIT\"\n    },\n\n    /*::[*/\n    0x0044\n    /*::]*/\n    : {\n      n: \"NSROWS\"\n    },\n\n    /*::[*/\n    0x0045\n    /*::]*/\n    : {\n      n: \"NSCOLS\"\n    },\n\n    /*::[*/\n    0x0046\n    /*::]*/\n    : {\n      n: \"RULER\"\n    },\n\n    /*::[*/\n    0x0047\n    /*::]*/\n    : {\n      n: \"NNAME\"\n    },\n\n    /*::[*/\n    0x0048\n    /*::]*/\n    : {\n      n: \"ACOMM\"\n    },\n\n    /*::[*/\n    0x0049\n    /*::]*/\n    : {\n      n: \"AMACRO\"\n    },\n\n    /*::[*/\n    0x004A\n    /*::]*/\n    : {\n      n: \"PARSE\"\n    },\n\n    /*::[*/\n    0x0066\n    /*::]*/\n    : {\n      n: \"PRANGES??\"\n    },\n\n    /*::[*/\n    0x0067\n    /*::]*/\n    : {\n      n: \"RRANGES??\"\n    },\n\n    /*::[*/\n    0x0068\n    /*::]*/\n    : {\n      n: \"FNAME??\"\n    },\n\n    /*::[*/\n    0x0069\n    /*::]*/\n    : {\n      n: \"MRANGES??\"\n    },\n\n    /*::[*/\n    0x00CC\n    /*::]*/\n    : {\n      n: \"SHEETNAMECS\",\n      f: parse_SHEETNAMECS\n    },\n\n    /*::[*/\n    0x00DE\n    /*::]*/\n    : {\n      n: \"SHEETNAMELP\",\n      f: parse_SHEETNAMELP\n    },\n\n    /*::[*/\n    0x00FF\n    /*::]*/\n    : {\n      n: \"BOF\",\n      f: parseuint16\n    },\n\n    /*::[*/\n    0xFFFF\n    /*::]*/\n    : {\n      n: \"\"\n    }\n  };\n  var WK3Enum = {\n    /*::[*/\n    0x0000\n    /*::]*/\n    : {\n      n: \"BOF\"\n    },\n\n    /*::[*/\n    0x0001\n    /*::]*/\n    : {\n      n: \"EOF\"\n    },\n\n    /*::[*/\n    0x0002\n    /*::]*/\n    : {\n      n: \"PASSWORD\"\n    },\n\n    /*::[*/\n    0x0003\n    /*::]*/\n    : {\n      n: \"CALCSET\"\n    },\n\n    /*::[*/\n    0x0004\n    /*::]*/\n    : {\n      n: \"WINDOWSET\"\n    },\n\n    /*::[*/\n    0x0005\n    /*::]*/\n    : {\n      n: \"SHEETCELLPTR\"\n    },\n\n    /*::[*/\n    0x0006\n    /*::]*/\n    : {\n      n: \"SHEETLAYOUT\"\n    },\n\n    /*::[*/\n    0x0007\n    /*::]*/\n    : {\n      n: \"COLUMNWIDTH\"\n    },\n\n    /*::[*/\n    0x0008\n    /*::]*/\n    : {\n      n: \"HIDDENCOLUMN\"\n    },\n\n    /*::[*/\n    0x0009\n    /*::]*/\n    : {\n      n: \"USERRANGE\"\n    },\n\n    /*::[*/\n    0x000A\n    /*::]*/\n    : {\n      n: \"SYSTEMRANGE\"\n    },\n\n    /*::[*/\n    0x000B\n    /*::]*/\n    : {\n      n: \"ZEROFORCE\"\n    },\n\n    /*::[*/\n    0x000C\n    /*::]*/\n    : {\n      n: \"SORTKEYDIR\"\n    },\n\n    /*::[*/\n    0x000D\n    /*::]*/\n    : {\n      n: \"FILESEAL\"\n    },\n\n    /*::[*/\n    0x000E\n    /*::]*/\n    : {\n      n: \"DATAFILLNUMS\"\n    },\n\n    /*::[*/\n    0x000F\n    /*::]*/\n    : {\n      n: \"PRINTMAIN\"\n    },\n\n    /*::[*/\n    0x0010\n    /*::]*/\n    : {\n      n: \"PRINTSTRING\"\n    },\n\n    /*::[*/\n    0x0011\n    /*::]*/\n    : {\n      n: \"GRAPHMAIN\"\n    },\n\n    /*::[*/\n    0x0012\n    /*::]*/\n    : {\n      n: \"GRAPHSTRING\"\n    },\n\n    /*::[*/\n    0x0013\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0014\n    /*::]*/\n    : {\n      n: \"ERRCELL\"\n    },\n\n    /*::[*/\n    0x0015\n    /*::]*/\n    : {\n      n: \"NACELL\"\n    },\n\n    /*::[*/\n    0x0016\n    /*::]*/\n    : {\n      n: \"LABEL16\",\n      f: parse_LABEL_16\n    },\n\n    /*::[*/\n    0x0017\n    /*::]*/\n    : {\n      n: \"NUMBER17\",\n      f: parse_NUMBER_17\n    },\n\n    /*::[*/\n    0x0018\n    /*::]*/\n    : {\n      n: \"NUMBER18\",\n      f: parse_NUMBER_18\n    },\n\n    /*::[*/\n    0x0019\n    /*::]*/\n    : {\n      n: \"FORMULA19\",\n      f: parse_FORMULA_19\n    },\n\n    /*::[*/\n    0x001A\n    /*::]*/\n    : {\n      n: \"FORMULA1A\"\n    },\n\n    /*::[*/\n    0x001B\n    /*::]*/\n    : {\n      n: \"XFORMAT\",\n      f: parse_XFORMAT\n    },\n\n    /*::[*/\n    0x001C\n    /*::]*/\n    : {\n      n: \"DTLABELMISC\"\n    },\n\n    /*::[*/\n    0x001D\n    /*::]*/\n    : {\n      n: \"DTLABELCELL\"\n    },\n\n    /*::[*/\n    0x001E\n    /*::]*/\n    : {\n      n: \"GRAPHWINDOW\"\n    },\n\n    /*::[*/\n    0x001F\n    /*::]*/\n    : {\n      n: \"CPA\"\n    },\n\n    /*::[*/\n    0x0020\n    /*::]*/\n    : {\n      n: \"LPLAUTO\"\n    },\n\n    /*::[*/\n    0x0021\n    /*::]*/\n    : {\n      n: \"QUERY\"\n    },\n\n    /*::[*/\n    0x0022\n    /*::]*/\n    : {\n      n: \"HIDDENSHEET\"\n    },\n\n    /*::[*/\n    0x0023\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0025\n    /*::]*/\n    : {\n      n: \"NUMBER25\",\n      f: parse_NUMBER_25\n    },\n\n    /*::[*/\n    0x0026\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0027\n    /*::]*/\n    : {\n      n: \"NUMBER27\",\n      f: parse_NUMBER_27\n    },\n\n    /*::[*/\n    0x0028\n    /*::]*/\n    : {\n      n: \"FORMULA28\",\n      f: parse_FORMULA_28\n    },\n\n    /*::[*/\n    0x008E\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0093\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0096\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0097\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0098\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0099\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x009A\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x009B\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x009C\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00A3\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00AE\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00AF\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00B0\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00B1\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00B8\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00B9\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00BA\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00BB\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00BC\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00C3\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00C9\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00CC\n    /*::]*/\n    : {\n      n: \"SHEETNAMECS\",\n      f: parse_SHEETNAMECS\n    },\n\n    /*::[*/\n    0x00CD\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00CE\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00CF\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x00D0\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0100\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0103\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0104\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0105\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0106\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0107\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0109\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x010A\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x010B\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x010C\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x010E\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x010F\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0180\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0185\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0186\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0189\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x018C\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0200\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0202\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0201\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0204\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0205\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0280\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0281\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0282\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0283\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0284\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0285\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0286\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0287\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0288\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0292\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0293\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0294\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0295\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0296\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0299\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x029A\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0300\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0304\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0601\n    /*::]*/\n    : {\n      n: \"SHEETINFOQP\",\n      f: parse_SHEETINFOQP\n    },\n\n    /*::[*/\n    0x0640\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0642\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0701\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0702\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0703\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0704\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0780\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0800\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0801\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0804\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x0A80\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x2AF6\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x3231\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x6E49\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0x6F44\n    /*::]*/\n    : {\n      n: \"??\"\n    },\n\n    /*::[*/\n    0xFFFF\n    /*::]*/\n    : {\n      n: \"\"\n    }\n  };\n  /* QPW uses a different set of record types */\n\n  function qpw_to_workbook_buf(d, opts)\n  /*:Workbook*/\n  {\n    prep_blob(d, 0);\n    var o = opts || {};\n    if (DENSE != null && o.dense == null) o.dense = DENSE;\n    var s\n    /*:Worksheet*/\n    = o.dense ? [] : {}\n    /*:any*/\n    ;\n    var SST = [],\n        sname = \"\",\n        formulae = [];\n    var range = {\n      s: {\n        r: -1,\n        c: -1\n      },\n      e: {\n        r: -1,\n        c: -1\n      }\n    };\n    var cnt = 0,\n        type = 0,\n        C = 0,\n        R = 0;\n    var wb = {\n      SheetNames: [],\n      Sheets: {}\n    };\n\n    outer: while (d.l < d.length) {\n      var RT = d.read_shift(2),\n          length = d.read_shift(2);\n      var p = d.slice(d.l, d.l + length);\n      prep_blob(p, 0);\n\n      switch (RT) {\n        case 0x01:\n          /* BOF */\n          if (p.read_shift(4) != 0x39575051) throw \"Bad QPW9 BOF!\";\n          break;\n\n        case 0x02:\n          /* EOF */\n          break outer;\n\n        /* TODO: The behavior here should be consistent with Numbers: QP Notebook ~ .TN.SheetArchive, QP Sheet ~ .TST.TableModelArchive */\n\n        case 0x0401:\n          /* BON */\n          break;\n\n        case 0x0402:\n          /* EON */\n\n          /* TODO: backfill missing sheets based on BON cnt */\n          break;\n\n        case 0x0407:\n          {\n            /* SST */\n            p.l += 12;\n\n            while (p.l < p.length) {\n              cnt = p.read_shift(2);\n              type = p.read_shift(1);\n              SST.push(p.read_shift(cnt, 'cstr'));\n            }\n          }\n          break;\n\n        case 0x0408:\n          {\n            /* FORMULAE */\n            //p.l += 12;\n            //while(p.l < p.length) {\n            //\tcnt = p.read_shift(2);\n            //\tformulae.push(p.slice(p.l, p.l + cnt + 1)); p.l += cnt + 1;\n            //}\n          }\n          break;\n\n        case 0x0601:\n          {\n            /* BOS */\n            var sidx = p.read_shift(2);\n            s = o.dense ? [] : {}\n            /*:any*/\n            ;\n            range.s.c = p.read_shift(2);\n            range.e.c = p.read_shift(2);\n            range.s.r = p.read_shift(4);\n            range.e.r = p.read_shift(4);\n            p.l += 4;\n\n            if (p.l + 2 < p.length) {\n              cnt = p.read_shift(2);\n              type = p.read_shift(1);\n              sname = cnt == 0 ? \"\" : p.read_shift(cnt, 'cstr');\n            }\n\n            if (!sname) sname = encode_col(sidx);\n            /* TODO: backfill empty sheets */\n          }\n          break;\n\n        case 0x0602:\n          {\n            /* EOS */\n\n            /* NOTE: QP valid range A1:IV1000000 */\n            if (range.s.c > 0xFF || range.s.r > 999999) break;\n            if (range.e.c < range.s.c) range.e.c = range.s.c;\n            if (range.e.r < range.s.r) range.e.r = range.s.r;\n            s[\"!ref\"] = encode_range(range);\n            book_append_sheet(wb, s, sname); // TODO: a barrel roll\n          }\n          break;\n\n        case 0x0A01:\n          {\n            /* COL (like XLS Row, modulo the layout transposition) */\n            C = p.read_shift(2);\n            if (range.e.c < C) range.e.c = C;\n            if (range.s.c > C) range.s.c = C;\n            R = p.read_shift(4);\n            if (range.s.r > R) range.s.r = R;\n            R = p.read_shift(4);\n            if (range.e.r < R) range.e.r = R;\n          }\n          break;\n\n        case 0x0C01:\n          {\n            /* MulCells (like XLS MulRK, but takes advantage of common column data patterns) */\n            R = p.read_shift(4), cnt = p.read_shift(4);\n            if (range.s.r > R) range.s.r = R;\n            if (range.e.r < R + cnt - 1) range.e.r = R + cnt - 1;\n\n            while (p.l < p.length) {\n              var cell = {\n                t: \"z\"\n              };\n              var flags = p.read_shift(1);\n              if (flags & 0x80) p.l += 2;\n              var mul = flags & 0x40 ? p.read_shift(2) - 1 : 0;\n\n              switch (flags & 0x1F) {\n                case 1:\n                  break;\n\n                case 2:\n                  cell = {\n                    t: \"n\",\n                    v: p.read_shift(2)\n                  };\n                  break;\n\n                case 3:\n                  cell = {\n                    t: \"n\",\n                    v: p.read_shift(2, 'i')\n                  };\n                  break;\n\n                case 5:\n                  cell = {\n                    t: \"n\",\n                    v: p.read_shift(8, 'f')\n                  };\n                  break;\n\n                case 7:\n                  cell = {\n                    t: \"s\",\n                    v: SST[type = p.read_shift(4) - 1]\n                  };\n                  break;\n\n                case 8:\n                  cell = {\n                    t: \"n\",\n                    v: p.read_shift(8, 'f')\n                  };\n                  p.l += 2;\n                  /* cell.f = formulae[p.read_shift(4)]; */\n\n                  p.l += 4;\n                  break;\n\n                default:\n                  throw \"Unrecognized QPW cell type \" + (flags & 0x1F);\n              }\n\n              var delta = 0;\n              if (flags & 0x20) switch (flags & 0x1F) {\n                case 2:\n                  delta = p.read_shift(2);\n                  break;\n\n                case 3:\n                  delta = p.read_shift(2, 'i');\n                  break;\n\n                case 7:\n                  delta = p.read_shift(2);\n                  break;\n\n                default:\n                  throw \"Unsupported delta for QPW cell type \" + (flags & 0x1F);\n              }\n\n              if (!(!o.sheetStubs && cell.t == \"z\")) {\n                if (Array.isArray(s)) {\n                  if (!s[R]) s[R] = [];\n                  s[R][C] = cell;\n                } else s[encode_cell({\n                  r: R,\n                  c: C\n                })] = cell;\n              }\n\n              ++R;\n              --cnt;\n\n              while (mul-- > 0 && cnt >= 0) {\n                if (flags & 0x20) switch (flags & 0x1F) {\n                  case 2:\n                    cell = {\n                      t: \"n\",\n                      v: cell.v + delta & 0xFFFF\n                    };\n                    break;\n\n                  case 3:\n                    cell = {\n                      t: \"n\",\n                      v: cell.v + delta & 0xFFFF\n                    };\n                    if (cell.v > 0x7FFF) cell.v -= 0x10000;\n                    break;\n\n                  case 7:\n                    cell = {\n                      t: \"s\",\n                      v: SST[type = type + delta >>> 0]\n                    };\n                    break;\n\n                  default:\n                    throw \"Cannot apply delta for QPW cell type \" + (flags & 0x1F);\n                } else switch (flags & 0x1F) {\n                  case 1:\n                    cell = {\n                      t: \"z\"\n                    };\n                    break;\n\n                  case 2:\n                    cell = {\n                      t: \"n\",\n                      v: p.read_shift(2)\n                    };\n                    break;\n\n                  case 7:\n                    cell = {\n                      t: \"s\",\n                      v: SST[type = p.read_shift(4) - 1]\n                    };\n                    break;\n\n                  default:\n                    throw \"Cannot apply repeat for QPW cell type \" + (flags & 0x1F);\n                }\n\n                if (!(!o.sheetStubs && cell.t == \"z\")) {\n                  if (Array.isArray(s)) {\n                    if (!s[R]) s[R] = [];\n                    s[R][C] = cell;\n                  } else s[encode_cell({\n                    r: R,\n                    c: C\n                  })] = cell;\n                }\n\n                ++R;\n                --cnt;\n              }\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n\n      d.l += length;\n    }\n\n    return wb;\n  }\n\n  return {\n    sheet_to_wk1: sheet_to_wk1,\n    book_to_wk3: book_to_wk3,\n    to_workbook: lotus_to_workbook\n  };\n}();\n/* 18.4.7 rPr CT_RPrElt */\n\n\nfunction parse_rpr(rpr) {\n  var font = {},\n      m = rpr.match(tagregex),\n      i = 0;\n  var pass = false;\n  if (m) for (; i != m.length; ++i) {\n    var y = parsexmltag(m[i]);\n\n    switch (y[0].replace(/\\w*:/g, \"\")) {\n      /* 18.8.12 condense CT_BooleanProperty */\n\n      /* ** not required . */\n      case '<condense':\n        break;\n\n      /* 18.8.17 extend CT_BooleanProperty */\n\n      /* ** not required . */\n\n      case '<extend':\n        break;\n\n      /* 18.8.36 shadow CT_BooleanProperty */\n\n      /* ** not required . */\n\n      case '<shadow':\n        if (!y.val) break;\n\n      /* falls through */\n\n      case '<shadow>':\n      case '<shadow/>':\n        font.shadow = 1;\n        break;\n\n      case '</shadow>':\n        break;\n\n      /* 18.4.1 charset CT_IntProperty TODO */\n\n      case '<charset':\n        if (y.val == '1') break;\n        font.cp = CS2CP[parseInt(y.val, 10)];\n        break;\n\n      /* 18.4.2 outline CT_BooleanProperty TODO */\n\n      case '<outline':\n        if (!y.val) break;\n\n      /* falls through */\n\n      case '<outline>':\n      case '<outline/>':\n        font.outline = 1;\n        break;\n\n      case '</outline>':\n        break;\n\n      /* 18.4.5 rFont CT_FontName */\n\n      case '<rFont':\n        font.name = y.val;\n        break;\n\n      /* 18.4.11 sz CT_FontSize */\n\n      case '<sz':\n        font.sz = y.val;\n        break;\n\n      /* 18.4.10 strike CT_BooleanProperty */\n\n      case '<strike':\n        if (!y.val) break;\n\n      /* falls through */\n\n      case '<strike>':\n      case '<strike/>':\n        font.strike = 1;\n        break;\n\n      case '</strike>':\n        break;\n\n      /* 18.4.13 u CT_UnderlineProperty */\n\n      case '<u':\n        if (!y.val) break;\n\n        switch (y.val) {\n          case 'double':\n            font.uval = \"double\";\n            break;\n\n          case 'singleAccounting':\n            font.uval = \"single-accounting\";\n            break;\n\n          case 'doubleAccounting':\n            font.uval = \"double-accounting\";\n            break;\n        }\n\n      /* falls through */\n\n      case '<u>':\n      case '<u/>':\n        font.u = 1;\n        break;\n\n      case '</u>':\n        break;\n\n      /* 18.8.2 b */\n\n      case '<b':\n        if (y.val == '0') break;\n\n      /* falls through */\n\n      case '<b>':\n      case '<b/>':\n        font.b = 1;\n        break;\n\n      case '</b>':\n        break;\n\n      /* 18.8.26 i */\n\n      case '<i':\n        if (y.val == '0') break;\n\n      /* falls through */\n\n      case '<i>':\n      case '<i/>':\n        font.i = 1;\n        break;\n\n      case '</i>':\n        break;\n\n      /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */\n\n      case '<color':\n        if (y.rgb) font.color = y.rgb.slice(2, 8);\n        break;\n\n      case '<color>':\n      case '<color/>':\n      case '</color>':\n        break;\n\n      /* 18.8.18 family ST_FontFamily */\n\n      case '<family':\n        font.family = y.val;\n        break;\n\n      case '<family>':\n      case '<family/>':\n      case '</family>':\n        break;\n\n      /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */\n\n      case '<vertAlign':\n        font.valign = y.val;\n        break;\n\n      case '<vertAlign>':\n      case '<vertAlign/>':\n      case '</vertAlign>':\n        break;\n\n      /* 18.8.35 scheme CT_FontScheme TODO */\n\n      case '<scheme':\n        break;\n\n      case '<scheme>':\n      case '<scheme/>':\n      case '</scheme>':\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n        break;\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);\n    }\n  }\n  return font;\n}\n\nvar parse_rs = /*#__PURE__*/function () {\n  var tregex = matchtag(\"t\"),\n      rpregex = matchtag(\"rPr\");\n  /* 18.4.4 r CT_RElt */\n\n  function parse_r(r) {\n    /* 18.4.12 t ST_Xstring */\n    var t = r.match(tregex)\n    /*, cp = 65001*/\n    ;\n    if (!t) return {\n      t: \"s\",\n      v: \"\"\n    };\n    var o\n    /*:Cell*/\n    = {\n      t: 's',\n      v: unescapexml(t[1])\n    }\n    /*:any*/\n    ;\n    var rpr = r.match(rpregex);\n    if (rpr) o.s = parse_rpr(rpr[1]);\n    return o;\n  }\n\n  var rregex = /<(?:\\w+:)?r>/g,\n      rend = /<\\/(?:\\w+:)?r>/;\n  return function parse_rs(rs) {\n    return rs.replace(rregex, \"\").split(rend).map(parse_r).filter(function (r) {\n      return r.v;\n    });\n  };\n}();\n/* Parse a list of <r> tags */\n\n\nvar rs_to_html = /*#__PURE__*/function parse_rs_factory() {\n  var nlregex = /(\\r\\n|\\n)/g;\n\n  function parse_rpr2(font, intro, outro) {\n    var style\n    /*:Array<string>*/\n    = [];\n    if (font.u) style.push(\"text-decoration: underline;\");\n    if (font.uval) style.push(\"text-underline-style:\" + font.uval + \";\");\n    if (font.sz) style.push(\"font-size:\" + font.sz + \"pt;\");\n    if (font.outline) style.push(\"text-effect: outline;\");\n    if (font.shadow) style.push(\"text-shadow: auto;\");\n    intro.push('<span style=\"' + style.join(\"\") + '\">');\n\n    if (font.b) {\n      intro.push(\"<b>\");\n      outro.push(\"</b>\");\n    }\n\n    if (font.i) {\n      intro.push(\"<i>\");\n      outro.push(\"</i>\");\n    }\n\n    if (font.strike) {\n      intro.push(\"<s>\");\n      outro.push(\"</s>\");\n    }\n\n    var align = font.valign || \"\";\n    if (align == \"superscript\" || align == \"super\") align = \"sup\";else if (align == \"subscript\") align = \"sub\";\n\n    if (align != \"\") {\n      intro.push(\"<\" + align + \">\");\n      outro.push(\"</\" + align + \">\");\n    }\n\n    outro.push(\"</span>\");\n    return font;\n  }\n  /* 18.4.4 r CT_RElt */\n\n\n  function r_to_html(r) {\n    var terms\n    /*:[Array<string>, string, Array<string>]*/\n    = [[], r.v, []];\n    if (!r.v) return \"\";\n    if (r.s) parse_rpr2(r.s, terms[0], terms[2]);\n    return terms[0].join(\"\") + terms[1].replace(nlregex, '<br/>') + terms[2].join(\"\");\n  }\n\n  return function parse_rs(rs) {\n    return rs.map(r_to_html).join(\"\");\n  };\n}();\n/* 18.4.8 si CT_Rst */\n\n\nvar sitregex = /<(?:\\w+:)?t[^>]*>([^<]*)<\\/(?:\\w+:)?t>/g,\n    sirregex = /<(?:\\w+:)?r>/;\nvar sirphregex = /<(?:\\w+:)?rPh.*?>([\\s\\S]*?)<\\/(?:\\w+:)?rPh>/g;\n\nfunction parse_si(x, opts) {\n  var html = opts ? opts.cellHTML : true;\n  var z = {};\n  if (!x) return {\n    t: \"\"\n  }; //var y;\n\n  /* 18.4.12 t ST_Xstring (Plaintext String) */\n  // TODO: is whitespace actually valid here?\n\n  if (x.match(/^\\s*<(?:\\w+:)?t[^>]*>/)) {\n    z.t = unescapexml(utf8read(x.slice(x.indexOf(\">\") + 1).split(/<\\/(?:\\w+:)?t>/)[0] || \"\"), true);\n    z.r = utf8read(x);\n    if (html) z.h = escapehtml(z.t);\n  }\n  /* 18.4.4 r CT_RElt (Rich Text Run) */\n  else if (\n  /*y = */\n  x.match(sirregex)) {\n    z.r = utf8read(x);\n    z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex) || []).join(\"\").replace(tagregex, \"\")), true);\n    if (html) z.h = rs_to_html(parse_rs(z.r));\n  }\n  /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */\n\n  /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */\n\n\n  return z;\n}\n/* 18.4 Shared String Table */\n\n\nvar sstr0 = /<(?:\\w+:)?sst([^>]*)>([\\s\\S]*)<\\/(?:\\w+:)?sst>/;\nvar sstr1 = /<(?:\\w+:)?(?:si|sstItem)>/g;\nvar sstr2 = /<\\/(?:\\w+:)?(?:si|sstItem)>/;\n\nfunction parse_sst_xml(data\n/*:string*/\n, opts)\n/*:SST*/\n{\n  var s\n  /*:SST*/\n  = []\n  /*:any*/\n  ,\n      ss = \"\";\n  if (!data) return s;\n  /* 18.4.9 sst CT_Sst */\n\n  var sst = data.match(sstr0);\n\n  if (sst) {\n    ss = sst[2].replace(sstr1, \"\").split(sstr2);\n\n    for (var i = 0; i != ss.length; ++i) {\n      var o = parse_si(ss[i].trim(), opts);\n      if (o != null) s[s.length] = o;\n    }\n\n    sst = parsexmltag(sst[1]);\n    s.Count = sst.count;\n    s.Unique = sst.uniqueCount;\n  }\n\n  return s;\n}\n\nvar straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\n\nfunction write_sst_xml(sst\n/*:SST*/\n, opts)\n/*:string*/\n{\n  if (!opts.bookSST) return \"\";\n  var o = [XML_HEADER];\n  o[o.length] = writextag('sst', null, {\n    xmlns: XMLNS_main[0],\n    count: sst.Count,\n    uniqueCount: sst.Unique\n  });\n\n  for (var i = 0; i != sst.length; ++i) {\n    if (sst[i] == null) continue;\n    var s\n    /*:XLString*/\n    = sst[i];\n    var sitag = \"<si>\";\n    if (s.r) sitag += s.r;else {\n      sitag += \"<t\";\n      if (!s.t) s.t = \"\";\n      if (s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n      sitag += \">\" + escapexml(s.t) + \"</t>\";\n    }\n    sitag += \"</si>\";\n    o[o.length] = sitag;\n  }\n\n  if (o.length > 2) {\n    o[o.length] = '</sst>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.221 BrtBeginSst */\n\n\nfunction parse_BrtBeginSst(data) {\n  return [data.read_shift(4), data.read_shift(4)];\n}\n/* [MS-XLSB] 2.1.7.45 Shared Strings */\n\n\nfunction parse_sst_bin(data, opts)\n/*:SST*/\n{\n  var s\n  /*:SST*/\n  = []\n  /*:any*/\n  ;\n  var pass = false;\n  recordhopper(data, function hopper_sst(val, R, RT) {\n    switch (RT) {\n      case 0x009F:\n        /* BrtBeginSst */\n        s.Count = val[0];\n        s.Unique = val[1];\n        break;\n\n      case 0x0013:\n        /* BrtSSTItem */\n        s.push(val);\n        break;\n\n      case 0x00A0:\n        /* BrtEndSst */\n        return true;\n\n      case 0x0023:\n        /* BrtFRTBegin */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* BrtFRTEnd */\n        pass = false;\n        break;\n\n      default:\n        if (R.T) {}\n\n        if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n    }\n  });\n  return s;\n}\n\nfunction write_BrtBeginSst(sst, o) {\n  if (!o) o = new_buf(8);\n  o.write_shift(4, sst.Count);\n  o.write_shift(4, sst.Unique);\n  return o;\n}\n\nvar write_BrtSSTItem = write_RichStr;\n\nfunction write_sst_bin(sst\n/*::, opts*/\n) {\n  var ba = buf_array();\n  write_record(ba, 0x009F\n  /* BrtBeginSst */\n  , write_BrtBeginSst(sst));\n\n  for (var i = 0; i < sst.length; ++i) {\n    write_record(ba, 0x0013\n    /* BrtSSTItem */\n    , write_BrtSSTItem(sst[i]));\n  }\n  /* FRTSST */\n\n\n  write_record(ba, 0x00A0\n  /* BrtEndSst */\n  );\n  return ba.end();\n}\n\nfunction _JS2ANSI(str\n/*:string*/\n)\n/*:Array<number>*/\n{\n  if (typeof $cptable !== 'undefined') return $cptable.utils.encode(current_ansi, str);\n  var o\n  /*:Array<number>*/\n  = [],\n      oo = str.split(\"\");\n\n  for (var i = 0; i < oo.length; ++i) {\n    o[i] = oo[i].charCodeAt(0);\n  }\n\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.4 Version */\n\n\nfunction parse_CRYPTOVersion(blob, length\n/*:?number*/\n) {\n  var o\n  /*:any*/\n  = {};\n  o.Major = blob.read_shift(2);\n  o.Minor = blob.read_shift(2);\n  /*:: if(length == null) return o; */\n\n  if (length >= 4) blob.l += length - 4;\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */\n\n\nfunction parse_DataSpaceVersionInfo(blob) {\n  var o = {};\n  o.id = blob.read_shift(0, 'lpp4');\n  o.R = parse_CRYPTOVersion(blob, 4);\n  o.U = parse_CRYPTOVersion(blob, 4);\n  o.W = parse_CRYPTOVersion(blob, 4);\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */\n\n\nfunction parse_DataSpaceMapEntry(blob) {\n  var len = blob.read_shift(4);\n  var end = blob.l + len - 4;\n  var o = {};\n  var cnt = blob.read_shift(4);\n  var comps\n  /*:Array<{t:number, v:string}>*/\n  = [];\n  /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */\n\n  while (cnt-- > 0) {\n    comps.push({\n      t: blob.read_shift(4),\n      v: blob.read_shift(0, 'lpp4')\n    });\n  }\n\n  o.name = blob.read_shift(0, 'lpp4');\n  o.comps = comps;\n  if (blob.l != end) throw new Error(\"Bad DataSpaceMapEntry: \" + blob.l + \" != \" + end);\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */\n\n\nfunction parse_DataSpaceMap(blob) {\n  var o = [];\n  blob.l += 4; // must be 0x8\n\n  var cnt = blob.read_shift(4);\n\n  while (cnt-- > 0) {\n    o.push(parse_DataSpaceMapEntry(blob));\n  }\n\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */\n\n\nfunction parse_DataSpaceDefinition(blob)\n/*:Array<string>*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n  blob.l += 4; // must be 0x8\n\n  var cnt = blob.read_shift(4);\n\n  while (cnt-- > 0) {\n    o.push(blob.read_shift(0, 'lpp4'));\n  }\n\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */\n\n\nfunction parse_TransformInfoHeader(blob) {\n  var o = {};\n  /*var len = */\n\n  blob.read_shift(4);\n  blob.l += 4; // must be 0x1\n\n  o.id = blob.read_shift(0, 'lpp4');\n  o.name = blob.read_shift(0, 'lpp4');\n  o.R = parse_CRYPTOVersion(blob, 4);\n  o.U = parse_CRYPTOVersion(blob, 4);\n  o.W = parse_CRYPTOVersion(blob, 4);\n  return o;\n}\n\nfunction parse_Primary(blob) {\n  /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */\n  var hdr = parse_TransformInfoHeader(blob);\n  /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */\n\n  hdr.ename = blob.read_shift(0, '8lpp4');\n  hdr.blksz = blob.read_shift(4);\n  hdr.cmode = blob.read_shift(4);\n  if (blob.read_shift(4) != 0x04) throw new Error(\"Bad !Primary record\");\n  return hdr;\n}\n/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */\n\n\nfunction parse_EncryptionHeader(blob, length\n/*:number*/\n) {\n  var tgt = blob.l + length;\n  var o = {};\n  o.Flags = blob.read_shift(4) & 0x3F;\n  blob.l += 4;\n  o.AlgID = blob.read_shift(4);\n  var valid = false;\n\n  switch (o.AlgID) {\n    case 0x660E:\n    case 0x660F:\n    case 0x6610:\n      valid = o.Flags == 0x24;\n      break;\n\n    case 0x6801:\n      valid = o.Flags == 0x04;\n      break;\n\n    case 0:\n      valid = o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24;\n      break;\n\n    default:\n      throw 'Unrecognized encryption algorithm: ' + o.AlgID;\n  }\n\n  if (!valid) throw new Error(\"Encryption Flags/AlgID mismatch\");\n  o.AlgIDHash = blob.read_shift(4);\n  o.KeySize = blob.read_shift(4);\n  o.ProviderType = blob.read_shift(4);\n  blob.l += 8;\n  o.CSPName = blob.read_shift(tgt - blob.l >> 1, 'utf16le');\n  blob.l = tgt;\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */\n\n\nfunction parse_EncryptionVerifier(blob, length\n/*:number*/\n) {\n  var o = {},\n      tgt = blob.l + length;\n  blob.l += 4; // SaltSize must be 0x10\n\n  o.Salt = blob.slice(blob.l, blob.l + 16);\n  blob.l += 16;\n  o.Verifier = blob.slice(blob.l, blob.l + 16);\n  blob.l += 16;\n  /*var sz = */\n\n  blob.read_shift(4);\n  o.VerifierHash = blob.slice(blob.l, tgt);\n  blob.l = tgt;\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */\n\n\nfunction parse_EncryptionInfo(blob) {\n  var vers = parse_CRYPTOVersion(blob);\n\n  switch (vers.Minor) {\n    case 0x02:\n      return [vers.Minor, parse_EncInfoStd(blob, vers)];\n\n    case 0x03:\n      return [vers.Minor, parse_EncInfoExt(blob, vers)];\n\n    case 0x04:\n      return [vers.Minor, parse_EncInfoAgl(blob, vers)];\n  }\n\n  throw new Error(\"ECMA-376 Encrypted file unrecognized Version: \" + vers.Minor);\n}\n/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */\n\n\nfunction parse_EncInfoStd(blob\n/*::, vers*/\n) {\n  var flags = blob.read_shift(4);\n  if ((flags & 0x3F) != 0x24) throw new Error(\"EncryptionInfo mismatch\");\n  var sz = blob.read_shift(4); //var tgt = blob.l + sz;\n\n  var hdr = parse_EncryptionHeader(blob, sz);\n  var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);\n  return {\n    t: \"Std\",\n    h: hdr,\n    v: verifier\n  };\n}\n/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */\n\n\nfunction\n  /*::blob, vers*/\nparse_EncInfoExt() {\n  throw new Error(\"File is password-protected: ECMA-376 Extensible\");\n}\n/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */\n\n\nfunction parse_EncInfoAgl(blob\n/*::, vers*/\n) {\n  var KeyData = [\"saltSize\", \"blockSize\", \"keyBits\", \"hashSize\", \"cipherAlgorithm\", \"cipherChaining\", \"hashAlgorithm\", \"saltValue\"];\n  blob.l += 4;\n  var xml = blob.read_shift(blob.length - blob.l, 'utf8');\n  var o = {};\n  xml.replace(tagregex, function xml_agile(x) {\n    var y\n    /*:any*/\n    = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<?xml':\n        break;\n\n      case '<encryption':\n      case '</encryption>':\n        break;\n\n      case '<keyData':\n        KeyData.forEach(function (k) {\n          o[k] = y[k];\n        });\n        break;\n\n      case '<dataIntegrity':\n        o.encryptedHmacKey = y.encryptedHmacKey;\n        o.encryptedHmacValue = y.encryptedHmacValue;\n        break;\n\n      case '<keyEncryptors>':\n      case '<keyEncryptors':\n        o.encs = [];\n        break;\n\n      case '</keyEncryptors>':\n        break;\n\n      case '<keyEncryptor':\n        o.uri = y.uri;\n        break;\n\n      case '</keyEncryptor>':\n        break;\n\n      case '<encryptedKey':\n        o.encs.push(y);\n        break;\n\n      default:\n        throw y[0];\n    }\n  });\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */\n\n\nfunction parse_RC4CryptoHeader(blob, length\n/*:number*/\n) {\n  var o = {};\n  var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);\n  length -= 4;\n  if (vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);\n  if (vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);\n  o.Flags = blob.read_shift(4);\n  length -= 4;\n  var sz = blob.read_shift(4);\n  length -= 4;\n  o.EncryptionHeader = parse_EncryptionHeader(blob, sz);\n  length -= sz;\n  o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */\n\n\nfunction parse_RC4Header(blob\n/*::, length*/\n) {\n  var o = {};\n  var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);\n  if (vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;\n  o.Salt = blob.read_shift(16);\n  o.EncryptedVerifier = blob.read_shift(16);\n  o.EncryptedVerifierHash = blob.read_shift(16);\n  return o;\n}\n/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */\n\n\nfunction crypto_CreatePasswordVerifier_Method1(Password\n/*:string*/\n) {\n  var Verifier = 0x0000,\n      PasswordArray;\n\n  var PasswordDecoded = _JS2ANSI(Password);\n\n  var len = PasswordDecoded.length + 1,\n      i,\n      PasswordByte;\n  var Intermediate1, Intermediate2, Intermediate3;\n  PasswordArray = new_raw_buf(len);\n  PasswordArray[0] = PasswordDecoded.length;\n\n  for (i = 1; i != len; ++i) {\n    PasswordArray[i] = PasswordDecoded[i - 1];\n  }\n\n  for (i = len - 1; i >= 0; --i) {\n    PasswordByte = PasswordArray[i];\n    Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;\n    Intermediate2 = Verifier << 1 & 0x7FFF;\n    Intermediate3 = Intermediate1 | Intermediate2;\n    Verifier = Intermediate3 ^ PasswordByte;\n  }\n\n  return Verifier ^ 0xCE4B;\n}\n/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */\n\n\nvar crypto_CreateXorArray_Method1 = /*#__PURE__*/function () {\n  var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];\n  var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];\n  var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];\n\n  var Ror = function Ror(Byte) {\n    return (Byte / 2 | Byte * 128) & 0xFF;\n  };\n\n  var XorRor = function XorRor(byte1, byte2) {\n    return Ror(byte1 ^ byte2);\n  };\n\n  var CreateXorKey_Method1 = function CreateXorKey_Method1(Password) {\n    var XorKey = InitialCode[Password.length - 1];\n    var CurrentElement = 0x68;\n\n    for (var i = Password.length - 1; i >= 0; --i) {\n      var Char = Password[i];\n\n      for (var j = 0; j != 7; ++j) {\n        if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n        Char *= 2;\n        --CurrentElement;\n      }\n    }\n\n    return XorKey;\n  };\n\n  return function (password\n  /*:string*/\n  ) {\n    var Password = _JS2ANSI(password);\n\n    var XorKey = CreateXorKey_Method1(Password);\n    var Index = Password.length;\n    var ObfuscationArray = new_raw_buf(16);\n\n    for (var i = 0; i != 16; ++i) {\n      ObfuscationArray[i] = 0x00;\n    }\n\n    var Temp, PasswordLastChar, PadIndex;\n\n    if ((Index & 1) === 1) {\n      Temp = XorKey >> 8;\n      ObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n      --Index;\n      Temp = XorKey & 0xFF;\n      PasswordLastChar = Password[Password.length - 1];\n      ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n    }\n\n    while (Index > 0) {\n      --Index;\n      Temp = XorKey >> 8;\n      ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n      --Index;\n      Temp = XorKey & 0xFF;\n      ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n    }\n\n    Index = 15;\n    PadIndex = 15 - Password.length;\n\n    while (PadIndex > 0) {\n      Temp = XorKey >> 8;\n      ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n      --Index;\n      --PadIndex;\n      Temp = XorKey & 0xFF;\n      ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n      --Index;\n      --PadIndex;\n    }\n\n    return ObfuscationArray;\n  };\n}();\n/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */\n\n\nvar crypto_DecryptData_Method1 = function crypto_DecryptData_Method1(password\n/*:string*/\n, Data, XorArrayIndex, XorArray, O) {\n  /* If XorArray is set, use it; if O is not set, make changes in-place */\n  if (!O) O = Data;\n  if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n  var Index, Value;\n\n  for (Index = 0; Index != Data.length; ++Index) {\n    Value = Data[Index];\n    Value ^= XorArray[XorArrayIndex];\n    Value = (Value >> 5 | Value << 3) & 0xFF;\n    O[Index] = Value;\n    ++XorArrayIndex;\n  }\n\n  return [O, XorArrayIndex, XorArray];\n};\n\nvar crypto_MakeXorDecryptor = function crypto_MakeXorDecryptor(password\n/*:string*/\n) {\n  var XorArrayIndex = 0,\n      XorArray = crypto_CreateXorArray_Method1(password);\n  return function (Data) {\n    var O = crypto_DecryptData_Method1(\"\", Data, XorArrayIndex, XorArray);\n    XorArrayIndex = O[1];\n    return O[0];\n  };\n};\n/* 2.5.343 */\n\n\nfunction parse_XORObfuscation(blob, length, opts, out) {\n  var o = {\n    key: parseuint16(blob),\n    verificationBytes: parseuint16(blob)\n  }\n  /*:any*/\n  ;\n  if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n  out.valid = o.verificationBytes === o.verifier;\n  if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);\n  return o;\n}\n/* 2.4.117 */\n\n\nfunction parse_FilePassHeader(blob, length\n/*:number*/\n, oo) {\n  var o = oo || {};\n  o.Info = blob.read_shift(2);\n  blob.l -= 2;\n  if (o.Info === 1) o.Data = parse_RC4Header(blob, length);else o.Data = parse_RC4CryptoHeader(blob, length);\n  return o;\n}\n\nfunction parse_FilePass(blob, length\n/*:number*/\n, opts) {\n  var o = {\n    Type: opts.biff >= 8 ? blob.read_shift(2) : 0\n  }\n  /*:any*/\n  ;\n  /* wEncryptionType */\n\n  if (o.Type) parse_FilePassHeader(blob, length - 2, o);else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);\n  return o;\n}\n\nfunction rtf_to_sheet(d, opts) {\n  switch (opts.type) {\n    case \"base64\":\n      return rtf_to_sheet_str(Base64_decode(d), opts);\n\n    case \"binary\":\n      return rtf_to_sheet_str(d, opts);\n\n    case \"buffer\":\n      return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString(\"binary\") : a2s(d), opts);\n\n    case \"array\":\n      return rtf_to_sheet_str(cc2str(d), opts);\n  }\n\n  throw new Error(\"Unrecognized type \" + opts.type);\n}\n\nfunction rtf_to_sheet_str(str, opts) {\n  var o = opts || {};\n  var ws = o.dense ? [] : {};\n  var rows = str.match(/\\\\trowd[\\s\\S]*?\\\\row\\b/g);\n  if (!rows) throw new Error(\"RTF missing table\");\n  var range = {\n    s: {\n      c: 0,\n      r: 0\n    },\n    e: {\n      c: 0,\n      r: rows.length - 1\n    }\n  };\n  rows.forEach(function (rowtf, R) {\n    if (Array.isArray(ws)) ws[R] = [];\n    var rtfre = /\\\\[\\w\\-]+\\b/g;\n    var last_index = 0;\n    var res;\n    var C = -1;\n    var payload = [];\n\n    while ((res = rtfre.exec(rowtf)) != null) {\n      var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);\n      if (data.charCodeAt(0) == 32) data = data.slice(1);\n      if (data.length) payload.push(data);\n\n      switch (res[0]) {\n        case \"\\\\cell\":\n          ++C;\n\n          if (payload.length) {\n            var cell = {\n              v: payload.join(\"\"),\n              t: \"s\"\n            };\n\n            if (cell.v == \"TRUE\" || cell.v == \"FALSE\") {\n              cell.v = cell.v == \"TRUE\";\n              cell.t = \"b\";\n            } else if (!isNaN(fuzzynum(cell.v))) {\n              cell.t = \"n\";\n              if (o.cellText !== false) cell.w = cell.v;\n              cell.v = fuzzynum(cell.v);\n            }\n\n            if (Array.isArray(ws)) ws[R][C] = cell;else ws[encode_cell({\n              r: R,\n              c: C\n            })] = cell;\n          }\n\n          payload = [];\n          break;\n\n        case \"\\\\par\":\n          payload.push(\"\\n\");\n          break;\n      }\n\n      last_index = rtfre.lastIndex;\n    }\n\n    if (C > range.e.c) range.e.c = C;\n  });\n  ws[\"!ref\"] = encode_range(range);\n  return ws;\n}\n\nfunction rtf_to_workbook(d, opts) {\n  var wb = sheet_to_workbook(rtf_to_sheet(d, opts), opts);\n  wb.bookType = \"rtf\";\n  return wb;\n}\n\nfunction sheet_to_rtf(ws, opts) {\n  var o = [\"{\\\\rtf1\\\\ansi\"];\n  if (!ws[\"!ref\"]) return o[0] + \"}\";\n  var r = safe_decode_range(ws[\"!ref\"]),\n      cell;\n  var dense = Array.isArray(ws);\n\n  for (var R = r.s.r; R <= r.e.r; ++R) {\n    o.push(\"\\\\trowd\\\\trautofit1\");\n\n    for (var C = r.s.c; C <= r.e.c; ++C) {\n      o.push(\"\\\\cellx\" + (C + 1));\n    }\n\n    o.push(\"\\\\pard\\\\intbl\");\n\n    for (C = r.s.c; C <= r.e.c; ++C) {\n      var coord = encode_cell({\n        r: R,\n        c: C\n      });\n      cell = dense ? (ws[R] || [])[C] : ws[coord];\n\n      if (!cell || cell.v == null && (!cell.f || cell.F)) {\n        o.push(\" \\\\cell\");\n        continue;\n      }\n\n      o.push(\" \" + (cell.w || (format_cell(cell), cell.w) || \"\").replace(/[\\r\\n]/g, \"\\\\par \"));\n      o.push(\"\\\\cell\");\n    }\n\n    o.push(\"\\\\pard\\\\intbl\\\\row\");\n  }\n\n  return o.join(\"\") + \"}\";\n}\n\nfunction hex2RGB(h) {\n  var o = h.slice(h[0] === \"#\" ? 1 : 0).slice(0, 6);\n  return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];\n}\n\nfunction rgb2Hex(rgb) {\n  for (var i = 0, o = 1; i != 3; ++i) {\n    o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);\n  }\n\n  return o.toString(16).toUpperCase().slice(1);\n}\n\nfunction rgb2HSL(rgb) {\n  var R = rgb[0] / 255,\n      G = rgb[1] / 255,\n      B = rgb[2] / 255;\n  var M = Math.max(R, G, B),\n      m = Math.min(R, G, B),\n      C = M - m;\n  if (C === 0) return [0, 0, R];\n  var H6 = 0,\n      S = 0,\n      L2 = M + m;\n  S = C / (L2 > 1 ? 2 - L2 : L2);\n\n  switch (M) {\n    case R:\n      H6 = ((G - B) / C + 6) % 6;\n      break;\n\n    case G:\n      H6 = (B - R) / C + 2;\n      break;\n\n    case B:\n      H6 = (R - G) / C + 4;\n      break;\n  }\n\n  return [H6 / 6, S, L2 / 2];\n}\n\nfunction hsl2RGB(hsl) {\n  var H = hsl[0],\n      S = hsl[1],\n      L = hsl[2];\n  var C = S * 2 * (L < 0.5 ? L : 1 - L),\n      m = L - C / 2;\n  var rgb = [m, m, m],\n      h6 = 6 * H;\n  var X;\n  if (S !== 0) switch (h6 | 0) {\n    case 0:\n    case 6:\n      X = C * h6;\n      rgb[0] += C;\n      rgb[1] += X;\n      break;\n\n    case 1:\n      X = C * (2 - h6);\n      rgb[0] += X;\n      rgb[1] += C;\n      break;\n\n    case 2:\n      X = C * (h6 - 2);\n      rgb[1] += C;\n      rgb[2] += X;\n      break;\n\n    case 3:\n      X = C * (4 - h6);\n      rgb[1] += X;\n      rgb[2] += C;\n      break;\n\n    case 4:\n      X = C * (h6 - 4);\n      rgb[2] += C;\n      rgb[0] += X;\n      break;\n\n    case 5:\n      X = C * (6 - h6);\n      rgb[2] += X;\n      rgb[0] += C;\n      break;\n  }\n\n  for (var i = 0; i != 3; ++i) {\n    rgb[i] = Math.round(rgb[i] * 255);\n  }\n\n  return rgb;\n}\n/* 18.8.3 bgColor tint algorithm */\n\n\nfunction rgb_tint(hex, tint) {\n  if (tint === 0) return hex;\n  var hsl = rgb2HSL(hex2RGB(hex));\n  if (tint < 0) hsl[2] = hsl[2] * (1 + tint);else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n  return rgb2Hex(hsl2RGB(hsl));\n}\n/* 18.3.1.13 width calculations */\n\n/* [MS-OI29500] 2.1.595 Column Width & Formatting */\n\n\nvar DEF_MDW = 6,\n    MAX_MDW = 15,\n    MIN_MDW = 1,\n    MDW = DEF_MDW;\n\nfunction width2px(width) {\n  return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);\n}\n\nfunction px2char(px) {\n  return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;\n}\n\nfunction char2width(chr) {\n  return Math.round((chr * MDW + 5) / MDW * 256) / 256;\n} //function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }\n//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }\n\n\nfunction cycle_width(collw) {\n  return char2width(px2char(width2px(collw)));\n}\n/* XLSX/XLSB/XLS specify width in units of MDW */\n\n\nfunction find_mdw_colw(collw) {\n  var delta = Math.abs(collw - cycle_width(collw)),\n      _MDW = MDW;\n  if (delta > 0.005) for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) {\n    if (Math.abs(collw - cycle_width(collw)) <= delta) {\n      delta = Math.abs(collw - cycle_width(collw));\n      _MDW = MDW;\n    }\n  }\n  MDW = _MDW;\n}\n/* XLML specifies width in terms of pixels */\n\n/*function find_mdw_wpx(wpx) {\n\tvar delta = Infinity, guess = 0, _MDW = MIN_MDW;\n\tfor(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {\n\t\tguess = char2width_(px2char_(wpx))*256;\n\t\tguess = (guess) % 1;\n\t\tif(guess > 0.5) guess--;\n\t\tif(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }\n\t}\n\tMDW = _MDW;\n}*/\n\n\nfunction process_col(coll\n/*:ColInfo*/\n) {\n  if (coll.width) {\n    coll.wpx = width2px(coll.width);\n    coll.wch = px2char(coll.wpx);\n    coll.MDW = MDW;\n  } else if (coll.wpx) {\n    coll.wch = px2char(coll.wpx);\n    coll.width = char2width(coll.wch);\n    coll.MDW = MDW;\n  } else if (typeof coll.wch == 'number') {\n    coll.width = char2width(coll.wch);\n    coll.wpx = width2px(coll.width);\n    coll.MDW = MDW;\n  }\n\n  if (coll.customWidth) delete coll.customWidth;\n}\n\nvar DEF_PPI = 96,\n    PPI = DEF_PPI;\n\nfunction px2pt(px) {\n  return px * 96 / PPI;\n}\n\nfunction pt2px(pt) {\n  return pt * PPI / 96;\n}\n/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */\n\n\nvar XLMLPatternTypeMap = {\n  \"None\": \"none\",\n  \"Solid\": \"solid\",\n  \"Gray50\": \"mediumGray\",\n  \"Gray75\": \"darkGray\",\n  \"Gray25\": \"lightGray\",\n  \"HorzStripe\": \"darkHorizontal\",\n  \"VertStripe\": \"darkVertical\",\n  \"ReverseDiagStripe\": \"darkDown\",\n  \"DiagStripe\": \"darkUp\",\n  \"DiagCross\": \"darkGrid\",\n  \"ThickDiagCross\": \"darkTrellis\",\n  \"ThinHorzStripe\": \"lightHorizontal\",\n  \"ThinVertStripe\": \"lightVertical\",\n  \"ThinReverseDiagStripe\": \"lightDown\",\n  \"ThinHorzCross\": \"lightGrid\"\n};\n/* 18.8.5 borders CT_Borders */\n\nfunction parse_borders(t, styles, themes, opts) {\n  styles.Borders = [];\n  var border = {};\n  var pass = false;\n  (t[0].match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<borders':\n      case '<borders>':\n      case '</borders>':\n        break;\n\n      /* 18.8.4 border CT_Border */\n\n      case '<border':\n      case '<border>':\n      case '<border/>':\n        border =\n        /*::(*/\n        {}\n        /*:: :any)*/\n        ;\n        if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);\n        if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);\n        styles.Borders.push(border);\n        break;\n\n      case '</border>':\n        break;\n\n      /* note: not in spec, appears to be CT_BorderPr */\n\n      case '<left/>':\n        break;\n\n      case '<left':\n      case '<left>':\n        break;\n\n      case '</left>':\n        break;\n\n      /* note: not in spec, appears to be CT_BorderPr */\n\n      case '<right/>':\n        break;\n\n      case '<right':\n      case '<right>':\n        break;\n\n      case '</right>':\n        break;\n\n      /* 18.8.43 top CT_BorderPr */\n\n      case '<top/>':\n        break;\n\n      case '<top':\n      case '<top>':\n        break;\n\n      case '</top>':\n        break;\n\n      /* 18.8.6 bottom CT_BorderPr */\n\n      case '<bottom/>':\n        break;\n\n      case '<bottom':\n      case '<bottom>':\n        break;\n\n      case '</bottom>':\n        break;\n\n      /* 18.8.13 diagonal CT_BorderPr */\n\n      case '<diagonal':\n      case '<diagonal>':\n      case '<diagonal/>':\n        break;\n\n      case '</diagonal>':\n        break;\n\n      /* 18.8.25 horizontal CT_BorderPr */\n\n      case '<horizontal':\n      case '<horizontal>':\n      case '<horizontal/>':\n        break;\n\n      case '</horizontal>':\n        break;\n\n      /* 18.8.44 vertical CT_BorderPr */\n\n      case '<vertical':\n      case '<vertical>':\n      case '<vertical/>':\n        break;\n\n      case '</vertical>':\n        break;\n\n      /* 18.8.37 start CT_BorderPr */\n\n      case '<start':\n      case '<start>':\n      case '<start/>':\n        break;\n\n      case '</start>':\n        break;\n\n      /* 18.8.16 end CT_BorderPr */\n\n      case '<end':\n      case '<end>':\n      case '<end/>':\n        break;\n\n      case '</end>':\n        break;\n\n      /* 18.8.? color CT_Color */\n\n      case '<color':\n      case '<color>':\n        break;\n\n      case '<color/>':\n      case '</color>':\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n        break;\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (opts && opts.WTF) {\n          if (!pass) throw new Error('unrecognized ' + y[0] + ' in borders');\n        }\n\n    }\n  });\n}\n/* 18.8.21 fills CT_Fills */\n\n\nfunction parse_fills(t, styles, themes, opts) {\n  styles.Fills = [];\n  var fill = {};\n  var pass = false;\n  (t[0].match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<fills':\n      case '<fills>':\n      case '</fills>':\n        break;\n\n      /* 18.8.20 fill CT_Fill */\n\n      case '<fill>':\n      case '<fill':\n      case '<fill/>':\n        fill = {};\n        styles.Fills.push(fill);\n        break;\n\n      case '</fill>':\n        break;\n\n      /* 18.8.24 gradientFill CT_GradientFill */\n\n      case '<gradientFill>':\n        break;\n\n      case '<gradientFill':\n      case '</gradientFill>':\n        styles.Fills.push(fill);\n        fill = {};\n        break;\n\n      /* 18.8.32 patternFill CT_PatternFill */\n\n      case '<patternFill':\n      case '<patternFill>':\n        if (y.patternType) fill.patternType = y.patternType;\n        break;\n\n      case '<patternFill/>':\n      case '</patternFill>':\n        break;\n\n      /* 18.8.3 bgColor CT_Color */\n\n      case '<bgColor':\n        if (!fill.bgColor) fill.bgColor = {};\n        if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n        if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n        if (y.tint) fill.bgColor.tint = parseFloat(y.tint);\n        /* Excel uses ARGB strings */\n\n        if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);\n        break;\n\n      case '<bgColor/>':\n      case '</bgColor>':\n        break;\n\n      /* 18.8.19 fgColor CT_Color */\n\n      case '<fgColor':\n        if (!fill.fgColor) fill.fgColor = {};\n        if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n        if (y.tint) fill.fgColor.tint = parseFloat(y.tint);\n        /* Excel uses ARGB strings */\n\n        if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);\n        break;\n\n      case '<fgColor/>':\n      case '</fgColor>':\n        break;\n\n      /* 18.8.38 stop CT_GradientStop */\n\n      case '<stop':\n      case '<stop/>':\n        break;\n\n      case '</stop>':\n        break;\n\n      /* 18.8.? color CT_Color */\n\n      case '<color':\n      case '<color/>':\n        break;\n\n      case '</color>':\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n        break;\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (opts && opts.WTF) {\n          if (!pass) throw new Error('unrecognized ' + y[0] + ' in fills');\n        }\n\n    }\n  });\n}\n/* 18.8.23 fonts CT_Fonts */\n\n\nfunction parse_fonts(t, styles, themes, opts) {\n  styles.Fonts = [];\n  var font = {};\n  var pass = false;\n  (t[0].match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<fonts':\n      case '<fonts>':\n      case '</fonts>':\n        break;\n\n      /* 18.8.22 font CT_Font */\n\n      case '<font':\n      case '<font>':\n        break;\n\n      case '</font>':\n      case '<font/>':\n        styles.Fonts.push(font);\n        font = {};\n        break;\n\n      /* 18.8.29 name CT_FontName */\n\n      case '<name':\n        if (y.val) font.name = utf8read(y.val);\n        break;\n\n      case '<name/>':\n      case '</name>':\n        break;\n\n      /* 18.8.2  b CT_BooleanProperty */\n\n      case '<b':\n        font.bold = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<b/>':\n        font.bold = 1;\n        break;\n\n      /* 18.8.26 i CT_BooleanProperty */\n\n      case '<i':\n        font.italic = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<i/>':\n        font.italic = 1;\n        break;\n\n      /* 18.4.13 u CT_UnderlineProperty */\n\n      case '<u':\n        switch (y.val) {\n          case \"none\":\n            font.underline = 0x00;\n            break;\n\n          case \"single\":\n            font.underline = 0x01;\n            break;\n\n          case \"double\":\n            font.underline = 0x02;\n            break;\n\n          case \"singleAccounting\":\n            font.underline = 0x21;\n            break;\n\n          case \"doubleAccounting\":\n            font.underline = 0x22;\n            break;\n        }\n\n        break;\n\n      case '<u/>':\n        font.underline = 1;\n        break;\n\n      /* 18.4.10 strike CT_BooleanProperty */\n\n      case '<strike':\n        font.strike = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<strike/>':\n        font.strike = 1;\n        break;\n\n      /* 18.4.2  outline CT_BooleanProperty */\n\n      case '<outline':\n        font.outline = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<outline/>':\n        font.outline = 1;\n        break;\n\n      /* 18.8.36 shadow CT_BooleanProperty */\n\n      case '<shadow':\n        font.shadow = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<shadow/>':\n        font.shadow = 1;\n        break;\n\n      /* 18.8.12 condense CT_BooleanProperty */\n\n      case '<condense':\n        font.condense = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<condense/>':\n        font.condense = 1;\n        break;\n\n      /* 18.8.17 extend CT_BooleanProperty */\n\n      case '<extend':\n        font.extend = y.val ? parsexmlbool(y.val) : 1;\n        break;\n\n      case '<extend/>':\n        font.extend = 1;\n        break;\n\n      /* 18.4.11 sz CT_FontSize */\n\n      case '<sz':\n        if (y.val) font.sz = +y.val;\n        break;\n\n      case '<sz/>':\n      case '</sz>':\n        break;\n\n      /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */\n\n      case '<vertAlign':\n        if (y.val) font.vertAlign = y.val;\n        break;\n\n      case '<vertAlign/>':\n      case '</vertAlign>':\n        break;\n\n      /* 18.8.18 family CT_FontFamily */\n\n      case '<family':\n        if (y.val) font.family = parseInt(y.val, 10);\n        break;\n\n      case '<family/>':\n      case '</family>':\n        break;\n\n      /* 18.8.35 scheme CT_FontScheme */\n\n      case '<scheme':\n        if (y.val) font.scheme = y.val;\n        break;\n\n      case '<scheme/>':\n      case '</scheme>':\n        break;\n\n      /* 18.4.1 charset CT_IntProperty */\n\n      case '<charset':\n        if (y.val == '1') break;\n        y.codepage = CS2CP[parseInt(y.val, 10)];\n        break;\n\n      /* 18.?.? color CT_Color */\n\n      case '<color':\n        if (!font.color) font.color = {};\n        if (y.auto) font.color.auto = parsexmlbool(y.auto);\n        if (y.rgb) font.color.rgb = y.rgb.slice(-6);else if (y.indexed) {\n          font.color.index = parseInt(y.indexed, 10);\n          var icv = XLSIcv[font.color.index];\n          if (font.color.index == 81) icv = XLSIcv[1];\n          if (!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid\n\n          font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);\n        } else if (y.theme) {\n          font.color.theme = parseInt(y.theme, 10);\n          if (y.tint) font.color.tint = parseFloat(y.tint);\n\n          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n            font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n          }\n        }\n        break;\n\n      case '<color/>':\n      case '</color>':\n        break;\n\n      /* note: sometimes mc:AlternateContent appears bare */\n\n      case '<AlternateContent':\n        pass = true;\n        break;\n\n      case '</AlternateContent>':\n        pass = false;\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n        break;\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (opts && opts.WTF) {\n          if (!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');\n        }\n\n    }\n  });\n}\n/* 18.8.31 numFmts CT_NumFmts */\n\n\nfunction parse_numFmts(t, styles, opts) {\n  styles.NumberFmt = [];\n  var k\n  /*Array<number>*/\n  = keys(table_fmt)\n  /*:any*/\n  ;\n\n  for (var i = 0; i < k.length; ++i) {\n    styles.NumberFmt[k[i]] = table_fmt[k[i]];\n  }\n\n  var m = t[0].match(tagregex);\n  if (!m) return;\n\n  for (i = 0; i < m.length; ++i) {\n    var y = parsexmltag(m[i]);\n\n    switch (strip_ns(y[0])) {\n      case '<numFmts':\n      case '</numFmts>':\n      case '<numFmts/>':\n      case '<numFmts>':\n        break;\n\n      case '<numFmt':\n        {\n          var f = unescapexml(utf8read(y.formatCode)),\n              j = parseInt(y.numFmtId, 10);\n          styles.NumberFmt[j] = f;\n\n          if (j > 0) {\n            if (j > 0x188) {\n              for (j = 0x188; j > 0x3c; --j) {\n                if (styles.NumberFmt[j] == null) break;\n              }\n\n              styles.NumberFmt[j] = f;\n            }\n\n            SSF__load(f, j);\n          }\n        }\n        break;\n\n      case '</numFmt>':\n        break;\n\n      default:\n        if (opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');\n    }\n  }\n}\n\nfunction write_numFmts(NF\n/*:{[n:number|string]:string}*/\n\n/*::, opts*/\n) {\n  var o = [\"<numFmts>\"];\n  [[5, 8], [23, 26], [41, 44], [\n  /*63*/\n  50,\n  /*66],[164,*/\n  392]].forEach(function (r) {\n    for (var i = r[0]; i <= r[1]; ++i) {\n      if (NF[i] != null) o[o.length] = writextag('numFmt', null, {\n        numFmtId: i,\n        formatCode: escapexml(NF[i])\n      });\n    }\n  });\n  if (o.length === 1) return \"\";\n  o[o.length] = \"</numFmts>\";\n  o[0] = writextag('numFmts', null, {\n    count: o.length - 2\n  }).replace(\"/>\", \">\");\n  return o.join(\"\");\n}\n/* 18.8.10 cellXfs CT_CellXfs */\n\n\nvar cellXF_uint = [\"numFmtId\", \"fillId\", \"fontId\", \"borderId\", \"xfId\"];\nvar cellXF_bool = [\"applyAlignment\", \"applyBorder\", \"applyFill\", \"applyFont\", \"applyNumberFormat\", \"applyProtection\", \"pivotButton\", \"quotePrefix\"];\n\nfunction parse_cellXfs(t, styles, opts) {\n  styles.CellXf = [];\n  var xf;\n  var pass = false;\n  (t[0].match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x),\n        i = 0;\n\n    switch (strip_ns(y[0])) {\n      case '<cellXfs':\n      case '<cellXfs>':\n      case '<cellXfs/>':\n      case '</cellXfs>':\n        break;\n\n      /* 18.8.45 xf CT_Xf */\n\n      case '<xf':\n      case '<xf/>':\n        xf = y;\n        delete xf[0];\n\n        for (i = 0; i < cellXF_uint.length; ++i) {\n          if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);\n        }\n\n        for (i = 0; i < cellXF_bool.length; ++i) {\n          if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);\n        }\n\n        if (styles.NumberFmt && xf.numFmtId > 0x188) {\n          for (i = 0x188; i > 0x3c; --i) {\n            if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {\n              xf.numFmtId = i;\n              break;\n            }\n          }\n        }\n\n        styles.CellXf.push(xf);\n        break;\n\n      case '</xf>':\n        break;\n\n      /* 18.8.1 alignment CT_CellAlignment */\n\n      case '<alignment':\n      case '<alignment/>':\n        var alignment = {};\n        if (y.vertical) alignment.vertical = y.vertical;\n        if (y.horizontal) alignment.horizontal = y.horizontal;\n        if (y.textRotation != null) alignment.textRotation = y.textRotation;\n        if (y.indent) alignment.indent = y.indent;\n        if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);\n        xf.alignment = alignment;\n        break;\n\n      case '</alignment>':\n        break;\n\n      /* 18.8.33 protection CT_CellProtection */\n\n      case '<protection':\n        break;\n\n      case '</protection>':\n      case '<protection/>':\n        break;\n\n      /* note: sometimes mc:AlternateContent appears bare */\n\n      case '<AlternateContent':\n        pass = true;\n        break;\n\n      case '</AlternateContent>':\n        pass = false;\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n        break;\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (opts && opts.WTF) {\n          if (!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');\n        }\n\n    }\n  });\n}\n\nfunction write_cellXfs(cellXfs)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n  o[o.length] = writextag('cellXfs', null);\n  cellXfs.forEach(function (c) {\n    o[o.length] = writextag('xf', null, c);\n  });\n  o[o.length] = \"</cellXfs>\";\n  if (o.length === 2) return \"\";\n  o[0] = writextag('cellXfs', null, {\n    count: o.length - 2\n  }).replace(\"/>\", \">\");\n  return o.join(\"\");\n}\n/* 18.8 Styles CT_Stylesheet*/\n\n\nvar parse_sty_xml = /*#__PURE__*/function make_pstyx() {\n  var numFmtRegex = /<(?:\\w+:)?numFmts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?numFmts>/;\n  var cellXfRegex = /<(?:\\w+:)?cellXfs([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?cellXfs>/;\n  var fillsRegex = /<(?:\\w+:)?fills([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fills>/;\n  var fontsRegex = /<(?:\\w+:)?fonts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fonts>/;\n  var bordersRegex = /<(?:\\w+:)?borders([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?borders>/;\n  return function parse_sty_xml(data, themes, opts) {\n    var styles = {};\n    if (!data) return styles;\n    data = data.replace(/<!--([\\s\\S]*?)-->/mg, \"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm, \"\");\n    /* 18.8.39 styleSheet CT_Stylesheet */\n\n    var t;\n    /* 18.8.31 numFmts CT_NumFmts ? */\n\n    if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);\n    /* 18.8.23 fonts CT_Fonts ? */\n\n    if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);\n    /* 18.8.21 fills CT_Fills ? */\n\n    if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);\n    /* 18.8.5  borders CT_Borders ? */\n\n    if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);\n    /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */\n\n    /* 18.8.8  cellStyles CT_CellStyles ? */\n\n    /* 18.8.10 cellXfs CT_CellXfs ? */\n\n    if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);\n    /* 18.8.15 dxfs CT_Dxfs ? */\n\n    /* 18.8.42 tableStyles CT_TableStyles ? */\n\n    /* 18.8.11 colors CT_Colors ? */\n\n    /* 18.2.10 extLst CT_ExtensionList ? */\n\n    return styles;\n  };\n}();\n\nfunction write_sty_xml(wb\n/*:Workbook*/\n, opts)\n/*:string*/\n{\n  var o = [XML_HEADER, writextag('styleSheet', null, {\n    'xmlns': XMLNS_main[0],\n    'xmlns:vt': XMLNS.vt\n  })],\n      w;\n  if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n  o[o.length] = '<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>';\n  o[o.length] = '<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>';\n  o[o.length] = '<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';\n  o[o.length] = '<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\n  if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;\n  o[o.length] = '<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>';\n  o[o.length] = '<dxfs count=\"0\"/>';\n  o[o.length] = '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>';\n\n  if (o.length > 2) {\n    o[o.length] = '</styleSheet>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.657 BrtFmt */\n\n\nfunction parse_BrtFmt(data, length\n/*:number*/\n) {\n  var numFmtId = data.read_shift(2);\n  var stFmtCode = parse_XLWideString(data, length - 2);\n  return [numFmtId, stFmtCode];\n}\n\nfunction write_BrtFmt(i\n/*:number*/\n, f\n/*:string*/\n, o) {\n  if (!o) o = new_buf(6 + 4 * f.length);\n  o.write_shift(2, i);\n  write_XLWideString(f, o);\n  var out = o.length > o.l ? o.slice(0, o.l) : o;\n  if (o.l == null) o.l = o.length;\n  return out;\n}\n/* [MS-XLSB] 2.4.659 BrtFont TODO */\n\n\nfunction parse_BrtFont(data, length\n/*:number*/\n, opts) {\n  var out = {}\n  /*:any*/\n  ;\n  out.sz = data.read_shift(2) / 20;\n  var grbit = parse_FontFlags(data, 2, opts);\n  if (grbit.fItalic) out.italic = 1;\n  if (grbit.fCondense) out.condense = 1;\n  if (grbit.fExtend) out.extend = 1;\n  if (grbit.fShadow) out.shadow = 1;\n  if (grbit.fOutline) out.outline = 1;\n  if (grbit.fStrikeout) out.strike = 1;\n  var bls = data.read_shift(2);\n  if (bls === 0x02BC) out.bold = 1;\n\n  switch (data.read_shift(2)) {\n    /* case 0: out.vertAlign = \"baseline\"; break; */\n    case 1:\n      out.vertAlign = \"superscript\";\n      break;\n\n    case 2:\n      out.vertAlign = \"subscript\";\n      break;\n  }\n\n  var underline = data.read_shift(1);\n  if (underline != 0) out.underline = underline;\n  var family = data.read_shift(1);\n  if (family > 0) out.family = family;\n  var bCharSet = data.read_shift(1);\n  if (bCharSet > 0) out.charset = bCharSet;\n  data.l++;\n  out.color = parse_BrtColor(data, 8);\n\n  switch (data.read_shift(1)) {\n    /* case 0: out.scheme = \"none\": break; */\n    case 1:\n      out.scheme = \"major\";\n      break;\n\n    case 2:\n      out.scheme = \"minor\";\n      break;\n  }\n\n  out.name = parse_XLWideString(data, length - 21);\n  return out;\n}\n\nfunction write_BrtFont(font\n/*:any*/\n, o) {\n  if (!o) o = new_buf(25 + 4 * 32);\n  o.write_shift(2, font.sz * 20);\n  write_FontFlags(font, o);\n  o.write_shift(2, font.bold ? 0x02BC : 0x0190);\n  var sss = 0;\n  if (font.vertAlign == \"superscript\") sss = 1;else if (font.vertAlign == \"subscript\") sss = 2;\n  o.write_shift(2, sss);\n  o.write_shift(1, font.underline || 0);\n  o.write_shift(1, font.family || 0);\n  o.write_shift(1, font.charset || 0);\n  o.write_shift(1, 0);\n  write_BrtColor(font.color, o);\n  var scheme = 0;\n  if (font.scheme == \"major\") scheme = 1;\n  if (font.scheme == \"minor\") scheme = 2;\n  o.write_shift(1, scheme);\n  write_XLWideString(font.name, o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.650 BrtFill */\n\n\nvar XLSBFillPTNames = [\"none\", \"solid\", \"mediumGray\", \"darkGray\", \"lightGray\", \"darkHorizontal\", \"darkVertical\", \"darkDown\", \"darkUp\", \"darkGrid\", \"darkTrellis\", \"lightHorizontal\", \"lightVertical\", \"lightDown\", \"lightUp\", \"lightGrid\", \"lightTrellis\", \"gray125\", \"gray0625\"];\nvar rev_XLSBFillPTNames\n/*:EvertNumType*/\n;\n/* TODO: gradient fill representation */\n\nvar parse_BrtFill = parsenoop;\n\nfunction write_BrtFill(fill, o) {\n  if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1);\n  if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames)\n  /*:any*/\n  ;\n  var fls\n  /*:number*/\n  = rev_XLSBFillPTNames[fill.patternType];\n  if (fls == null) fls = 0x28;\n  o.write_shift(4, fls);\n  var j = 0;\n\n  if (fls != 0x28) {\n    /* TODO: custom FG Color */\n    write_BrtColor({\n      auto: 1\n    }, o);\n    /* TODO: custom BG Color */\n\n    write_BrtColor({\n      auto: 1\n    }, o);\n\n    for (; j < 12; ++j) {\n      o.write_shift(4, 0);\n    }\n  } else {\n    for (; j < 4; ++j) {\n      o.write_shift(4, 0);\n    }\n\n    for (; j < 12; ++j) {\n      o.write_shift(4, 0);\n    }\n    /* TODO */\n\n    /* iGradientType */\n\n    /* xnumDegree */\n\n    /* xnumFillToLeft */\n\n    /* xnumFillToRight */\n\n    /* xnumFillToTop */\n\n    /* xnumFillToBottom */\n\n    /* cNumStop */\n\n    /* xfillGradientStop */\n\n  }\n\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.824 BrtXF */\n\n\nfunction parse_BrtXF(data, length\n/*:number*/\n) {\n  var tgt = data.l + length;\n  var ixfeParent = data.read_shift(2);\n  var ifmt = data.read_shift(2);\n  data.l = tgt;\n  return {\n    ixfe: ixfeParent,\n    numFmtId: ifmt\n  };\n}\n\nfunction write_BrtXF(data, ixfeP, o) {\n  if (!o) o = new_buf(16);\n  o.write_shift(2, ixfeP || 0);\n  o.write_shift(2, data.numFmtId || 0);\n  o.write_shift(2, 0);\n  /* iFont */\n\n  o.write_shift(2, 0);\n  /* iFill */\n\n  o.write_shift(2, 0);\n  /* ixBorder */\n\n  o.write_shift(1, 0);\n  /* trot */\n\n  o.write_shift(1, 0);\n  /* indent */\n\n  var flow = 0;\n  o.write_shift(1, flow);\n  /* flags */\n\n  o.write_shift(1, 0);\n  /* flags */\n\n  o.write_shift(1, 0);\n  /* xfGrbitAtr */\n\n  o.write_shift(1, 0);\n  return o;\n}\n/* [MS-XLSB] 2.5.4 Blxf TODO */\n\n\nfunction write_Blxf(data, o) {\n  if (!o) o = new_buf(10);\n  o.write_shift(1, 0);\n  /* dg */\n\n  o.write_shift(1, 0);\n  o.write_shift(4, 0);\n  /* color */\n\n  o.write_shift(4, 0);\n  /* color */\n\n  return o;\n}\n/* [MS-XLSB] 2.4.302 BrtBorder TODO */\n\n\nvar parse_BrtBorder = parsenoop;\n\nfunction write_BrtBorder(border, o) {\n  if (!o) o = new_buf(51);\n  o.write_shift(1, 0);\n  /* diagonal */\n\n  write_Blxf(null, o);\n  /* top */\n\n  write_Blxf(null, o);\n  /* bottom */\n\n  write_Blxf(null, o);\n  /* left */\n\n  write_Blxf(null, o);\n  /* right */\n\n  write_Blxf(null, o);\n  /* diag */\n\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.763 BrtStyle TODO */\n\n\nfunction write_BrtStyle(style, o) {\n  if (!o) o = new_buf(12 + 4 * 10);\n  o.write_shift(4, style.xfId);\n  o.write_shift(2, 1);\n  o.write_shift(1, +style.builtinId);\n  o.write_shift(1, 0);\n  /* iLevel */\n\n  write_XLNullableWideString(style.name || \"\", o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.272 BrtBeginTableStyles */\n\n\nfunction write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {\n  var o = new_buf(4 + 256 * 2 * 4);\n  o.write_shift(4, cnt);\n  write_XLNullableWideString(defTableStyle, o);\n  write_XLNullableWideString(defPivotStyle, o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.1.7.50 Styles */\n\n\nfunction parse_sty_bin(data, themes, opts) {\n  var styles = {};\n  styles.NumberFmt = []\n  /*:any*/\n  ;\n\n  for (var y in table_fmt) {\n    styles.NumberFmt[y] = table_fmt[y];\n  }\n\n  styles.CellXf = [];\n  styles.Fonts = [];\n  var state\n  /*:Array<string>*/\n  = [];\n  var pass = false;\n  recordhopper(data, function hopper_sty(val, R, RT) {\n    switch (RT) {\n      case 0x002C:\n        /* BrtFmt */\n        styles.NumberFmt[val[0]] = val[1];\n        SSF__load(val[1], val[0]);\n        break;\n\n      case 0x002B:\n        /* BrtFont */\n        styles.Fonts.push(val);\n\n        if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {\n          val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);\n        }\n\n        break;\n\n      case 0x0401:\n        /* BrtKnownFonts */\n        break;\n\n      case 0x002D:\n        /* BrtFill */\n        break;\n\n      case 0x002E:\n        /* BrtBorder */\n        break;\n\n      case 0x002F:\n        /* BrtXF */\n        if (state[state.length - 1] == 0x0269\n        /* BrtBeginCellXFs */\n        ) {\n          styles.CellXf.push(val);\n        }\n\n        break;\n\n      case 0x0030:\n      /* BrtStyle */\n\n      case 0x01FB:\n      /* BrtDXF */\n\n      case 0x023C:\n      /* BrtMRUColor */\n\n      case 0x01DB:\n        /* BrtIndexedColor */\n        break;\n\n      case 0x0493:\n      /* BrtDXF14 */\n\n      case 0x0836:\n      /* BrtDXF15 */\n\n      case 0x046A:\n      /* BrtSlicerStyleElement */\n\n      case 0x0200:\n      /* BrtTableStyleElement */\n\n      case 0x082F:\n      /* BrtTimelineStyleElement */\n\n      case 0x0C00:\n        /* BrtUid */\n        break;\n\n      case 0x0023:\n        /* BrtFRTBegin */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* BrtFRTEnd */\n        pass = false;\n        break;\n\n      case 0x0025:\n        /* BrtACBegin */\n        state.push(RT);\n        pass = true;\n        break;\n\n      case 0x0026:\n        /* BrtACEnd */\n        state.pop();\n        pass = false;\n        break;\n\n      default:\n        if (R.T > 0) state.push(RT);else if (R.T < 0) state.pop();else if (!pass || opts.WTF && state[state.length - 1] != 0x0025\n        /* BrtACBegin */\n        ) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n    }\n  });\n  return styles;\n}\n\nfunction write_FMTS_bin(ba, NF\n/*:?SSFTable*/\n) {\n  if (!NF) return;\n  var cnt = 0;\n  [[5, 8], [23, 26], [41, 44], [\n  /*63*/\n  50,\n  /*66],[164,*/\n  392]].forEach(function (r) {\n    /*:: if(!NF) return; */\n    for (var i = r[0]; i <= r[1]; ++i) {\n      if (NF[i] != null) ++cnt;\n    }\n  });\n  if (cnt == 0) return;\n  write_record(ba, 0x0267\n  /* BrtBeginFmts */\n  , write_UInt32LE(cnt));\n  [[5, 8], [23, 26], [41, 44], [\n  /*63*/\n  50,\n  /*66],[164,*/\n  392]].forEach(function (r) {\n    /*:: if(!NF) return; */\n    for (var i = r[0]; i <= r[1]; ++i) {\n      if (NF[i] != null) write_record(ba, 0x002C\n      /* BrtFmt */\n      , write_BrtFmt(i, NF[i]));\n    }\n  });\n  write_record(ba, 0x0268\n  /* BrtEndFmts */\n  );\n}\n\nfunction write_FONTS_bin(ba\n/*::, data*/\n) {\n  var cnt = 1;\n  if (cnt == 0) return;\n  write_record(ba, 0x0263\n  /* BrtBeginFonts */\n  , write_UInt32LE(cnt));\n  write_record(ba, 0x002B\n  /* BrtFont */\n  , write_BrtFont({\n    sz: 12,\n    color: {\n      theme: 1\n    },\n    name: \"Calibri\",\n    family: 2,\n    scheme: \"minor\"\n  }));\n  /* 1*65491BrtFont [ACFONTS] */\n\n  write_record(ba, 0x0264\n  /* BrtEndFonts */\n  );\n}\n\nfunction write_FILLS_bin(ba\n/*::, data*/\n) {\n  var cnt = 2;\n  if (cnt == 0) return;\n  write_record(ba, 0x025B\n  /* BrtBeginFills */\n  , write_UInt32LE(cnt));\n  write_record(ba, 0x002D\n  /* BrtFill */\n  , write_BrtFill({\n    patternType: \"none\"\n  }));\n  write_record(ba, 0x002D\n  /* BrtFill */\n  , write_BrtFill({\n    patternType: \"gray125\"\n  }));\n  /* 1*65431BrtFill */\n\n  write_record(ba, 0x025C\n  /* BrtEndFills */\n  );\n}\n\nfunction write_BORDERS_bin(ba\n/*::, data*/\n) {\n  var cnt = 1;\n  if (cnt == 0) return;\n  write_record(ba, 0x0265\n  /* BrtBeginBorders */\n  , write_UInt32LE(cnt));\n  write_record(ba, 0x002E\n  /* BrtBorder */\n  , write_BrtBorder({}));\n  /* 1*65430BrtBorder */\n\n  write_record(ba, 0x0266\n  /* BrtEndBorders */\n  );\n}\n\nfunction write_CELLSTYLEXFS_bin(ba\n/*::, data*/\n) {\n  var cnt = 1;\n  write_record(ba, 0x0272\n  /* BrtBeginCellStyleXFs */\n  , write_UInt32LE(cnt));\n  write_record(ba, 0x002F\n  /* BrtXF */\n  , write_BrtXF({\n    numFmtId: 0,\n    fontId: 0,\n    fillId: 0,\n    borderId: 0\n  }, 0xFFFF));\n  /* 1*65430(BrtXF *FRT) */\n\n  write_record(ba, 0x0273\n  /* BrtEndCellStyleXFs */\n  );\n}\n\nfunction write_CELLXFS_bin(ba, data) {\n  write_record(ba, 0x0269\n  /* BrtBeginCellXFs */\n  , write_UInt32LE(data.length));\n  data.forEach(function (c) {\n    write_record(ba, 0x002F\n    /* BrtXF */\n    , write_BrtXF(c, 0));\n  });\n  /* 1*65430(BrtXF *FRT) */\n\n  write_record(ba, 0x026A\n  /* BrtEndCellXFs */\n  );\n}\n\nfunction write_STYLES_bin(ba\n/*::, data*/\n) {\n  var cnt = 1;\n  write_record(ba, 0x026B\n  /* BrtBeginStyles */\n  , write_UInt32LE(cnt));\n  write_record(ba, 0x0030\n  /* BrtStyle */\n  , write_BrtStyle({\n    xfId: 0,\n    builtinId: 0,\n    name: \"Normal\"\n  }));\n  /* 1*65430(BrtStyle *FRT) */\n\n  write_record(ba, 0x026C\n  /* BrtEndStyles */\n  );\n}\n\nfunction write_DXFS_bin(ba\n/*::, data*/\n) {\n  var cnt = 0;\n  write_record(ba, 0x01F9\n  /* BrtBeginDXFs */\n  , write_UInt32LE(cnt));\n  /* *2147483647(BrtDXF *FRT) */\n\n  write_record(ba, 0x01FA\n  /* BrtEndDXFs */\n  );\n}\n\nfunction write_TABLESTYLES_bin(ba\n/*::, data*/\n) {\n  var cnt = 0;\n  write_record(ba, 0x01FC\n  /* BrtBeginTableStyles */\n  , write_BrtBeginTableStyles(cnt, \"TableStyleMedium9\", \"PivotStyleMedium4\"));\n  /* *TABLESTYLE */\n\n  write_record(ba, 0x01FD\n  /* BrtEndTableStyles */\n  );\n}\n\nfunction\n  /*::ba, data*/\nwrite_COLORPALETTE_bin() {\n  return;\n  /* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */\n}\n/* [MS-XLSB] 2.1.7.50 Styles */\n\n\nfunction write_sty_bin(wb, opts) {\n  var ba = buf_array();\n  write_record(ba, 0x0116\n  /* BrtBeginStyleSheet */\n  );\n  write_FMTS_bin(ba, wb.SSF);\n  write_FONTS_bin(ba, wb);\n  write_FILLS_bin(ba, wb);\n  write_BORDERS_bin(ba, wb);\n  write_CELLSTYLEXFS_bin(ba, wb);\n  write_CELLXFS_bin(ba, opts.cellXfs);\n  write_STYLES_bin(ba, wb);\n  write_DXFS_bin(ba, wb);\n  write_TABLESTYLES_bin(ba, wb);\n  write_COLORPALETTE_bin(ba, wb);\n  /* FRTSTYLESHEET*/\n\n  write_record(ba, 0x0117\n  /* BrtEndStyleSheet */\n  );\n  return ba.end();\n}\n/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */\n\n\nvar XLSXThemeClrScheme = ['</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>', '</a:accent1>', '</a:accent2>', '</a:accent3>', '</a:accent4>', '</a:accent5>', '</a:accent6>', '</a:hlink>', '</a:folHlink>'];\n/* 20.1.6.2 clrScheme CT_ColorScheme */\n\nfunction parse_clrScheme(t, themes, opts) {\n  themes.themeElements.clrScheme = [];\n  var color = {};\n  (t[0].match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (y[0]) {\n      /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */\n      case '<a:clrScheme':\n      case '</a:clrScheme>':\n        break;\n\n      /* 20.1.2.3.32 srgbClr CT_SRgbColor */\n\n      case '<a:srgbClr':\n        color.rgb = y.val;\n        break;\n\n      /* 20.1.2.3.33 sysClr CT_SystemColor */\n\n      case '<a:sysClr':\n        color.rgb = y.lastClr;\n        break;\n\n      /* 20.1.4.1.1 accent1 (Accent 1) */\n\n      /* 20.1.4.1.2 accent2 (Accent 2) */\n\n      /* 20.1.4.1.3 accent3 (Accent 3) */\n\n      /* 20.1.4.1.4 accent4 (Accent 4) */\n\n      /* 20.1.4.1.5 accent5 (Accent 5) */\n\n      /* 20.1.4.1.6 accent6 (Accent 6) */\n\n      /* 20.1.4.1.9 dk1 (Dark 1) */\n\n      /* 20.1.4.1.10 dk2 (Dark 2) */\n\n      /* 20.1.4.1.15 folHlink (Followed Hyperlink) */\n\n      /* 20.1.4.1.19 hlink (Hyperlink) */\n\n      /* 20.1.4.1.22 lt1 (Light 1) */\n\n      /* 20.1.4.1.23 lt2 (Light 2) */\n\n      case '<a:dk1>':\n      case '</a:dk1>':\n      case '<a:lt1>':\n      case '</a:lt1>':\n      case '<a:dk2>':\n      case '</a:dk2>':\n      case '<a:lt2>':\n      case '</a:lt2>':\n      case '<a:accent1>':\n      case '</a:accent1>':\n      case '<a:accent2>':\n      case '</a:accent2>':\n      case '<a:accent3>':\n      case '</a:accent3>':\n      case '<a:accent4>':\n      case '</a:accent4>':\n      case '<a:accent5>':\n      case '</a:accent5>':\n      case '<a:accent6>':\n      case '</a:accent6>':\n      case '<a:hlink>':\n      case '</a:hlink>':\n      case '<a:folHlink>':\n      case '</a:folHlink>':\n        if (y[0].charAt(1) === '/') {\n          themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;\n          color = {};\n        } else {\n          color.name = y[0].slice(3, y[0].length - 1);\n        }\n\n        break;\n\n      default:\n        if (opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');\n    }\n  });\n}\n/* 20.1.4.1.18 fontScheme CT_FontScheme */\n\n\nfunction\n  /*::t, themes, opts*/\nparse_fontScheme() {}\n/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */\n\n\nfunction\n  /*::t, themes, opts*/\nparse_fmtScheme() {}\n\nvar clrsregex = /<a:clrScheme([^>]*)>[\\s\\S]*<\\/a:clrScheme>/;\nvar fntsregex = /<a:fontScheme([^>]*)>[\\s\\S]*<\\/a:fontScheme>/;\nvar fmtsregex = /<a:fmtScheme([^>]*)>[\\s\\S]*<\\/a:fmtScheme>/;\n/* 20.1.6.10 themeElements CT_BaseStyles */\n\nfunction parse_themeElements(data, themes, opts) {\n  themes.themeElements = {};\n  var t;\n  [\n  /* clrScheme CT_ColorScheme */\n  ['clrScheme', clrsregex, parse_clrScheme],\n  /* fontScheme CT_FontScheme */\n  ['fontScheme', fntsregex, parse_fontScheme],\n  /* fmtScheme CT_StyleMatrix */\n  ['fmtScheme', fmtsregex, parse_fmtScheme]].forEach(function (m) {\n    if (!(t = data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');\n    m[2](t, themes, opts);\n  });\n}\n\nvar themeltregex = /<a:themeElements([^>]*)>[\\s\\S]*<\\/a:themeElements>/;\n/* 14.2.7 Theme Part */\n\nfunction parse_theme_xml(data\n/*:string*/\n, opts) {\n  /* 20.1.6.9 theme CT_OfficeStyleSheet */\n  if (!data || data.length === 0) data = write_theme();\n  var t;\n  var themes = {};\n  /* themeElements CT_BaseStyles */\n\n  if (!(t = data.match(themeltregex))) throw new Error('themeElements not found in theme');\n  parse_themeElements(t[0], themes, opts);\n  themes.raw = data;\n  return themes;\n}\n\nfunction write_theme(Themes, opts)\n/*:string*/\n{\n  if (opts && opts.themeXLSX) return opts.themeXLSX;\n  if (Themes && typeof Themes.raw == \"string\") return Themes.raw;\n  var o = [XML_HEADER];\n  o[o.length] = '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\">';\n  o[o.length] = '<a:themeElements>';\n  o[o.length] = '<a:clrScheme name=\"Office\">';\n  o[o.length] = '<a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1>';\n  o[o.length] = '<a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1>';\n  o[o.length] = '<a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2>';\n  o[o.length] = '<a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2>';\n  o[o.length] = '<a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1>';\n  o[o.length] = '<a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2>';\n  o[o.length] = '<a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3>';\n  o[o.length] = '<a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4>';\n  o[o.length] = '<a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5>';\n  o[o.length] = '<a:accent6><a:srgbClr val=\"F79646\"/></a:accent6>';\n  o[o.length] = '<a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink>';\n  o[o.length] = '<a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink>';\n  o[o.length] = '</a:clrScheme>';\n  o[o.length] = '<a:fontScheme name=\"Office\">';\n  o[o.length] = '<a:majorFont>';\n  o[o.length] = '<a:latin typeface=\"Cambria\"/>';\n  o[o.length] = '<a:ea typeface=\"\"/>';\n  o[o.length] = '<a:cs typeface=\"\"/>';\n  o[o.length] = '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n  o[o.length] = '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n  o[o.length] = '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n  o[o.length] = '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n  o[o.length] = '<a:font script=\"Arab\" typeface=\"Times New Roman\"/>';\n  o[o.length] = '<a:font script=\"Hebr\" typeface=\"Times New Roman\"/>';\n  o[o.length] = '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n  o[o.length] = '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n  o[o.length] = '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n  o[o.length] = '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n  o[o.length] = '<a:font script=\"Khmr\" typeface=\"MoolBoran\"/>';\n  o[o.length] = '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n  o[o.length] = '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n  o[o.length] = '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n  o[o.length] = '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n  o[o.length] = '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n  o[o.length] = '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n  o[o.length] = '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n  o[o.length] = '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n  o[o.length] = '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n  o[o.length] = '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n  o[o.length] = '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n  o[o.length] = '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n  o[o.length] = '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n  o[o.length] = '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n  o[o.length] = '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n  o[o.length] = '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n  o[o.length] = '<a:font script=\"Viet\" typeface=\"Times New Roman\"/>';\n  o[o.length] = '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n  o[o.length] = '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n  o[o.length] = '</a:majorFont>';\n  o[o.length] = '<a:minorFont>';\n  o[o.length] = '<a:latin typeface=\"Calibri\"/>';\n  o[o.length] = '<a:ea typeface=\"\"/>';\n  o[o.length] = '<a:cs typeface=\"\"/>';\n  o[o.length] = '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n  o[o.length] = '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n  o[o.length] = '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n  o[o.length] = '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n  o[o.length] = '<a:font script=\"Arab\" typeface=\"Arial\"/>';\n  o[o.length] = '<a:font script=\"Hebr\" typeface=\"Arial\"/>';\n  o[o.length] = '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n  o[o.length] = '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n  o[o.length] = '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n  o[o.length] = '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n  o[o.length] = '<a:font script=\"Khmr\" typeface=\"DaunPenh\"/>';\n  o[o.length] = '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n  o[o.length] = '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n  o[o.length] = '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n  o[o.length] = '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n  o[o.length] = '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n  o[o.length] = '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n  o[o.length] = '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n  o[o.length] = '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n  o[o.length] = '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n  o[o.length] = '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n  o[o.length] = '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n  o[o.length] = '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n  o[o.length] = '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n  o[o.length] = '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n  o[o.length] = '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n  o[o.length] = '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n  o[o.length] = '<a:font script=\"Viet\" typeface=\"Arial\"/>';\n  o[o.length] = '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n  o[o.length] = '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n  o[o.length] = '</a:minorFont>';\n  o[o.length] = '</a:fontScheme>';\n  o[o.length] = '<a:fmtScheme name=\"Office\">';\n  o[o.length] = '<a:fillStyleLst>';\n  o[o.length] = '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n  o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n  o[o.length] = '<a:gsLst>';\n  o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '</a:gsLst>';\n  o[o.length] = '<a:lin ang=\"16200000\" scaled=\"1\"/>';\n  o[o.length] = '</a:gradFill>';\n  o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n  o[o.length] = '<a:gsLst>';\n  o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '</a:gsLst>';\n  o[o.length] = '<a:lin ang=\"16200000\" scaled=\"0\"/>';\n  o[o.length] = '</a:gradFill>';\n  o[o.length] = '</a:fillStyleLst>';\n  o[o.length] = '<a:lnStyleLst>';\n  o[o.length] = '<a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n  o[o.length] = '<a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n  o[o.length] = '<a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n  o[o.length] = '</a:lnStyleLst>';\n  o[o.length] = '<a:effectStyleLst>';\n  o[o.length] = '<a:effectStyle>';\n  o[o.length] = '<a:effectLst>';\n  o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw>';\n  o[o.length] = '</a:effectLst>';\n  o[o.length] = '</a:effectStyle>';\n  o[o.length] = '<a:effectStyle>';\n  o[o.length] = '<a:effectLst>';\n  o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n  o[o.length] = '</a:effectLst>';\n  o[o.length] = '</a:effectStyle>';\n  o[o.length] = '<a:effectStyle>';\n  o[o.length] = '<a:effectLst>';\n  o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n  o[o.length] = '</a:effectLst>';\n  o[o.length] = '<a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d>';\n  o[o.length] = '<a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d>';\n  o[o.length] = '</a:effectStyle>';\n  o[o.length] = '</a:effectStyleLst>';\n  o[o.length] = '<a:bgFillStyleLst>';\n  o[o.length] = '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n  o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n  o[o.length] = '<a:gsLst>';\n  o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '</a:gsLst>';\n  o[o.length] = '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path>';\n  o[o.length] = '</a:gradFill>';\n  o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n  o[o.length] = '<a:gsLst>';\n  o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs>';\n  o[o.length] = '</a:gsLst>';\n  o[o.length] = '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path>';\n  o[o.length] = '</a:gradFill>';\n  o[o.length] = '</a:bgFillStyleLst>';\n  o[o.length] = '</a:fmtScheme>';\n  o[o.length] = '</a:themeElements>';\n  o[o.length] = '<a:objectDefaults>';\n  o[o.length] = '<a:spDef>';\n  o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style>';\n  o[o.length] = '</a:spDef>';\n  o[o.length] = '<a:lnDef>';\n  o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style>';\n  o[o.length] = '</a:lnDef>';\n  o[o.length] = '</a:objectDefaults>';\n  o[o.length] = '<a:extraClrSchemeLst/>';\n  o[o.length] = '</a:theme>';\n  return o.join(\"\");\n}\n/* [MS-XLS] 2.4.326 TODO: payload is a zip file */\n\n\nfunction parse_Theme(blob, length, opts) {\n  var end = blob.l + length;\n  var dwThemeVersion = blob.read_shift(4);\n  if (dwThemeVersion === 124226) return;\n\n  if (!opts.cellStyles) {\n    blob.l = end;\n    return;\n  }\n\n  var data = blob.slice(blob.l);\n  blob.l = end;\n  var zip;\n\n  try {\n    zip = zip_read(data, {\n      type: \"array\"\n    });\n  } catch (e) {\n    return;\n  }\n\n  var themeXML = getzipstr(zip, \"theme/theme/theme1.xml\", true);\n  if (!themeXML) return;\n  return parse_theme_xml(themeXML, opts);\n}\n/* 2.5.49 */\n\n\nfunction parse_ColorTheme(blob\n/*::, length*/\n) {\n  return blob.read_shift(4);\n}\n/* 2.5.155 */\n\n\nfunction parse_FullColorExt(blob\n/*::, length*/\n) {\n  var o = {};\n  o.xclrType = blob.read_shift(2);\n  o.nTintShade = blob.read_shift(2);\n\n  switch (o.xclrType) {\n    case 0:\n      blob.l += 4;\n      break;\n\n    case 1:\n      o.xclrValue = parse_IcvXF(blob, 4);\n      break;\n\n    case 2:\n      o.xclrValue = parse_LongRGBA(blob, 4);\n      break;\n\n    case 3:\n      o.xclrValue = parse_ColorTheme(blob, 4);\n      break;\n\n    case 4:\n      blob.l += 4;\n      break;\n  }\n\n  blob.l += 8;\n  return o;\n}\n/* 2.5.164 TODO: read 7 bits*/\n\n\nfunction parse_IcvXF(blob, length) {\n  return parsenoop(blob, length);\n}\n/* 2.5.280 */\n\n\nfunction parse_XFExtGradient(blob, length) {\n  return parsenoop(blob, length);\n}\n/* [MS-XLS] 2.5.108 */\n\n\nfunction parse_ExtProp(blob\n/*::, length*/\n)\n/*:Array<any>*/\n{\n  var extType = blob.read_shift(2);\n  var cb = blob.read_shift(2) - 4;\n  var o = [extType];\n\n  switch (extType) {\n    case 0x04:\n    case 0x05:\n    case 0x07:\n    case 0x08:\n    case 0x09:\n    case 0x0A:\n    case 0x0B:\n    case 0x0D:\n      o[1] = parse_FullColorExt(blob, cb);\n      break;\n\n    case 0x06:\n      o[1] = parse_XFExtGradient(blob, cb);\n      break;\n\n    case 0x0E:\n    case 0x0F:\n      o[1] = blob.read_shift(cb === 1 ? 1 : 2);\n      break;\n\n    default:\n      throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n  }\n\n  return o;\n}\n/* 2.4.355 */\n\n\nfunction parse_XFExt(blob, length) {\n  var end = blob.l + length;\n  blob.l += 2;\n  var ixfe = blob.read_shift(2);\n  blob.l += 2;\n  var cexts = blob.read_shift(2);\n  var ext\n  /*:AOA*/\n  = [];\n\n  while (cexts-- > 0) {\n    ext.push(parse_ExtProp(blob, end - blob.l));\n  }\n\n  return {\n    ixfe: ixfe,\n    ext: ext\n  };\n}\n/* xf is an XF, see parse_XFExt for xfext */\n\n\nfunction update_xfext(xf, xfext) {\n  xfext.forEach(function (xfe) {\n    switch (xfe[0]) {\n      /* 2.5.108 extPropData */\n      case 0x04:\n        break;\n\n      /* foreground color */\n\n      case 0x05:\n        break;\n\n      /* background color */\n\n      case 0x06:\n        break;\n\n      /* gradient fill */\n\n      case 0x07:\n        break;\n\n      /* top cell border color */\n\n      case 0x08:\n        break;\n\n      /* bottom cell border color */\n\n      case 0x09:\n        break;\n\n      /* left cell border color */\n\n      case 0x0a:\n        break;\n\n      /* right cell border color */\n\n      case 0x0b:\n        break;\n\n      /* diagonal cell border color */\n\n      case 0x0d:\n        /* text color */\n        break;\n\n      case 0x0e:\n        break;\n\n      /* font scheme */\n\n      case 0x0f:\n        break;\n\n      /* indentation level */\n    }\n  });\n}\n\nfunction parse_BrtMdtinfo(data, length) {\n  return {\n    flags: data.read_shift(4),\n    version: data.read_shift(4),\n    name: parse_XLWideString(data, length - 8)\n  };\n}\n\nfunction write_BrtMdtinfo(data) {\n  var o = new_buf(12 + 2 * data.name.length);\n  o.write_shift(4, data.flags);\n  o.write_shift(4, data.version);\n  write_XLWideString(data.name, o);\n  return o.slice(0, o.l);\n}\n\nfunction parse_BrtMdb(data) {\n  var out = [];\n  var cnt = data.read_shift(4);\n\n  while (cnt-- > 0) {\n    out.push([data.read_shift(4), data.read_shift(4)]);\n  }\n\n  return out;\n}\n\nfunction write_BrtMdb(mdb) {\n  var o = new_buf(4 + 8 * mdb.length);\n  o.write_shift(4, mdb.length);\n\n  for (var i = 0; i < mdb.length; ++i) {\n    o.write_shift(4, mdb[i][0]);\n    o.write_shift(4, mdb[i][1]);\n  }\n\n  return o;\n}\n\nfunction write_BrtBeginEsfmd(cnt, name) {\n  var o = new_buf(8 + 2 * name.length);\n  o.write_shift(4, cnt);\n  write_XLWideString(name, o);\n  return o.slice(0, o.l);\n}\n\nfunction parse_BrtBeginEsmdb(data) {\n  data.l += 4;\n  return data.read_shift(4) != 0;\n}\n\nfunction write_BrtBeginEsmdb(cnt, cm) {\n  var o = new_buf(8);\n  o.write_shift(4, cnt);\n  o.write_shift(4, cm ? 1 : 0);\n  return o;\n}\n\nfunction parse_xlmeta_bin(data, name, _opts) {\n  var out = {\n    Types: [],\n    Cell: [],\n    Value: []\n  };\n  var opts = _opts || {};\n  var state = [];\n  var pass = false;\n  var metatype = 2;\n  recordhopper(data, function (val, R, RT) {\n    switch (RT) {\n      case 335:\n        out.Types.push({\n          name: val.name\n        });\n        break;\n\n      case 51:\n        val.forEach(function (r) {\n          if (metatype == 1) out.Cell.push({\n            type: out.Types[r[0] - 1].name,\n            index: r[1]\n          });else if (metatype == 0) out.Value.push({\n            type: out.Types[r[0] - 1].name,\n            index: r[1]\n          });\n        });\n        break;\n\n      case 337:\n        metatype = val ? 1 : 0;\n        break;\n\n      case 338:\n        metatype = 2;\n        break;\n\n      case 35:\n        state.push(RT);\n        pass = true;\n        break;\n\n      case 36:\n        state.pop();\n        pass = false;\n        break;\n\n      default:\n        if (R.T) {} else if (!pass || opts.WTF && state[state.length - 1] != 35) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  });\n  return out;\n}\n\nfunction write_xlmeta_bin() {\n  var ba = buf_array();\n  write_record(ba, 332);\n  write_record(ba, 334, write_UInt32LE(1));\n  write_record(ba, 335, write_BrtMdtinfo({\n    name: \"XLDAPR\",\n    version: 12e4,\n    flags: 3496657072\n  }));\n  write_record(ba, 336);\n  write_record(ba, 339, write_BrtBeginEsfmd(1, \"XLDAPR\"));\n  write_record(ba, 52);\n  write_record(ba, 35, write_UInt32LE(514));\n  write_record(ba, 4096, write_UInt32LE(0));\n  write_record(ba, 4097, writeuint16(1));\n  write_record(ba, 36);\n  write_record(ba, 53);\n  write_record(ba, 340);\n  write_record(ba, 337, write_BrtBeginEsmdb(1, true));\n  write_record(ba, 51, write_BrtMdb([[1, 0]]));\n  write_record(ba, 338);\n  write_record(ba, 333);\n  return ba.end();\n}\n\nfunction parse_xlmeta_xml(data, name, opts) {\n  var out = {\n    Types: [],\n    Cell: [],\n    Value: []\n  };\n  if (!data) return out;\n  var pass = false;\n  var metatype = 2;\n  var lastmeta;\n  data.replace(tagregex, function (x) {\n    var y = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case \"<?xml\":\n        break;\n\n      case \"<metadata\":\n      case \"</metadata>\":\n        break;\n\n      case \"<metadataTypes\":\n      case \"</metadataTypes>\":\n        break;\n\n      case \"<metadataType\":\n        out.Types.push({\n          name: y.name\n        });\n        break;\n\n      case \"</metadataType>\":\n        break;\n\n      case \"<futureMetadata\":\n        for (var j = 0; j < out.Types.length; ++j) {\n          if (out.Types[j].name == y.name) lastmeta = out.Types[j];\n        }\n\n        break;\n\n      case \"</futureMetadata>\":\n        break;\n\n      case \"<bk>\":\n        break;\n\n      case \"</bk>\":\n        break;\n\n      case \"<rc\":\n        if (metatype == 1) out.Cell.push({\n          type: out.Types[y.t - 1].name,\n          index: +y.v\n        });else if (metatype == 0) out.Value.push({\n          type: out.Types[y.t - 1].name,\n          index: +y.v\n        });\n        break;\n\n      case \"</rc>\":\n        break;\n\n      case \"<cellMetadata\":\n        metatype = 1;\n        break;\n\n      case \"</cellMetadata>\":\n        metatype = 2;\n        break;\n\n      case \"<valueMetadata\":\n        metatype = 0;\n        break;\n\n      case \"</valueMetadata>\":\n        metatype = 2;\n        break;\n\n      case \"<extLst\":\n      case \"<extLst>\":\n      case \"</extLst>\":\n      case \"<extLst/>\":\n        break;\n\n      case \"<ext\":\n        pass = true;\n        break;\n\n      case \"</ext>\":\n        pass = false;\n        break;\n\n      case \"<rvb\":\n        if (!lastmeta) break;\n        if (!lastmeta.offsets) lastmeta.offsets = [];\n        lastmeta.offsets.push(+y.i);\n        break;\n\n      default:\n        if (!pass && (opts == null ? void 0 : opts.WTF)) throw new Error(\"unrecognized \" + y[0] + \" in metadata\");\n    }\n\n    return x;\n  });\n  return out;\n}\n\nfunction write_xlmeta_xml() {\n  var o = [XML_HEADER];\n  o.push('<metadata xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:xlrd=\"http://schemas.microsoft.com/office/spreadsheetml/2017/richdata\" xmlns:xda=\"http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray\">\\n  <metadataTypes count=\"1\">\\n    <metadataType name=\"XLDAPR\" minSupportedVersion=\"120000\" copy=\"1\" pasteAll=\"1\" pasteValues=\"1\" merge=\"1\" splitFirst=\"1\" rowColShift=\"1\" clearFormats=\"1\" clearComments=\"1\" assign=\"1\" coerce=\"1\" cellMeta=\"1\"/>\\n  </metadataTypes>\\n  <futureMetadata name=\"XLDAPR\" count=\"1\">\\n    <bk>\\n      <extLst>\\n        <ext uri=\"{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}\">\\n          <xda:dynamicArrayProperties fDynamic=\"1\" fCollapsed=\"0\"/>\\n        </ext>\\n      </extLst>\\n    </bk>\\n  </futureMetadata>\\n  <cellMetadata count=\"1\">\\n    <bk>\\n      <rc t=\"1\" v=\"0\"/>\\n    </bk>\\n  </cellMetadata>\\n</metadata>');\n  return o.join(\"\");\n}\n/* 18.6 Calculation Chain */\n\n\nfunction parse_cc_xml(data\n/*::, name, opts*/\n)\n/*:Array<any>*/\n{\n  var d = [];\n  if (!data) return d;\n  var i = 1;\n  (data.match(tagregex) || []).forEach(function (x) {\n    var y = parsexmltag(x);\n\n    switch (y[0]) {\n      case '<?xml':\n        break;\n\n      /* 18.6.2  calcChain CT_CalcChain 1 */\n\n      case '<calcChain':\n      case '<calcChain>':\n      case '</calcChain>':\n        break;\n\n      /* 18.6.1  c CT_CalcCell 1 */\n\n      case '<c':\n        delete y[0];\n        if (y.i) i = y.i;else y.i = i;\n        d.push(y);\n        break;\n    }\n  });\n  return d;\n} //function write_cc_xml(data, opts) { }\n\n/* [MS-XLSB] 2.6.4.1 */\n\n\nfunction parse_BrtCalcChainItem$(data) {\n  var out = {};\n  out.i = data.read_shift(4);\n  var cell = {};\n  cell.r = data.read_shift(4);\n  cell.c = data.read_shift(4);\n  out.r = encode_cell(cell);\n  var flags = data.read_shift(1);\n  if (flags & 0x2) out.l = '1';\n  if (flags & 0x8) out.a = '1';\n  return out;\n}\n/* 18.6 Calculation Chain */\n\n\nfunction parse_cc_bin(data, name, opts) {\n  var out = [];\n  var pass = false;\n  recordhopper(data, function hopper_cc(val, R, RT) {\n    switch (RT) {\n      case 0x003F:\n        /* 'BrtCalcChainItem$' */\n        out.push(val);\n        break;\n\n      default:\n        if (R.T) {\n          /* empty */\n        } else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  });\n  return out;\n} //function write_cc_bin(data, opts) { }\n\n/* 18.14 Supplementary Workbook Data */\n\n\nfunction\n  /*::data, rel, name:string, _opts*/\nparse_xlink_xml() {//var opts = _opts || {};\n  //if(opts.WTF) throw \"XLSX External Link\";\n}\n/* [MS-XLSB] 2.1.7.25 External Link */\n\n\nfunction parse_xlink_bin(data, rel, name\n/*:string*/\n, _opts) {\n  if (!data) return data;\n  var opts = _opts || {};\n  var pass = false,\n      end = false;\n  recordhopper(data, function xlink_parse(val, R, RT) {\n    if (end) return;\n\n    switch (RT) {\n      case 0x0167:\n      /* 'BrtSupTabs' */\n\n      case 0x016B:\n      /* 'BrtExternTableStart' */\n\n      case 0x016C:\n      /* 'BrtExternTableEnd' */\n\n      case 0x016E:\n      /* 'BrtExternRowHdr' */\n\n      case 0x016F:\n      /* 'BrtExternCellBlank' */\n\n      case 0x0170:\n      /* 'BrtExternCellReal' */\n\n      case 0x0171:\n      /* 'BrtExternCellBool' */\n\n      case 0x0172:\n      /* 'BrtExternCellError' */\n\n      case 0x0173:\n      /* 'BrtExternCellString' */\n\n      case 0x01D8:\n      /* 'BrtExternValueMeta' */\n\n      case 0x0241:\n      /* 'BrtSupNameStart' */\n\n      case 0x0242:\n      /* 'BrtSupNameValueStart' */\n\n      case 0x0243:\n      /* 'BrtSupNameValueEnd' */\n\n      case 0x0244:\n      /* 'BrtSupNameNum' */\n\n      case 0x0245:\n      /* 'BrtSupNameErr' */\n\n      case 0x0246:\n      /* 'BrtSupNameSt' */\n\n      case 0x0247:\n      /* 'BrtSupNameNil' */\n\n      case 0x0248:\n      /* 'BrtSupNameBool' */\n\n      case 0x0249:\n      /* 'BrtSupNameFmla' */\n\n      case 0x024A:\n      /* 'BrtSupNameBits' */\n\n      case 0x024B:\n        /* 'BrtSupNameEnd' */\n        break;\n\n      case 0x0023:\n        /* 'BrtFRTBegin' */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* 'BrtFRTEnd' */\n        pass = false;\n        break;\n\n      default:\n        if (R.T) {\n          /* empty */\n        } else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  }, opts);\n}\n/* 20.5 DrawingML - SpreadsheetML Drawing */\n\n/* 20.5.2.35 wsDr CT_Drawing */\n\n\nfunction parse_drawing(data, rels\n/*:any*/\n) {\n  if (!data) return \"??\";\n  /*\n    Chartsheet Drawing:\n     - 20.5.2.35 wsDr CT_Drawing\n      - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor\n       - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame\n        - 20.1.2.2.16 graphic CT_GraphicalObject\n         - 20.1.2.2.17 graphicData CT_GraphicalObjectData\n           - chart reference\n     the actual type is based on the URI of the graphicData\n  \tTODO: handle embedded charts and other types of graphics\n  */\n\n  var id = (data.match(/<c:chart [^>]*r:id=\"([^\"]*)\"/) || [\"\", \"\"])[1];\n  return rels['!id'][id].Target;\n}\n/* L.5.5.2 SpreadsheetML Comments + VML Schema */\n\n\nfunction write_vml(rId\n/*:number*/\n, comments) {\n  var csize = [21600, 21600];\n  /* L.5.2.1.2 Path Attribute */\n\n  var bbox = [\"m0,0l0\", csize[1], csize[0], csize[1], csize[0], \"0xe\"].join(\",\");\n  var o = [writextag(\"xml\", null, {\n    'xmlns:v': XLMLNS.v,\n    'xmlns:o': XLMLNS.o,\n    'xmlns:x': XLMLNS.x,\n    'xmlns:mv': XLMLNS.mv\n  }).replace(/\\/>/, \">\"), writextag(\"o:shapelayout\", writextag(\"o:idmap\", null, {\n    'v:ext': \"edit\",\n    'data': rId\n  }), {\n    'v:ext': \"edit\"\n  })];\n\n  var _shapeid = 65536 * rId;\n\n  var _comments = comments || [];\n\n  if (_comments.length > 0) o.push(writextag(\"v:shapetype\", [writextag(\"v:stroke\", null, {\n    joinstyle: \"miter\"\n  }), writextag(\"v:path\", null, {\n    gradientshapeok: \"t\",\n    'o:connecttype': \"rect\"\n  })].join(\"\"), {\n    id: \"_x0000_t202\",\n    coordsize: csize.join(\",\"),\n    'o:spt': 202,\n    path: bbox\n  }));\n\n  _comments.forEach(function (x) {\n    ++_shapeid;\n    o.push(write_vml_comment(x, _shapeid));\n  });\n\n  o.push('</xml>');\n  return o.join(\"\");\n}\n\nfunction write_vml_comment(x, _shapeid)\n/*:string*/\n{\n  var c = decode_cell(x[0]);\n  var fillopts =\n  /*::(*/\n  {\n    'color2': \"#BEFF82\",\n    'type': \"gradient\"\n  }\n  /*:: :any)*/\n  ;\n  if (fillopts.type == \"gradient\") fillopts.angle = \"-180\";\n  var fillparm = fillopts.type == \"gradient\" ? writextag(\"o:fill\", null, {\n    type: \"gradientUnscaled\",\n    'v:ext': \"view\"\n  }) : null;\n  var fillxml = writextag('v:fill', fillparm, fillopts);\n  var shadata = {\n    on: \"t\",\n    'obscured': \"t\"\n  }\n  /*:any*/\n  ;\n  return ['<v:shape' + wxt_helper({\n    id: '_x0000_s' + _shapeid,\n    type: \"#_x0000_t202\",\n    style: \"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10\" + (x[1].hidden ? \";visibility:hidden\" : \"\"),\n    fillcolor: \"#ECFAD4\",\n    strokecolor: \"#edeaa1\"\n  }) + '>', fillxml, writextag(\"v:shadow\", null, shadata), writextag(\"v:path\", null, {\n    'o:connecttype': \"none\"\n  }), '<v:textbox><div style=\"text-align:left\"></div></v:textbox>', '<x:ClientData ObjectType=\"Note\">', '<x:MoveWithCells/>', '<x:SizeWithCells/>',\n  /* Part 4 19.4.2.3 Anchor (Anchor) */\n  writetag('x:Anchor', [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(\",\")), writetag('x:AutoFill', \"False\"), writetag('x:Row', String(c.r)), writetag('x:Column', String(c.c)), x[1].hidden ? '' : '<x:Visible/>', '</x:ClientData>', '</v:shape>'].join(\"\");\n}\n\nfunction sheet_insert_comments(sheet, comments\n/*:Array<RawComment>*/\n, threaded\n/*:boolean*/\n, people\n/*:?Array<any>*/\n) {\n  var dense = Array.isArray(sheet);\n  var cell\n  /*:Cell*/\n  ;\n  comments.forEach(function (comment) {\n    var r = decode_cell(comment.ref);\n\n    if (dense) {\n      if (!sheet[r.r]) sheet[r.r] = [];\n      cell = sheet[r.r][r.c];\n    } else cell = sheet[comment.ref];\n\n    if (!cell) {\n      cell = {\n        t: \"z\"\n      }\n      /*:any*/\n      ;\n      if (dense) sheet[r.r][r.c] = cell;else sheet[comment.ref] = cell;\n      var range = safe_decode_range(sheet[\"!ref\"] || \"BDWGO1000001:A1\");\n      if (range.s.r > r.r) range.s.r = r.r;\n      if (range.e.r < r.r) range.e.r = r.r;\n      if (range.s.c > r.c) range.s.c = r.c;\n      if (range.e.c < r.c) range.e.c = r.c;\n      var encoded = encode_range(range);\n      if (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n    }\n\n    if (!cell.c) cell.c = [];\n    var o\n    /*:Comment*/\n    = {\n      a: comment.author,\n      t: comment.t,\n      r: comment.r,\n      T: threaded\n    };\n    if (comment.h) o.h = comment.h;\n    /* threaded comments always override */\n\n    for (var i = cell.c.length - 1; i >= 0; --i) {\n      if (!threaded && cell.c[i].T) return;\n      if (threaded && !cell.c[i].T) cell.c.splice(i, 1);\n    }\n\n    if (threaded && people) for (i = 0; i < people.length; ++i) {\n      if (o.a == people[i].id) {\n        o.a = people[i].name || o.a;\n        break;\n      }\n    }\n    cell.c.push(o);\n  });\n}\n/* 18.7 Comments */\n\n\nfunction parse_comments_xml(data\n/*:string*/\n, opts)\n/*:Array<RawComment>*/\n{\n  /* 18.7.6 CT_Comments */\n  if (data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n  var authors\n  /*:Array<string>*/\n  = [];\n  var commentList\n  /*:Array<RawComment>*/\n  = [];\n  var authtag = data.match(/<(?:\\w+:)?authors>([\\s\\S]*)<\\/(?:\\w+:)?authors>/);\n  if (authtag && authtag[1]) authtag[1].split(/<\\/\\w*:?author>/).forEach(function (x) {\n    if (x === \"\" || x.trim() === \"\") return;\n    var a = x.match(/<(?:\\w+:)?author[^>]*>(.*)/);\n    if (a) authors.push(a[1]);\n  });\n  var cmnttag = data.match(/<(?:\\w+:)?commentList>([\\s\\S]*)<\\/(?:\\w+:)?commentList>/);\n  if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\\/\\w*:?comment>/).forEach(function (x) {\n    if (x === \"\" || x.trim() === \"\") return;\n    var cm = x.match(/<(?:\\w+:)?comment[^>]*>/);\n    if (!cm) return;\n    var y = parsexmltag(cm[0]);\n    var comment\n    /*:RawComment*/\n    = {\n      author: y.authorId && authors[y.authorId] || \"sheetjsghost\",\n      ref: y.ref,\n      guid: y.guid\n    }\n    /*:any*/\n    ;\n    var cell = decode_cell(y.ref);\n    if (opts.sheetRows && opts.sheetRows <= cell.r) return;\n    var textMatch = x.match(/<(?:\\w+:)?text>([\\s\\S]*)<\\/(?:\\w+:)?text>/);\n    var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {\n      r: \"\",\n      t: \"\",\n      h: \"\"\n    };\n    comment.r = rt.r;\n    if (rt.r == \"<t></t>\") rt.t = rt.h = \"\";\n    comment.t = (rt.t || \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    if (opts.cellHTML) comment.h = rt.h;\n    commentList.push(comment);\n  });\n  return commentList;\n}\n\nfunction write_comments_xml(data\n/*::, opts*/\n) {\n  var o = [XML_HEADER, writextag('comments', null, {\n    'xmlns': XMLNS_main[0]\n  })];\n  var iauthor\n  /*:Array<string>*/\n  = [];\n  o.push(\"<authors>\");\n  data.forEach(function (x) {\n    x[1].forEach(function (w) {\n      var a = escapexml(w.a);\n\n      if (iauthor.indexOf(a) == -1) {\n        iauthor.push(a);\n        o.push(\"<author>\" + a + \"</author>\");\n      }\n\n      if (w.T && w.ID && iauthor.indexOf(\"tc=\" + w.ID) == -1) {\n        iauthor.push(\"tc=\" + w.ID);\n        o.push(\"<author>\" + \"tc=\" + w.ID + \"</author>\");\n      }\n    });\n  });\n\n  if (iauthor.length == 0) {\n    iauthor.push(\"SheetJ5\");\n    o.push(\"<author>SheetJ5</author>\");\n  }\n\n  o.push(\"</authors>\");\n  o.push(\"<commentList>\");\n  data.forEach(function (d) {\n    /* 18.7.3 CT_Comment */\n    var lastauthor = 0,\n        ts = [],\n        tcnt = 0;\n    if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf(\"tc=\" + d[1][0].ID);\n    d[1].forEach(function (c) {\n      if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));\n      if (c.T) ++tcnt;\n      ts.push(c.t == null ? \"\" : escapexml(c.t));\n    });\n\n    if (tcnt === 0) {\n      d[1].forEach(function (c) {\n        o.push('<comment ref=\"' + d[0] + '\" authorId=\"' + iauthor.indexOf(escapexml(c.a)) + '\"><text>');\n        o.push(writetag(\"t\", c.t == null ? \"\" : escapexml(c.t)));\n        o.push('</text></comment>');\n      });\n    } else {\n      /* based on Threaded Comments -> Comments projection */\n      o.push('<comment ref=\"' + d[0] + '\" authorId=\"' + lastauthor + '\"><text>');\n      var t = \"Comment:\\n    \" + ts[0] + \"\\n\";\n\n      for (var i = 1; i < ts.length; ++i) {\n        t += \"Reply:\\n    \" + ts[i] + \"\\n\";\n      }\n\n      o.push(writetag(\"t\", escapexml(t)));\n      o.push('</text></comment>');\n    }\n  });\n  o.push(\"</commentList>\");\n\n  if (o.length > 2) {\n    o[o.length] = '</comments>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* [MS-XLSX] 2.1.17 */\n\n\nfunction parse_tcmnt_xml(data\n/*:string*/\n, opts)\n/*:Array<RawComment>*/\n{\n  var out = [];\n  var pass = false,\n      comment = {},\n      tidx = 0;\n  data.replace(tagregex, function xml_tcmnt(x, idx) {\n    var y\n    /*:any*/\n    = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<?xml':\n        break;\n\n      /* 2.6.207 ThreadedComments CT_ThreadedComments */\n\n      case '<ThreadedComments':\n        break;\n\n      case '</ThreadedComments>':\n        break;\n\n      /* 2.6.205 threadedComment CT_ThreadedComment */\n\n      case '<threadedComment':\n        comment = {\n          author: y.personId,\n          guid: y.id,\n          ref: y.ref,\n          T: 1\n        };\n        break;\n\n      case '</threadedComment>':\n        if (comment.t != null) out.push(comment);\n        break;\n\n      case '<text>':\n      case '<text':\n        tidx = idx + x.length;\n        break;\n\n      case '</text>':\n        comment.t = data.slice(tidx, idx).replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n        break;\n\n      /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */\n\n      case '<mentions':\n      case '<mentions>':\n        pass = true;\n        break;\n\n      case '</mentions>':\n        pass = false;\n        break;\n\n      /* 2.6.202 mention CT_Mention TODO */\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n      case '<extLst/>':\n        break;\n\n      /* 18.2.7  ext CT_Extension + */\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');\n    }\n\n    return x;\n  });\n  return out;\n}\n\nfunction write_tcmnt_xml(comments, people, opts) {\n  var o = [XML_HEADER, writextag('ThreadedComments', null, {\n    'xmlns': XMLNS.TCMNT\n  }).replace(/[\\/]>/, \">\")];\n  comments.forEach(function (carr) {\n    var rootid = \"\";\n    (carr[1] || []).forEach(function (c, idx) {\n      if (!c.T) {\n        delete c.ID;\n        return;\n      }\n\n      if (c.a && people.indexOf(c.a) == -1) people.push(c.a);\n      var tcopts = {\n        ref: carr[0],\n        id: \"{54EE7951-7262-4200-6969-\" + (\"000000000000\" + opts.tcid++).slice(-12) + \"}\"\n      };\n      if (idx == 0) rootid = tcopts.id;else tcopts.parentId = rootid;\n      c.ID = tcopts.id;\n      if (c.a) tcopts.personId = \"{54EE7950-7262-4200-6969-\" + (\"000000000000\" + people.indexOf(c.a)).slice(-12) + \"}\";\n      o.push(writextag('threadedComment', writetag('text', c.t || \"\"), tcopts));\n    });\n  });\n  o.push('</ThreadedComments>');\n  return o.join(\"\");\n}\n/* [MS-XLSX] 2.1.18 */\n\n\nfunction parse_people_xml(data\n/*:string*/\n, opts) {\n  var out = [];\n  var pass = false;\n  data.replace(tagregex, function xml_tcmnt(x) {\n    var y\n    /*:any*/\n    = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<?xml':\n        break;\n\n      /* 2.4.85 personList CT_PersonList */\n\n      case '<personList':\n        break;\n\n      case '</personList>':\n        break;\n\n      /* 2.6.203 person CT_Person TODO: providers */\n\n      case '<person':\n        out.push({\n          name: y.displayname,\n          id: y.id\n        });\n        break;\n\n      case '</person>':\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n      case '<extLst/>':\n        break;\n\n      /* 18.2.7  ext CT_Extension + */\n\n      case '<ext':\n        pass = true;\n        break;\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      default:\n        if (!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');\n    }\n\n    return x;\n  });\n  return out;\n}\n\nfunction write_people_xml(people\n/*, opts*/\n) {\n  var o = [XML_HEADER, writextag('personList', null, {\n    'xmlns': XMLNS.TCMNT,\n    'xmlns:x': XMLNS_main[0]\n  }).replace(/[\\/]>/, \">\")];\n  people.forEach(function (person, idx) {\n    o.push(writextag('person', null, {\n      displayName: person,\n      id: \"{54EE7950-7262-4200-6969-\" + (\"000000000000\" + idx).slice(-12) + \"}\",\n      userId: person,\n      providerId: \"None\"\n    }));\n  });\n  o.push(\"</personList>\");\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.28 BrtBeginComment */\n\n\nfunction parse_BrtBeginComment(data) {\n  var out = {};\n  out.iauthor = data.read_shift(4);\n  var rfx = parse_UncheckedRfX(data, 16);\n  out.rfx = rfx.s;\n  out.ref = encode_cell(rfx.s);\n  data.l += 16;\n  /*var guid = parse_GUID(data); */\n\n  return out;\n}\n\nfunction write_BrtBeginComment(data, o) {\n  if (o == null) o = new_buf(36);\n  o.write_shift(4, data[1].iauthor);\n  write_UncheckedRfX(data[0]\n  /*:any*/\n  , o);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  return o;\n}\n/* [MS-XLSB] 2.4.327 BrtCommentAuthor */\n\n\nvar parse_BrtCommentAuthor = parse_XLWideString;\n\nfunction write_BrtCommentAuthor(data) {\n  return write_XLWideString(data.slice(0, 54));\n}\n/* [MS-XLSB] 2.1.7.8 Comments */\n\n\nfunction parse_comments_bin(data, opts)\n/*:Array<RawComment>*/\n{\n  var out\n  /*:Array<RawComment>*/\n  = [];\n  var authors\n  /*:Array<string>*/\n  = [];\n  var c = {};\n  var pass = false;\n  recordhopper(data, function hopper_cmnt(val, R, RT) {\n    switch (RT) {\n      case 0x0278:\n        /* 'BrtCommentAuthor' */\n        authors.push(val);\n        break;\n\n      case 0x027B:\n        /* 'BrtBeginComment' */\n        c = val;\n        break;\n\n      case 0x027D:\n        /* 'BrtCommentText' */\n        c.t = val.t;\n        c.h = val.h;\n        c.r = val.r;\n        break;\n\n      case 0x027C:\n        /* 'BrtEndComment' */\n        c.author = authors[c.iauthor];\n        delete c\n        /*:any*/\n        .iauthor;\n        if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;\n        if (!c.t) c.t = \"\";\n        delete c.rfx;\n        out.push(c);\n        break;\n\n      case 0x0C00:\n        /* 'BrtUid' */\n        break;\n\n      case 0x0023:\n        /* 'BrtFRTBegin' */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* 'BrtFRTEnd' */\n        pass = false;\n        break;\n\n      case 0x0025:\n        /* 'BrtACBegin' */\n        break;\n\n      case 0x0026:\n        /* 'BrtACEnd' */\n        break;\n\n      default:\n        if (R.T) {\n          /* empty */\n        } else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  });\n  return out;\n}\n\nfunction write_comments_bin(data\n/*::, opts*/\n) {\n  var ba = buf_array();\n  var iauthor\n  /*:Array<string>*/\n  = [];\n  write_record(ba, 0x0274\n  /* BrtBeginComments */\n  );\n  write_record(ba, 0x0276\n  /* BrtBeginCommentAuthors */\n  );\n  data.forEach(function (comment) {\n    comment[1].forEach(function (c) {\n      if (iauthor.indexOf(c.a) > -1) return;\n      iauthor.push(c.a.slice(0, 54));\n      write_record(ba, 0x0278\n      /* BrtCommentAuthor */\n      , write_BrtCommentAuthor(c.a));\n    });\n  });\n  write_record(ba, 0x0277\n  /* BrtEndCommentAuthors */\n  );\n  write_record(ba, 0x0279\n  /* BrtBeginCommentList */\n  );\n  data.forEach(function (comment) {\n    comment[1].forEach(function (c) {\n      c.iauthor = iauthor.indexOf(c.a);\n      var range = {\n        s: decode_cell(comment[0]),\n        e: decode_cell(comment[0])\n      };\n      write_record(ba, 0x027B\n      /* BrtBeginComment */\n      , write_BrtBeginComment([range, c]));\n      if (c.t && c.t.length > 0) write_record(ba, 0x027D\n      /* BrtCommentText */\n      , write_BrtCommentText(c));\n      write_record(ba, 0x027C\n      /* BrtEndComment */\n      );\n      delete c.iauthor;\n    });\n  });\n  write_record(ba, 0x027A\n  /* BrtEndCommentList */\n  );\n  write_record(ba, 0x0275\n  /* BrtEndComments */\n  );\n  return ba.end();\n}\n\nvar CT_VBA = \"application/vnd.ms-office.vbaProject\";\n\nfunction make_vba_xls(cfb) {\n  var newcfb = CFB.utils.cfb_new({\n    root: \"R\"\n  });\n  cfb.FullPaths.forEach(function (p, i) {\n    if (p.slice(-1) === \"/\" || !p.match(/_VBA_PROJECT_CUR/)) return;\n    var newpath = p.replace(/^[^\\/]*/, \"R\").replace(/\\/_VBA_PROJECT_CUR\\u0000*/, \"\");\n    CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);\n  });\n  return CFB.write(newcfb);\n}\n\nfunction fill_vba_xls(cfb, vba) {\n  vba.FullPaths.forEach(function (p, i) {\n    if (i == 0) return;\n    var newpath = p.replace(/[^\\/]*[\\/]/, \"/_VBA_PROJECT_CUR/\");\n    if (newpath.slice(-1) !== \"/\") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);\n  });\n}\n\nvar VBAFMTS = [\"xlsb\", \"xlsm\", \"xlam\", \"biff8\", \"xla\"];\n/* macro and dialog sheet stubs */\n\nfunction\n  /*::data:any, opts, idx:number, rels, wb, themes, styles*/\nparse_ds_bin()\n/*:Worksheet*/\n{\n  return {\n    '!type': 'dialog'\n  };\n}\n\nfunction\n  /*::data:any, opts, idx:number, rels, wb, themes, styles*/\nparse_ds_xml()\n/*:Worksheet*/\n{\n  return {\n    '!type': 'dialog'\n  };\n}\n\nfunction\n  /*::data:any, opts, idx:number, rels, wb, themes, styles*/\nparse_ms_bin()\n/*:Worksheet*/\n{\n  return {\n    '!type': 'macro'\n  };\n}\n\nfunction\n  /*::data:any, opts, idx:number, rels, wb, themes, styles*/\nparse_ms_xml()\n/*:Worksheet*/\n{\n  return {\n    '!type': 'macro'\n  };\n}\n/* TODO: it will be useful to parse the function str */\n\n\nvar rc_to_a1 = /*#__PURE__*/function () {\n  var rcregex = /(^|[^A-Za-z_])R(\\[?-?\\d+\\]|[1-9]\\d*|)C(\\[?-?\\d+\\]|[1-9]\\d*|)(?![A-Za-z0-9_])/g;\n  var rcbase\n  /*:Cell*/\n  = {\n    r: 0,\n    c: 0\n  }\n  /*:any*/\n  ;\n\n  function rcfunc($$, $1, $2, $3) {\n    var cRel = false,\n        rRel = false;\n    if ($2.length == 0) rRel = true;else if ($2.charAt(0) == \"[\") {\n      rRel = true;\n      $2 = $2.slice(1, -1);\n    }\n    if ($3.length == 0) cRel = true;else if ($3.charAt(0) == \"[\") {\n      cRel = true;\n      $3 = $3.slice(1, -1);\n    }\n    var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0,\n        C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;\n    if (cRel) C += rcbase.c;else --C;\n    if (rRel) R += rcbase.r;else --R;\n    return $1 + (cRel ? \"\" : \"$\") + encode_col(C) + (rRel ? \"\" : \"$\") + encode_row(R);\n  }\n\n  return function rc_to_a1(fstr\n  /*:string*/\n  , base\n  /*:Cell*/\n  )\n  /*:string*/\n  {\n    rcbase = base;\n    return fstr.replace(rcregex, rcfunc);\n  };\n}();\n\nvar crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})(?![_.\\(A-Za-z0-9])/g;\n\nvar a1_to_rc = /*#__PURE__*/function () {\n  return function a1_to_rc(fstr\n  /*:string*/\n  , base\n  /*:CellAddress*/\n  ) {\n    return fstr.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {\n      var c = decode_col($3) - ($2 ? 0 : base.c);\n      var r = decode_row($5) - ($4 ? 0 : base.r);\n      var R = $4 == \"$\" ? r + 1 : r == 0 ? \"\" : \"[\" + r + \"]\";\n      var C = $2 == \"$\" ? c + 1 : c == 0 ? \"\" : \"[\" + c + \"]\";\n      return $1 + \"R\" + R + \"C\" + C;\n    });\n  };\n}();\n/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */\n\n\nfunction shift_formula_str(f\n/*:string*/\n, delta\n/*:Cell*/\n)\n/*:string*/\n{\n  return f.replace(crefregex, function ($0, $1, $2, $3, $4, $5) {\n    return $1 + ($2 == \"$\" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == \"$\" ? $4 + $5 : encode_row(decode_row($5) + delta.r));\n  });\n}\n\nfunction shift_formula_xlsx(f\n/*:string*/\n, range\n/*:string*/\n, cell\n/*:string*/\n)\n/*:string*/\n{\n  var r = decode_range(range),\n      s = r.s,\n      c = decode_cell(cell);\n  var delta = {\n    r: c.r - s.r,\n    c: c.c - s.c\n  };\n  return shift_formula_str(f, delta);\n}\n/* TODO: parse formula */\n\n\nfunction fuzzyfmla(f\n/*:string*/\n)\n/*:boolean*/\n{\n  if (f.length == 1) return false;\n  return true;\n}\n\nfunction _xlfn(f\n/*:string*/\n)\n/*:string*/\n{\n  return f.replace(/_xlfn\\./g, \"\");\n}\n\nfunction parseread1(blob) {\n  blob.l += 1;\n  return;\n}\n/* [MS-XLS] 2.5.51 */\n\n\nfunction parse_ColRelU(blob, length) {\n  var c = blob.read_shift(length == 1 ? 1 : 2);\n  return [c & 0x3FFF, c >> 14 & 1, c >> 15 & 1];\n}\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */\n\n\nfunction parse_RgceArea(blob, length, opts) {\n  var w = 2;\n\n  if (opts) {\n    if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);else if (opts.biff == 12) w = 4;\n  }\n\n  var r = blob.read_shift(w),\n      R = blob.read_shift(w);\n  var c = parse_ColRelU(blob, 2);\n  var C = parse_ColRelU(blob, 2);\n  return {\n    s: {\n      r: r,\n      c: c[0],\n      cRel: c[1],\n      rRel: c[2]\n    },\n    e: {\n      r: R,\n      c: C[0],\n      cRel: C[1],\n      rRel: C[2]\n    }\n  };\n}\n/* BIFF 2-5 encodes flags in the row field */\n\n\nfunction parse_RgceArea_BIFF2(blob\n/*::, length, opts*/\n) {\n  var r = parse_ColRelU(blob, 2),\n      R = parse_ColRelU(blob, 2);\n  var c = blob.read_shift(1);\n  var C = blob.read_shift(1);\n  return {\n    s: {\n      r: r[0],\n      c: c,\n      cRel: r[1],\n      rRel: r[2]\n    },\n    e: {\n      r: R[0],\n      c: C,\n      cRel: R[1],\n      rRel: R[2]\n    }\n  };\n}\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */\n\n\nfunction parse_RgceAreaRel(blob, length, opts) {\n  if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);\n  var r = blob.read_shift(opts.biff == 12 ? 4 : 2),\n      R = blob.read_shift(opts.biff == 12 ? 4 : 2);\n  var c = parse_ColRelU(blob, 2);\n  var C = parse_ColRelU(blob, 2);\n  return {\n    s: {\n      r: r,\n      c: c[0],\n      cRel: c[1],\n      rRel: c[2]\n    },\n    e: {\n      r: R,\n      c: C[0],\n      cRel: C[1],\n      rRel: C[2]\n    }\n  };\n}\n/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */\n\n\nfunction parse_RgceLoc(blob, length, opts) {\n  if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);\n  var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);\n  var c = parse_ColRelU(blob, 2);\n  return {\n    r: r,\n    c: c[0],\n    cRel: c[1],\n    rRel: c[2]\n  };\n}\n\nfunction parse_RgceLoc_BIFF2(blob\n/*::, length, opts*/\n) {\n  var r = parse_ColRelU(blob, 2);\n  var c = blob.read_shift(1);\n  return {\n    r: r[0],\n    c: c,\n    cRel: r[1],\n    rRel: r[2]\n  };\n}\n/* [MS-XLS] 2.5.198.107, 2.5.47 */\n\n\nfunction parse_RgceElfLoc(blob\n/*::, length, opts*/\n) {\n  var r = blob.read_shift(2);\n  var c = blob.read_shift(2);\n  return {\n    r: r,\n    c: c & 0xFF,\n    fQuoted: !!(c & 0x4000),\n    cRel: c >> 15,\n    rRel: c >> 15\n  };\n}\n/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */\n\n\nfunction parse_RgceLocRel(blob, length, opts) {\n  var biff = opts && opts.biff ? opts.biff : 8;\n  if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);\n  var r = blob.read_shift(biff >= 12 ? 4 : 2);\n  var cl = blob.read_shift(2);\n  var cRel = (cl & 0x4000) >> 14,\n      rRel = (cl & 0x8000) >> 15;\n  cl &= 0x3FFF;\n  if (rRel == 1) while (r > 0x7FFFF) {\n    r -= 0x100000;\n  }\n  if (cRel == 1) while (cl > 0x1FFF) {\n    cl = cl - 0x4000;\n  }\n  return {\n    r: r,\n    c: cl,\n    cRel: cRel,\n    rRel: rRel\n  };\n}\n\nfunction parse_RgceLocRel_BIFF2(blob\n/*::, length:number, opts*/\n) {\n  var rl = blob.read_shift(2);\n  var c = blob.read_shift(1);\n  var rRel = (rl & 0x8000) >> 15,\n      cRel = (rl & 0x4000) >> 14;\n  rl &= 0x3FFF;\n  if (rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;\n  if (cRel == 1 && c >= 0x80) c = c - 0x100;\n  return {\n    r: rl,\n    c: c,\n    cRel: cRel,\n    rRel: rRel\n  };\n}\n/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */\n\n\nfunction parse_PtgArea(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);\n  return [type, area];\n}\n/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */\n\n\nfunction parse_PtgArea3d(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  var ixti = blob.read_shift(2, 'i');\n  var w = 8;\n  if (opts) switch (opts.biff) {\n    case 5:\n      blob.l += 12;\n      w = 6;\n      break;\n\n    case 12:\n      w = 12;\n      break;\n  }\n  var area = parse_RgceArea(blob, w, opts);\n  return [type, ixti, area];\n}\n/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */\n\n\nfunction parse_PtgAreaErr(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;\n  return [type];\n}\n/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */\n\n\nfunction parse_PtgAreaErr3d(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  var ixti = blob.read_shift(2);\n  var w = 8;\n  if (opts) switch (opts.biff) {\n    case 5:\n      blob.l += 12;\n      w = 6;\n      break;\n\n    case 12:\n      w = 12;\n      break;\n  }\n  blob.l += w;\n  return [type, ixti];\n}\n/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */\n\n\nfunction parse_PtgAreaN(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  var area = parse_RgceAreaRel(blob, length - 1, opts);\n  return [type, area];\n}\n/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */\n\n\nfunction parse_PtgArray(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;\n  return [type];\n}\n/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */\n\n\nfunction parse_PtgAttrBaxcel(blob) {\n  var bitSemi = blob[blob.l + 1] & 0x01;\n  /* 1 = volatile */\n\n  var bitBaxcel = 1;\n  blob.l += 4;\n  return [bitSemi, bitBaxcel];\n}\n/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */\n\n\nfunction parse_PtgAttrChoose(blob, length, opts)\n/*:Array<number>*/\n{\n  blob.l += 2;\n  var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n  var o\n  /*:Array<number>*/\n  = [];\n  /* offset is 1 less than the number of elements */\n\n  for (var i = 0; i <= offset; ++i) {\n    o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */\n\n\nfunction parse_PtgAttrGoto(blob, length, opts) {\n  var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;\n  blob.l += 2;\n  return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];\n}\n/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */\n\n\nfunction parse_PtgAttrIf(blob, length, opts) {\n  var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;\n  blob.l += 2;\n  return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];\n}\n/* [MS-XLSB] 2.5.97.28 */\n\n\nfunction parse_PtgAttrIfError(blob) {\n  var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;\n  blob.l += 2;\n  return [bitIf, blob.read_shift(2)];\n}\n/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */\n\n\nfunction parse_PtgAttrSemi(blob, length, opts) {\n  var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;\n  blob.l += opts && opts.biff == 2 ? 3 : 4;\n  return [bitSemi];\n}\n/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */\n\n\nfunction parse_PtgAttrSpaceType(blob\n/*::, length*/\n) {\n  var type = blob.read_shift(1),\n      cch = blob.read_shift(1);\n  return [type, cch];\n}\n/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */\n\n\nfunction parse_PtgAttrSpace(blob) {\n  blob.read_shift(2);\n  return parse_PtgAttrSpaceType(blob, 2);\n}\n/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */\n\n\nfunction parse_PtgAttrSpaceSemi(blob) {\n  blob.read_shift(2);\n  return parse_PtgAttrSpaceType(blob, 2);\n}\n/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */\n\n\nfunction parse_PtgRef(blob, length, opts) {\n  //var ptg = blob[blob.l] & 0x1F;\n  var type = (blob[blob.l] & 0x60) >> 5;\n  blob.l += 1;\n  var loc = parse_RgceLoc(blob, 0, opts);\n  return [type, loc];\n}\n/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */\n\n\nfunction parse_PtgRefN(blob, length, opts) {\n  var type = (blob[blob.l] & 0x60) >> 5;\n  blob.l += 1;\n  var loc = parse_RgceLocRel(blob, 0, opts);\n  return [type, loc];\n}\n/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */\n\n\nfunction parse_PtgRef3d(blob, length, opts) {\n  var type = (blob[blob.l] & 0x60) >> 5;\n  blob.l += 1;\n  var ixti = blob.read_shift(2); // XtiIndex\n\n  if (opts && opts.biff == 5) blob.l += 12;\n  var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel\n\n  return [type, ixti, loc];\n}\n/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */\n\n\nfunction parse_PtgFunc(blob, length, opts) {\n  //var ptg = blob[blob.l] & 0x1F;\n  var type = (blob[blob.l] & 0x60) >> 5;\n  blob.l += 1;\n  var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);\n  return [FtabArgc[iftab], Ftab[iftab], type];\n}\n/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */\n\n\nfunction parse_PtgFuncVar(blob, length, opts) {\n  var type = blob[blob.l++];\n  var cparams = blob.read_shift(1),\n      tab = opts && opts.biff <= 3 ? [type == 0x58 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);\n  return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];\n}\n\nfunction parsetab(blob) {\n  return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 0x7FFF];\n}\n/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */\n\n\nfunction parse_PtgAttrSum(blob, length, opts) {\n  blob.l += opts && opts.biff == 2 ? 3 : 4;\n  return;\n}\n/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */\n\n\nfunction parse_PtgExp(blob, length, opts) {\n  blob.l++;\n  if (opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];\n  var row = blob.read_shift(2);\n  var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n  return [row, col];\n}\n/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */\n\n\nfunction parse_PtgErr(blob) {\n  blob.l++;\n  return BErr[blob.read_shift(1)];\n}\n/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */\n\n\nfunction parse_PtgInt(blob) {\n  blob.l++;\n  return blob.read_shift(2);\n}\n/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */\n\n\nfunction parse_PtgBool(blob) {\n  blob.l++;\n  return blob.read_shift(1) !== 0;\n}\n/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */\n\n\nfunction parse_PtgNum(blob) {\n  blob.l++;\n  return parse_Xnum(blob, 8);\n}\n/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */\n\n\nfunction parse_PtgStr(blob, length, opts) {\n  blob.l++;\n  return parse_ShortXLUnicodeString(blob, length - 1, opts);\n}\n/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */\n\n/* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */\n\n\nfunction parse_SerAr(blob, biff\n/*:number*/\n) {\n  var val = [blob.read_shift(1)];\n  if (biff == 12) switch (val[0]) {\n    case 0x02:\n      val[0] = 0x04;\n      break;\n\n    /* SerBool */\n\n    case 0x04:\n      val[0] = 0x10;\n      break;\n\n    /* SerErr */\n\n    case 0x00:\n      val[0] = 0x01;\n      break;\n\n    /* SerNum */\n\n    case 0x01:\n      val[0] = 0x02;\n      break;\n\n    /* SerStr */\n  }\n\n  switch (val[0]) {\n    case 0x04:\n      /* SerBool -- boolean */\n      val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';\n      if (biff != 12) blob.l += 7;\n      break;\n\n    case 0x25:\n    /* appears to be an alias */\n\n    case 0x10:\n      /* SerErr -- error */\n      val[1] = BErr[blob[blob.l]];\n      blob.l += biff == 12 ? 4 : 8;\n      break;\n\n    case 0x00:\n      /* SerNil -- honestly, I'm not sure how to reproduce this */\n      blob.l += 8;\n      break;\n\n    case 0x01:\n      /* SerNum -- Xnum */\n      val[1] = parse_Xnum(blob, 8);\n      break;\n\n    case 0x02:\n      /* SerStr -- XLUnicodeString (<256 chars) */\n      val[1] = parse_XLUnicodeString2(blob, 0, {\n        biff: biff > 0 && biff < 8 ? 2 : biff\n      });\n      break;\n\n    default:\n      throw new Error(\"Bad SerAr: \" + val[0]);\n\n    /* Unreachable */\n  }\n\n  return val;\n}\n/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */\n\n\nfunction parse_PtgExtraMem(blob, cce, opts) {\n  var count = blob.read_shift(opts.biff == 12 ? 4 : 2);\n  var out\n  /*:Array<Range>*/\n  = [];\n\n  for (var i = 0; i != count; ++i) {\n    out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));\n  }\n\n  return out;\n}\n/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */\n\n\nfunction parse_PtgExtraArray(blob, length, opts) {\n  var rows = 0,\n      cols = 0;\n\n  if (opts.biff == 12) {\n    rows = blob.read_shift(4); // DRw\n\n    cols = blob.read_shift(4); // DCol\n  } else {\n    cols = 1 + blob.read_shift(1); //DColByteU\n\n    rows = 1 + blob.read_shift(2); //DRw\n  }\n\n  if (opts.biff >= 2 && opts.biff < 8) {\n    --rows;\n    if (--cols == 0) cols = 0x100;\n  } // $FlowIgnore\n\n\n  for (var i = 0, o\n  /*:Array<Array<any>>*/\n  = []; i != rows && (o[i] = []); ++i) {\n    for (var j = 0; j != cols; ++j) {\n      o[i][j] = parse_SerAr(blob, opts.biff);\n    }\n  }\n\n  return o;\n}\n/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */\n\n\nfunction parse_PtgName(blob, length, opts) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var w = !opts || opts.biff >= 8 ? 4 : 2;\n  var nameindex = blob.read_shift(w);\n\n  switch (opts.biff) {\n    case 2:\n      blob.l += 5;\n      break;\n\n    case 3:\n    case 4:\n      blob.l += 8;\n      break;\n\n    case 5:\n      blob.l += 12;\n      break;\n  }\n\n  return [type, 0, nameindex];\n}\n/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */\n\n\nfunction parse_PtgNameX(blob, length, opts) {\n  if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var ixti = blob.read_shift(2); // XtiIndex\n\n  var nameindex = blob.read_shift(4);\n  return [type, ixti, nameindex];\n}\n\nfunction parse_PtgNameX_BIFF5(blob\n/*::, length, opts*/\n) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var ixti = blob.read_shift(2, 'i'); // XtiIndex\n\n  blob.l += 8;\n  var nameindex = blob.read_shift(2);\n  blob.l += 12;\n  return [type, ixti, nameindex];\n}\n/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */\n\n\nfunction parse_PtgMemArea(blob, length, opts) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  blob.l += opts && opts.biff == 2 ? 3 : 4;\n  var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n  return [type, cce];\n}\n/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */\n\n\nfunction parse_PtgMemFunc(blob, length, opts) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n  return [type, cce];\n}\n/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */\n\n\nfunction parse_PtgRefErr(blob, length, opts) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  blob.l += 4;\n  if (opts.biff < 8) blob.l--;\n  if (opts.biff == 12) blob.l += 2;\n  return [type];\n}\n/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */\n\n\nfunction parse_PtgRefErr3d(blob, length, opts) {\n  var type = (blob[blob.l++] & 0x60) >> 5;\n  var ixti = blob.read_shift(2);\n  var w = 4;\n  if (opts) switch (opts.biff) {\n    case 5:\n      w = 15;\n      break;\n\n    case 12:\n      w = 6;\n      break;\n  }\n  blob.l += w;\n  return [type, ixti];\n}\n/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */\n\n\nvar parse_PtgMemErr = parsenoop;\n/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */\n\nvar parse_PtgMemNoMem = parsenoop;\n/* [MS-XLS] 2.5.198.92 */\n\nvar parse_PtgTbl = parsenoop;\n\nfunction parse_PtgElfLoc(blob, length, opts) {\n  blob.l += 2;\n  return [parse_RgceElfLoc(blob, 4, opts)];\n}\n\nfunction parse_PtgElfNoop(blob\n/*::, length, opts*/\n) {\n  blob.l += 6;\n  return [];\n}\n/* [MS-XLS] 2.5.198.46 */\n\n\nvar parse_PtgElfCol = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.47 */\n\nvar parse_PtgElfColS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.48 */\n\nvar parse_PtgElfColSV = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.49 */\n\nvar parse_PtgElfColV = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.50 */\n\nfunction parse_PtgElfLel(blob\n/*::, length, opts*/\n) {\n  blob.l += 2;\n  return [parseuint16(blob), blob.read_shift(2) & 0x01];\n}\n/* [MS-XLS] 2.5.198.51 */\n\n\nvar parse_PtgElfRadical = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.52 */\n\nvar parse_PtgElfRadicalLel = parse_PtgElfLel;\n/* [MS-XLS] 2.5.198.53 */\n\nvar parse_PtgElfRadicalS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.54 */\n\nvar parse_PtgElfRw = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.55 */\n\nvar parse_PtgElfRwV = parse_PtgElfLoc;\n/* [MS-XLSB] 2.5.97.52 TODO */\n\nvar PtgListRT = [\"Data\", \"All\", \"Headers\", \"??\", \"?Data2\", \"??\", \"?DataHeaders\", \"??\", \"Totals\", \"??\", \"??\", \"??\", \"?DataTotals\", \"??\", \"??\", \"??\", \"?Current\"];\n\nfunction parse_PtgList(blob\n/*::, length, opts*/\n) {\n  blob.l += 2;\n  var ixti = blob.read_shift(2);\n  var flags = blob.read_shift(2);\n  var idx = blob.read_shift(4);\n  var c = blob.read_shift(2);\n  var C = blob.read_shift(2);\n  var rt = PtgListRT[flags >> 2 & 0x1F];\n  return {\n    ixti: ixti,\n    coltype: flags & 0x3,\n    rt: rt,\n    idx: idx,\n    c: c,\n    C: C\n  };\n}\n/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */\n\n\nfunction parse_PtgSxName(blob\n/*::, length, opts*/\n) {\n  blob.l += 2;\n  return [blob.read_shift(4)];\n}\n/* [XLS] old spec */\n\n\nfunction parse_PtgSheet(blob, length, opts) {\n  blob.l += 5;\n  blob.l += 2;\n  blob.l += opts.biff == 2 ? 1 : 4;\n  return [\"PTGSHEET\"];\n}\n\nfunction parse_PtgEndSheet(blob, length, opts) {\n  blob.l += opts.biff == 2 ? 4 : 5;\n  return [\"PTGENDSHEET\"];\n}\n\nfunction parse_PtgMemAreaN(blob\n/*::, length, opts*/\n) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var cce = blob.read_shift(2);\n  return [type, cce];\n}\n\nfunction parse_PtgMemNoMemN(blob\n/*::, length, opts*/\n) {\n  var type = blob.read_shift(1) >>> 5 & 0x03;\n  var cce = blob.read_shift(2);\n  return [type, cce];\n}\n\nfunction parse_PtgAttrNoop(blob\n/*::, length, opts*/\n) {\n  blob.l += 4;\n  return [0, 0];\n}\n/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */\n\n\nvar PtgTypes = {\n  /*::[*/\n  0x01\n  /*::]*/\n  : {\n    n: 'PtgExp',\n    f: parse_PtgExp\n  },\n\n  /*::[*/\n  0x02\n  /*::]*/\n  : {\n    n: 'PtgTbl',\n    f: parse_PtgTbl\n  },\n\n  /*::[*/\n  0x03\n  /*::]*/\n  : {\n    n: 'PtgAdd',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x04\n  /*::]*/\n  : {\n    n: 'PtgSub',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x05\n  /*::]*/\n  : {\n    n: 'PtgMul',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x06\n  /*::]*/\n  : {\n    n: 'PtgDiv',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : {\n    n: 'PtgPower',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x08\n  /*::]*/\n  : {\n    n: 'PtgConcat',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x09\n  /*::]*/\n  : {\n    n: 'PtgLt',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0A\n  /*::]*/\n  : {\n    n: 'PtgLe',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0B\n  /*::]*/\n  : {\n    n: 'PtgEq',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0C\n  /*::]*/\n  : {\n    n: 'PtgGe',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0D\n  /*::]*/\n  : {\n    n: 'PtgGt',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0E\n  /*::]*/\n  : {\n    n: 'PtgNe',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x0F\n  /*::]*/\n  : {\n    n: 'PtgIsect',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : {\n    n: 'PtgUnion',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x11\n  /*::]*/\n  : {\n    n: 'PtgRange',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x12\n  /*::]*/\n  : {\n    n: 'PtgUplus',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x13\n  /*::]*/\n  : {\n    n: 'PtgUminus',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x14\n  /*::]*/\n  : {\n    n: 'PtgPercent',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x15\n  /*::]*/\n  : {\n    n: 'PtgParen',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x16\n  /*::]*/\n  : {\n    n: 'PtgMissArg',\n    f: parseread1\n  },\n\n  /*::[*/\n  0x17\n  /*::]*/\n  : {\n    n: 'PtgStr',\n    f: parse_PtgStr\n  },\n\n  /*::[*/\n  0x1A\n  /*::]*/\n  : {\n    n: 'PtgSheet',\n    f: parse_PtgSheet\n  },\n\n  /*::[*/\n  0x1B\n  /*::]*/\n  : {\n    n: 'PtgEndSheet',\n    f: parse_PtgEndSheet\n  },\n\n  /*::[*/\n  0x1C\n  /*::]*/\n  : {\n    n: 'PtgErr',\n    f: parse_PtgErr\n  },\n\n  /*::[*/\n  0x1D\n  /*::]*/\n  : {\n    n: 'PtgBool',\n    f: parse_PtgBool\n  },\n\n  /*::[*/\n  0x1E\n  /*::]*/\n  : {\n    n: 'PtgInt',\n    f: parse_PtgInt\n  },\n\n  /*::[*/\n  0x1F\n  /*::]*/\n  : {\n    n: 'PtgNum',\n    f: parse_PtgNum\n  },\n\n  /*::[*/\n  0x20\n  /*::]*/\n  : {\n    n: 'PtgArray',\n    f: parse_PtgArray\n  },\n\n  /*::[*/\n  0x21\n  /*::]*/\n  : {\n    n: 'PtgFunc',\n    f: parse_PtgFunc\n  },\n\n  /*::[*/\n  0x22\n  /*::]*/\n  : {\n    n: 'PtgFuncVar',\n    f: parse_PtgFuncVar\n  },\n\n  /*::[*/\n  0x23\n  /*::]*/\n  : {\n    n: 'PtgName',\n    f: parse_PtgName\n  },\n\n  /*::[*/\n  0x24\n  /*::]*/\n  : {\n    n: 'PtgRef',\n    f: parse_PtgRef\n  },\n\n  /*::[*/\n  0x25\n  /*::]*/\n  : {\n    n: 'PtgArea',\n    f: parse_PtgArea\n  },\n\n  /*::[*/\n  0x26\n  /*::]*/\n  : {\n    n: 'PtgMemArea',\n    f: parse_PtgMemArea\n  },\n\n  /*::[*/\n  0x27\n  /*::]*/\n  : {\n    n: 'PtgMemErr',\n    f: parse_PtgMemErr\n  },\n\n  /*::[*/\n  0x28\n  /*::]*/\n  : {\n    n: 'PtgMemNoMem',\n    f: parse_PtgMemNoMem\n  },\n\n  /*::[*/\n  0x29\n  /*::]*/\n  : {\n    n: 'PtgMemFunc',\n    f: parse_PtgMemFunc\n  },\n\n  /*::[*/\n  0x2A\n  /*::]*/\n  : {\n    n: 'PtgRefErr',\n    f: parse_PtgRefErr\n  },\n\n  /*::[*/\n  0x2B\n  /*::]*/\n  : {\n    n: 'PtgAreaErr',\n    f: parse_PtgAreaErr\n  },\n\n  /*::[*/\n  0x2C\n  /*::]*/\n  : {\n    n: 'PtgRefN',\n    f: parse_PtgRefN\n  },\n\n  /*::[*/\n  0x2D\n  /*::]*/\n  : {\n    n: 'PtgAreaN',\n    f: parse_PtgAreaN\n  },\n\n  /*::[*/\n  0x2E\n  /*::]*/\n  : {\n    n: 'PtgMemAreaN',\n    f: parse_PtgMemAreaN\n  },\n\n  /*::[*/\n  0x2F\n  /*::]*/\n  : {\n    n: 'PtgMemNoMemN',\n    f: parse_PtgMemNoMemN\n  },\n\n  /*::[*/\n  0x39\n  /*::]*/\n  : {\n    n: 'PtgNameX',\n    f: parse_PtgNameX\n  },\n\n  /*::[*/\n  0x3A\n  /*::]*/\n  : {\n    n: 'PtgRef3d',\n    f: parse_PtgRef3d\n  },\n\n  /*::[*/\n  0x3B\n  /*::]*/\n  : {\n    n: 'PtgArea3d',\n    f: parse_PtgArea3d\n  },\n\n  /*::[*/\n  0x3C\n  /*::]*/\n  : {\n    n: 'PtgRefErr3d',\n    f: parse_PtgRefErr3d\n  },\n\n  /*::[*/\n  0x3D\n  /*::]*/\n  : {\n    n: 'PtgAreaErr3d',\n    f: parse_PtgAreaErr3d\n  },\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : {}\n};\n/* These are duplicated in the PtgTypes table */\n\nvar PtgDupes = {\n  /*::[*/\n  0x40\n  /*::]*/\n  : 0x20,\n\n  /*::[*/\n  0x60\n  /*::]*/\n  : 0x20,\n\n  /*::[*/\n  0x41\n  /*::]*/\n  : 0x21,\n\n  /*::[*/\n  0x61\n  /*::]*/\n  : 0x21,\n\n  /*::[*/\n  0x42\n  /*::]*/\n  : 0x22,\n\n  /*::[*/\n  0x62\n  /*::]*/\n  : 0x22,\n\n  /*::[*/\n  0x43\n  /*::]*/\n  : 0x23,\n\n  /*::[*/\n  0x63\n  /*::]*/\n  : 0x23,\n\n  /*::[*/\n  0x44\n  /*::]*/\n  : 0x24,\n\n  /*::[*/\n  0x64\n  /*::]*/\n  : 0x24,\n\n  /*::[*/\n  0x45\n  /*::]*/\n  : 0x25,\n\n  /*::[*/\n  0x65\n  /*::]*/\n  : 0x25,\n\n  /*::[*/\n  0x46\n  /*::]*/\n  : 0x26,\n\n  /*::[*/\n  0x66\n  /*::]*/\n  : 0x26,\n\n  /*::[*/\n  0x47\n  /*::]*/\n  : 0x27,\n\n  /*::[*/\n  0x67\n  /*::]*/\n  : 0x27,\n\n  /*::[*/\n  0x48\n  /*::]*/\n  : 0x28,\n\n  /*::[*/\n  0x68\n  /*::]*/\n  : 0x28,\n\n  /*::[*/\n  0x49\n  /*::]*/\n  : 0x29,\n\n  /*::[*/\n  0x69\n  /*::]*/\n  : 0x29,\n\n  /*::[*/\n  0x4A\n  /*::]*/\n  : 0x2A,\n\n  /*::[*/\n  0x6A\n  /*::]*/\n  : 0x2A,\n\n  /*::[*/\n  0x4B\n  /*::]*/\n  : 0x2B,\n\n  /*::[*/\n  0x6B\n  /*::]*/\n  : 0x2B,\n\n  /*::[*/\n  0x4C\n  /*::]*/\n  : 0x2C,\n\n  /*::[*/\n  0x6C\n  /*::]*/\n  : 0x2C,\n\n  /*::[*/\n  0x4D\n  /*::]*/\n  : 0x2D,\n\n  /*::[*/\n  0x6D\n  /*::]*/\n  : 0x2D,\n\n  /*::[*/\n  0x4E\n  /*::]*/\n  : 0x2E,\n\n  /*::[*/\n  0x6E\n  /*::]*/\n  : 0x2E,\n\n  /*::[*/\n  0x4F\n  /*::]*/\n  : 0x2F,\n\n  /*::[*/\n  0x6F\n  /*::]*/\n  : 0x2F,\n\n  /*::[*/\n  0x58\n  /*::]*/\n  : 0x22,\n\n  /*::[*/\n  0x78\n  /*::]*/\n  : 0x22,\n\n  /*::[*/\n  0x59\n  /*::]*/\n  : 0x39,\n\n  /*::[*/\n  0x79\n  /*::]*/\n  : 0x39,\n\n  /*::[*/\n  0x5A\n  /*::]*/\n  : 0x3A,\n\n  /*::[*/\n  0x7A\n  /*::]*/\n  : 0x3A,\n\n  /*::[*/\n  0x5B\n  /*::]*/\n  : 0x3B,\n\n  /*::[*/\n  0x7B\n  /*::]*/\n  : 0x3B,\n\n  /*::[*/\n  0x5C\n  /*::]*/\n  : 0x3C,\n\n  /*::[*/\n  0x7C\n  /*::]*/\n  : 0x3C,\n\n  /*::[*/\n  0x5D\n  /*::]*/\n  : 0x3D,\n\n  /*::[*/\n  0x7D\n  /*::]*/\n  : 0x3D\n};\nvar Ptg18 = {\n  /*::[*/\n  0x01\n  /*::]*/\n  : {\n    n: 'PtgElfLel',\n    f: parse_PtgElfLel\n  },\n\n  /*::[*/\n  0x02\n  /*::]*/\n  : {\n    n: 'PtgElfRw',\n    f: parse_PtgElfRw\n  },\n\n  /*::[*/\n  0x03\n  /*::]*/\n  : {\n    n: 'PtgElfCol',\n    f: parse_PtgElfCol\n  },\n\n  /*::[*/\n  0x06\n  /*::]*/\n  : {\n    n: 'PtgElfRwV',\n    f: parse_PtgElfRwV\n  },\n\n  /*::[*/\n  0x07\n  /*::]*/\n  : {\n    n: 'PtgElfColV',\n    f: parse_PtgElfColV\n  },\n\n  /*::[*/\n  0x0A\n  /*::]*/\n  : {\n    n: 'PtgElfRadical',\n    f: parse_PtgElfRadical\n  },\n\n  /*::[*/\n  0x0B\n  /*::]*/\n  : {\n    n: 'PtgElfRadicalS',\n    f: parse_PtgElfRadicalS\n  },\n\n  /*::[*/\n  0x0D\n  /*::]*/\n  : {\n    n: 'PtgElfColS',\n    f: parse_PtgElfColS\n  },\n\n  /*::[*/\n  0x0F\n  /*::]*/\n  : {\n    n: 'PtgElfColSV',\n    f: parse_PtgElfColSV\n  },\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : {\n    n: 'PtgElfRadicalLel',\n    f: parse_PtgElfRadicalLel\n  },\n\n  /*::[*/\n  0x19\n  /*::]*/\n  : {\n    n: 'PtgList',\n    f: parse_PtgList\n  },\n\n  /*::[*/\n  0x1D\n  /*::]*/\n  : {\n    n: 'PtgSxName',\n    f: parse_PtgSxName\n  },\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : {}\n};\nvar Ptg19 = {\n  /*::[*/\n  0x00\n  /*::]*/\n  : {\n    n: 'PtgAttrNoop',\n    f: parse_PtgAttrNoop\n  },\n\n  /*::[*/\n  0x01\n  /*::]*/\n  : {\n    n: 'PtgAttrSemi',\n    f: parse_PtgAttrSemi\n  },\n\n  /*::[*/\n  0x02\n  /*::]*/\n  : {\n    n: 'PtgAttrIf',\n    f: parse_PtgAttrIf\n  },\n\n  /*::[*/\n  0x04\n  /*::]*/\n  : {\n    n: 'PtgAttrChoose',\n    f: parse_PtgAttrChoose\n  },\n\n  /*::[*/\n  0x08\n  /*::]*/\n  : {\n    n: 'PtgAttrGoto',\n    f: parse_PtgAttrGoto\n  },\n\n  /*::[*/\n  0x10\n  /*::]*/\n  : {\n    n: 'PtgAttrSum',\n    f: parse_PtgAttrSum\n  },\n\n  /*::[*/\n  0x20\n  /*::]*/\n  : {\n    n: 'PtgAttrBaxcel',\n    f: parse_PtgAttrBaxcel\n  },\n\n  /*::[*/\n  0x21\n  /*::]*/\n  : {\n    n: 'PtgAttrBaxcel',\n    f: parse_PtgAttrBaxcel\n  },\n\n  /*::[*/\n  0x40\n  /*::]*/\n  : {\n    n: 'PtgAttrSpace',\n    f: parse_PtgAttrSpace\n  },\n\n  /*::[*/\n  0x41\n  /*::]*/\n  : {\n    n: 'PtgAttrSpaceSemi',\n    f: parse_PtgAttrSpaceSemi\n  },\n\n  /*::[*/\n  0x80\n  /*::]*/\n  : {\n    n: 'PtgAttrIfError',\n    f: parse_PtgAttrIfError\n  },\n\n  /*::[*/\n  0xFF\n  /*::]*/\n  : {}\n};\n/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */\n\nfunction parse_RgbExtra(blob, length, rgce, opts) {\n  if (opts.biff < 8) return parsenoop(blob, length);\n  var target = blob.l + length;\n  var o = [];\n\n  for (var i = 0; i !== rgce.length; ++i) {\n    switch (rgce[i][0]) {\n      case 'PtgArray':\n        /* PtgArray -> PtgExtraArray */\n        rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);\n        o.push(rgce[i][1]);\n        break;\n\n      case 'PtgMemArea':\n        /* PtgMemArea -> PtgExtraMem */\n        rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);\n        o.push(rgce[i][2]);\n        break;\n\n      case 'PtgExp':\n        /* PtgExp -> PtgExtraCol */\n        if (opts && opts.biff == 12) {\n          rgce[i][1][1] = blob.read_shift(4);\n          o.push(rgce[i][1]);\n        }\n\n        break;\n\n      case 'PtgList':\n      /* TODO: PtgList -> PtgExtraList */\n\n      case 'PtgElfRadicalS':\n      /* TODO: PtgElfRadicalS -> PtgExtraElf */\n\n      case 'PtgElfColS':\n      /* TODO: PtgElfColS -> PtgExtraElf */\n\n      case 'PtgElfColSV':\n        /* TODO: PtgElfColSV -> PtgExtraElf */\n        throw \"Unsupported \" + rgce[i][0];\n\n      default:\n        break;\n    }\n  }\n\n  length = target - blob.l;\n  /* note: this is technically an error but Excel disregards */\n  //if(target !== blob.l && blob.l !== target - length) throw new Error(target + \" != \" + blob.l);\n\n  if (length !== 0) o.push(parsenoop(blob, length));\n  return o;\n}\n/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */\n\n\nfunction parse_Rgce(blob, length, opts) {\n  var target = blob.l + length;\n  var R,\n      id,\n      ptgs = [];\n\n  while (target != blob.l) {\n    length = target - blob.l;\n    id = blob[blob.l];\n    R = PtgTypes[id] || PtgTypes[PtgDupes[id]];\n    if (id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];\n\n    if (!R || !R.f) {\n      /*ptgs.push*/\n      parsenoop(blob, length);\n    } else {\n      ptgs.push([R.n, R.f(blob, length, opts)]);\n    }\n  }\n\n  return ptgs;\n}\n\nfunction stringify_array(f\n/*:Array<Array<string>>*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < f.length; ++i) {\n    var x = f[i],\n        r\n    /*:Array<string>*/\n    = [];\n\n    for (var j = 0; j < x.length; ++j) {\n      var y = x[j];\n      if (y) switch (y[0]) {\n        // TODO: handle embedded quotes\n        case 0x02:\n          /*:: if(typeof y[1] != 'string') throw \"unreachable\"; */\n          r.push('\"' + y[1].replace(/\"/g, '\"\"') + '\"');\n          break;\n\n        default:\n          r.push(y[1]);\n      } else r.push(\"\");\n    }\n\n    o.push(r.join(\",\"));\n  }\n\n  return o.join(\";\");\n}\n/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */\n\n\nvar PtgBinOp = {\n  PtgAdd: \"+\",\n  PtgConcat: \"&\",\n  PtgDiv: \"/\",\n  PtgEq: \"=\",\n  PtgGe: \">=\",\n  PtgGt: \">\",\n  PtgLe: \"<=\",\n  PtgLt: \"<\",\n  PtgMul: \"*\",\n  PtgNe: \"<>\",\n  PtgPower: \"^\",\n  PtgSub: \"-\"\n}; // TODO: explore space\n\nfunction make_3d_range(start, end) {\n  var s = start.lastIndexOf(\"!\"),\n      e = end.lastIndexOf(\"!\");\n  if (s == -1 && e == -1) return start + \":\" + end;\n  if (s > 0 && e > 0 && start.slice(0, s).toLowerCase() == end.slice(0, e).toLowerCase()) return start + \":\" + end.slice(e + 1);\n  console.error(\"Cannot hydrate range\", start, end);\n  return start + \":\" + end;\n}\n\nfunction get_ixti_raw(supbooks, ixti\n/*:number*/\n, opts)\n/*:string*/\n{\n  if (!supbooks) return \"SH33TJSERR0\";\n  if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];\n  if (!supbooks.XTI) return \"SH33TJSERR6\";\n  var XTI = supbooks.XTI[ixti];\n\n  if (opts.biff < 8) {\n    if (ixti > 10000) ixti -= 65536;\n    if (ixti < 0) ixti = -ixti;\n    return ixti == 0 ? \"\" : supbooks.XTI[ixti - 1];\n  }\n\n  if (!XTI) return \"SH33TJSERR1\";\n  var o = \"\";\n  if (opts.biff > 8) switch (supbooks[XTI[0]][0]) {\n    case 0x0165:\n      /* 'BrtSupSelf' */\n      o = XTI[1] == -1 ? \"#REF\" : supbooks.SheetNames[XTI[1]];\n      return XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n\n    case 0x0166:\n      /* 'BrtSupSame' */\n      if (opts.SID != null) return supbooks.SheetNames[opts.SID];\n      return \"SH33TJSSAME\" + supbooks[XTI[0]][0];\n\n    case 0x0163:\n    /* 'BrtSupBookSrc' */\n\n    /* falls through */\n\n    default:\n      return \"SH33TJSSRC\" + supbooks[XTI[0]][0];\n  }\n\n  switch (supbooks[XTI[0]][0][0]) {\n    case 0x0401:\n      o = XTI[1] == -1 ? \"#REF\" : supbooks.SheetNames[XTI[1]] || \"SH33TJSERR3\";\n      return XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n\n    case 0x3A01:\n      return supbooks[XTI[0]].slice(1).map(function (name) {\n        return name.Name;\n      }).join(\";;\");\n    //return \"SH33TJSERR8\";\n\n    default:\n      if (!supbooks[XTI[0]][0][3]) return \"SH33TJSERR2\";\n      o = XTI[1] == -1 ? \"#REF\" : supbooks[XTI[0]][0][3][XTI[1]] || \"SH33TJSERR4\";\n      return XTI[1] == XTI[2] ? o : o + \":\" + supbooks[XTI[0]][0][3][XTI[2]];\n  }\n}\n\nfunction get_ixti(supbooks, ixti\n/*:number*/\n, opts)\n/*:string*/\n{\n  var ixtiraw = get_ixti_raw(supbooks, ixti, opts);\n  return ixtiraw == \"#REF\" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);\n}\n\nfunction stringify_formula(formula\n/*Array<any>*/\n, range, cell\n/*:any*/\n, supbooks, opts)\n/*:string*/\n{\n  var biff = opts && opts.biff || 8;\n  var _range =\n  /*range != null ? range :*/\n  {\n    s: {\n      c: 0,\n      r: 0\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  var stack\n  /*:Array<string>*/\n  = [],\n      e1,\n      e2,\n\n  /*::type,*/\n  c\n  /*:CellAddress*/\n  ,\n      ixti = 0,\n      nameidx = 0,\n      r,\n      sname = \"\";\n  if (!formula[0] || !formula[0][0]) return \"\";\n  var last_sp = -1,\n      sp = \"\";\n\n  for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {\n    var f = formula[0][ff];\n\n    switch (f[0]) {\n      case 'PtgUminus':\n        /* [MS-XLS] 2.5.198.93 */\n        stack.push(\"-\" + stack.pop());\n        break;\n\n      case 'PtgUplus':\n        /* [MS-XLS] 2.5.198.95 */\n        stack.push(\"+\" + stack.pop());\n        break;\n\n      case 'PtgPercent':\n        /* [MS-XLS] 2.5.198.81 */\n        stack.push(stack.pop() + \"%\");\n        break;\n\n      case 'PtgAdd':\n      /* [MS-XLS] 2.5.198.26 */\n\n      case 'PtgConcat':\n      /* [MS-XLS] 2.5.198.43 */\n\n      case 'PtgDiv':\n      /* [MS-XLS] 2.5.198.45 */\n\n      case 'PtgEq':\n      /* [MS-XLS] 2.5.198.56 */\n\n      case 'PtgGe':\n      /* [MS-XLS] 2.5.198.64 */\n\n      case 'PtgGt':\n      /* [MS-XLS] 2.5.198.65 */\n\n      case 'PtgLe':\n      /* [MS-XLS] 2.5.198.68 */\n\n      case 'PtgLt':\n      /* [MS-XLS] 2.5.198.69 */\n\n      case 'PtgMul':\n      /* [MS-XLS] 2.5.198.75 */\n\n      case 'PtgNe':\n      /* [MS-XLS] 2.5.198.78 */\n\n      case 'PtgPower':\n      /* [MS-XLS] 2.5.198.82 */\n\n      case 'PtgSub':\n        /* [MS-XLS] 2.5.198.90 */\n        e1 = stack.pop();\n        e2 = stack.pop();\n\n        if (last_sp >= 0) {\n          switch (formula[0][last_sp][1][0]) {\n            case 0:\n              // $FlowIgnore\n              sp = fill(\" \", formula[0][last_sp][1][1]);\n              break;\n\n            case 1:\n              // $FlowIgnore\n              sp = fill(\"\\r\", formula[0][last_sp][1][1]);\n              break;\n\n            default:\n              sp = \"\"; // $FlowIgnore\n\n              if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n          }\n\n          e2 = e2 + sp;\n          last_sp = -1;\n        }\n\n        stack.push(e2 + PtgBinOp[f[0]] + e1);\n        break;\n\n      case 'PtgIsect':\n        /* [MS-XLS] 2.5.198.67 */\n        e1 = stack.pop();\n        e2 = stack.pop();\n        stack.push(e2 + \" \" + e1);\n        break;\n\n      case 'PtgUnion':\n        /* [MS-XLS] 2.5.198.94 */\n        e1 = stack.pop();\n        e2 = stack.pop();\n        stack.push(e2 + \",\" + e1);\n        break;\n\n      case 'PtgRange':\n        /* [MS-XLS] 2.5.198.83 */\n        e1 = stack.pop();\n        e2 = stack.pop();\n        stack.push(make_3d_range(e2, e1));\n        break;\n\n      case 'PtgAttrChoose':\n        /* [MS-XLS] 2.5.198.34 */\n        break;\n\n      case 'PtgAttrGoto':\n        /* [MS-XLS] 2.5.198.35 */\n        break;\n\n      case 'PtgAttrIf':\n        /* [MS-XLS] 2.5.198.36 */\n        break;\n\n      case 'PtgAttrIfError':\n        /* [MS-XLSB] 2.5.97.28 */\n        break;\n\n      case 'PtgRef':\n        /* [MS-XLS] 2.5.198.84 */\n\n        /*::type = f[1][0]; */\n        c = shift_cell_xls(f[1][1]\n        /*:any*/\n        , _range, opts);\n        stack.push(encode_cell_xls(c, biff));\n        break;\n\n      case 'PtgRefN':\n        /* [MS-XLS] 2.5.198.88 */\n\n        /*::type = f[1][0]; */\n        c = cell ? shift_cell_xls(f[1][1]\n        /*:any*/\n        , cell, opts) : f[1][1]\n        /*:any*/\n        ;\n        stack.push(encode_cell_xls(c, biff));\n        break;\n\n      case 'PtgRef3d':\n        /* [MS-XLS] 2.5.198.85 */\n\n        /*::type = f[1][0]; */\n        ixti =\n        /*::Number(*/\n        f[1][1]\n        /*::)*/\n        ;\n        c = shift_cell_xls(f[1][2]\n        /*:any*/\n        , _range, opts);\n        sname = get_ixti(supbooks, ixti, opts);\n        var w = sname;\n        /* IE9 fails on defined names */\n        // eslint-disable-line no-unused-vars\n\n        stack.push(sname + \"!\" + encode_cell_xls(c, biff));\n        break;\n\n      case 'PtgFunc':\n      /* [MS-XLS] 2.5.198.62 */\n\n      case 'PtgFuncVar':\n        /* [MS-XLS] 2.5.198.63 */\n\n        /* f[1] = [argc, func, type] */\n        var argc\n        /*:number*/\n        = f[1][0]\n        /*:any*/\n        ,\n            func\n        /*:string*/\n        = f[1][1]\n        /*:any*/\n        ;\n        if (!argc) argc = 0;\n        argc &= 0x7F;\n        var args = argc == 0 ? [] : stack.slice(-argc);\n        stack.length -= argc;\n        if (func === 'User') func = args.shift();\n        stack.push(func + \"(\" + args.join(\",\") + \")\");\n        break;\n\n      case 'PtgBool':\n        /* [MS-XLS] 2.5.198.42 */\n        stack.push(f[1] ? \"TRUE\" : \"FALSE\");\n        break;\n\n      case 'PtgInt':\n        /* [MS-XLS] 2.5.198.66 */\n        stack.push(\n        /*::String(*/\n        f[1]\n        /*::)*/\n        );\n        break;\n\n      case 'PtgNum':\n        /* [MS-XLS] 2.5.198.79 TODO: precision? */\n        stack.push(String(f[1]));\n        break;\n\n      case 'PtgStr':\n        /* [MS-XLS] 2.5.198.89 */\n        // $FlowIgnore\n        stack.push('\"' + f[1].replace(/\"/g, '\"\"') + '\"');\n        break;\n\n      case 'PtgErr':\n        /* [MS-XLS] 2.5.198.57 */\n        stack.push(\n        /*::String(*/\n        f[1]\n        /*::)*/\n        );\n        break;\n\n      case 'PtgAreaN':\n        /* [MS-XLS] 2.5.198.31 TODO */\n\n        /*::type = f[1][0]; */\n        r = shift_range_xls(f[1][1], cell ? {\n          s: cell\n        } : _range, opts);\n        stack.push(encode_range_xls(r\n        /*:any*/\n        , opts));\n        break;\n\n      case 'PtgArea':\n        /* [MS-XLS] 2.5.198.27 TODO: fixed points */\n\n        /*::type = f[1][0]; */\n        r = shift_range_xls(f[1][1], _range, opts);\n        stack.push(encode_range_xls(r\n        /*:any*/\n        , opts));\n        break;\n\n      case 'PtgArea3d':\n        /* [MS-XLS] 2.5.198.28 TODO */\n\n        /*::type = f[1][0]; */\n        ixti =\n        /*::Number(*/\n        f[1][1]\n        /*::)*/\n        ;\n        r = f[1][2];\n        sname = get_ixti(supbooks, ixti, opts);\n        stack.push(sname + \"!\" + encode_range_xls(r\n        /*:any*/\n        , opts));\n        break;\n\n      case 'PtgAttrSum':\n        /* [MS-XLS] 2.5.198.41 */\n        stack.push(\"SUM(\" + stack.pop() + \")\");\n        break;\n\n      case 'PtgAttrBaxcel':\n      /* [MS-XLS] 2.5.198.33 */\n\n      case 'PtgAttrSemi':\n        /* [MS-XLS] 2.5.198.37 */\n        break;\n\n      case 'PtgName':\n        /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */\n\n        /* f[1] = type, 0, nameindex */\n        nameidx = f[1][2]\n        /*:any*/\n        ;\n        var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];\n        var name = lbl ? lbl.Name : \"SH33TJSNAME\" + String(nameidx);\n        /* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */\n\n        if (name && name.slice(0, 6) == \"_xlfn.\" && !opts.xlfn) name = name.slice(6);\n        stack.push(name);\n        break;\n\n      case 'PtgNameX':\n        /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */\n\n        /* f[1] = type, ixti, nameindex */\n        var bookidx\n        /*:number*/\n        = f[1][1]\n        /*:any*/\n        ;\n        nameidx = f[1][2]\n        /*:any*/\n        ;\n        var externbook;\n        /* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */\n\n        if (opts.biff <= 5) {\n          if (bookidx < 0) bookidx = -bookidx;\n          if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];\n        } else {\n          var o = \"\";\n\n          if (((supbooks[bookidx] || [])[0] || [])[0] == 0x3A01) {\n            /* empty */\n          } else if (((supbooks[bookidx] || [])[0] || [])[0] == 0x0401) {\n            if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {\n              o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + \"!\";\n            }\n          } else o = supbooks.SheetNames[nameidx - 1] + \"!\";\n\n          if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;else {\n            var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || \"\").split(\";;\");\n            if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct\n            else o += \"SH33TJSERRX\";\n          }\n          stack.push(o);\n          break;\n        }\n\n        if (!externbook) externbook = {\n          Name: \"SH33TJSERRY\"\n        };\n        stack.push(externbook.Name);\n        break;\n\n      case 'PtgParen':\n        /* [MS-XLS] 2.5.198.80 */\n        var lp = '(',\n            rp = ')';\n\n        if (last_sp >= 0) {\n          sp = \"\";\n\n          switch (formula[0][last_sp][1][0]) {\n            // $FlowIgnore\n            case 2:\n              lp = fill(\" \", formula[0][last_sp][1][1]) + lp;\n              break;\n            // $FlowIgnore\n\n            case 3:\n              lp = fill(\"\\r\", formula[0][last_sp][1][1]) + lp;\n              break;\n            // $FlowIgnore\n\n            case 4:\n              rp = fill(\" \", formula[0][last_sp][1][1]) + rp;\n              break;\n            // $FlowIgnore\n\n            case 5:\n              rp = fill(\"\\r\", formula[0][last_sp][1][1]) + rp;\n              break;\n\n            default:\n              // $FlowIgnore\n              if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n          }\n\n          last_sp = -1;\n        }\n\n        stack.push(lp + stack.pop() + rp);\n        break;\n\n      case 'PtgRefErr':\n        /* [MS-XLS] 2.5.198.86 */\n        stack.push('#REF!');\n        break;\n\n      case 'PtgRefErr3d':\n        /* [MS-XLS] 2.5.198.87 */\n        stack.push('#REF!');\n        break;\n\n      case 'PtgExp':\n        /* [MS-XLS] 2.5.198.58 TODO */\n        c = {\n          c: f[1][1]\n          /*:any*/\n          ,\n          r: f[1][0]\n          /*:any*/\n\n        };\n        var q = {\n          c: cell.c,\n          r: cell.r\n        }\n        /*:any*/\n        ;\n\n        if (supbooks.sharedf[encode_cell(c)]) {\n          var parsedf = supbooks.sharedf[encode_cell(c)];\n          stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n        } else {\n          var fnd = false;\n\n          for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {\n            /* TODO: should be something like range_has */\n            e2 = supbooks.arrayf[e1];\n            if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n            if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n            stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n            fnd = true;\n            break;\n          }\n\n          if (!fnd) stack.push(\n          /*::String(*/\n          f[1]\n          /*::)*/\n          );\n        }\n\n        break;\n\n      case 'PtgArray':\n        /* [MS-XLS] 2.5.198.32 TODO */\n        stack.push(\"{\" + stringify_array(\n        /*::(*/\n        f[1]\n        /*:: :any)*/\n        ) + \"}\");\n        break;\n\n      case 'PtgMemArea':\n        /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */\n        //stack.push(\"(\" + f[2].map(encode_range).join(\",\") + \")\");\n        break;\n\n      case 'PtgAttrSpace':\n      /* [MS-XLS] 2.5.198.38 */\n\n      case 'PtgAttrSpaceSemi':\n        /* [MS-XLS] 2.5.198.39 */\n        last_sp = ff;\n        break;\n\n      case 'PtgTbl':\n        /* [MS-XLS] 2.5.198.92 TODO */\n        break;\n\n      case 'PtgMemErr':\n        /* [MS-XLS] 2.5.198.71 */\n        break;\n\n      case 'PtgMissArg':\n        /* [MS-XLS] 2.5.198.74 */\n        stack.push(\"\");\n        break;\n\n      case 'PtgAreaErr':\n        /* [MS-XLS] 2.5.198.29 */\n        stack.push(\"#REF!\");\n        break;\n\n      case 'PtgAreaErr3d':\n        /* [MS-XLS] 2.5.198.30 */\n        stack.push(\"#REF!\");\n        break;\n\n      case 'PtgList':\n        /* [MS-XLSB] 2.5.97.52 */\n        // $FlowIgnore\n        stack.push(\"Table\" + f[1].idx + \"[#\" + f[1].rt + \"]\");\n        break;\n\n      case 'PtgMemAreaN':\n      case 'PtgMemNoMemN':\n      case 'PtgAttrNoop':\n      case 'PtgSheet':\n      case 'PtgEndSheet':\n        break;\n\n      case 'PtgMemFunc':\n        /* [MS-XLS] 2.5.198.72 TODO */\n        break;\n\n      case 'PtgMemNoMem':\n        /* [MS-XLS] 2.5.198.73 TODO */\n        break;\n\n      case 'PtgElfCol':\n      /* [MS-XLS] 2.5.198.46 */\n\n      case 'PtgElfColS':\n      /* [MS-XLS] 2.5.198.47 */\n\n      case 'PtgElfColSV':\n      /* [MS-XLS] 2.5.198.48 */\n\n      case 'PtgElfColV':\n      /* [MS-XLS] 2.5.198.49 */\n\n      case 'PtgElfLel':\n      /* [MS-XLS] 2.5.198.50 */\n\n      case 'PtgElfRadical':\n      /* [MS-XLS] 2.5.198.51 */\n\n      case 'PtgElfRadicalLel':\n      /* [MS-XLS] 2.5.198.52 */\n\n      case 'PtgElfRadicalS':\n      /* [MS-XLS] 2.5.198.53 */\n\n      case 'PtgElfRw':\n      /* [MS-XLS] 2.5.198.54 */\n\n      case 'PtgElfRwV':\n        /* [MS-XLS] 2.5.198.55 */\n        throw new Error(\"Unsupported ELFs\");\n\n      case 'PtgSxName':\n        /* [MS-XLS] 2.5.198.91 TODO -- find a test case */\n        throw new Error('Unrecognized Formula Token: ' + String(f));\n\n      default:\n        throw new Error('Unrecognized Formula Token: ' + String(f));\n    }\n\n    var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];\n    if (opts.biff != 3) if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {\n      f = formula[0][last_sp];\n      var _left = true;\n\n      switch (f[1][0]) {\n        /* note: some bad XLSB files omit the PtgParen */\n        case 4:\n          _left = false;\n\n        /* falls through */\n\n        case 0:\n          // $FlowIgnore\n          sp = fill(\" \", f[1][1]);\n          break;\n\n        case 5:\n          _left = false;\n\n        /* falls through */\n\n        case 1:\n          // $FlowIgnore\n          sp = fill(\"\\r\", f[1][1]);\n          break;\n\n        default:\n          sp = \"\"; // $FlowIgnore\n\n          if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + f[1][0]);\n      }\n\n      stack.push((_left ? sp : \"\") + stack.pop() + (_left ? \"\" : sp));\n      last_sp = -1;\n    }\n  }\n\n  if (stack.length > 1 && opts.WTF) throw new Error(\"bad formula stack\");\n  if (stack[0] == \"TRUE\") return true;\n  if (stack[0] == \"FALSE\") return false;\n  return stack[0];\n}\n/* [MS-XLS] 2.5.198.1 TODO */\n\n\nfunction parse_ArrayParsedFormula(blob, length, opts\n/*::, ref*/\n) {\n  var target = blob.l + length,\n      len = opts.biff == 2 ? 1 : 2;\n  var rgcb,\n      cce = blob.read_shift(len); // length of rgce\n\n  if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n  var rgce = parse_Rgce(blob, cce, opts);\n  if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n  blob.l = target;\n  return [rgce, rgcb];\n}\n/* [MS-XLS] 2.5.198.3 TODO */\n\n\nfunction parse_XLSCellParsedFormula(blob, length, opts) {\n  var target = blob.l + length,\n      len = opts.biff == 2 ? 1 : 2;\n  var rgcb,\n      cce = blob.read_shift(len); // length of rgce\n\n  if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n  var rgce = parse_Rgce(blob, cce, opts);\n  if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n  blob.l = target;\n  return [rgce, rgcb];\n}\n/* [MS-XLS] 2.5.198.21 */\n\n\nfunction parse_NameParsedFormula(blob, length, opts, cce) {\n  var target = blob.l + length;\n  var rgce = parse_Rgce(blob, cce, opts);\n  var rgcb;\n  if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n  return [rgce, rgcb];\n}\n/* [MS-XLS] 2.5.198.118 TODO */\n\n\nfunction parse_SharedParsedFormula(blob, length, opts) {\n  var target = blob.l + length;\n  var rgcb,\n      cce = blob.read_shift(2); // length of rgce\n\n  var rgce = parse_Rgce(blob, cce, opts);\n  if (cce == 0xFFFF) return [[], parsenoop(blob, length - 2)];\n  if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n  return [rgce, rgcb];\n}\n/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */\n\n\nfunction parse_FormulaValue(blob\n/*::, length*/\n) {\n  var b;\n  if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob), 'n'];\n\n  switch (blob[blob.l]) {\n    case 0x00:\n      blob.l += 8;\n      return [\"String\", 's'];\n\n    case 0x01:\n      b = blob[blob.l + 2] === 0x1;\n      blob.l += 8;\n      return [b, 'b'];\n\n    case 0x02:\n      b = blob[blob.l + 2];\n      blob.l += 8;\n      return [b, 'e'];\n\n    case 0x03:\n      blob.l += 8;\n      return [\"\", 's'];\n  }\n\n  return [];\n}\n\nfunction write_FormulaValue(value) {\n  if (value == null) {\n    // Blank String Value\n    var o = new_buf(8);\n    o.write_shift(1, 0x03);\n    o.write_shift(1, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0xFFFF);\n    return o;\n  } else if (typeof value == \"number\") return write_Xnum(value);\n\n  return write_Xnum(0);\n}\n/* [MS-XLS] 2.4.127 TODO */\n\n\nfunction parse_Formula(blob, length, opts) {\n  var end = blob.l + length;\n  var cell = parse_XLSCell(blob, 6);\n  if (opts.biff == 2) ++blob.l;\n  var val = parse_FormulaValue(blob, 8);\n  var flags = blob.read_shift(1);\n\n  if (opts.biff != 2) {\n    blob.read_shift(1);\n\n    if (opts.biff >= 5) {\n      /*var chn = */\n      blob.read_shift(4);\n    }\n  }\n\n  var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);\n  return {\n    cell: cell,\n    val: val[0],\n    formula: cbf,\n    shared: flags >> 3 & 1,\n    tt: val[1]\n  };\n}\n\nfunction write_Formula(cell\n/*:Cell*/\n, R\n/*:number*/\n, C\n/*:number*/\n, opts, os\n/*:number*/\n) {\n  // Cell\n  var o1 = write_XLSCell(R, C, os); // FormulaValue\n\n  var o2 = write_FormulaValue(cell.v); // flags + cache\n\n  var o3 = new_buf(6);\n  var flags = 0x01 | 0x20;\n  o3.write_shift(2, flags);\n  o3.write_shift(4, 0); // CellParsedFormula\n\n  var bf = new_buf(cell.bf.length);\n\n  for (var i = 0; i < cell.bf.length; ++i) {\n    bf[i] = cell.bf[i];\n  }\n\n  var out = bconcat([o1, o2, o3, bf]);\n  return out;\n}\n/* XLSB Parsed Formula records have the same shape */\n\n\nfunction parse_XLSBParsedFormula(data, length, opts) {\n  var cce = data.read_shift(4);\n  var rgce = parse_Rgce(data, cce, opts);\n  var cb = data.read_shift(4);\n  var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;\n  return [rgce, rgcb];\n}\n/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */\n\n\nvar parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.4 CellParsedFormula */\n\nvar parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.8 DVParsedFormula */\n//var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;\n\n/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */\n//var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;\n\n/* [MS-XLSB] 2.5.97.12 NameParsedFormula */\n\nvar parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */\n\nvar parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;\n/* Writes a PtgNum or PtgInt */\n\nfunction write_XLSBFormulaNum(val\n/*:number*/\n) {\n  if ((val | 0) == val && val < Math.pow(2, 16) && val >= 0) {\n    var oint = new_buf(11);\n    oint.write_shift(4, 3);\n    oint.write_shift(1, 0x1e);\n    oint.write_shift(2, val);\n    oint.write_shift(4, 0);\n    return oint;\n  }\n\n  var num = new_buf(17);\n  num.write_shift(4, 11);\n  num.write_shift(1, 0x1f);\n  num.write_shift(8, val);\n  num.write_shift(4, 0);\n  return num;\n}\n/* Writes a PtgErr */\n\n\nfunction write_XLSBFormulaErr(val\n/*:number*/\n) {\n  var oint = new_buf(10);\n  oint.write_shift(4, 2);\n  oint.write_shift(1, 0x1C);\n  oint.write_shift(1, val);\n  oint.write_shift(4, 0);\n  return oint;\n}\n/* Writes a PtgBool */\n\n\nfunction write_XLSBFormulaBool(val\n/*:boolean*/\n) {\n  var oint = new_buf(10);\n  oint.write_shift(4, 2);\n  oint.write_shift(1, 0x1D);\n  oint.write_shift(1, val ? 1 : 0);\n  oint.write_shift(4, 0);\n  return oint;\n}\n/* Writes a PtgStr */\n\n\nfunction write_XLSBFormulaStr(val\n/*:string*/\n) {\n  var preamble = new_buf(7);\n  preamble.write_shift(4, 3 + 2 * val.length);\n  preamble.write_shift(1, 0x17);\n  preamble.write_shift(2, val.length);\n  var body = new_buf(2 * val.length);\n  body.write_shift(2 * val.length, val, \"utf16le\");\n  var postamble = new_buf(4);\n  postamble.write_shift(4, 0);\n  return bconcat([preamble, body, postamble]);\n}\n/* Writes a PtgRef */\n\n\nfunction write_XLSBFormulaRef(str) {\n  var cell = decode_cell(str);\n  var out = new_buf(15);\n  out.write_shift(4, 7);\n  out.write_shift(1, 0x04 | 1 << 5);\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  out.write_shift(4, 0);\n  return out;\n}\n/* Writes a PtgRef3d */\n\n\nfunction write_XLSBFormulaRef3D(str, wb) {\n  var lastbang = str.lastIndexOf(\"!\");\n  var sname = str.slice(0, lastbang);\n  str = str.slice(lastbang + 1);\n  var cell = decode_cell(str);\n  if (sname.charAt(0) == \"'\") sname = sname.slice(1, -1).replace(/''/g, \"'\");\n  var out = new_buf(17);\n  out.write_shift(4, 9);\n  out.write_shift(1, 0x1A | 1 << 5);\n  out.write_shift(2, 2 + wb.SheetNames.map(function (n) {\n    return n.toLowerCase();\n  }).indexOf(sname.toLowerCase()));\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  out.write_shift(4, 0);\n  return out;\n}\n/* Writes a PtgRefErr3d */\n\n\nfunction write_XLSBFormulaRefErr3D(str, wb) {\n  var lastbang = str.lastIndexOf(\"!\");\n  var sname = str.slice(0, lastbang);\n  str = str.slice(lastbang + 1);\n  if (sname.charAt(0) == \"'\") sname = sname.slice(1, -1).replace(/''/g, \"'\");\n  var out = new_buf(17);\n  out.write_shift(4, 9);\n  out.write_shift(1, 0x1C | 1 << 5);\n  out.write_shift(2, 2 + wb.SheetNames.map(function (n) {\n    return n.toLowerCase();\n  }).indexOf(sname.toLowerCase()));\n  out.write_shift(4, 0);\n  out.write_shift(2, 0); // <== ColRelShort\n\n  out.write_shift(4, 0);\n  return out;\n}\n/* Writes a single sheet range [PtgRef PtgRef PtgRange] */\n\n\nfunction write_XLSBFormulaRange(_str) {\n  var parts = _str.split(\":\"),\n      str = parts[0];\n\n  var out = new_buf(23);\n  out.write_shift(4, 15);\n  /* start cell */\n\n  str = parts[0];\n  var cell = decode_cell(str);\n  out.write_shift(1, 0x04 | 1 << 5);\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  out.write_shift(4, 0);\n  /* end cell */\n\n  str = parts[1];\n  cell = decode_cell(str);\n  out.write_shift(1, 0x04 | 1 << 5);\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  out.write_shift(4, 0);\n  /* PtgRange */\n\n  out.write_shift(1, 0x11);\n  out.write_shift(4, 0);\n  return out;\n}\n/* Writes a range with explicit sheet name [PtgRef3D PtgRef3D PtgRange] */\n\n\nfunction write_XLSBFormulaRangeWS(_str, wb) {\n  var lastbang = _str.lastIndexOf(\"!\");\n\n  var sname = _str.slice(0, lastbang);\n\n  _str = _str.slice(lastbang + 1);\n  if (sname.charAt(0) == \"'\") sname = sname.slice(1, -1).replace(/''/g, \"'\");\n\n  var parts = _str.split(\":\");\n\n  str = parts[0];\n  var out = new_buf(27);\n  out.write_shift(4, 19);\n  /* start cell */\n\n  var str = parts[0],\n      cell = decode_cell(str);\n  out.write_shift(1, 0x1A | 1 << 5);\n  out.write_shift(2, 2 + wb.SheetNames.map(function (n) {\n    return n.toLowerCase();\n  }).indexOf(sname.toLowerCase()));\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  /* end cell */\n\n  str = parts[1];\n  cell = decode_cell(str);\n  out.write_shift(1, 0x1A | 1 << 5);\n  out.write_shift(2, 2 + wb.SheetNames.map(function (n) {\n    return n.toLowerCase();\n  }).indexOf(sname.toLowerCase()));\n  out.write_shift(4, cell.r);\n  out.write_shift(2, cell.c | (str.charAt(0) == \"$\" ? 0 : 1) << 14 | (str.match(/\\$\\d/) ? 0 : 1) << 15); // <== ColRelShort\n\n  /* PtgRange */\n\n  out.write_shift(1, 0x11);\n  out.write_shift(4, 0);\n  return out;\n}\n/* Writes a range with explicit sheet name [PtgArea3d] */\n\n\nfunction write_XLSBFormulaArea3D(_str, wb) {\n  var lastbang = _str.lastIndexOf(\"!\");\n\n  var sname = _str.slice(0, lastbang);\n\n  _str = _str.slice(lastbang + 1);\n  if (sname.charAt(0) == \"'\") sname = sname.slice(1, -1).replace(/''/g, \"'\");\n  var range = decode_range(_str);\n  var out = new_buf(23);\n  out.write_shift(4, 15);\n  out.write_shift(1, 0x1B | 1 << 5);\n  out.write_shift(2, 2 + wb.SheetNames.map(function (n) {\n    return n.toLowerCase();\n  }).indexOf(sname.toLowerCase()));\n  out.write_shift(4, range.s.r);\n  out.write_shift(4, range.e.r);\n  out.write_shift(2, range.s.c);\n  out.write_shift(2, range.e.c);\n  out.write_shift(4, 0);\n  return out;\n}\n/* General Formula */\n\n\nfunction write_XLSBFormula(val\n/*:string|number*/\n, wb) {\n  if (typeof val == \"number\") return write_XLSBFormulaNum(val);\n  if (typeof val == \"boolean\") return write_XLSBFormulaBool(val);\n  if (/^#(DIV\\/0!|GETTING_DATA|N\\/A|NAME\\?|NULL!|NUM!|REF!|VALUE!)$/.test(val)) return write_XLSBFormulaErr(+RBErr[val]);\n  if (val.match(/^\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})$/)) return write_XLSBFormulaRef(val);\n  if (val.match(/^\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5}):\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})$/)) return write_XLSBFormulaRange(val);\n  if (val.match(/^#REF!\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5}):\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})$/)) return write_XLSBFormulaArea3D(val, wb);\n  if (val.match(/^(?:'[^\\\\\\/?*\\[\\]:]*'|[^'][^\\\\\\/?*\\[\\]:'`~!@#$%^()\\-=+{}|;,<.>]*)!\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})$/)) return write_XLSBFormulaRef3D(val, wb);\n  if (val.match(/^(?:'[^\\\\\\/?*\\[\\]:]*'|[^'][^\\\\\\/?*\\[\\]:'`~!@#$%^()\\-=+{}|;,<.>]*)!\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5}):\\$?(?:[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D]|[A-Z]{1,2})\\$?(?:10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})$/)) return write_XLSBFormulaRangeWS(val, wb);\n  if (/^(?:'[^\\\\\\/?*\\[\\]:]*'|[^'][^\\\\\\/?*\\[\\]:'`~!@#$%^()\\-=+{}|;,<.>]*)!#REF!$/.test(val)) return write_XLSBFormulaRefErr3D(val, wb);\n  if (/^\".*\"$/.test(val)) return write_XLSBFormulaStr(val);\n  if (/^[+-]\\d+$/.test(val)) return write_XLSBFormulaNum(parseInt(val, 10));\n  throw \"Formula |\" + val + \"| not supported for XLSB\";\n}\n\nvar write_XLSBNameParsedFormula = write_XLSBFormula;\nvar Cetab = {\n  0: \"BEEP\",\n  1: \"OPEN\",\n  2: \"OPEN.LINKS\",\n  3: \"CLOSE.ALL\",\n  4: \"SAVE\",\n  5: \"SAVE.AS\",\n  6: \"FILE.DELETE\",\n  7: \"PAGE.SETUP\",\n  8: \"PRINT\",\n  9: \"PRINTER.SETUP\",\n  10: \"QUIT\",\n  11: \"NEW.WINDOW\",\n  12: \"ARRANGE.ALL\",\n  13: \"WINDOW.SIZE\",\n  14: \"WINDOW.MOVE\",\n  15: \"FULL\",\n  16: \"CLOSE\",\n  17: \"RUN\",\n  22: \"SET.PRINT.AREA\",\n  23: \"SET.PRINT.TITLES\",\n  24: \"SET.PAGE.BREAK\",\n  25: \"REMOVE.PAGE.BREAK\",\n  26: \"FONT\",\n  27: \"DISPLAY\",\n  28: \"PROTECT.DOCUMENT\",\n  29: \"PRECISION\",\n  30: \"A1.R1C1\",\n  31: \"CALCULATE.NOW\",\n  32: \"CALCULATION\",\n  34: \"DATA.FIND\",\n  35: \"EXTRACT\",\n  36: \"DATA.DELETE\",\n  37: \"SET.DATABASE\",\n  38: \"SET.CRITERIA\",\n  39: \"SORT\",\n  40: \"DATA.SERIES\",\n  41: \"TABLE\",\n  42: \"FORMAT.NUMBER\",\n  43: \"ALIGNMENT\",\n  44: \"STYLE\",\n  45: \"BORDER\",\n  46: \"CELL.PROTECTION\",\n  47: \"COLUMN.WIDTH\",\n  48: \"UNDO\",\n  49: \"CUT\",\n  50: \"COPY\",\n  51: \"PASTE\",\n  52: \"CLEAR\",\n  53: \"PASTE.SPECIAL\",\n  54: \"EDIT.DELETE\",\n  55: \"INSERT\",\n  56: \"FILL.RIGHT\",\n  57: \"FILL.DOWN\",\n  61: \"DEFINE.NAME\",\n  62: \"CREATE.NAMES\",\n  63: \"FORMULA.GOTO\",\n  64: \"FORMULA.FIND\",\n  65: \"SELECT.LAST.CELL\",\n  66: \"SHOW.ACTIVE.CELL\",\n  67: \"GALLERY.AREA\",\n  68: \"GALLERY.BAR\",\n  69: \"GALLERY.COLUMN\",\n  70: \"GALLERY.LINE\",\n  71: \"GALLERY.PIE\",\n  72: \"GALLERY.SCATTER\",\n  73: \"COMBINATION\",\n  74: \"PREFERRED\",\n  75: \"ADD.OVERLAY\",\n  76: \"GRIDLINES\",\n  77: \"SET.PREFERRED\",\n  78: \"AXES\",\n  79: \"LEGEND\",\n  80: \"ATTACH.TEXT\",\n  81: \"ADD.ARROW\",\n  82: \"SELECT.CHART\",\n  83: \"SELECT.PLOT.AREA\",\n  84: \"PATTERNS\",\n  85: \"MAIN.CHART\",\n  86: \"OVERLAY\",\n  87: \"SCALE\",\n  88: \"FORMAT.LEGEND\",\n  89: \"FORMAT.TEXT\",\n  90: \"EDIT.REPEAT\",\n  91: \"PARSE\",\n  92: \"JUSTIFY\",\n  93: \"HIDE\",\n  94: \"UNHIDE\",\n  95: \"WORKSPACE\",\n  96: \"FORMULA\",\n  97: \"FORMULA.FILL\",\n  98: \"FORMULA.ARRAY\",\n  99: \"DATA.FIND.NEXT\",\n  100: \"DATA.FIND.PREV\",\n  101: \"FORMULA.FIND.NEXT\",\n  102: \"FORMULA.FIND.PREV\",\n  103: \"ACTIVATE\",\n  104: \"ACTIVATE.NEXT\",\n  105: \"ACTIVATE.PREV\",\n  106: \"UNLOCKED.NEXT\",\n  107: \"UNLOCKED.PREV\",\n  108: \"COPY.PICTURE\",\n  109: \"SELECT\",\n  110: \"DELETE.NAME\",\n  111: \"DELETE.FORMAT\",\n  112: \"VLINE\",\n  113: \"HLINE\",\n  114: \"VPAGE\",\n  115: \"HPAGE\",\n  116: \"VSCROLL\",\n  117: \"HSCROLL\",\n  118: \"ALERT\",\n  119: \"NEW\",\n  120: \"CANCEL.COPY\",\n  121: \"SHOW.CLIPBOARD\",\n  122: \"MESSAGE\",\n  124: \"PASTE.LINK\",\n  125: \"APP.ACTIVATE\",\n  126: \"DELETE.ARROW\",\n  127: \"ROW.HEIGHT\",\n  128: \"FORMAT.MOVE\",\n  129: \"FORMAT.SIZE\",\n  130: \"FORMULA.REPLACE\",\n  131: \"SEND.KEYS\",\n  132: \"SELECT.SPECIAL\",\n  133: \"APPLY.NAMES\",\n  134: \"REPLACE.FONT\",\n  135: \"FREEZE.PANES\",\n  136: \"SHOW.INFO\",\n  137: \"SPLIT\",\n  138: \"ON.WINDOW\",\n  139: \"ON.DATA\",\n  140: \"DISABLE.INPUT\",\n  142: \"OUTLINE\",\n  143: \"LIST.NAMES\",\n  144: \"FILE.CLOSE\",\n  145: \"SAVE.WORKBOOK\",\n  146: \"DATA.FORM\",\n  147: \"COPY.CHART\",\n  148: \"ON.TIME\",\n  149: \"WAIT\",\n  150: \"FORMAT.FONT\",\n  151: \"FILL.UP\",\n  152: \"FILL.LEFT\",\n  153: \"DELETE.OVERLAY\",\n  155: \"SHORT.MENUS\",\n  159: \"SET.UPDATE.STATUS\",\n  161: \"COLOR.PALETTE\",\n  162: \"DELETE.STYLE\",\n  163: \"WINDOW.RESTORE\",\n  164: \"WINDOW.MAXIMIZE\",\n  166: \"CHANGE.LINK\",\n  167: \"CALCULATE.DOCUMENT\",\n  168: \"ON.KEY\",\n  169: \"APP.RESTORE\",\n  170: \"APP.MOVE\",\n  171: \"APP.SIZE\",\n  172: \"APP.MINIMIZE\",\n  173: \"APP.MAXIMIZE\",\n  174: \"BRING.TO.FRONT\",\n  175: \"SEND.TO.BACK\",\n  185: \"MAIN.CHART.TYPE\",\n  186: \"OVERLAY.CHART.TYPE\",\n  187: \"SELECT.END\",\n  188: \"OPEN.MAIL\",\n  189: \"SEND.MAIL\",\n  190: \"STANDARD.FONT\",\n  191: \"CONSOLIDATE\",\n  192: \"SORT.SPECIAL\",\n  193: \"GALLERY.3D.AREA\",\n  194: \"GALLERY.3D.COLUMN\",\n  195: \"GALLERY.3D.LINE\",\n  196: \"GALLERY.3D.PIE\",\n  197: \"VIEW.3D\",\n  198: \"GOAL.SEEK\",\n  199: \"WORKGROUP\",\n  200: \"FILL.GROUP\",\n  201: \"UPDATE.LINK\",\n  202: \"PROMOTE\",\n  203: \"DEMOTE\",\n  204: \"SHOW.DETAIL\",\n  206: \"UNGROUP\",\n  207: \"OBJECT.PROPERTIES\",\n  208: \"SAVE.NEW.OBJECT\",\n  209: \"SHARE\",\n  210: \"SHARE.NAME\",\n  211: \"DUPLICATE\",\n  212: \"APPLY.STYLE\",\n  213: \"ASSIGN.TO.OBJECT\",\n  214: \"OBJECT.PROTECTION\",\n  215: \"HIDE.OBJECT\",\n  216: \"SET.EXTRACT\",\n  217: \"CREATE.PUBLISHER\",\n  218: \"SUBSCRIBE.TO\",\n  219: \"ATTRIBUTES\",\n  220: \"SHOW.TOOLBAR\",\n  222: \"PRINT.PREVIEW\",\n  223: \"EDIT.COLOR\",\n  224: \"SHOW.LEVELS\",\n  225: \"FORMAT.MAIN\",\n  226: \"FORMAT.OVERLAY\",\n  227: \"ON.RECALC\",\n  228: \"EDIT.SERIES\",\n  229: \"DEFINE.STYLE\",\n  240: \"LINE.PRINT\",\n  243: \"ENTER.DATA\",\n  249: \"GALLERY.RADAR\",\n  250: \"MERGE.STYLES\",\n  251: \"EDITION.OPTIONS\",\n  252: \"PASTE.PICTURE\",\n  253: \"PASTE.PICTURE.LINK\",\n  254: \"SPELLING\",\n  256: \"ZOOM\",\n  259: \"INSERT.OBJECT\",\n  260: \"WINDOW.MINIMIZE\",\n  265: \"SOUND.NOTE\",\n  266: \"SOUND.PLAY\",\n  267: \"FORMAT.SHAPE\",\n  268: \"EXTEND.POLYGON\",\n  269: \"FORMAT.AUTO\",\n  272: \"GALLERY.3D.BAR\",\n  273: \"GALLERY.3D.SURFACE\",\n  274: \"FILL.AUTO\",\n  276: \"CUSTOMIZE.TOOLBAR\",\n  277: \"ADD.TOOL\",\n  278: \"EDIT.OBJECT\",\n  279: \"ON.DOUBLECLICK\",\n  280: \"ON.ENTRY\",\n  281: \"WORKBOOK.ADD\",\n  282: \"WORKBOOK.MOVE\",\n  283: \"WORKBOOK.COPY\",\n  284: \"WORKBOOK.OPTIONS\",\n  285: \"SAVE.WORKSPACE\",\n  288: \"CHART.WIZARD\",\n  289: \"DELETE.TOOL\",\n  290: \"MOVE.TOOL\",\n  291: \"WORKBOOK.SELECT\",\n  292: \"WORKBOOK.ACTIVATE\",\n  293: \"ASSIGN.TO.TOOL\",\n  295: \"COPY.TOOL\",\n  296: \"RESET.TOOL\",\n  297: \"CONSTRAIN.NUMERIC\",\n  298: \"PASTE.TOOL\",\n  302: \"WORKBOOK.NEW\",\n  305: \"SCENARIO.CELLS\",\n  306: \"SCENARIO.DELETE\",\n  307: \"SCENARIO.ADD\",\n  308: \"SCENARIO.EDIT\",\n  309: \"SCENARIO.SHOW\",\n  310: \"SCENARIO.SHOW.NEXT\",\n  311: \"SCENARIO.SUMMARY\",\n  312: \"PIVOT.TABLE.WIZARD\",\n  313: \"PIVOT.FIELD.PROPERTIES\",\n  314: \"PIVOT.FIELD\",\n  315: \"PIVOT.ITEM\",\n  316: \"PIVOT.ADD.FIELDS\",\n  318: \"OPTIONS.CALCULATION\",\n  319: \"OPTIONS.EDIT\",\n  320: \"OPTIONS.VIEW\",\n  321: \"ADDIN.MANAGER\",\n  322: \"MENU.EDITOR\",\n  323: \"ATTACH.TOOLBARS\",\n  324: \"VBAActivate\",\n  325: \"OPTIONS.CHART\",\n  328: \"VBA.INSERT.FILE\",\n  330: \"VBA.PROCEDURE.DEFINITION\",\n  336: \"ROUTING.SLIP\",\n  338: \"ROUTE.DOCUMENT\",\n  339: \"MAIL.LOGON\",\n  342: \"INSERT.PICTURE\",\n  343: \"EDIT.TOOL\",\n  344: \"GALLERY.DOUGHNUT\",\n  350: \"CHART.TREND\",\n  352: \"PIVOT.ITEM.PROPERTIES\",\n  354: \"WORKBOOK.INSERT\",\n  355: \"OPTIONS.TRANSITION\",\n  356: \"OPTIONS.GENERAL\",\n  370: \"FILTER.ADVANCED\",\n  373: \"MAIL.ADD.MAILER\",\n  374: \"MAIL.DELETE.MAILER\",\n  375: \"MAIL.REPLY\",\n  376: \"MAIL.REPLY.ALL\",\n  377: \"MAIL.FORWARD\",\n  378: \"MAIL.NEXT.LETTER\",\n  379: \"DATA.LABEL\",\n  380: \"INSERT.TITLE\",\n  381: \"FONT.PROPERTIES\",\n  382: \"MACRO.OPTIONS\",\n  383: \"WORKBOOK.HIDE\",\n  384: \"WORKBOOK.UNHIDE\",\n  385: \"WORKBOOK.DELETE\",\n  386: \"WORKBOOK.NAME\",\n  388: \"GALLERY.CUSTOM\",\n  390: \"ADD.CHART.AUTOFORMAT\",\n  391: \"DELETE.CHART.AUTOFORMAT\",\n  392: \"CHART.ADD.DATA\",\n  393: \"AUTO.OUTLINE\",\n  394: \"TAB.ORDER\",\n  395: \"SHOW.DIALOG\",\n  396: \"SELECT.ALL\",\n  397: \"UNGROUP.SHEETS\",\n  398: \"SUBTOTAL.CREATE\",\n  399: \"SUBTOTAL.REMOVE\",\n  400: \"RENAME.OBJECT\",\n  412: \"WORKBOOK.SCROLL\",\n  413: \"WORKBOOK.NEXT\",\n  414: \"WORKBOOK.PREV\",\n  415: \"WORKBOOK.TAB.SPLIT\",\n  416: \"FULL.SCREEN\",\n  417: \"WORKBOOK.PROTECT\",\n  420: \"SCROLLBAR.PROPERTIES\",\n  421: \"PIVOT.SHOW.PAGES\",\n  422: \"TEXT.TO.COLUMNS\",\n  423: \"FORMAT.CHARTTYPE\",\n  424: \"LINK.FORMAT\",\n  425: \"TRACER.DISPLAY\",\n  430: \"TRACER.NAVIGATE\",\n  431: \"TRACER.CLEAR\",\n  432: \"TRACER.ERROR\",\n  433: \"PIVOT.FIELD.GROUP\",\n  434: \"PIVOT.FIELD.UNGROUP\",\n  435: \"CHECKBOX.PROPERTIES\",\n  436: \"LABEL.PROPERTIES\",\n  437: \"LISTBOX.PROPERTIES\",\n  438: \"EDITBOX.PROPERTIES\",\n  439: \"PIVOT.REFRESH\",\n  440: \"LINK.COMBO\",\n  441: \"OPEN.TEXT\",\n  442: \"HIDE.DIALOG\",\n  443: \"SET.DIALOG.FOCUS\",\n  444: \"ENABLE.OBJECT\",\n  445: \"PUSHBUTTON.PROPERTIES\",\n  446: \"SET.DIALOG.DEFAULT\",\n  447: \"FILTER\",\n  448: \"FILTER.SHOW.ALL\",\n  449: \"CLEAR.OUTLINE\",\n  450: \"FUNCTION.WIZARD\",\n  451: \"ADD.LIST.ITEM\",\n  452: \"SET.LIST.ITEM\",\n  453: \"REMOVE.LIST.ITEM\",\n  454: \"SELECT.LIST.ITEM\",\n  455: \"SET.CONTROL.VALUE\",\n  456: \"SAVE.COPY.AS\",\n  458: \"OPTIONS.LISTS.ADD\",\n  459: \"OPTIONS.LISTS.DELETE\",\n  460: \"SERIES.AXES\",\n  461: \"SERIES.X\",\n  462: \"SERIES.Y\",\n  463: \"ERRORBAR.X\",\n  464: \"ERRORBAR.Y\",\n  465: \"FORMAT.CHART\",\n  466: \"SERIES.ORDER\",\n  467: \"MAIL.LOGOFF\",\n  468: \"CLEAR.ROUTING.SLIP\",\n  469: \"APP.ACTIVATE.MICROSOFT\",\n  470: \"MAIL.EDIT.MAILER\",\n  471: \"ON.SHEET\",\n  472: \"STANDARD.WIDTH\",\n  473: \"SCENARIO.MERGE\",\n  474: \"SUMMARY.INFO\",\n  475: \"FIND.FILE\",\n  476: \"ACTIVE.CELL.FONT\",\n  477: \"ENABLE.TIPWIZARD\",\n  478: \"VBA.MAKE.ADDIN\",\n  480: \"INSERTDATATABLE\",\n  481: \"WORKGROUP.OPTIONS\",\n  482: \"MAIL.SEND.MAILER\",\n  485: \"AUTOCORRECT\",\n  489: \"POST.DOCUMENT\",\n  491: \"PICKLIST\",\n  493: \"VIEW.SHOW\",\n  494: \"VIEW.DEFINE\",\n  495: \"VIEW.DELETE\",\n  509: \"SHEET.BACKGROUND\",\n  510: \"INSERT.MAP.OBJECT\",\n  511: \"OPTIONS.MENONO\",\n  517: \"MSOCHECKS\",\n  518: \"NORMAL\",\n  519: \"LAYOUT\",\n  520: \"RM.PRINT.AREA\",\n  521: \"CLEAR.PRINT.AREA\",\n  522: \"ADD.PRINT.AREA\",\n  523: \"MOVE.BRK\",\n  545: \"HIDECURR.NOTE\",\n  546: \"HIDEALL.NOTES\",\n  547: \"DELETE.NOTE\",\n  548: \"TRAVERSE.NOTES\",\n  549: \"ACTIVATE.NOTES\",\n  620: \"PROTECT.REVISIONS\",\n  621: \"UNPROTECT.REVISIONS\",\n  647: \"OPTIONS.ME\",\n  653: \"WEB.PUBLISH\",\n  667: \"NEWWEBQUERY\",\n  673: \"PIVOT.TABLE.CHART\",\n  753: \"OPTIONS.SAVE\",\n  755: \"OPTIONS.SPELL\",\n  808: \"HIDEALL.INKANNOTS\"\n};\nvar Ftab = {\n  0: \"COUNT\",\n  1: \"IF\",\n  2: \"ISNA\",\n  3: \"ISERROR\",\n  4: \"SUM\",\n  5: \"AVERAGE\",\n  6: \"MIN\",\n  7: \"MAX\",\n  8: \"ROW\",\n  9: \"COLUMN\",\n  10: \"NA\",\n  11: \"NPV\",\n  12: \"STDEV\",\n  13: \"DOLLAR\",\n  14: \"FIXED\",\n  15: \"SIN\",\n  16: \"COS\",\n  17: \"TAN\",\n  18: \"ATAN\",\n  19: \"PI\",\n  20: \"SQRT\",\n  21: \"EXP\",\n  22: \"LN\",\n  23: \"LOG10\",\n  24: \"ABS\",\n  25: \"INT\",\n  26: \"SIGN\",\n  27: \"ROUND\",\n  28: \"LOOKUP\",\n  29: \"INDEX\",\n  30: \"REPT\",\n  31: \"MID\",\n  32: \"LEN\",\n  33: \"VALUE\",\n  34: \"TRUE\",\n  35: \"FALSE\",\n  36: \"AND\",\n  37: \"OR\",\n  38: \"NOT\",\n  39: \"MOD\",\n  40: \"DCOUNT\",\n  41: \"DSUM\",\n  42: \"DAVERAGE\",\n  43: \"DMIN\",\n  44: \"DMAX\",\n  45: \"DSTDEV\",\n  46: \"VAR\",\n  47: \"DVAR\",\n  48: \"TEXT\",\n  49: \"LINEST\",\n  50: \"TREND\",\n  51: \"LOGEST\",\n  52: \"GROWTH\",\n  53: \"GOTO\",\n  54: \"HALT\",\n  55: \"RETURN\",\n  56: \"PV\",\n  57: \"FV\",\n  58: \"NPER\",\n  59: \"PMT\",\n  60: \"RATE\",\n  61: \"MIRR\",\n  62: \"IRR\",\n  63: \"RAND\",\n  64: \"MATCH\",\n  65: \"DATE\",\n  66: \"TIME\",\n  67: \"DAY\",\n  68: \"MONTH\",\n  69: \"YEAR\",\n  70: \"WEEKDAY\",\n  71: \"HOUR\",\n  72: \"MINUTE\",\n  73: \"SECOND\",\n  74: \"NOW\",\n  75: \"AREAS\",\n  76: \"ROWS\",\n  77: \"COLUMNS\",\n  78: \"OFFSET\",\n  79: \"ABSREF\",\n  80: \"RELREF\",\n  81: \"ARGUMENT\",\n  82: \"SEARCH\",\n  83: \"TRANSPOSE\",\n  84: \"ERROR\",\n  85: \"STEP\",\n  86: \"TYPE\",\n  87: \"ECHO\",\n  88: \"SET.NAME\",\n  89: \"CALLER\",\n  90: \"DEREF\",\n  91: \"WINDOWS\",\n  92: \"SERIES\",\n  93: \"DOCUMENTS\",\n  94: \"ACTIVE.CELL\",\n  95: \"SELECTION\",\n  96: \"RESULT\",\n  97: \"ATAN2\",\n  98: \"ASIN\",\n  99: \"ACOS\",\n  100: \"CHOOSE\",\n  101: \"HLOOKUP\",\n  102: \"VLOOKUP\",\n  103: \"LINKS\",\n  104: \"INPUT\",\n  105: \"ISREF\",\n  106: \"GET.FORMULA\",\n  107: \"GET.NAME\",\n  108: \"SET.VALUE\",\n  109: \"LOG\",\n  110: \"EXEC\",\n  111: \"CHAR\",\n  112: \"LOWER\",\n  113: \"UPPER\",\n  114: \"PROPER\",\n  115: \"LEFT\",\n  116: \"RIGHT\",\n  117: \"EXACT\",\n  118: \"TRIM\",\n  119: \"REPLACE\",\n  120: \"SUBSTITUTE\",\n  121: \"CODE\",\n  122: \"NAMES\",\n  123: \"DIRECTORY\",\n  124: \"FIND\",\n  125: \"CELL\",\n  126: \"ISERR\",\n  127: \"ISTEXT\",\n  128: \"ISNUMBER\",\n  129: \"ISBLANK\",\n  130: \"T\",\n  131: \"N\",\n  132: \"FOPEN\",\n  133: \"FCLOSE\",\n  134: \"FSIZE\",\n  135: \"FREADLN\",\n  136: \"FREAD\",\n  137: \"FWRITELN\",\n  138: \"FWRITE\",\n  139: \"FPOS\",\n  140: \"DATEVALUE\",\n  141: \"TIMEVALUE\",\n  142: \"SLN\",\n  143: \"SYD\",\n  144: \"DDB\",\n  145: \"GET.DEF\",\n  146: \"REFTEXT\",\n  147: \"TEXTREF\",\n  148: \"INDIRECT\",\n  149: \"REGISTER\",\n  150: \"CALL\",\n  151: \"ADD.BAR\",\n  152: \"ADD.MENU\",\n  153: \"ADD.COMMAND\",\n  154: \"ENABLE.COMMAND\",\n  155: \"CHECK.COMMAND\",\n  156: \"RENAME.COMMAND\",\n  157: \"SHOW.BAR\",\n  158: \"DELETE.MENU\",\n  159: \"DELETE.COMMAND\",\n  160: \"GET.CHART.ITEM\",\n  161: \"DIALOG.BOX\",\n  162: \"CLEAN\",\n  163: \"MDETERM\",\n  164: \"MINVERSE\",\n  165: \"MMULT\",\n  166: \"FILES\",\n  167: \"IPMT\",\n  168: \"PPMT\",\n  169: \"COUNTA\",\n  170: \"CANCEL.KEY\",\n  171: \"FOR\",\n  172: \"WHILE\",\n  173: \"BREAK\",\n  174: \"NEXT\",\n  175: \"INITIATE\",\n  176: \"REQUEST\",\n  177: \"POKE\",\n  178: \"EXECUTE\",\n  179: \"TERMINATE\",\n  180: \"RESTART\",\n  181: \"HELP\",\n  182: \"GET.BAR\",\n  183: \"PRODUCT\",\n  184: \"FACT\",\n  185: \"GET.CELL\",\n  186: \"GET.WORKSPACE\",\n  187: \"GET.WINDOW\",\n  188: \"GET.DOCUMENT\",\n  189: \"DPRODUCT\",\n  190: \"ISNONTEXT\",\n  191: \"GET.NOTE\",\n  192: \"NOTE\",\n  193: \"STDEVP\",\n  194: \"VARP\",\n  195: \"DSTDEVP\",\n  196: \"DVARP\",\n  197: \"TRUNC\",\n  198: \"ISLOGICAL\",\n  199: \"DCOUNTA\",\n  200: \"DELETE.BAR\",\n  201: \"UNREGISTER\",\n  204: \"USDOLLAR\",\n  205: \"FINDB\",\n  206: \"SEARCHB\",\n  207: \"REPLACEB\",\n  208: \"LEFTB\",\n  209: \"RIGHTB\",\n  210: \"MIDB\",\n  211: \"LENB\",\n  212: \"ROUNDUP\",\n  213: \"ROUNDDOWN\",\n  214: \"ASC\",\n  215: \"DBCS\",\n  216: \"RANK\",\n  219: \"ADDRESS\",\n  220: \"DAYS360\",\n  221: \"TODAY\",\n  222: \"VDB\",\n  223: \"ELSE\",\n  224: \"ELSE.IF\",\n  225: \"END.IF\",\n  226: \"FOR.CELL\",\n  227: \"MEDIAN\",\n  228: \"SUMPRODUCT\",\n  229: \"SINH\",\n  230: \"COSH\",\n  231: \"TANH\",\n  232: \"ASINH\",\n  233: \"ACOSH\",\n  234: \"ATANH\",\n  235: \"DGET\",\n  236: \"CREATE.OBJECT\",\n  237: \"VOLATILE\",\n  238: \"LAST.ERROR\",\n  239: \"CUSTOM.UNDO\",\n  240: \"CUSTOM.REPEAT\",\n  241: \"FORMULA.CONVERT\",\n  242: \"GET.LINK.INFO\",\n  243: \"TEXT.BOX\",\n  244: \"INFO\",\n  245: \"GROUP\",\n  246: \"GET.OBJECT\",\n  247: \"DB\",\n  248: \"PAUSE\",\n  251: \"RESUME\",\n  252: \"FREQUENCY\",\n  253: \"ADD.TOOLBAR\",\n  254: \"DELETE.TOOLBAR\",\n  255: \"User\",\n  256: \"RESET.TOOLBAR\",\n  257: \"EVALUATE\",\n  258: \"GET.TOOLBAR\",\n  259: \"GET.TOOL\",\n  260: \"SPELLING.CHECK\",\n  261: \"ERROR.TYPE\",\n  262: \"APP.TITLE\",\n  263: \"WINDOW.TITLE\",\n  264: \"SAVE.TOOLBAR\",\n  265: \"ENABLE.TOOL\",\n  266: \"PRESS.TOOL\",\n  267: \"REGISTER.ID\",\n  268: \"GET.WORKBOOK\",\n  269: \"AVEDEV\",\n  270: \"BETADIST\",\n  271: \"GAMMALN\",\n  272: \"BETAINV\",\n  273: \"BINOMDIST\",\n  274: \"CHIDIST\",\n  275: \"CHIINV\",\n  276: \"COMBIN\",\n  277: \"CONFIDENCE\",\n  278: \"CRITBINOM\",\n  279: \"EVEN\",\n  280: \"EXPONDIST\",\n  281: \"FDIST\",\n  282: \"FINV\",\n  283: \"FISHER\",\n  284: \"FISHERINV\",\n  285: \"FLOOR\",\n  286: \"GAMMADIST\",\n  287: \"GAMMAINV\",\n  288: \"CEILING\",\n  289: \"HYPGEOMDIST\",\n  290: \"LOGNORMDIST\",\n  291: \"LOGINV\",\n  292: \"NEGBINOMDIST\",\n  293: \"NORMDIST\",\n  294: \"NORMSDIST\",\n  295: \"NORMINV\",\n  296: \"NORMSINV\",\n  297: \"STANDARDIZE\",\n  298: \"ODD\",\n  299: \"PERMUT\",\n  300: \"POISSON\",\n  301: \"TDIST\",\n  302: \"WEIBULL\",\n  303: \"SUMXMY2\",\n  304: \"SUMX2MY2\",\n  305: \"SUMX2PY2\",\n  306: \"CHITEST\",\n  307: \"CORREL\",\n  308: \"COVAR\",\n  309: \"FORECAST\",\n  310: \"FTEST\",\n  311: \"INTERCEPT\",\n  312: \"PEARSON\",\n  313: \"RSQ\",\n  314: \"STEYX\",\n  315: \"SLOPE\",\n  316: \"TTEST\",\n  317: \"PROB\",\n  318: \"DEVSQ\",\n  319: \"GEOMEAN\",\n  320: \"HARMEAN\",\n  321: \"SUMSQ\",\n  322: \"KURT\",\n  323: \"SKEW\",\n  324: \"ZTEST\",\n  325: \"LARGE\",\n  326: \"SMALL\",\n  327: \"QUARTILE\",\n  328: \"PERCENTILE\",\n  329: \"PERCENTRANK\",\n  330: \"MODE\",\n  331: \"TRIMMEAN\",\n  332: \"TINV\",\n  334: \"MOVIE.COMMAND\",\n  335: \"GET.MOVIE\",\n  336: \"CONCATENATE\",\n  337: \"POWER\",\n  338: \"PIVOT.ADD.DATA\",\n  339: \"GET.PIVOT.TABLE\",\n  340: \"GET.PIVOT.FIELD\",\n  341: \"GET.PIVOT.ITEM\",\n  342: \"RADIANS\",\n  343: \"DEGREES\",\n  344: \"SUBTOTAL\",\n  345: \"SUMIF\",\n  346: \"COUNTIF\",\n  347: \"COUNTBLANK\",\n  348: \"SCENARIO.GET\",\n  349: \"OPTIONS.LISTS.GET\",\n  350: \"ISPMT\",\n  351: \"DATEDIF\",\n  352: \"DATESTRING\",\n  353: \"NUMBERSTRING\",\n  354: \"ROMAN\",\n  355: \"OPEN.DIALOG\",\n  356: \"SAVE.DIALOG\",\n  357: \"VIEW.GET\",\n  358: \"GETPIVOTDATA\",\n  359: \"HYPERLINK\",\n  360: \"PHONETIC\",\n  361: \"AVERAGEA\",\n  362: \"MAXA\",\n  363: \"MINA\",\n  364: \"STDEVPA\",\n  365: \"VARPA\",\n  366: \"STDEVA\",\n  367: \"VARA\",\n  368: \"BAHTTEXT\",\n  369: \"THAIDAYOFWEEK\",\n  370: \"THAIDIGIT\",\n  371: \"THAIMONTHOFYEAR\",\n  372: \"THAINUMSOUND\",\n  373: \"THAINUMSTRING\",\n  374: \"THAISTRINGLENGTH\",\n  375: \"ISTHAIDIGIT\",\n  376: \"ROUNDBAHTDOWN\",\n  377: \"ROUNDBAHTUP\",\n  378: \"THAIYEAR\",\n  379: \"RTD\",\n  380: \"CUBEVALUE\",\n  381: \"CUBEMEMBER\",\n  382: \"CUBEMEMBERPROPERTY\",\n  383: \"CUBERANKEDMEMBER\",\n  384: \"HEX2BIN\",\n  385: \"HEX2DEC\",\n  386: \"HEX2OCT\",\n  387: \"DEC2BIN\",\n  388: \"DEC2HEX\",\n  389: \"DEC2OCT\",\n  390: \"OCT2BIN\",\n  391: \"OCT2HEX\",\n  392: \"OCT2DEC\",\n  393: \"BIN2DEC\",\n  394: \"BIN2OCT\",\n  395: \"BIN2HEX\",\n  396: \"IMSUB\",\n  397: \"IMDIV\",\n  398: \"IMPOWER\",\n  399: \"IMABS\",\n  400: \"IMSQRT\",\n  401: \"IMLN\",\n  402: \"IMLOG2\",\n  403: \"IMLOG10\",\n  404: \"IMSIN\",\n  405: \"IMCOS\",\n  406: \"IMEXP\",\n  407: \"IMARGUMENT\",\n  408: \"IMCONJUGATE\",\n  409: \"IMAGINARY\",\n  410: \"IMREAL\",\n  411: \"COMPLEX\",\n  412: \"IMSUM\",\n  413: \"IMPRODUCT\",\n  414: \"SERIESSUM\",\n  415: \"FACTDOUBLE\",\n  416: \"SQRTPI\",\n  417: \"QUOTIENT\",\n  418: \"DELTA\",\n  419: \"GESTEP\",\n  420: \"ISEVEN\",\n  421: \"ISODD\",\n  422: \"MROUND\",\n  423: \"ERF\",\n  424: \"ERFC\",\n  425: \"BESSELJ\",\n  426: \"BESSELK\",\n  427: \"BESSELY\",\n  428: \"BESSELI\",\n  429: \"XIRR\",\n  430: \"XNPV\",\n  431: \"PRICEMAT\",\n  432: \"YIELDMAT\",\n  433: \"INTRATE\",\n  434: \"RECEIVED\",\n  435: \"DISC\",\n  436: \"PRICEDISC\",\n  437: \"YIELDDISC\",\n  438: \"TBILLEQ\",\n  439: \"TBILLPRICE\",\n  440: \"TBILLYIELD\",\n  441: \"PRICE\",\n  442: \"YIELD\",\n  443: \"DOLLARDE\",\n  444: \"DOLLARFR\",\n  445: \"NOMINAL\",\n  446: \"EFFECT\",\n  447: \"CUMPRINC\",\n  448: \"CUMIPMT\",\n  449: \"EDATE\",\n  450: \"EOMONTH\",\n  451: \"YEARFRAC\",\n  452: \"COUPDAYBS\",\n  453: \"COUPDAYS\",\n  454: \"COUPDAYSNC\",\n  455: \"COUPNCD\",\n  456: \"COUPNUM\",\n  457: \"COUPPCD\",\n  458: \"DURATION\",\n  459: \"MDURATION\",\n  460: \"ODDLPRICE\",\n  461: \"ODDLYIELD\",\n  462: \"ODDFPRICE\",\n  463: \"ODDFYIELD\",\n  464: \"RANDBETWEEN\",\n  465: \"WEEKNUM\",\n  466: \"AMORDEGRC\",\n  467: \"AMORLINC\",\n  468: \"CONVERT\",\n  724: \"SHEETJS\",\n  469: \"ACCRINT\",\n  470: \"ACCRINTM\",\n  471: \"WORKDAY\",\n  472: \"NETWORKDAYS\",\n  473: \"GCD\",\n  474: \"MULTINOMIAL\",\n  475: \"LCM\",\n  476: \"FVSCHEDULE\",\n  477: \"CUBEKPIMEMBER\",\n  478: \"CUBESET\",\n  479: \"CUBESETCOUNT\",\n  480: \"IFERROR\",\n  481: \"COUNTIFS\",\n  482: \"SUMIFS\",\n  483: \"AVERAGEIF\",\n  484: \"AVERAGEIFS\"\n};\nvar FtabArgc = {\n  2: 1,\n  3: 1,\n  10: 0,\n  15: 1,\n  16: 1,\n  17: 1,\n  18: 1,\n  19: 0,\n  20: 1,\n  21: 1,\n  22: 1,\n  23: 1,\n  24: 1,\n  25: 1,\n  26: 1,\n  27: 2,\n  30: 2,\n  31: 3,\n  32: 1,\n  33: 1,\n  34: 0,\n  35: 0,\n  38: 1,\n  39: 2,\n  40: 3,\n  41: 3,\n  42: 3,\n  43: 3,\n  44: 3,\n  45: 3,\n  47: 3,\n  48: 2,\n  53: 1,\n  61: 3,\n  63: 0,\n  65: 3,\n  66: 3,\n  67: 1,\n  68: 1,\n  69: 1,\n  70: 1,\n  71: 1,\n  72: 1,\n  73: 1,\n  74: 0,\n  75: 1,\n  76: 1,\n  77: 1,\n  79: 2,\n  80: 2,\n  83: 1,\n  85: 0,\n  86: 1,\n  89: 0,\n  90: 1,\n  94: 0,\n  95: 0,\n  97: 2,\n  98: 1,\n  99: 1,\n  101: 3,\n  102: 3,\n  105: 1,\n  106: 1,\n  108: 2,\n  111: 1,\n  112: 1,\n  113: 1,\n  114: 1,\n  117: 2,\n  118: 1,\n  119: 4,\n  121: 1,\n  126: 1,\n  127: 1,\n  128: 1,\n  129: 1,\n  130: 1,\n  131: 1,\n  133: 1,\n  134: 1,\n  135: 1,\n  136: 2,\n  137: 2,\n  138: 2,\n  140: 1,\n  141: 1,\n  142: 3,\n  143: 4,\n  144: 4,\n  161: 1,\n  162: 1,\n  163: 1,\n  164: 1,\n  165: 2,\n  172: 1,\n  175: 2,\n  176: 2,\n  177: 3,\n  178: 2,\n  179: 1,\n  184: 1,\n  186: 1,\n  189: 3,\n  190: 1,\n  195: 3,\n  196: 3,\n  197: 1,\n  198: 1,\n  199: 3,\n  201: 1,\n  207: 4,\n  210: 3,\n  211: 1,\n  212: 2,\n  213: 2,\n  214: 1,\n  215: 1,\n  225: 0,\n  229: 1,\n  230: 1,\n  231: 1,\n  232: 1,\n  233: 1,\n  234: 1,\n  235: 3,\n  244: 1,\n  247: 4,\n  252: 2,\n  257: 1,\n  261: 1,\n  271: 1,\n  273: 4,\n  274: 2,\n  275: 2,\n  276: 2,\n  277: 3,\n  278: 3,\n  279: 1,\n  280: 3,\n  281: 3,\n  282: 3,\n  283: 1,\n  284: 1,\n  285: 2,\n  286: 4,\n  287: 3,\n  288: 2,\n  289: 4,\n  290: 3,\n  291: 3,\n  292: 3,\n  293: 4,\n  294: 1,\n  295: 3,\n  296: 1,\n  297: 3,\n  298: 1,\n  299: 2,\n  300: 3,\n  301: 3,\n  302: 4,\n  303: 2,\n  304: 2,\n  305: 2,\n  306: 2,\n  307: 2,\n  308: 2,\n  309: 3,\n  310: 2,\n  311: 2,\n  312: 2,\n  313: 2,\n  314: 2,\n  315: 2,\n  316: 4,\n  325: 2,\n  326: 2,\n  327: 2,\n  328: 2,\n  331: 2,\n  332: 2,\n  337: 2,\n  342: 1,\n  343: 1,\n  346: 2,\n  347: 1,\n  350: 4,\n  351: 3,\n  352: 1,\n  353: 2,\n  360: 1,\n  368: 1,\n  369: 1,\n  370: 1,\n  371: 1,\n  372: 1,\n  373: 1,\n  374: 1,\n  375: 1,\n  376: 1,\n  377: 1,\n  378: 1,\n  382: 3,\n  385: 1,\n  392: 1,\n  393: 1,\n  396: 2,\n  397: 2,\n  398: 2,\n  399: 1,\n  400: 1,\n  401: 1,\n  402: 1,\n  403: 1,\n  404: 1,\n  405: 1,\n  406: 1,\n  407: 1,\n  408: 1,\n  409: 1,\n  410: 1,\n  414: 4,\n  415: 1,\n  416: 1,\n  417: 2,\n  420: 1,\n  421: 1,\n  422: 2,\n  424: 1,\n  425: 2,\n  426: 2,\n  427: 2,\n  428: 2,\n  430: 3,\n  438: 3,\n  439: 3,\n  440: 3,\n  443: 2,\n  444: 2,\n  445: 2,\n  446: 2,\n  447: 6,\n  448: 6,\n  449: 2,\n  450: 2,\n  464: 2,\n  468: 3,\n  476: 2,\n  479: 1,\n  480: 2,\n  65535: 0\n};\n/* Part 3 TODO: actually parse formulae */\n\nfunction ods_to_csf_formula(f\n/*:string*/\n)\n/*:string*/\n{\n  if (f.slice(0, 3) == \"of:\") f = f.slice(3);\n  /* 5.2 Basic Expressions */\n\n  if (f.charCodeAt(0) == 61) {\n    f = f.slice(1);\n    if (f.charCodeAt(0) == 61) f = f.slice(1);\n  }\n\n  f = f.replace(/COM\\.MICROSOFT\\./g, \"\");\n  /* Part 3 Section 5.8 References */\n\n  f = f.replace(/\\[((?:\\.[A-Z]+[0-9]+)(?::\\.[A-Z]+[0-9]+)?)\\]/g, function ($$, $1) {\n    return $1.replace(/\\./g, \"\");\n  });\n  f = f.replace(/\\$'([^']|'')+'/g, function ($$) {\n    return $$.slice(1);\n  });\n  f = f.replace(/\\$([^\\]\\. #$]+)/g, function ($$, $1) {\n    return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})?$/) ? $$ : $1;\n  });\n  /* TODO: something other than this */\n\n  f = f.replace(/\\[.(#[A-Z]*[?!])\\]/g, \"$1\");\n  return f.replace(/[;~]/g, \",\").replace(/\\|/g, \";\");\n}\n\nfunction csf_to_ods_formula(f\n/*:string*/\n)\n/*:string*/\n{\n  var o = \"of:=\" + f.replace(crefregex, \"$1[.$2$3$4$5]\").replace(/\\]:\\[/g, \":\");\n  /* TODO: something other than this */\n\n  return o.replace(/;/g, \"|\").replace(/,/g, \";\");\n}\n\nfunction ods_to_csf_3D(r\n/*:string*/\n)\n/*:[string, string]*/\n{\n  r = r.replace(/\\$'([^']|'')+'/g, function ($$) {\n    return $$.slice(1);\n  });\n  r = r.replace(/\\$([^\\]\\. #$]+)/g, function ($$, $1) {\n    return $1.match(/^([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])?(10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})?$/) ? $$ : $1;\n  });\n  var a = r.split(\":\");\n  var s = a[0].split(\".\")[0];\n  return [s, a[0].split(\".\")[1] + (a.length > 1 ? \":\" + (a[1].split(\".\")[1] || a[1].split(\".\")[0]) : \"\")];\n}\n\nfunction csf_to_ods_3D(r\n/*:string*/\n)\n/*:string*/\n{\n  return r.replace(/!/, \".\");\n}\n\nvar strs = {}; // shared strings\n\nvar _ssfopts = {}; // spreadsheet formatting options\n\n/*global Map */\n\nvar browser_has_Map = typeof Map !== 'undefined';\n\nfunction get_sst_id(sst\n/*:SST*/\n, str\n/*:string*/\n, rev)\n/*:number*/\n{\n  var i = 0,\n      len = sst.length;\n\n  if (rev) {\n    if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {\n      var revarr = browser_has_Map ? rev.get(str) : rev[str];\n\n      for (; i < revarr.length; ++i) {\n        if (sst[revarr[i]].t === str) {\n          sst.Count++;\n          return revarr[i];\n        }\n      }\n    }\n  } else for (; i < len; ++i) {\n    if (sst[i].t === str) {\n      sst.Count++;\n      return i;\n    }\n  }\n\n  sst[len] = {\n    t: str\n  }\n  /*:any*/\n  ;\n  sst.Count++;\n  sst.Unique++;\n\n  if (rev) {\n    if (browser_has_Map) {\n      if (!rev.has(str)) rev.set(str, []);\n      rev.get(str).push(len);\n    } else {\n      if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];\n      rev[str].push(len);\n    }\n  }\n\n  return len;\n}\n\nfunction col_obj_w(C\n/*:number*/\n, col) {\n  var p = {\n    min: C + 1,\n    max: C + 1\n  }\n  /*:any*/\n  ;\n  /* wch (chars), wpx (pixels) */\n\n  var wch = -1;\n  if (col.MDW) MDW = col.MDW;\n  if (col.width != null) p.customWidth = 1;else if (col.wpx != null) wch = px2char(col.wpx);else if (col.wch != null) wch = col.wch;\n\n  if (wch > -1) {\n    p.width = char2width(wch);\n    p.customWidth = 1;\n  } else if (col.width != null) p.width = col.width;\n\n  if (col.hidden) p.hidden = true;\n\n  if (col.level != null) {\n    p.outlineLevel = p.level = col.level;\n  }\n\n  return p;\n}\n\nfunction default_margins(margins\n/*:Margins*/\n, mode\n/*:?string*/\n) {\n  if (!margins) return;\n  var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];\n  if (mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];\n  if (margins.left == null) margins.left = defs[0];\n  if (margins.right == null) margins.right = defs[1];\n  if (margins.top == null) margins.top = defs[2];\n  if (margins.bottom == null) margins.bottom = defs[3];\n  if (margins.header == null) margins.header = defs[4];\n  if (margins.footer == null) margins.footer = defs[5];\n}\n\nfunction get_cell_style(styles\n/*:Array<any>*/\n, cell\n/*:Cell*/\n, opts) {\n  var z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n  var i = 0x3c,\n      len = styles.length;\n\n  if (z == null && opts.ssf) {\n    for (; i < 0x188; ++i) {\n      if (opts.ssf[i] == null) {\n        SSF__load(cell.z, i); // $FlowIgnore\n\n        opts.ssf[i] = cell.z;\n        opts.revssf[cell.z] = z = i;\n        break;\n      }\n    }\n  }\n\n  for (i = 0; i != len; ++i) {\n    if (styles[i].numFmtId === z) return i;\n  }\n\n  styles[len] = {\n    numFmtId: z,\n    fontId: 0,\n    fillId: 0,\n    borderId: 0,\n    xfId: 0,\n    applyNumberFormat: 1\n  };\n  return len;\n}\n\nfunction safe_format(p\n/*:Cell*/\n, fmtid\n/*:number*/\n, fillid\n/*:?number*/\n, opts, themes, styles) {\n  try {\n    if (opts.cellNF) p.z = table_fmt[fmtid];\n  } catch (e) {\n    if (opts.WTF) throw e;\n  }\n\n  if (p.t === 'z' && !opts.cellStyles) return;\n  if (p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);\n  if ((!opts || opts.cellText !== false) && p.t !== 'z') try {\n    if (table_fmt[fmtid] == null) SSF__load(SSFImplicit[fmtid] || \"General\", fmtid);\n    if (p.t === 'e') p.w = p.w || BErr[p.v];else if (fmtid === 0) {\n      if (p.t === 'n') {\n        if ((p.v | 0) === p.v) p.w = p.v.toString(10);else p.w = SSF_general_num(p.v);\n      } else if (p.t === 'd') {\n        var dd = datenum(p.v);\n        if ((dd | 0) === dd) p.w = dd.toString(10);else p.w = SSF_general_num(dd);\n      } else if (p.v === undefined) return \"\";else p.w = SSF_general(p.v, _ssfopts);\n    } else if (p.t === 'd') p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);else p.w = SSF_format(fmtid, p.v, _ssfopts);\n  } catch (e) {\n    if (opts.WTF) throw e;\n  }\n  if (!opts.cellStyles) return;\n  if (fillid != null) try {\n    p.s = styles.Fills[fillid];\n\n    if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {\n      p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);\n      if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;\n    }\n\n    if (p.s.bgColor && p.s.bgColor.theme) {\n      p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);\n      if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;\n    }\n  } catch (e) {\n    if (opts.WTF && styles.Fills) throw e;\n  }\n}\n\nfunction check_ws(ws\n/*:Worksheet*/\n, sname\n/*:string*/\n, i\n/*:number*/\n) {\n  if (ws && ws['!ref']) {\n    var range = safe_decode_range(ws['!ref']);\n    if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error(\"Bad range (\" + i + \"): \" + ws['!ref']);\n  }\n}\n\nfunction parse_ws_xml_dim(ws\n/*:Worksheet*/\n, s\n/*:string*/\n) {\n  var d = safe_decode_range(s);\n  if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws[\"!ref\"] = encode_range(d);\n}\n\nvar mergecregex = /<(?:\\w:)?mergeCell ref=\"[A-Z0-9:]+\"\\s*[\\/]?>/g;\nvar sheetdataregex = /<(?:\\w+:)?sheetData[^>]*>([\\s\\S]*)<\\/(?:\\w+:)?sheetData>/;\nvar hlinkregex = /<(?:\\w:)?hyperlink [^>]*>/mg;\nvar dimregex = /\"(\\w*:\\w*)\"/;\nvar colregex = /<(?:\\w:)?col\\b[^>]*[\\/]?>/g;\nvar afregex = /<(?:\\w:)?autoFilter[^>]*([\\/]|>([\\s\\S]*)<\\/(?:\\w:)?autoFilter)>/g;\nvar marginregex = /<(?:\\w:)?pageMargins[^>]*\\/>/g;\nvar sheetprregex = /<(?:\\w:)?sheetPr\\b(?:[^>a-z][^>]*)?\\/>/;\nvar sheetprregex2 = /<(?:\\w:)?sheetPr[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetPr)>/;\nvar svsregex = /<(?:\\w:)?sheetViews[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetViews)>/;\n/* 18.3 Worksheets */\n\nfunction parse_ws_xml(data\n/*:?string*/\n, opts, idx\n/*:number*/\n, rels, wb\n/*:WBWBProps*/\n, themes, styles)\n/*:Worksheet*/\n{\n  if (!data) return data;\n  if (!rels) rels = {\n    '!id': {}\n  };\n  if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n  /* 18.3.1.99 worksheet CT_Worksheet */\n\n  var s = opts.dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  ;\n  var refguess\n  /*:Range*/\n  = {\n    s: {\n      r: 2000000,\n      c: 2000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  }\n  /*:any*/\n  ;\n  var data1 = \"\",\n      data2 = \"\";\n  var mtch\n  /*:?any*/\n  = data.match(sheetdataregex);\n\n  if (mtch) {\n    data1 = data.slice(0, mtch.index);\n    data2 = data.slice(mtch.index + mtch[0].length);\n  } else data1 = data2 = data;\n  /* 18.3.1.82 sheetPr CT_SheetPr */\n\n\n  var sheetPr = data1.match(sheetprregex);\n  if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || \"\", s, wb, idx, styles, themes);\n  /* 18.3.1.35 dimension CT_SheetDimension */\n\n  var ridx = (data1.match(/<(?:\\w*:)?dimension/) || {\n    index: -1\n  }).index;\n\n  if (ridx > 0) {\n    var ref = data1.slice(ridx, ridx + 50).match(dimregex);\n    if (ref) parse_ws_xml_dim(s, ref[1]);\n  }\n  /* 18.3.1.88 sheetViews CT_SheetViews */\n\n\n  var svs = data1.match(svsregex);\n  if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);\n  /* 18.3.1.17 cols CT_Cols */\n\n  var columns\n  /*:Array<ColInfo>*/\n  = [];\n\n  if (opts.cellStyles) {\n    /* 18.3.1.13 col CT_Col */\n    var cols = data1.match(colregex);\n    if (cols) parse_ws_xml_cols(columns, cols);\n  }\n  /* 18.3.1.80 sheetData CT_SheetData ? */\n\n\n  if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);\n  /* 18.3.1.2  autoFilter CT_AutoFilter */\n\n  var afilter = data2.match(afregex);\n  if (afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);\n  /* 18.3.1.55 mergeCells CT_MergeCells */\n\n  var merges\n  /*:Array<Range>*/\n  = [];\n\n  var _merge = data2.match(mergecregex);\n\n  if (_merge) for (ridx = 0; ridx != _merge.length; ++ridx) {\n    merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf(\"\\\"\") + 1));\n  }\n  /* 18.3.1.48 hyperlinks CT_Hyperlinks */\n\n  var hlink = data2.match(hlinkregex);\n  if (hlink) parse_ws_xml_hlinks(s, hlink, rels);\n  /* 18.3.1.62 pageMargins CT_PageMargins */\n\n  var margins = data2.match(marginregex);\n  if (margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));\n  if (!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n\n  if (opts.sheetRows > 0 && s[\"!ref\"]) {\n    var tmpref = safe_decode_range(s[\"!ref\"]);\n\n    if (opts.sheetRows <= +tmpref.e.r) {\n      tmpref.e.r = opts.sheetRows - 1;\n      if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n      if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n      if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n      if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n      s[\"!fullref\"] = s[\"!ref\"];\n      s[\"!ref\"] = encode_range(tmpref);\n    }\n  }\n\n  if (columns.length > 0) s[\"!cols\"] = columns;\n  if (merges.length > 0) s[\"!merges\"] = merges;\n  return s;\n}\n\nfunction write_ws_xml_merges(merges\n/*:Array<Range>*/\n)\n/*:string*/\n{\n  if (merges.length === 0) return \"\";\n  var o = '<mergeCells count=\"' + merges.length + '\">';\n\n  for (var i = 0; i != merges.length; ++i) {\n    o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n  }\n\n  return o + '</mergeCells>';\n}\n/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */\n\n\nfunction parse_ws_xml_sheetpr(sheetPr\n/*:string*/\n, s, wb\n/*:WBWBProps*/\n, idx\n/*:number*/\n) {\n  var data = parsexmltag(sheetPr);\n  if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n  if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));\n}\n\nfunction parse_ws_xml_sheetpr2(sheetPr\n/*:string*/\n, body\n/*:string*/\n, s, wb\n/*:WBWBProps*/\n, idx\n/*:number*/\n) {\n  parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(\">\")), s, wb, idx);\n}\n\nfunction write_ws_xml_sheetpr(ws, wb, idx, opts, o) {\n  var needed = false;\n  var props = {},\n      payload = null;\n\n  if (opts.bookType !== 'xlsx' && wb.vbaraw) {\n    var cname = wb.SheetNames[idx];\n\n    try {\n      if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;\n    } catch (e) {}\n\n    needed = true;\n    props.codeName = utf8write(escapexml(cname));\n  }\n\n  if (ws && ws[\"!outline\"]) {\n    var outlineprops = {\n      summaryBelow: 1,\n      summaryRight: 1\n    };\n    if (ws[\"!outline\"].above) outlineprops.summaryBelow = 0;\n    if (ws[\"!outline\"].left) outlineprops.summaryRight = 0;\n    payload = (payload || \"\") + writextag('outlinePr', null, outlineprops);\n  }\n\n  if (!needed && !payload) return;\n  o[o.length] = writextag('sheetPr', payload, props);\n}\n/* 18.3.1.85 sheetProtection CT_SheetProtection */\n\n\nvar sheetprot_deffalse = [\"objects\", \"scenarios\", \"selectLockedCells\", \"selectUnlockedCells\"];\nvar sheetprot_deftrue = [\"formatColumns\", \"formatRows\", \"formatCells\", \"insertColumns\", \"insertRows\", \"insertHyperlinks\", \"deleteColumns\", \"deleteRows\", \"sort\", \"autoFilter\", \"pivotTables\"];\n\nfunction write_ws_xml_protection(sp)\n/*:string*/\n{\n  // algorithmName, hashValue, saltValue, spinCount\n  var o = {\n    sheet: 1\n  }\n  /*:any*/\n  ;\n  sheetprot_deffalse.forEach(function (n) {\n    if (sp[n] != null && sp[n]) o[n] = \"1\";\n  });\n  sheetprot_deftrue.forEach(function (n) {\n    if (sp[n] != null && !sp[n]) o[n] = \"0\";\n  });\n  /* TODO: algorithm */\n\n  if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();\n  return writextag('sheetProtection', null, o);\n}\n\nfunction parse_ws_xml_hlinks(s, data\n/*:Array<string>*/\n, rels) {\n  var dense = Array.isArray(s);\n\n  for (var i = 0; i != data.length; ++i) {\n    var val = parsexmltag(utf8read(data[i]), true);\n    if (!val.ref) return;\n    var rel = ((rels || {})['!id'] || [])[val.id];\n\n    if (rel) {\n      val.Target = rel.Target;\n      if (val.location) val.Target += \"#\" + unescapexml(val.location);\n    } else {\n      val.Target = \"#\" + unescapexml(val.location);\n      rel = {\n        Target: val.Target,\n        TargetMode: 'Internal'\n      };\n    }\n\n    val.Rel = rel;\n\n    if (val.tooltip) {\n      val.Tooltip = val.tooltip;\n      delete val.tooltip;\n    }\n\n    var rng = safe_decode_range(val.ref);\n\n    for (var R = rng.s.r; R <= rng.e.r; ++R) {\n      for (var C = rng.s.c; C <= rng.e.c; ++C) {\n        var addr = encode_cell({\n          c: C,\n          r: R\n        });\n\n        if (dense) {\n          if (!s[R]) s[R] = [];\n          if (!s[R][C]) s[R][C] = {\n            t: \"z\",\n            v: undefined\n          };\n          s[R][C].l = val;\n        } else {\n          if (!s[addr]) s[addr] = {\n            t: \"z\",\n            v: undefined\n          };\n          s[addr].l = val;\n        }\n      }\n    }\n  }\n}\n\nfunction parse_ws_xml_margins(margin) {\n  var o = {};\n  [\"left\", \"right\", \"top\", \"bottom\", \"header\", \"footer\"].forEach(function (k) {\n    if (margin[k]) o[k] = parseFloat(margin[k]);\n  });\n  return o;\n}\n\nfunction write_ws_xml_margins(margin)\n/*:string*/\n{\n  default_margins(margin);\n  return writextag('pageMargins', null, margin);\n}\n\nfunction parse_ws_xml_cols(columns, cols) {\n  var seencol = false;\n\n  for (var coli = 0; coli != cols.length; ++coli) {\n    var coll = parsexmltag(cols[coli], true);\n    if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);\n    var colm = parseInt(coll.min, 10) - 1,\n        colM = parseInt(coll.max, 10) - 1;\n    if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;\n    delete coll.min;\n    delete coll.max;\n    coll.width = +coll.width;\n\n    if (!seencol && coll.width) {\n      seencol = true;\n      find_mdw_colw(coll.width);\n    }\n\n    process_col(coll);\n\n    while (colm <= colM) {\n      columns[colm++] = dup(coll);\n    }\n  }\n}\n\nfunction write_ws_xml_cols(ws, cols)\n/*:string*/\n{\n  var o = [\"<cols>\"],\n      col;\n\n  for (var i = 0; i != cols.length; ++i) {\n    if (!(col = cols[i])) continue;\n    o[o.length] = writextag('col', null, col_obj_w(i, col));\n  }\n\n  o[o.length] = \"</cols>\";\n  return o.join(\"\");\n}\n\nfunction parse_ws_xml_autofilter(data\n/*:string*/\n) {\n  var o = {\n    ref: (data.match(/ref=\"([^\"]*)\"/) || [])[1]\n  };\n  return o;\n}\n\nfunction write_ws_xml_autofilter(data, ws, wb, idx)\n/*:string*/\n{\n  var ref = typeof data.ref == \"string\" ? data.ref : encode_range(data.ref);\n  if (!wb.Workbook) wb.Workbook = {\n    Sheets: []\n  }\n  /*:any*/\n  ;\n  if (!wb.Workbook.Names) wb.Workbook.Names = [];\n  var names\n  /*: Array<any> */\n  = wb.Workbook.Names;\n  var range = decode_range(ref);\n\n  if (range.s.r == range.e.r) {\n    range.e.r = decode_range(ws[\"!ref\"]).e.r;\n    ref = encode_range(range);\n  }\n\n  for (var i = 0; i < names.length; ++i) {\n    var name = names[i];\n    if (name.Name != '_xlnm._FilterDatabase') continue;\n    if (name.Sheet != idx) continue;\n    name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + \"!\" + fix_range(ref);\n    break;\n  }\n\n  if (i == names.length) names.push({\n    Name: '_xlnm._FilterDatabase',\n    Sheet: idx,\n    Ref: \"'\" + wb.SheetNames[idx] + \"'!\" + ref\n  });\n  return writextag(\"autoFilter\", null, {\n    ref: ref\n  });\n}\n/* 18.3.1.88 sheetViews CT_SheetViews */\n\n/* 18.3.1.87 sheetView CT_SheetView */\n\n\nvar sviewregex = /<(?:\\w:)?sheetView(?:[^>a-z][^>]*)?\\/?>/g;\n\nfunction parse_ws_xml_sheetviews(data, wb\n/*:WBWBProps*/\n) {\n  if (!wb.Views) wb.Views = [{}];\n  (data.match(sviewregex) || []).forEach(function (r\n  /*:string*/\n  , i\n  /*:number*/\n  ) {\n    var tag = parsexmltag(r); // $FlowIgnore\n\n    if (!wb.Views[i]) wb.Views[i] = {}; // $FlowIgnore\n\n    if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale; // $FlowIgnore\n\n    if (tag.rightToLeft && parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;\n  });\n}\n\nfunction write_ws_xml_sheetviews(ws, opts, idx, wb)\n/*:string*/\n{\n  var sview = {\n    workbookViewId: \"0\"\n  }\n  /*:any*/\n  ; // $FlowIgnore\n\n  if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? \"1\" : \"0\";\n  return writextag(\"sheetViews\", writextag(\"sheetView\", null, sview), {});\n}\n\nfunction write_ws_xml_cell(cell\n/*:Cell*/\n, ref, ws, opts\n/*::, idx, wb*/\n)\n/*:string*/\n{\n  if (cell.c) ws['!comments'].push([ref, cell.c]);\n  if ((cell.v === undefined || cell.t === \"z\" && !(opts || {}).sheetStubs) && typeof cell.f !== \"string\" && typeof cell.z == \"undefined\") return \"\";\n  var vv = \"\";\n  var oldt = cell.t,\n      oldv = cell.v;\n  if (cell.t !== \"z\") switch (cell.t) {\n    case 'b':\n      vv = cell.v ? \"1\" : \"0\";\n      break;\n\n    case 'n':\n      vv = '' + cell.v;\n      break;\n\n    case 'e':\n      vv = BErr[cell.v];\n      break;\n\n    case 'd':\n      if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();else {\n        cell = dup(cell);\n        cell.t = 'n';\n        vv = '' + (cell.v = datenum(parseDate(cell.v)));\n      }\n      if (typeof cell.z === 'undefined') cell.z = table_fmt[14];\n      break;\n\n    default:\n      vv = cell.v;\n      break;\n  }\n  var v = cell.t == \"z\" || cell.v == null ? \"\" : writetag('v', escapexml(vv)),\n      o = {\n    r: ref\n  }\n  /*:any*/\n  ;\n  /* TODO: cell style */\n\n  var os = get_cell_style(opts.cellXfs, cell, opts);\n  if (os !== 0) o.s = os;\n\n  switch (cell.t) {\n    case 'n':\n      break;\n\n    case 'd':\n      o.t = \"d\";\n      break;\n\n    case 'b':\n      o.t = \"b\";\n      break;\n\n    case 'e':\n      o.t = \"e\";\n      break;\n\n    case 'z':\n      break;\n\n    default:\n      if (cell.v == null) {\n        delete cell.t;\n        break;\n      }\n\n      if (cell.v.length > 32767) throw new Error(\"Text length must not exceed 32767 characters\");\n\n      if (opts && opts.bookSST) {\n        v = writetag('v', '' + get_sst_id(opts.Strings, cell.v, opts.revStrings));\n        o.t = \"s\";\n        break;\n      } else o.t = \"str\";\n\n      break;\n  }\n\n  if (cell.t != oldt) {\n    cell.t = oldt;\n    cell.v = oldv;\n  }\n\n  if (typeof cell.f == \"string\" && cell.f) {\n    var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {\n      t: \"array\",\n      ref: cell.F\n    } : null;\n    v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : \"\");\n  }\n\n  if (cell.l) ws['!links'].push([ref, cell.l]);\n  if (cell.D) o.cm = 1;\n  return writextag('c', v, o);\n}\n\nvar parse_ws_xml_data = /*#__PURE__*/function () {\n  var cellregex = /<(?:\\w+:)?c[ \\/>]/,\n      rowregex = /<\\/(?:\\w+:)?row>/;\n  var rregex = /r=[\"']([^\"']*)[\"']/,\n      isregex = /<(?:\\w+:)?is>([\\S\\s]*?)<\\/(?:\\w+:)?is>/;\n  var refregex = /ref=[\"']([^\"']*)[\"']/;\n  var match_v = matchtag(\"v\"),\n      match_f = matchtag(\"f\");\n  return function parse_ws_xml_data(sdata\n  /*:string*/\n  , s, opts, guess\n  /*:Range*/\n  , themes, styles) {\n    var ri = 0,\n        x = \"\",\n        cells\n    /*:Array<string>*/\n    = [],\n        cref\n    /*:?Array<string>*/\n    = [],\n        idx = 0,\n        i = 0,\n        cc = 0,\n        d = \"\",\n        p\n    /*:any*/\n    ;\n    var tag,\n        tagr = 0,\n        tagc = 0;\n    var sstr, ftag;\n    var fmtid = 0,\n        fillid = 0;\n    var do_format = Array.isArray(styles.CellXf),\n        cf;\n    var arrayf\n    /*:Array<[Range, string]>*/\n    = [];\n    var sharedf = [];\n    var dense = Array.isArray(s);\n    var rows\n    /*:Array<RowInfo>*/\n    = [],\n        rowobj = {},\n        rowrite = false;\n    var sheetStubs = !!opts.sheetStubs;\n\n    for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {\n      x = marr[mt].trim();\n      var xlen = x.length;\n      if (xlen === 0) continue;\n      /* 18.3.1.73 row CT_Row */\n\n      var rstarti = 0;\n\n      outa: for (ri = 0; ri < xlen; ++ri) {\n        switch (\n        /*x.charCodeAt(ri)*/\n        x[ri]) {\n          case \">\"\n          /*62*/\n          :\n            if (\n            /*x.charCodeAt(ri-1) != 47*/\n            x[ri - 1] != \"/\") {\n              ++ri;\n              break outa;\n            }\n\n            if (opts && opts.cellStyles) {\n              // TODO: avoid duplication\n              tag = parsexmltag(x.slice(rstarti, ri), true);\n              tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;\n              tagc = -1;\n              if (opts.sheetRows && opts.sheetRows < tagr) continue;\n              rowobj = {};\n              rowrite = false;\n\n              if (tag.ht) {\n                rowrite = true;\n                rowobj.hpt = parseFloat(tag.ht);\n                rowobj.hpx = pt2px(rowobj.hpt);\n              }\n\n              if (tag.hidden && parsexmlbool(tag.hidden)) {\n                rowrite = true;\n                rowobj.hidden = true;\n              }\n\n              if (tag.outlineLevel != null) {\n                rowrite = true;\n                rowobj.level = +tag.outlineLevel;\n              }\n\n              if (rowrite) rows[tagr - 1] = rowobj;\n            }\n\n            break;\n\n          case \"<\"\n          /*60*/\n          :\n            rstarti = ri;\n            break;\n        }\n      }\n\n      if (rstarti >= ri) break;\n      tag = parsexmltag(x.slice(rstarti, ri), true);\n      tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;\n      tagc = -1;\n      if (opts.sheetRows && opts.sheetRows < tagr) continue;\n      if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n      if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n\n      if (opts && opts.cellStyles) {\n        rowobj = {};\n        rowrite = false;\n\n        if (tag.ht) {\n          rowrite = true;\n          rowobj.hpt = parseFloat(tag.ht);\n          rowobj.hpx = pt2px(rowobj.hpt);\n        }\n\n        if (tag.hidden && parsexmlbool(tag.hidden)) {\n          rowrite = true;\n          rowobj.hidden = true;\n        }\n\n        if (tag.outlineLevel != null) {\n          rowrite = true;\n          rowobj.level = +tag.outlineLevel;\n        }\n\n        if (rowrite) rows[tagr - 1] = rowobj;\n      }\n      /* 18.3.1.4 c CT_Cell */\n\n\n      cells = x.slice(ri).split(cellregex);\n\n      for (var rslice = 0; rslice != cells.length; ++rslice) {\n        if (cells[rslice].trim().charAt(0) != \"<\") break;\n      }\n\n      cells = cells.slice(rslice);\n\n      for (ri = 0; ri != cells.length; ++ri) {\n        x = cells[ri].trim();\n        if (x.length === 0) continue;\n        cref = x.match(rregex);\n        idx = ri;\n        i = 0;\n        cc = 0;\n        x = \"<c \" + (x.slice(0, 1) == \"<\" ? \">\" : \"\") + x;\n\n        if (cref != null && cref.length === 2) {\n          idx = 0;\n          d = cref[1];\n\n          for (i = 0; i != d.length; ++i) {\n            if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;\n            idx = 26 * idx + cc;\n          }\n\n          --idx;\n          tagc = idx;\n        } else ++tagc;\n\n        for (i = 0; i != x.length; ++i) {\n          if (x.charCodeAt(i) === 62) break;\n        }\n\n        ++i;\n        tag = parsexmltag(x.slice(0, i), true);\n        if (!tag.r) tag.r = encode_cell({\n          r: tagr - 1,\n          c: tagc\n        });\n        d = x.slice(i);\n        p = {\n          t: \"\"\n        }\n        /*:any*/\n        ;\n        if ((cref = d.match(match_v)) != null &&\n        /*::cref != null && */\n        cref[1] !== '') p.v = unescapexml(cref[1]);\n\n        if (opts.cellFormula) {\n          if ((cref = d.match(match_f)) != null &&\n          /*::cref != null && */\n          cref[1] !== '') {\n            /* TODO: match against XLSXFutureFunctions */\n            p.f = unescapexml(utf8read(cref[1]), true);\n            if (!opts.xlfn) p.f = _xlfn(p.f);\n\n            if (\n            /*::cref != null && cref[0] != null && */\n            cref[0].indexOf('t=\"array\"') > -1) {\n              p.F = (d.match(refregex) || [])[1];\n              if (p.F.indexOf(\":\") > -1) arrayf.push([safe_decode_range(p.F), p.F]);\n            } else if (\n            /*::cref != null && cref[0] != null && */\n            cref[0].indexOf('t=\"shared\"') > -1) {\n              // TODO: parse formula\n              ftag = parsexmltag(cref[0]);\n\n              var ___f = unescapexml(utf8read(cref[1]));\n\n              if (!opts.xlfn) ___f = _xlfn(___f);\n              sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];\n            }\n          } else if (cref = d.match(/<f[^>]*\\/>/)) {\n            ftag = parsexmltag(cref[0]);\n            if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]\n            /*[0].ref*/\n            , tag.r);\n          }\n          /* TODO: factor out contains logic */\n\n\n          var _tag = decode_cell(tag.r);\n\n          for (i = 0; i < arrayf.length; ++i) {\n            if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];\n          }\n        }\n\n        if (tag.t == null && p.v === undefined) {\n          if (p.f || p.F) {\n            p.v = 0;\n            p.t = \"n\";\n          } else if (!sheetStubs) continue;else p.t = \"z\";\n        } else p.t = tag.t || \"n\";\n\n        if (guess.s.c > tagc) guess.s.c = tagc;\n        if (guess.e.c < tagc) guess.e.c = tagc;\n        /* 18.18.11 t ST_CellType */\n\n        switch (p.t) {\n          case 'n':\n            if (p.v == \"\" || p.v == null) {\n              if (!sheetStubs) continue;\n              p.t = 'z';\n            } else p.v = parseFloat(p.v);\n\n            break;\n\n          case 's':\n            if (typeof p.v == 'undefined') {\n              if (!sheetStubs) continue;\n              p.t = 'z';\n            } else {\n              sstr = strs[parseInt(p.v, 10)];\n              p.v = sstr.t;\n              p.r = sstr.r;\n              if (opts.cellHTML) p.h = sstr.h;\n            }\n\n            break;\n\n          case 'str':\n            p.t = \"s\";\n            p.v = p.v != null ? unescapexml(utf8read(p.v), true) : '';\n            if (opts.cellHTML) p.h = escapehtml(p.v);\n            break;\n\n          case 'inlineStr':\n            cref = d.match(isregex);\n            p.t = 's';\n\n            if (cref != null && (sstr = parse_si(cref[1]))) {\n              p.v = sstr.t;\n              if (opts.cellHTML) p.h = sstr.h;\n            } else p.v = \"\";\n\n            break;\n\n          case 'b':\n            p.v = parsexmlbool(p.v);\n            break;\n\n          case 'd':\n            if (opts.cellDates) p.v = parseDate(p.v, 1);else {\n              p.v = datenum(parseDate(p.v, 1));\n              p.t = 'n';\n            }\n            break;\n\n          /* error string in .w, number in .v */\n\n          case 'e':\n            if (!opts || opts.cellText !== false) p.w = p.v;\n            p.v = RBErr[p.v];\n            break;\n        }\n        /* formatting */\n\n\n        fmtid = fillid = 0;\n        cf = null;\n\n        if (do_format && tag.s !== undefined) {\n          cf = styles.CellXf[tag.s];\n\n          if (cf != null) {\n            if (cf.numFmtId != null) fmtid = cf.numFmtId;\n\n            if (opts.cellStyles) {\n              if (cf.fillId != null) fillid = cf.fillId;\n            }\n          }\n        }\n\n        safe_format(p, fmtid, fillid, opts, themes, styles);\n\n        if (opts.cellDates && do_format && p.t == 'n' && fmt_is_date(table_fmt[fmtid])) {\n          p.t = 'd';\n          p.v = numdate(p.v);\n        }\n\n        if (tag.cm && opts.xlmeta) {\n          var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];\n          if (cm && cm.type == 'XLDAPR') p.D = true;\n        }\n\n        if (dense) {\n          var _r = decode_cell(tag.r);\n\n          if (!s[_r.r]) s[_r.r] = [];\n          s[_r.r][_r.c] = p;\n        } else s[tag.r] = p;\n      }\n    }\n\n    if (rows.length > 0) s['!rows'] = rows;\n  };\n}();\n\nfunction write_ws_xml_data(ws\n/*:Worksheet*/\n, opts, idx\n/*:number*/\n, wb\n/*:Workbook*/\n\n/*::, rels*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [],\n      r\n  /*:Array<string>*/\n  = [],\n      range = safe_decode_range(ws['!ref']),\n      cell = \"\",\n      ref,\n      rr = \"\",\n      cols\n  /*:Array<string>*/\n  = [],\n      R = 0,\n      C = 0,\n      rows = ws['!rows'];\n  var dense = Array.isArray(ws);\n  var params = {\n    r: rr\n  }\n  /*:any*/\n  ,\n      row\n  /*:RowInfo*/\n  ,\n      height = -1;\n\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    cols[C] = encode_col(C);\n  }\n\n  for (R = range.s.r; R <= range.e.r; ++R) {\n    r = [];\n    rr = encode_row(R);\n\n    for (C = range.s.c; C <= range.e.c; ++C) {\n      ref = cols[C] + rr;\n\n      var _cell = dense ? (ws[R] || [])[C] : ws[ref];\n\n      if (_cell === undefined) continue;\n      if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);\n    }\n\n    if (r.length > 0 || rows && rows[R]) {\n      params = {\n        r: rr\n      }\n      /*:any*/\n      ;\n\n      if (rows && rows[R]) {\n        row = rows[R];\n        if (row.hidden) params.hidden = 1;\n        height = -1;\n        if (row.hpx) height = px2pt(row.hpx);else if (row.hpt) height = row.hpt;\n\n        if (height > -1) {\n          params.ht = height;\n          params.customHeight = 1;\n        }\n\n        if (row.level) {\n          params.outlineLevel = row.level;\n        }\n      }\n\n      o[o.length] = writextag('row', r.join(\"\"), params);\n    }\n  }\n\n  if (rows) for (; R < rows.length; ++R) {\n    if (rows && rows[R]) {\n      params = {\n        r: R + 1\n      }\n      /*:any*/\n      ;\n      row = rows[R];\n      if (row.hidden) params.hidden = 1;\n      height = -1;\n      if (row.hpx) height = px2pt(row.hpx);else if (row.hpt) height = row.hpt;\n\n      if (height > -1) {\n        params.ht = height;\n        params.customHeight = 1;\n      }\n\n      if (row.level) {\n        params.outlineLevel = row.level;\n      }\n\n      o[o.length] = writextag('row', \"\", params);\n    }\n  }\n  return o.join(\"\");\n}\n\nfunction write_ws_xml(idx\n/*:number*/\n, opts, wb\n/*:Workbook*/\n, rels)\n/*:string*/\n{\n  var o = [XML_HEADER, writextag('worksheet', null, {\n    'xmlns': XMLNS_main[0],\n    'xmlns:r': XMLNS.r\n  })];\n  var s = wb.SheetNames[idx],\n      sidx = 0,\n      rdata = \"\";\n  var ws = wb.Sheets[s];\n  if (ws == null) ws = {};\n  var ref = ws['!ref'] || 'A1';\n  var range = safe_decode_range(ref);\n\n  if (range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {\n    if (opts.WTF) throw new Error(\"Range \" + ref + \" exceeds format limit A1:XFD1048576\");\n    range.e.c = Math.min(range.e.c, 0x3FFF);\n    range.e.r = Math.min(range.e.c, 0xFFFFF);\n    ref = encode_range(range);\n  }\n\n  if (!rels) rels = {};\n  ws['!comments'] = [];\n  var _drawing = [];\n  write_ws_xml_sheetpr(ws, wb, idx, opts, o);\n  o[o.length] = writextag('dimension', null, {\n    'ref': ref\n  });\n  o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);\n  /* TODO: store in WB, process styles */\n\n  if (opts.sheetFormat) o[o.length] = writextag('sheetFormatPr', null, {\n    defaultRowHeight: opts.sheetFormat.defaultRowHeight || '16',\n    baseColWidth: opts.sheetFormat.baseColWidth || '10',\n    outlineLevelRow: opts.sheetFormat.outlineLevelRow || '7'\n  });\n  if (ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = write_ws_xml_cols(ws, ws['!cols']);\n  o[sidx = o.length] = '<sheetData/>';\n  ws['!links'] = [];\n\n  if (ws['!ref'] != null) {\n    rdata = write_ws_xml_data(ws, opts, idx, wb, rels);\n    if (rdata.length > 0) o[o.length] = rdata;\n  }\n\n  if (o.length > sidx + 1) {\n    o[o.length] = '</sheetData>';\n    o[sidx] = o[sidx].replace(\"/>\", \">\");\n  }\n  /* sheetCalcPr */\n\n\n  if (ws['!protect']) o[o.length] = write_ws_xml_protection(ws['!protect']);\n  /* protectedRanges */\n\n  /* scenarios */\n\n  if (ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter'], ws, wb, idx);\n  /* sortState */\n\n  /* dataConsolidate */\n\n  /* customSheetViews */\n\n  if (ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = write_ws_xml_merges(ws['!merges']);\n  /* phoneticPr */\n\n  /* conditionalFormatting */\n\n  /* dataValidations */\n\n  var relc = -1,\n      rel,\n      rId = -1;\n\n  if (\n  /*::(*/\n  ws['!links']\n  /*::||[])*/\n  .length > 0) {\n    o[o.length] = \"<hyperlinks>\";\n    /*::(*/\n\n    ws['!links']\n    /*::||[])*/\n    .forEach(function (l) {\n      if (!l[1].Target) return;\n      rel = {\n        \"ref\": l[0]\n      }\n      /*:any*/\n      ;\n\n      if (l[1].Target.charAt(0) != \"#\") {\n        rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, \"\"), RELS.HLINK);\n        rel[\"r:id\"] = \"rId\" + rId;\n      }\n\n      if ((relc = l[1].Target.indexOf(\"#\")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));\n      if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);\n      o[o.length] = writextag(\"hyperlink\", null, rel);\n    });\n    o[o.length] = \"</hyperlinks>\";\n  }\n\n  delete ws['!links'];\n  /* printOptions */\n\n  if (ws['!margins'] != null) o[o.length] = write_ws_xml_margins(ws['!margins']);\n  /* pageSetup */\n\n  /* headerFooter */\n\n  /* rowBreaks */\n\n  /* colBreaks */\n\n  /* customProperties */\n\n  /* cellWatches */\n\n  if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag(\"ignoredErrors\", writextag(\"ignoredError\", null, {\n    numberStoredAsText: 1,\n    sqref: ref\n  }));\n  /* smartTags */\n\n  if (_drawing.length > 0) {\n    rId = add_rels(rels, -1, \"../drawings/drawing\" + (idx + 1) + \".xml\", RELS.DRAW);\n    o[o.length] = writextag(\"drawing\", null, {\n      \"r:id\": \"rId\" + rId\n    });\n    ws['!drawing'] = _drawing;\n  }\n\n  if (ws['!comments'].length > 0) {\n    rId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx + 1) + \".vml\", RELS.VML);\n    o[o.length] = writextag(\"legacyDrawing\", null, {\n      \"r:id\": \"rId\" + rId\n    });\n    ws['!legacy'] = rId;\n  }\n  /* legacyDrawingHF */\n\n  /* picture */\n\n  /* oleObjects */\n\n  /* controls */\n\n  /* webPublishItems */\n\n  /* tableParts */\n\n  /* extLst */\n\n\n  if (o.length > 1) {\n    o[o.length] = '</worksheet>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.726 BrtRowHdr */\n\n\nfunction parse_BrtRowHdr(data, length) {\n  var z = {}\n  /*:any*/\n  ;\n  var tgt = data.l + length;\n  z.r = data.read_shift(4);\n  data.l += 4; // TODO: ixfe\n\n  var miyRw = data.read_shift(2);\n  data.l += 1; // TODO: top/bot padding\n\n  var flags = data.read_shift(1);\n  data.l = tgt;\n  if (flags & 0x07) z.level = flags & 0x07;\n  if (flags & 0x10) z.hidden = true;\n  if (flags & 0x20) z.hpt = miyRw / 20;\n  return z;\n}\n\nfunction write_BrtRowHdr(R\n/*:number*/\n, range, ws) {\n  var o = new_buf(17 + 8 * 16);\n  var row = (ws['!rows'] || [])[R] || {};\n  o.write_shift(4, R);\n  o.write_shift(4, 0);\n  /* TODO: ixfe */\n\n  var miyRw = 0x0140;\n  if (row.hpx) miyRw = px2pt(row.hpx) * 20;else if (row.hpt) miyRw = row.hpt * 20;\n  o.write_shift(2, miyRw);\n  o.write_shift(1, 0);\n  /* top/bot padding */\n\n  var flags = 0x0;\n  if (row.level) flags |= row.level;\n  if (row.hidden) flags |= 0x10;\n  if (row.hpx || row.hpt) flags |= 0x20;\n  o.write_shift(1, flags);\n  o.write_shift(1, 0);\n  /* phonetic guide */\n\n  /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */\n\n  var ncolspan = 0,\n      lcs = o.l;\n  o.l += 4;\n  var caddr = {\n    r: R,\n    c: 0\n  };\n\n  for (var i = 0; i < 16; ++i) {\n    if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;\n    var first = -1,\n        last = -1;\n\n    for (var j = i << 10; j < i + 1 << 10; ++j) {\n      caddr.c = j;\n      var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];\n\n      if (cell) {\n        if (first < 0) first = j;\n        last = j;\n      }\n    }\n\n    if (first < 0) continue;\n    ++ncolspan;\n    o.write_shift(4, first);\n    o.write_shift(4, last);\n  }\n\n  var l = o.l;\n  o.l = lcs;\n  o.write_shift(4, ncolspan);\n  o.l = l;\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n\nfunction write_row_header(ba, ws, range, R) {\n  var o = write_BrtRowHdr(R, range, ws);\n  if (o.length > 17 || (ws['!rows'] || [])[R]) write_record(ba, 0x0000\n  /* BrtRowHdr */\n  , o);\n}\n/* [MS-XLSB] 2.4.820 BrtWsDim */\n\n\nvar parse_BrtWsDim = parse_UncheckedRfX;\nvar write_BrtWsDim = write_UncheckedRfX;\n/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */\n\nfunction\n  /*::data, length*/\nparse_BrtWsFmtInfo() {} //function write_BrtWsFmtInfo(ws, o) { }\n\n/* [MS-XLSB] 2.4.823 BrtWsProp */\n\n\nfunction parse_BrtWsProp(data, length) {\n  var z = {};\n  var f = data[data.l];\n  ++data.l;\n  z.above = !(f & 0x40);\n  z.left = !(f & 0x80);\n  /* TODO: pull flags */\n\n  data.l += 18;\n  z.name = parse_XLSBCodeName(data, length - 19);\n  return z;\n}\n\nfunction write_BrtWsProp(str, outl, o) {\n  if (o == null) o = new_buf(84 + 4 * str.length);\n  var f = 0xC0;\n\n  if (outl) {\n    if (outl.above) f &= ~0x40;\n    if (outl.left) f &= ~0x80;\n  }\n\n  o.write_shift(1, f);\n\n  for (var i = 1; i < 3; ++i) {\n    o.write_shift(1, 0);\n  }\n\n  write_BrtColor({\n    auto: 1\n  }, o);\n  o.write_shift(-4, -1);\n  o.write_shift(-4, -1);\n  write_XLSBCodeName(str, o);\n  return o.slice(0, o.l);\n}\n/* [MS-XLSB] 2.4.306 BrtCellBlank */\n\n\nfunction parse_BrtCellBlank(data) {\n  var cell = parse_XLSBCell(data);\n  return [cell];\n}\n\nfunction write_BrtCellBlank(cell, ncell, o) {\n  if (o == null) o = new_buf(8);\n  return write_XLSBCell(ncell, o);\n}\n\nfunction parse_BrtShortBlank(data) {\n  var cell = parse_XLSBShortCell(data);\n  return [cell];\n}\n\nfunction write_BrtShortBlank(cell, ncell, o) {\n  if (o == null) o = new_buf(4);\n  return write_XLSBShortCell(ncell, o);\n}\n/* [MS-XLSB] 2.4.307 BrtCellBool */\n\n\nfunction parse_BrtCellBool(data) {\n  var cell = parse_XLSBCell(data);\n  var fBool = data.read_shift(1);\n  return [cell, fBool, 'b'];\n}\n\nfunction write_BrtCellBool(cell, ncell, o) {\n  if (o == null) o = new_buf(9);\n  write_XLSBCell(ncell, o);\n  o.write_shift(1, cell.v ? 1 : 0);\n  return o;\n}\n\nfunction parse_BrtShortBool(data) {\n  var cell = parse_XLSBShortCell(data);\n  var fBool = data.read_shift(1);\n  return [cell, fBool, 'b'];\n}\n\nfunction write_BrtShortBool(cell, ncell, o) {\n  if (o == null) o = new_buf(5);\n  write_XLSBShortCell(ncell, o);\n  o.write_shift(1, cell.v ? 1 : 0);\n  return o;\n}\n/* [MS-XLSB] 2.4.308 BrtCellError */\n\n\nfunction parse_BrtCellError(data) {\n  var cell = parse_XLSBCell(data);\n  var bError = data.read_shift(1);\n  return [cell, bError, 'e'];\n}\n\nfunction write_BrtCellError(cell, ncell, o) {\n  if (o == null) o = new_buf(9);\n  write_XLSBCell(ncell, o);\n  o.write_shift(1, cell.v);\n  return o;\n}\n\nfunction parse_BrtShortError(data) {\n  var cell = parse_XLSBShortCell(data);\n  var bError = data.read_shift(1);\n  return [cell, bError, 'e'];\n}\n\nfunction write_BrtShortError(cell, ncell, o) {\n  if (o == null) o = new_buf(8);\n  write_XLSBShortCell(ncell, o);\n  o.write_shift(1, cell.v);\n  o.write_shift(2, 0);\n  o.write_shift(1, 0);\n  return o;\n}\n/* [MS-XLSB] 2.4.311 BrtCellIsst */\n\n\nfunction parse_BrtCellIsst(data) {\n  var cell = parse_XLSBCell(data);\n  var isst = data.read_shift(4);\n  return [cell, isst, 's'];\n}\n\nfunction write_BrtCellIsst(cell, ncell, o) {\n  if (o == null) o = new_buf(12);\n  write_XLSBCell(ncell, o);\n  o.write_shift(4, ncell.v);\n  return o;\n}\n\nfunction parse_BrtShortIsst(data) {\n  var cell = parse_XLSBShortCell(data);\n  var isst = data.read_shift(4);\n  return [cell, isst, 's'];\n}\n\nfunction write_BrtShortIsst(cell, ncell, o) {\n  if (o == null) o = new_buf(8);\n  write_XLSBShortCell(ncell, o);\n  o.write_shift(4, ncell.v);\n  return o;\n}\n/* [MS-XLSB] 2.4.313 BrtCellReal */\n\n\nfunction parse_BrtCellReal(data) {\n  var cell = parse_XLSBCell(data);\n  var value = parse_Xnum(data);\n  return [cell, value, 'n'];\n}\n\nfunction write_BrtCellReal(cell, ncell, o) {\n  if (o == null) o = new_buf(16);\n  write_XLSBCell(ncell, o);\n  write_Xnum(cell.v, o);\n  return o;\n}\n\nfunction parse_BrtShortReal(data) {\n  var cell = parse_XLSBShortCell(data);\n  var value = parse_Xnum(data);\n  return [cell, value, 'n'];\n}\n\nfunction write_BrtShortReal(cell, ncell, o) {\n  if (o == null) o = new_buf(12);\n  write_XLSBShortCell(ncell, o);\n  write_Xnum(cell.v, o);\n  return o;\n}\n/* [MS-XLSB] 2.4.314 BrtCellRk */\n\n\nfunction parse_BrtCellRk(data) {\n  var cell = parse_XLSBCell(data);\n  var value = parse_RkNumber(data);\n  return [cell, value, 'n'];\n}\n\nfunction write_BrtCellRk(cell, ncell, o) {\n  if (o == null) o = new_buf(12);\n  write_XLSBCell(ncell, o);\n  write_RkNumber(cell.v, o);\n  return o;\n}\n\nfunction parse_BrtShortRk(data) {\n  var cell = parse_XLSBShortCell(data);\n  var value = parse_RkNumber(data);\n  return [cell, value, 'n'];\n}\n\nfunction write_BrtShortRk(cell, ncell, o) {\n  if (o == null) o = new_buf(8);\n  write_XLSBShortCell(ncell, o);\n  write_RkNumber(cell.v, o);\n  return o;\n}\n/* [MS-XLSB] 2.4.323 BrtCellRString */\n\n\nfunction parse_BrtCellRString(data) {\n  var cell = parse_XLSBCell(data);\n  var value = parse_RichStr(data);\n  return [cell, value, 'is'];\n}\n/* [MS-XLSB] 2.4.317 BrtCellSt */\n\n\nfunction parse_BrtCellSt(data) {\n  var cell = parse_XLSBCell(data);\n  var value = parse_XLWideString(data);\n  return [cell, value, 'str'];\n}\n\nfunction write_BrtCellSt(cell, ncell, o) {\n  if (o == null) o = new_buf(12 + 4 * cell.v.length);\n  write_XLSBCell(ncell, o);\n  write_XLWideString(cell.v, o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n\nfunction parse_BrtShortSt(data) {\n  var cell = parse_XLSBShortCell(data);\n  var value = parse_XLWideString(data);\n  return [cell, value, 'str'];\n}\n\nfunction write_BrtShortSt(cell, ncell, o) {\n  if (o == null) o = new_buf(8 + 4 * cell.v.length);\n  write_XLSBShortCell(ncell, o);\n  write_XLWideString(cell.v, o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.653 BrtFmlaBool */\n\n\nfunction parse_BrtFmlaBool(data, length, opts) {\n  var end = data.l + length;\n  var cell = parse_XLSBCell(data);\n  cell.r = opts['!row'];\n  var value = data.read_shift(1);\n  var o = [cell, value, 'b'];\n\n  if (opts.cellFormula) {\n    data.l += 2;\n    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n    o[3] = stringify_formula(formula, null\n    /*range*/\n    , cell, opts.supbooks, opts);\n    /* TODO */\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.654 BrtFmlaError */\n\n\nfunction parse_BrtFmlaError(data, length, opts) {\n  var end = data.l + length;\n  var cell = parse_XLSBCell(data);\n  cell.r = opts['!row'];\n  var value = data.read_shift(1);\n  var o = [cell, value, 'e'];\n\n  if (opts.cellFormula) {\n    data.l += 2;\n    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n    o[3] = stringify_formula(formula, null\n    /*range*/\n    , cell, opts.supbooks, opts);\n    /* TODO */\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.655 BrtFmlaNum */\n\n\nfunction parse_BrtFmlaNum(data, length, opts) {\n  var end = data.l + length;\n  var cell = parse_XLSBCell(data);\n  cell.r = opts['!row'];\n  var value = parse_Xnum(data);\n  var o = [cell, value, 'n'];\n\n  if (opts.cellFormula) {\n    data.l += 2;\n    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n    o[3] = stringify_formula(formula, null\n    /*range*/\n    , cell, opts.supbooks, opts);\n    /* TODO */\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.656 BrtFmlaString */\n\n\nfunction parse_BrtFmlaString(data, length, opts) {\n  var end = data.l + length;\n  var cell = parse_XLSBCell(data);\n  cell.r = opts['!row'];\n  var value = parse_XLWideString(data);\n  var o = [cell, value, 'str'];\n\n  if (opts.cellFormula) {\n    data.l += 2;\n    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n    o[3] = stringify_formula(formula, null\n    /*range*/\n    , cell, opts.supbooks, opts);\n    /* TODO */\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.682 BrtMergeCell */\n\n\nvar parse_BrtMergeCell = parse_UncheckedRfX;\nvar write_BrtMergeCell = write_UncheckedRfX;\n/* [MS-XLSB] 2.4.107 BrtBeginMergeCells */\n\nfunction write_BrtBeginMergeCells(cnt, o) {\n  if (o == null) o = new_buf(4);\n  o.write_shift(4, cnt);\n  return o;\n}\n/* [MS-XLSB] 2.4.662 BrtHLink */\n\n\nfunction parse_BrtHLink(data, length\n/*::, opts*/\n) {\n  var end = data.l + length;\n  var rfx = parse_UncheckedRfX(data, 16);\n  var relId = parse_XLNullableWideString(data);\n  var loc = parse_XLWideString(data);\n  var tooltip = parse_XLWideString(data);\n  var display = parse_XLWideString(data);\n  data.l = end;\n  var o = {\n    rfx: rfx,\n    relId: relId,\n    loc: loc,\n    display: display\n  }\n  /*:any*/\n  ;\n  if (tooltip) o.Tooltip = tooltip;\n  return o;\n}\n\nfunction write_BrtHLink(l, rId) {\n  var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || \"\").length));\n  write_UncheckedRfX({\n    s: decode_cell(l[0]),\n    e: decode_cell(l[0])\n  }, o);\n  write_RelID(\"rId\" + rId, o);\n  var locidx = l[1].Target.indexOf(\"#\");\n  var loc = locidx == -1 ? \"\" : l[1].Target.slice(locidx + 1);\n  write_XLWideString(loc || \"\", o);\n  write_XLWideString(l[1].Tooltip || \"\", o);\n  write_XLWideString(\"\", o);\n  return o.slice(0, o.l);\n}\n/* [MS-XLSB] 2.4.692 BrtPane */\n\n\nfunction\n  /*data, length, opts*/\nparse_BrtPane() {}\n/* [MS-XLSB] 2.4.6 BrtArrFmla */\n\n\nfunction parse_BrtArrFmla(data, length, opts) {\n  var end = data.l + length;\n  var rfx = parse_RfX(data, 16);\n  var fAlwaysCalc = data.read_shift(1);\n  var o = [rfx];\n  o[2] = fAlwaysCalc;\n\n  if (opts.cellFormula) {\n    var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);\n    o[1] = formula;\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.750 BrtShrFmla */\n\n\nfunction parse_BrtShrFmla(data, length, opts) {\n  var end = data.l + length;\n  var rfx = parse_UncheckedRfX(data, 16);\n  var o = [rfx];\n\n  if (opts.cellFormula) {\n    var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);\n    o[1] = formula;\n    data.l = end;\n  } else data.l = end;\n\n  return o;\n}\n/* [MS-XLSB] 2.4.323 BrtColInfo */\n\n/* TODO: once XLS ColInfo is set, combine the functions */\n\n\nfunction write_BrtColInfo(C\n/*:number*/\n, col, o) {\n  if (o == null) o = new_buf(18);\n  var p = col_obj_w(C, col);\n  o.write_shift(-4, C);\n  o.write_shift(-4, C);\n  o.write_shift(4, (p.width || 10) * 256);\n  o.write_shift(4, 0\n  /*ixfe*/\n  ); // style\n\n  var flags = 0;\n  if (col.hidden) flags |= 0x01;\n  if (typeof p.width == 'number') flags |= 0x02;\n  if (col.level) flags |= col.level << 8;\n  o.write_shift(2, flags); // bit flag\n\n  return o;\n}\n/* [MS-XLSB] 2.4.678 BrtMargins */\n\n\nvar BrtMarginKeys = [\"left\", \"right\", \"top\", \"bottom\", \"header\", \"footer\"];\n\nfunction parse_BrtMargins(data\n/*::, length, opts*/\n)\n/*:Margins*/\n{\n  var margins = {}\n  /*:any*/\n  ;\n  BrtMarginKeys.forEach(function (k) {\n    margins[k] = parse_Xnum(data, 8);\n  });\n  return margins;\n}\n\nfunction write_BrtMargins(margins\n/*:Margins*/\n, o) {\n  if (o == null) o = new_buf(6 * 8);\n  default_margins(margins);\n  BrtMarginKeys.forEach(function (k) {\n    write_Xnum(margins\n    /*:any*/\n    [k], o);\n  });\n  return o;\n}\n/* [MS-XLSB] 2.4.299 BrtBeginWsView */\n\n\nfunction parse_BrtBeginWsView(data\n/*::, length, opts*/\n) {\n  var f = data.read_shift(2);\n  data.l += 28;\n  return {\n    RTL: f & 0x20\n  };\n}\n\nfunction write_BrtBeginWsView(ws, Workbook, o) {\n  if (o == null) o = new_buf(30);\n  var f = 0x39c;\n  if ((((Workbook || {}).Views || [])[0] || {}).RTL) f |= 0x20;\n  o.write_shift(2, f); // bit flag\n\n  o.write_shift(4, 0);\n  o.write_shift(4, 0); // view first row\n\n  o.write_shift(4, 0); // view first col\n\n  o.write_shift(1, 0); // gridline color ICV\n\n  o.write_shift(1, 0);\n  o.write_shift(2, 0);\n  o.write_shift(2, 100); // zoom scale\n\n  o.write_shift(2, 0);\n  o.write_shift(2, 0);\n  o.write_shift(2, 0);\n  o.write_shift(4, 0); // workbook view id\n\n  return o;\n}\n/* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */\n\n\nfunction write_BrtCellIgnoreEC(ref) {\n  var o = new_buf(24);\n  o.write_shift(4, 4);\n  o.write_shift(4, 1);\n  write_UncheckedRfX(ref, o);\n  return o;\n}\n/* [MS-XLSB] 2.4.748 BrtSheetProtection */\n\n\nfunction write_BrtSheetProtection(sp, o) {\n  if (o == null) o = new_buf(16 * 4 + 2);\n  o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);\n  o.write_shift(4, 1); // this record should not be written if no protection\n\n  [[\"objects\", false], // fObjects\n  [\"scenarios\", false], // fScenarios\n  [\"formatCells\", true], // fFormatCells\n  [\"formatColumns\", true], // fFormatColumns\n  [\"formatRows\", true], // fFormatRows\n  [\"insertColumns\", true], // fInsertColumns\n  [\"insertRows\", true], // fInsertRows\n  [\"insertHyperlinks\", true], // fInsertHyperlinks\n  [\"deleteColumns\", true], // fDeleteColumns\n  [\"deleteRows\", true], // fDeleteRows\n  [\"selectLockedCells\", false], // fSelLockedCells\n  [\"sort\", true], // fSort\n  [\"autoFilter\", true], // fAutoFilter\n  [\"pivotTables\", true], // fPivotTables\n  [\"selectUnlockedCells\", false] // fSelUnlockedCells\n  ].forEach(function (n) {\n    /*:: if(o == null) throw \"unreachable\"; */\n    if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);\n  });\n  return o;\n}\n\nfunction\n  /*data, length, opts*/\nparse_BrtDVal() {}\n\nfunction\n  /*data, length, opts*/\nparse_BrtDVal14() {}\n/* [MS-XLSB] 2.1.7.61 Worksheet */\n\n\nfunction parse_ws_bin(data, _opts, idx, rels, wb\n/*:WBWBProps*/\n, themes, styles)\n/*:Worksheet*/\n{\n  if (!data) return data;\n  var opts = _opts || {};\n  if (!rels) rels = {\n    '!id': {}\n  };\n  if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n  var s\n  /*:Worksheet*/\n  = opts.dense ? [] : {};\n  var ref;\n  var refguess = {\n    s: {\n      r: 2000000,\n      c: 2000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var state\n  /*:Array<string>*/\n  = [];\n  var pass = false,\n      end = false;\n  var row, p, cf, R, C, addr, sstr, rr, cell\n  /*:Cell*/\n  ;\n  var merges\n  /*:Array<Range>*/\n  = [];\n  opts.biff = 12;\n  opts['!row'] = 0;\n  var ai = 0,\n      af = false;\n  var arrayf\n  /*:Array<[Range, string]>*/\n  = [];\n  var sharedf = {};\n  var supbooks = opts.supbooks ||\n  /*::(*/\n  wb\n  /*:: :any)*/\n  .supbooks || [[]]\n  /*:any*/\n  ;\n  supbooks.sharedf = sharedf;\n  supbooks.arrayf = arrayf;\n  supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function (x) {\n    return x.name;\n  });\n\n  if (!opts.supbooks) {\n    opts.supbooks = supbooks;\n    if (wb.Names) for (var i = 0; i < wb.Names.length; ++i) {\n      supbooks[0][i + 1] = wb.Names[i];\n    }\n  }\n\n  var colinfo\n  /*:Array<ColInfo>*/\n  = [],\n      rowinfo\n  /*:Array<RowInfo>*/\n  = [];\n  var seencol = false;\n  XLSBRecordEnum[0x0010] = {\n    n: \"BrtShortReal\",\n    f: parse_BrtShortReal\n  };\n  var cm, vm;\n  recordhopper(data, function ws_parse(val, RR, RT) {\n    if (end) return;\n\n    switch (RT) {\n      case 0x0094:\n        /* 'BrtWsDim' */\n        ref = val;\n        break;\n\n      case 0x0000:\n        /* 'BrtRowHdr' */\n        row = val;\n        if (opts.sheetRows && opts.sheetRows <= row.r) end = true;\n        rr = encode_row(R = row.r);\n        opts['!row'] = row.r;\n\n        if (val.hidden || val.hpt || val.level != null) {\n          if (val.hpt) val.hpx = pt2px(val.hpt);\n          rowinfo[val.r] = val;\n        }\n\n        break;\n\n      case 0x0002:\n      /* 'BrtCellRk' */\n\n      case 0x0003:\n      /* 'BrtCellError' */\n\n      case 0x0004:\n      /* 'BrtCellBool' */\n\n      case 0x0005:\n      /* 'BrtCellReal' */\n\n      case 0x0006:\n      /* 'BrtCellSt' */\n\n      case 0x0007:\n      /* 'BrtCellIsst' */\n\n      case 0x0008:\n      /* 'BrtFmlaString' */\n\n      case 0x0009:\n      /* 'BrtFmlaNum' */\n\n      case 0x000A:\n      /* 'BrtFmlaBool' */\n\n      case 0x000B:\n      /* 'BrtFmlaError' */\n\n      case 0x000D:\n      /* 'BrtShortRk' */\n\n      case 0x000E:\n      /* 'BrtShortError' */\n\n      case 0x000F:\n      /* 'BrtShortBool' */\n\n      case 0x0010:\n      /* 'BrtShortReal' */\n\n      case 0x0011:\n      /* 'BrtShortSt' */\n\n      case 0x0012:\n      /* 'BrtShortIsst' */\n\n      case 0x003E:\n        /* 'BrtCellRString' */\n        p = {\n          t: val[2]\n        }\n        /*:any*/\n        ;\n\n        switch (val[2]) {\n          case 'n':\n            p.v = val[1];\n            break;\n\n          case 's':\n            sstr = strs[val[1]];\n            p.v = sstr.t;\n            p.r = sstr.r;\n            break;\n\n          case 'b':\n            p.v = val[1] ? true : false;\n            break;\n\n          case 'e':\n            p.v = val[1];\n            if (opts.cellText !== false) p.w = BErr[p.v];\n            break;\n\n          case 'str':\n            p.t = 's';\n            p.v = val[1];\n            break;\n\n          case 'is':\n            p.t = 's';\n            p.v = val[1].t;\n            break;\n        }\n\n        if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);\n        C = val[0].c == -1 ? C + 1 : val[0].c;\n\n        if (opts.dense) {\n          if (!s[R]) s[R] = [];\n          s[R][C] = p;\n        } else s[encode_col(C) + rr] = p;\n\n        if (opts.cellFormula) {\n          af = false;\n\n          for (ai = 0; ai < arrayf.length; ++ai) {\n            var aii = arrayf[ai];\n            if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) if (C >= aii[0].s.c && C <= aii[0].e.c) {\n              p.F = encode_range(aii[0]);\n              af = true;\n            }\n          }\n\n          if (!af && val.length > 3) p.f = val[3];\n        }\n\n        if (refguess.s.r > row.r) refguess.s.r = row.r;\n        if (refguess.s.c > C) refguess.s.c = C;\n        if (refguess.e.r < row.r) refguess.e.r = row.r;\n        if (refguess.e.c < C) refguess.e.c = C;\n\n        if (opts.cellDates && cf && p.t == 'n' && fmt_is_date(table_fmt[cf.numFmtId])) {\n          var _d = SSF_parse_date_code(p.v);\n\n          if (_d) {\n            p.t = 'd';\n            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n          }\n        }\n\n        if (cm) {\n          if (cm.type == 'XLDAPR') p.D = true;\n          cm = void 0;\n        }\n\n        if (vm) vm = void 0;\n        break;\n\n      case 0x0001:\n      /* 'BrtCellBlank' */\n\n      case 0x000C:\n        /* 'BrtShortBlank' */\n        if (!opts.sheetStubs || pass) break;\n        p = {\n          t: 'z',\n          v: void 0\n        }\n        /*:any*/\n        ;\n        C = val[0].c == -1 ? C + 1 : val[0].c;\n\n        if (opts.dense) {\n          if (!s[R]) s[R] = [];\n          s[R][C] = p;\n        } else s[encode_col(C) + rr] = p;\n\n        if (refguess.s.r > row.r) refguess.s.r = row.r;\n        if (refguess.s.c > C) refguess.s.c = C;\n        if (refguess.e.r < row.r) refguess.e.r = row.r;\n        if (refguess.e.c < C) refguess.e.c = C;\n\n        if (cm) {\n          if (cm.type == 'XLDAPR') p.D = true;\n          cm = void 0;\n        }\n\n        if (vm) vm = void 0;\n        break;\n\n      case 0x00B0:\n        /* 'BrtMergeCell' */\n        merges.push(val);\n        break;\n\n      case 0x0031:\n        {\n          /* 'BrtCellMeta' */\n          cm = ((opts.xlmeta || {}).Cell || [])[val - 1];\n        }\n        break;\n\n      case 0x01EE:\n        /* 'BrtHLink' */\n        var rel = rels['!id'][val.relId];\n\n        if (rel) {\n          val.Target = rel.Target;\n          if (val.loc) val.Target += \"#\" + val.loc;\n          val.Rel = rel;\n        } else if (val.relId == '') {\n          val.Target = \"#\" + val.loc;\n        }\n\n        for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) {\n          for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {\n            if (opts.dense) {\n              if (!s[R]) s[R] = [];\n              if (!s[R][C]) s[R][C] = {\n                t: 'z',\n                v: undefined\n              };\n              s[R][C].l = val;\n            } else {\n              addr = encode_cell({\n                c: C,\n                r: R\n              });\n              if (!s[addr]) s[addr] = {\n                t: 'z',\n                v: undefined\n              };\n              s[addr].l = val;\n            }\n          }\n        }\n\n        break;\n\n      case 0x01AA:\n        /* 'BrtArrFmla' */\n        if (!opts.cellFormula) break;\n        arrayf.push(val);\n        cell = opts.dense ? s[R][C] : s[encode_col(C) + rr]\n        /*:any*/\n        ;\n        cell.f = stringify_formula(val[1], refguess, {\n          r: row.r,\n          c: C\n        }, supbooks, opts);\n        cell.F = encode_range(val[0]);\n        break;\n\n      case 0x01AB:\n        /* 'BrtShrFmla' */\n        if (!opts.cellFormula) break;\n        sharedf[encode_cell(val[0].s)] = val[1];\n        cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];\n        cell.f = stringify_formula(val[1], refguess, {\n          r: row.r,\n          c: C\n        }, supbooks, opts);\n        break;\n\n      /* identical to 'ColInfo' in XLS */\n\n      case 0x003C:\n        /* 'BrtColInfo' */\n        if (!opts.cellStyles) break;\n\n        while (val.e >= val.s) {\n          colinfo[val.e--] = {\n            width: val.w / 256,\n            hidden: !!(val.flags & 0x01),\n            level: val.level\n          };\n\n          if (!seencol) {\n            seencol = true;\n            find_mdw_colw(val.w / 256);\n          }\n\n          process_col(colinfo[val.e + 1]);\n        }\n\n        break;\n\n      case 0x00A1:\n        /* 'BrtBeginAFilter' */\n        s['!autofilter'] = {\n          ref: encode_range(val)\n        };\n        break;\n\n      case 0x01DC:\n        /* 'BrtMargins' */\n        s['!margins'] = val;\n        break;\n\n      case 0x0093:\n        /* 'BrtWsProp' */\n        if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n        if (val.name) wb.Sheets[idx].CodeName = val.name;\n        if (val.above || val.left) s['!outline'] = {\n          above: val.above,\n          left: val.left\n        };\n        break;\n\n      case 0x0089:\n        /* 'BrtBeginWsView' */\n        if (!wb.Views) wb.Views = [{}];\n        if (!wb.Views[0]) wb.Views[0] = {};\n        if (val.RTL) wb.Views[0].RTL = true;\n        break;\n\n      case 0x01E5:\n        /* 'BrtWsFmtInfo' */\n        break;\n\n      case 0x0040:\n      /* 'BrtDVal' */\n\n      case 0x041D:\n        /* 'BrtDVal14' */\n        break;\n\n      case 0x0097:\n        /* 'BrtPane' */\n        break;\n\n      case 0x0098:\n      /* 'BrtSel' */\n\n      case 0x00AF:\n      /* 'BrtAFilterDateGroupItem' */\n\n      case 0x0284:\n      /* 'BrtActiveX' */\n\n      case 0x0271:\n      /* 'BrtBigName' */\n\n      case 0x0232:\n      /* 'BrtBkHim' */\n\n      case 0x018C:\n      /* 'BrtBrk' */\n\n      case 0x0458:\n      /* 'BrtCFIcon' */\n\n      case 0x047A:\n      /* 'BrtCFRuleExt' */\n\n      case 0x01D7:\n      /* 'BrtCFVO' */\n\n      case 0x041A:\n      /* 'BrtCFVO14' */\n\n      case 0x0289:\n      /* 'BrtCellIgnoreEC' */\n\n      case 0x0451:\n      /* 'BrtCellIgnoreEC14' */\n\n      case 0x024D:\n      /* 'BrtCellSmartTagProperty' */\n\n      case 0x025F:\n      /* 'BrtCellWatch' */\n\n      case 0x0234:\n      /* 'BrtColor' */\n\n      case 0x041F:\n      /* 'BrtColor14' */\n\n      case 0x00A8:\n      /* 'BrtColorFilter' */\n\n      case 0x00AE:\n      /* 'BrtCustomFilter' */\n\n      case 0x049C:\n      /* 'BrtCustomFilter14' */\n\n      case 0x01F3:\n      /* 'BrtDRef' */\n\n      case 0x01FB:\n      /* 'BrtDXF' */\n\n      case 0x0226:\n      /* 'BrtDrawing' */\n\n      case 0x00AB:\n      /* 'BrtDynamicFilter' */\n\n      case 0x00A7:\n      /* 'BrtFilter' */\n\n      case 0x0499:\n      /* 'BrtFilter14' */\n\n      case 0x00A9:\n      /* 'BrtIconFilter' */\n\n      case 0x049D:\n      /* 'BrtIconFilter14' */\n\n      case 0x0227:\n      /* 'BrtLegacyDrawing' */\n\n      case 0x0228:\n      /* 'BrtLegacyDrawingHF' */\n\n      case 0x0295:\n      /* 'BrtListPart' */\n\n      case 0x027F:\n      /* 'BrtOleObject' */\n\n      case 0x01DE:\n      /* 'BrtPageSetup' */\n\n      case 0x0219:\n      /* 'BrtPhoneticInfo' */\n\n      case 0x01DD:\n      /* 'BrtPrintOptions' */\n\n      case 0x0218:\n      /* 'BrtRangeProtection' */\n\n      case 0x044F:\n      /* 'BrtRangeProtection14' */\n\n      case 0x02A8:\n      /* 'BrtRangeProtectionIso' */\n\n      case 0x0450:\n      /* 'BrtRangeProtectionIso14' */\n\n      case 0x0400:\n      /* 'BrtRwDescent' */\n\n      case 0x0297:\n      /* 'BrtSheetCalcProp' */\n\n      case 0x0217:\n      /* 'BrtSheetProtection' */\n\n      case 0x02A6:\n      /* 'BrtSheetProtectionIso' */\n\n      case 0x01F8:\n      /* 'BrtSlc' */\n\n      case 0x0413:\n      /* 'BrtSparkline' */\n\n      case 0x01AC:\n      /* 'BrtTable' */\n\n      case 0x00AA:\n      /* 'BrtTop10Filter' */\n\n      case 0x0C00:\n      /* 'BrtUid' */\n\n      case 0x0032:\n      /* 'BrtValueMeta' */\n\n      case 0x0816:\n      /* 'BrtWebExtension' */\n\n      case 0x0415:\n        /* 'BrtWsFmtInfoEx14' */\n        break;\n\n      case 0x0023:\n        /* 'BrtFRTBegin' */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* 'BrtFRTEnd' */\n        pass = false;\n        break;\n\n      case 0x0025:\n        /* 'BrtACBegin' */\n        state.push(RT);\n        pass = true;\n        break;\n\n      case 0x0026:\n        /* 'BrtACEnd' */\n        state.pop();\n        pass = false;\n        break;\n\n      default:\n        if (RR.T) {\n          /* empty */\n        } else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  }, opts);\n  delete opts.supbooks;\n  delete opts['!row'];\n  if (!s[\"!ref\"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s[\"!ref\"] = encode_range(ref || refguess);\n\n  if (opts.sheetRows && s[\"!ref\"]) {\n    var tmpref = safe_decode_range(s[\"!ref\"]);\n\n    if (opts.sheetRows <= +tmpref.e.r) {\n      tmpref.e.r = opts.sheetRows - 1;\n      if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n      if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n      if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n      if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n      s[\"!fullref\"] = s[\"!ref\"];\n      s[\"!ref\"] = encode_range(tmpref);\n    }\n  }\n\n  if (merges.length > 0) s[\"!merges\"] = merges;\n  if (colinfo.length > 0) s[\"!cols\"] = colinfo;\n  if (rowinfo.length > 0) s[\"!rows\"] = rowinfo;\n  return s;\n}\n/* TODO: something useful -- this is a stub */\n\n\nfunction write_ws_bin_cell(ba\n/*:BufArray*/\n, cell\n/*:Cell*/\n, R\n/*:number*/\n, C\n/*:number*/\n, opts, ws\n/*:Worksheet*/\n, last_seen\n/*:boolean*/\n)\n/*:boolean*/\n{\n  var o\n  /*:any*/\n  = {\n    r: R,\n    c: C\n  }\n  /*:any*/\n  ;\n  if (cell.c) ws['!comments'].push([encode_cell(o), cell.c]);\n  if (cell.v === undefined) return false;\n  var vv = \"\";\n\n  switch (cell.t) {\n    case 'b':\n      vv = cell.v ? \"1\" : \"0\";\n      break;\n\n    case 'd':\n      // no BrtCellDate :(\n      cell = dup(cell);\n      cell.z = cell.z || table_fmt[14];\n      cell.v = datenum(parseDate(cell.v));\n      cell.t = 'n';\n      break;\n\n    /* falls through */\n\n    case 'n':\n    case 'e':\n      vv = '' + cell.v;\n      break;\n\n    default:\n      vv = cell.v;\n      break;\n  }\n  /* TODO: cell style */\n\n\n  o.s = get_cell_style(opts.cellXfs, cell, opts);\n  if (cell.l) ws['!links'].push([encode_cell(o), cell.l]);\n\n  switch (cell.t) {\n    case 's':\n    case 'str':\n      if (opts.bookSST) {\n        vv = get_sst_id(opts.Strings, cell.v\n        /*:any*/\n        , opts.revStrings);\n        o.t = \"s\";\n        o.v = vv;\n        if (last_seen) write_record(ba, 0x0012\n        /* BrtShortIsst */\n        , write_BrtShortIsst(cell, o));else write_record(ba, 0x0007\n        /* BrtCellIsst */\n        , write_BrtCellIsst(cell, o));\n      } else {\n        o.t = \"str\";\n        if (last_seen) write_record(ba, 0x0011\n        /* BrtShortSt */\n        , write_BrtShortSt(cell, o));else write_record(ba, 0x0006\n        /* BrtCellSt */\n        , write_BrtCellSt(cell, o));\n      }\n\n      return true;\n\n    case 'n':\n      /* TODO: determine threshold for Real vs RK */\n      if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {\n        if (last_seen) write_record(ba, 0x000D\n        /* BrtShortRk */\n        , write_BrtShortRk(cell, o));else write_record(ba, 0x0002\n        /* BrtCellRk */\n        , write_BrtCellRk(cell, o));\n      } else {\n        if (last_seen) write_record(ba, 0x0010\n        /* BrtShortReal */\n        , write_BrtShortReal(cell, o));else write_record(ba, 0x0005\n        /* BrtCellReal */\n        , write_BrtCellReal(cell, o));\n      }\n\n      return true;\n\n    case 'b':\n      o.t = \"b\";\n      if (last_seen) write_record(ba, 0x000F\n      /* BrtShortBool */\n      , write_BrtShortBool(cell, o));else write_record(ba, 0x0004\n      /* BrtCellBool */\n      , write_BrtCellBool(cell, o));\n      return true;\n\n    case 'e':\n      o.t = \"e\";\n      if (last_seen) write_record(ba, 0x000E\n      /* BrtShortError */\n      , write_BrtShortError(cell, o));else write_record(ba, 0x0003\n      /* BrtCellError */\n      , write_BrtCellError(cell, o));\n      return true;\n  }\n\n  if (last_seen) write_record(ba, 0x000C\n  /* BrtShortBlank */\n  , write_BrtShortBlank(cell, o));else write_record(ba, 0x0001\n  /* BrtCellBlank */\n  , write_BrtCellBlank(cell, o));\n  return true;\n}\n\nfunction write_CELLTABLE(ba, ws\n/*:Worksheet*/\n, idx\n/*:number*/\n, opts\n/*::, wb:Workbook*/\n) {\n  var range = safe_decode_range(ws['!ref'] || \"A1\"),\n      ref,\n      rr = \"\",\n      cols\n  /*:Array<string>*/\n  = [];\n  write_record(ba, 0x0091\n  /* BrtBeginSheetData */\n  );\n  var dense = Array.isArray(ws);\n  var cap = range.e.r;\n  if (ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);\n\n  for (var R = range.s.r; R <= cap; ++R) {\n    rr = encode_row(R);\n    /* [ACCELLTABLE] */\n\n    /* BrtRowHdr */\n\n    write_row_header(ba, ws, range, R);\n    var last_seen = false;\n    if (R <= range.e.r) for (var C = range.s.c; C <= range.e.c; ++C) {\n      /* *16384CELL */\n      if (R === range.s.r) cols[C] = encode_col(C);\n      ref = cols[C] + rr;\n      var cell = dense ? (ws[R] || [])[C] : ws[ref];\n\n      if (!cell) {\n        last_seen = false;\n        continue;\n      }\n      /* write cell */\n\n\n      last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);\n    }\n  }\n\n  write_record(ba, 0x0092\n  /* BrtEndSheetData */\n  );\n}\n\nfunction write_MERGECELLS(ba, ws\n/*:Worksheet*/\n) {\n  if (!ws || !ws['!merges']) return;\n  write_record(ba, 0x00B1\n  /* BrtBeginMergeCells */\n  , write_BrtBeginMergeCells(ws['!merges'].length));\n  ws['!merges'].forEach(function (m) {\n    write_record(ba, 0x00B0\n    /* BrtMergeCell */\n    , write_BrtMergeCell(m));\n  });\n  write_record(ba, 0x00B2\n  /* BrtEndMergeCells */\n  );\n}\n\nfunction write_COLINFOS(ba, ws\n/*:Worksheet*/\n\n/*::, idx:number, opts, wb:Workbook*/\n) {\n  if (!ws || !ws['!cols']) return;\n  write_record(ba, 0x0186\n  /* BrtBeginColInfos */\n  );\n  ws['!cols'].forEach(function (m, i) {\n    if (m) write_record(ba, 0x003C\n    /* 'BrtColInfo' */\n    , write_BrtColInfo(i, m));\n  });\n  write_record(ba, 0x0187\n  /* BrtEndColInfos */\n  );\n}\n\nfunction write_IGNOREECS(ba, ws\n/*:Worksheet*/\n) {\n  if (!ws || !ws['!ref']) return;\n  write_record(ba, 0x0288\n  /* BrtBeginCellIgnoreECs */\n  );\n  write_record(ba, 0x0289\n  /* BrtCellIgnoreEC */\n  , write_BrtCellIgnoreEC(safe_decode_range(ws['!ref'])));\n  write_record(ba, 0x028A\n  /* BrtEndCellIgnoreECs */\n  );\n}\n\nfunction write_HLINKS(ba, ws\n/*:Worksheet*/\n, rels) {\n  /* *BrtHLink */\n  ws['!links'].forEach(function (l) {\n    if (!l[1].Target) return;\n    var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, \"\"), RELS.HLINK);\n    write_record(ba, 0x01EE\n    /* BrtHLink */\n    , write_BrtHLink(l, rId));\n  });\n  delete ws['!links'];\n}\n\nfunction write_LEGACYDRAWING(ba, ws\n/*:Worksheet*/\n, idx\n/*:number*/\n, rels) {\n  /* [BrtLegacyDrawing] */\n  if (ws['!comments'].length > 0) {\n    var rId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx + 1) + \".vml\", RELS.VML);\n    write_record(ba, 0x0227\n    /* BrtLegacyDrawing */\n    , write_RelID(\"rId\" + rId));\n    ws['!legacy'] = rId;\n  }\n}\n\nfunction write_AUTOFILTER(ba, ws, wb, idx) {\n  if (!ws['!autofilter']) return;\n  var data = ws['!autofilter'];\n  var ref = typeof data.ref === \"string\" ? data.ref : encode_range(data.ref);\n  /* Update FilterDatabase defined name for the worksheet */\n\n  if (!wb.Workbook) wb.Workbook = {\n    Sheets: []\n  }\n  /*:any*/\n  ;\n  if (!wb.Workbook.Names) wb.Workbook.Names = [];\n  var names\n  /*: Array<any> */\n  = wb.Workbook.Names;\n  var range = decode_range(ref);\n\n  if (range.s.r == range.e.r) {\n    range.e.r = decode_range(ws[\"!ref\"]).e.r;\n    ref = encode_range(range);\n  }\n\n  for (var i = 0; i < names.length; ++i) {\n    var name = names[i];\n    if (name.Name != '_xlnm._FilterDatabase') continue;\n    if (name.Sheet != idx) continue;\n    name.Ref = formula_quote_sheet_name(wb.SheetNames[idx]) + \"!\" + fix_range(ref);\n    break;\n  }\n\n  if (i == names.length) names.push({\n    Name: '_xlnm._FilterDatabase',\n    Sheet: idx,\n    Ref: formula_quote_sheet_name(wb.SheetNames[idx]) + \"!\" + fix_range(ref)\n  });\n  write_record(ba, 0x00A1\n  /* BrtBeginAFilter */\n  , write_UncheckedRfX(safe_decode_range(ref)));\n  /* *FILTERCOLUMN */\n\n  /* [SORTSTATE] */\n\n  /* BrtEndAFilter */\n\n  write_record(ba, 0x00A2\n  /* BrtEndAFilter */\n  );\n}\n\nfunction write_WSVIEWS2(ba, ws, Workbook) {\n  write_record(ba, 0x0085\n  /* BrtBeginWsViews */\n  );\n  {\n    /* 1*WSVIEW2 */\n\n    /* [ACUID] */\n    write_record(ba, 0x0089\n    /* BrtBeginWsView */\n    , write_BrtBeginWsView(ws, Workbook));\n    /* [BrtPane] */\n\n    /* *4BrtSel */\n\n    /* *4SXSELECT */\n\n    /* *FRT */\n\n    write_record(ba, 0x008A\n    /* BrtEndWsView */\n    );\n  }\n  /* *FRT */\n\n  write_record(ba, 0x0086\n  /* BrtEndWsViews */\n  );\n}\n\nfunction\n  /*::ba, ws*/\nwrite_WSFMTINFO() {\n  /* [ACWSFMTINFO] */\n  // write_record(ba, 0x01E5 /* BrtWsFmtInfo */, write_BrtWsFmtInfo(ws));\n}\n\nfunction write_SHEETPROTECT(ba, ws) {\n  if (!ws['!protect']) return;\n  /* [BrtSheetProtectionIso] */\n\n  write_record(ba, 0x0217\n  /* BrtSheetProtection */\n  , write_BrtSheetProtection(ws['!protect']));\n}\n\nfunction write_ws_bin(idx\n/*:number*/\n, opts, wb\n/*:Workbook*/\n, rels) {\n  var ba = buf_array();\n  var s = wb.SheetNames[idx],\n      ws = wb.Sheets[s] || {};\n  var c\n  /*:string*/\n  = s;\n\n  try {\n    if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;\n  } catch (e) {}\n\n  var r = safe_decode_range(ws['!ref'] || \"A1\");\n\n  if (r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {\n    if (opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:XFD1048576\");\n    r.e.c = Math.min(r.e.c, 0x3FFF);\n    r.e.r = Math.min(r.e.c, 0xFFFFF);\n  }\n\n  ws['!links'] = [];\n  /* passed back to write_zip and removed there */\n\n  ws['!comments'] = [];\n  write_record(ba, 0x0081\n  /* BrtBeginSheet */\n  );\n  if (wb.vbaraw || ws['!outline']) write_record(ba, 0x0093\n  /* BrtWsProp */\n  , write_BrtWsProp(c, ws['!outline']));\n  write_record(ba, 0x0094\n  /* BrtWsDim */\n  , write_BrtWsDim(r));\n  write_WSVIEWS2(ba, ws, wb.Workbook);\n  write_WSFMTINFO(ba, ws);\n  write_COLINFOS(ba, ws, idx, opts, wb);\n  write_CELLTABLE(ba, ws, idx, opts, wb);\n  /* [BrtSheetCalcProp] */\n\n  write_SHEETPROTECT(ba, ws);\n  /* *([BrtRangeProtectionIso] BrtRangeProtection) */\n\n  /* [SCENMAN] */\n\n  write_AUTOFILTER(ba, ws, wb, idx);\n  /* [SORTSTATE] */\n\n  /* [DCON] */\n\n  /* [USERSHVIEWS] */\n\n  write_MERGECELLS(ba, ws);\n  /* [BrtPhoneticInfo] */\n\n  /* *CONDITIONALFORMATTING */\n\n  /* [DVALS] */\n\n  write_HLINKS(ba, ws, rels);\n  /* [BrtPrintOptions] */\n\n  if (ws['!margins']) write_record(ba, 0x01DC\n  /* BrtMargins */\n  , write_BrtMargins(ws['!margins']));\n  /* [BrtPageSetup] */\n\n  /* [HEADERFOOTER] */\n\n  /* [RWBRK] */\n\n  /* [COLBRK] */\n\n  /* *BrtBigName */\n\n  /* [CELLWATCHES] */\n\n  if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);\n  /* [SMARTTAGS] */\n\n  /* [BrtDrawing] */\n\n  write_LEGACYDRAWING(ba, ws, idx, rels);\n  /* [BrtLegacyDrawingHF] */\n\n  /* [BrtBkHim] */\n\n  /* [OLEOBJECTS] */\n\n  /* [ACTIVEXCONTROLS] */\n\n  /* [WEBPUBITEMS] */\n\n  /* [LISTPARTS] */\n\n  /* FRTWORKSHEET */\n\n  write_record(ba, 0x0082\n  /* BrtEndSheet */\n  );\n  return ba.end();\n}\n\nfunction parse_Cache(data\n/*:string*/\n)\n/*:[Array<number|string>, string, ?string]*/\n{\n  var col\n  /*:Array<number|string>*/\n  = [];\n  var num = data.match(/^<c:numCache>/);\n  var f;\n  /* 21.2.2.150 pt CT_NumVal */\n\n  (data.match(/<c:pt idx=\"(\\d*)\">(.*?)<\\/c:pt>/mg) || []).forEach(function (pt) {\n    var q = pt.match(/<c:pt idx=\"(\\d*?)\"><c:v>(.*)<\\/c:v><\\/c:pt>/);\n    if (!q) return;\n    col[+q[1]] = num ? +q[2] : q[2];\n  });\n  /* 21.2.2.71 formatCode CT_Xstring */\n\n  var nf = unescapexml((data.match(/<c:formatCode>([\\s\\S]*?)<\\/c:formatCode>/) || [\"\", \"General\"])[1]);\n  (data.match(/<c:f>(.*?)<\\/c:f>/mg) || []).forEach(function (F) {\n    f = F.replace(/<.*?>/g, \"\");\n  });\n  return [col, nf, f];\n}\n/* 21.2 DrawingML - Charts */\n\n\nfunction parse_chart(data\n/*:?string*/\n, name\n/*:string*/\n, opts, rels, wb, csheet) {\n  var cs\n  /*:Worksheet*/\n  = csheet || {\n    \"!type\": \"chart\"\n  }\n  /*:any*/\n  ;\n  if (!data) return csheet;\n  /* 21.2.2.27 chart CT_Chart */\n\n  var C = 0,\n      R = 0,\n      col = \"A\";\n  var refguess = {\n    s: {\n      r: 2000000,\n      c: 2000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  /* 21.2.2.120 numCache CT_NumData */\n\n  (data.match(/<c:numCache>[\\s\\S]*?<\\/c:numCache>/gm) || []).forEach(function (nc) {\n    var cache = parse_Cache(nc);\n    refguess.s.r = refguess.s.c = 0;\n    refguess.e.c = C;\n    col = encode_col(C);\n    cache[0].forEach(function (n, i) {\n      cs[col + encode_row(i)] = {\n        t: 'n',\n        v: n,\n        z: cache[1]\n      };\n      R = i;\n    });\n    if (refguess.e.r < R) refguess.e.r = R;\n    ++C;\n  });\n  if (C > 0) cs[\"!ref\"] = encode_range(refguess);\n  return cs;\n}\n/* 18.3 Worksheets also covers Chartsheets */\n\n\nfunction parse_cs_xml(data\n/*:?string*/\n, opts, idx\n/*:number*/\n, rels, wb\n/*::, themes, styles*/\n)\n/*:Worksheet*/\n{\n  if (!data) return data;\n  /* 18.3.1.12 chartsheet CT_ChartSheet */\n\n  if (!rels) rels = {\n    '!id': {}\n  };\n  var s = {\n    '!type': \"chart\",\n    '!drawel': null,\n    '!rel': \"\"\n  }\n  /*:any*/\n  ;\n  var m;\n  /* 18.3.1.83 sheetPr CT_ChartsheetPr */\n\n  var sheetPr = data.match(sheetprregex);\n  if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);\n  /* 18.3.1.36 drawing CT_Drawing */\n\n  if (m = data.match(/drawing r:id=\"(.*?)\"/)) s['!rel'] = m[1];\n  if (rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];\n  return s;\n} //function write_cs_xml(idx/*:number*/, opts, wb/*:Workbook*/, rels)/*:string*/ {\n//\tvar o = [XML_HEADER, writextag('chartsheet', null, {\n//\t\t'xmlns': XMLNS_main[0],\n//\t\t'xmlns:r': XMLNS.r\n//\t})];\n//\to[o.length] = writextag(\"drawing\", null, {\"r:id\": \"rId1\"});\n//\tadd_rels(rels, -1, \"../drawings/drawing\" + (idx+1) + \".xml\", RELS.DRAW);\n//\tif(o.length>2) { o[o.length] = ('</chartsheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n//\treturn o.join(\"\");\n//}\n\n/* [MS-XLSB] 2.4.331 BrtCsProp */\n\n\nfunction parse_BrtCsProp(data, length\n/*:number*/\n) {\n  data.l += 10;\n  var name = parse_XLWideString(data, length - 10);\n  return {\n    name: name\n  };\n}\n/* [MS-XLSB] 2.1.7.7 Chart Sheet */\n\n\nfunction parse_cs_bin(data, opts, idx\n/*:number*/\n, rels, wb\n/*::, themes, styles*/\n)\n/*:Worksheet*/\n{\n  if (!data) return data;\n  if (!rels) rels = {\n    '!id': {}\n  };\n  var s = {\n    '!type': \"chart\",\n    '!drawel': null,\n    '!rel': \"\"\n  };\n  var state\n  /*:Array<string>*/\n  = [];\n  var pass = false;\n  recordhopper(data, function cs_parse(val, R, RT) {\n    switch (RT) {\n      case 0x0226:\n        /* 'BrtDrawing' */\n        s['!rel'] = val;\n        break;\n\n      case 0x028B:\n        /* 'BrtCsProp' */\n        if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n        if (val.name) wb.Sheets[idx].CodeName = val.name;\n        break;\n\n      case 0x0232:\n      /* 'BrtBkHim' */\n\n      case 0x028C:\n      /* 'BrtCsPageSetup' */\n\n      case 0x029D:\n      /* 'BrtCsProtection' */\n\n      case 0x02A7:\n      /* 'BrtCsProtectionIso' */\n\n      case 0x0227:\n      /* 'BrtLegacyDrawing' */\n\n      case 0x0228:\n      /* 'BrtLegacyDrawingHF' */\n\n      case 0x01DC:\n      /* 'BrtMargins' */\n\n      case 0x0C00:\n        /* 'BrtUid' */\n        break;\n\n      case 0x0023:\n        /* 'BrtFRTBegin' */\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* 'BrtFRTEnd' */\n        pass = false;\n        break;\n\n      case 0x0025:\n        /* 'BrtACBegin' */\n        state.push(RT);\n        break;\n\n      case 0x0026:\n        /* 'BrtACEnd' */\n        state.pop();\n        break;\n\n      default:\n        if (R.T > 0) state.push(RT);else if (R.T < 0) state.pop();else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n    }\n  }, opts);\n  if (rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];\n  return s;\n} //function write_cs_bin(/*::idx:number, opts, wb:Workbook, rels*/) {\n//\tvar ba = buf_array();\n//\twrite_record(ba, 0x0081 /* BrtBeginSheet */);\n//\t/* [BrtCsProp] */\n//\t/* CSVIEWS */\n//\t/* [[BrtCsProtectionIso] BrtCsProtection] */\n//\t/* [USERCSVIEWS] */\n//\t/* [BrtMargins] */\n//\t/* [BrtCsPageSetup] */\n//\t/* [HEADERFOOTER] */\n//\t/* BrtDrawing */\n//\t/* [BrtLegacyDrawing] */\n//\t/* [BrtLegacyDrawingHF] */\n//\t/* [BrtBkHim] */\n//\t/* [WEBPUBITEMS] */\n//\t/* FRTCHARTSHEET */\n//\twrite_record(ba, 0x0082 /* BrtEndSheet */);\n//\treturn ba.end();\n//}\n\n/* 18.2.28 (CT_WorkbookProtection) Defaults */\n\n\nvar WBPropsDef = [['allowRefreshQuery', false, \"bool\"], ['autoCompressPictures', true, \"bool\"], ['backupFile', false, \"bool\"], ['checkCompatibility', false, \"bool\"], ['CodeName', ''], ['date1904', false, \"bool\"], ['defaultThemeVersion', 0, \"int\"], ['filterPrivacy', false, \"bool\"], ['hidePivotFieldList', false, \"bool\"], ['promptedSolutions', false, \"bool\"], ['publishItems', false, \"bool\"], ['refreshAllConnections', false, \"bool\"], ['saveExternalLinkValues', true, \"bool\"], ['showBorderUnselectedTables', true, \"bool\"], ['showInkAnnotation', true, \"bool\"], ['showObjects', 'all'], ['showPivotChartFilter', false, \"bool\"], ['updateLinks', 'userSet']];\n/* 18.2.30 (CT_BookView) Defaults */\n\nvar WBViewDef = [['activeTab', 0, \"int\"], ['autoFilterDateGrouping', true, \"bool\"], ['firstSheet', 0, \"int\"], ['minimized', false, \"bool\"], ['showHorizontalScroll', true, \"bool\"], ['showSheetTabs', true, \"bool\"], ['showVerticalScroll', true, \"bool\"], ['tabRatio', 600, \"int\"], ['visibility', 'visible'] //window{Height,Width}, {x,y}Window\n];\n/* 18.2.19 (CT_Sheet) Defaults */\n\nvar SheetDef = [//['state', 'visible']\n];\n/* 18.2.2  (CT_CalcPr) Defaults */\n\nvar CalcPrDef = [['calcCompleted', 'true'], ['calcMode', 'auto'], ['calcOnSave', 'true'], ['concurrentCalc', 'true'], ['fullCalcOnLoad', 'false'], ['fullPrecision', 'true'], ['iterate', 'false'], ['iterateCount', '100'], ['iterateDelta', '0.001'], ['refMode', 'A1']];\n/* 18.2.3 (CT_CustomWorkbookView) Defaults */\n\n/*var CustomWBViewDef = [\n\t['autoUpdate', 'false'],\n\t['changesSavedWin', 'false'],\n\t['includeHiddenRowCol', 'true'],\n\t['includePrintSettings', 'true'],\n\t['maximized', 'false'],\n\t['minimized', 'false'],\n\t['onlySync', 'false'],\n\t['personalView', 'false'],\n\t['showComments', 'commIndicator'],\n\t['showFormulaBar', 'true'],\n\t['showHorizontalScroll', 'true'],\n\t['showObjects', 'all'],\n\t['showSheetTabs', 'true'],\n\t['showStatusbar', 'true'],\n\t['showVerticalScroll', 'true'],\n\t['tabRatio', '600'],\n\t['xWindow', '0'],\n\t['yWindow', '0']\n];*/\n\nfunction push_defaults_array(target, defaults) {\n  for (var j = 0; j != target.length; ++j) {\n    var w = target[j];\n\n    for (var i = 0; i != defaults.length; ++i) {\n      var z = defaults[i];\n      if (w[z[0]] == null) w[z[0]] = z[1];else switch (z[2]) {\n        case \"bool\":\n          if (typeof w[z[0]] == \"string\") w[z[0]] = parsexmlbool(w[z[0]]);\n          break;\n\n        case \"int\":\n          if (typeof w[z[0]] == \"string\") w[z[0]] = parseInt(w[z[0]], 10);\n          break;\n      }\n    }\n  }\n}\n\nfunction push_defaults(target, defaults) {\n  for (var i = 0; i != defaults.length; ++i) {\n    var z = defaults[i];\n    if (target[z[0]] == null) target[z[0]] = z[1];else switch (z[2]) {\n      case \"bool\":\n        if (typeof target[z[0]] == \"string\") target[z[0]] = parsexmlbool(target[z[0]]);\n        break;\n\n      case \"int\":\n        if (typeof target[z[0]] == \"string\") target[z[0]] = parseInt(target[z[0]], 10);\n        break;\n    }\n  }\n}\n\nfunction parse_wb_defaults(wb) {\n  push_defaults(wb.WBProps, WBPropsDef);\n  push_defaults(wb.CalcPr, CalcPrDef);\n  push_defaults_array(wb.WBView, WBViewDef);\n  push_defaults_array(wb.Sheets, SheetDef);\n  _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);\n}\n\nfunction safe1904(wb\n/*:Workbook*/\n)\n/*:string*/\n{\n  /* TODO: store date1904 somewhere else */\n  if (!wb.Workbook) return \"false\";\n  if (!wb.Workbook.WBProps) return \"false\";\n  return parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\";\n}\n\nvar badchars = /*#__PURE__*/\":][*?\\/\\\\\".split(\"\");\n\nfunction check_ws_name(n\n/*:string*/\n, safe\n/*:?boolean*/\n)\n/*:boolean*/\n{\n  if (n.length > 31) {\n    if (safe) return false;\n    throw new Error(\"Sheet names cannot exceed 31 chars\");\n  }\n\n  var _good = true;\n  badchars.forEach(function (c) {\n    if (n.indexOf(c) == -1) return;\n    if (!safe) throw new Error(\"Sheet name cannot contain : \\\\ / ? * [ ]\");\n    _good = false;\n  });\n  return _good;\n}\n\nfunction check_wb_names(N, S, codes) {\n  N.forEach(function (n, i) {\n    check_ws_name(n);\n\n    for (var j = 0; j < i; ++j) {\n      if (n == N[j]) throw new Error(\"Duplicate Sheet Name: \" + n);\n    }\n\n    if (codes) {\n      var cn = S && S[i] && S[i].CodeName || n;\n      if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error(\"Bad Code Name: Worksheet\" + cn);\n    }\n  });\n}\n\nfunction check_wb(wb) {\n  if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error(\"Invalid Workbook\");\n  if (!wb.SheetNames.length) throw new Error(\"Workbook is empty\");\n  var Sheets = wb.Workbook && wb.Workbook.Sheets || [];\n  check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);\n\n  for (var i = 0; i < wb.SheetNames.length; ++i) {\n    check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);\n  }\n\n  wb.SheetNames.forEach(function (n, i) {\n    var ws = wb.Sheets[n];\n    if (!ws || !ws[\"!autofilter\"]) return;\n    var DN;\n    if (!wb.Workbook) wb.Workbook = {};\n    if (!wb.Workbook.Names) wb.Workbook.Names = [];\n    wb.Workbook.Names.forEach(function (dn) {\n      if (dn.Name == \"_xlnm._FilterDatabase\" && dn.Sheet == i) DN = dn;\n    });\n    var nn = formula_quote_sheet_name(n) + \"!\" + fix_range(ws[\"!autofilter\"].ref);\n    if (DN) DN.Ref = nn;else wb.Workbook.Names.push({\n      Name: \"_xlnm._FilterDatabase\",\n      Sheet: i,\n      Ref: nn\n    });\n  });\n  /* TODO: validate workbook */\n}\n/* 18.2 Workbook */\n\n\nvar wbnsregex = /<\\w+:workbook/;\n\nfunction parse_wb_xml(data, opts)\n/*:WorkbookFile*/\n{\n  if (!data) throw new Error(\"Could not find file\");\n  var wb =\n  /*::(*/\n  {\n    AppVersion: {},\n    WBProps: {},\n    WBView: [],\n    Sheets: [],\n    CalcPr: {},\n    Names: [],\n    xmlns: \"\"\n  }\n  /*::)*/\n  ;\n  var pass = false,\n      xmlns = \"xmlns\";\n  var dname = {},\n      dnstart = 0;\n  data.replace(tagregex, function xml_wb(x, idx) {\n    var y\n    /*:any*/\n    = parsexmltag(x);\n\n    switch (strip_ns(y[0])) {\n      case '<?xml':\n        break;\n\n      /* 18.2.27 workbook CT_Workbook 1 */\n\n      case '<workbook':\n        if (x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n        wb.xmlns = y[xmlns];\n        break;\n\n      case '</workbook>':\n        break;\n\n      /* 18.2.13 fileVersion CT_FileVersion ? */\n\n      case '<fileVersion':\n        delete y[0];\n        wb.AppVersion = y;\n        break;\n\n      case '<fileVersion/>':\n      case '</fileVersion>':\n        break;\n\n      /* 18.2.12 fileSharing CT_FileSharing ? */\n\n      case '<fileSharing':\n        break;\n\n      case '<fileSharing/>':\n        break;\n\n      /* 18.2.28 workbookPr CT_WorkbookPr ? */\n\n      case '<workbookPr':\n      case '<workbookPr/>':\n        WBPropsDef.forEach(function (w) {\n          if (y[w[0]] == null) return;\n\n          switch (w[2]) {\n            case \"bool\":\n              wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);\n              break;\n\n            case \"int\":\n              wb.WBProps[w[0]] = parseInt(y[w[0]], 10);\n              break;\n\n            default:\n              wb.WBProps[w[0]] = y[w[0]];\n          }\n        });\n        if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);\n        break;\n\n      case '</workbookPr>':\n        break;\n\n      /* 18.2.29 workbookProtection CT_WorkbookProtection ? */\n\n      case '<workbookProtection':\n        break;\n\n      case '<workbookProtection/>':\n        break;\n\n      /* 18.2.1  bookViews CT_BookViews ? */\n\n      case '<bookViews':\n      case '<bookViews>':\n      case '</bookViews>':\n        break;\n\n      /* 18.2.30   workbookView CT_BookView + */\n\n      case '<workbookView':\n      case '<workbookView/>':\n        delete y[0];\n        wb.WBView.push(y);\n        break;\n\n      case '</workbookView>':\n        break;\n\n      /* 18.2.20 sheets CT_Sheets 1 */\n\n      case '<sheets':\n      case '<sheets>':\n      case '</sheets>':\n        break;\n      // aggregate sheet\n\n      /* 18.2.19   sheet CT_Sheet + */\n\n      case '<sheet':\n        switch (y.state) {\n          case \"hidden\":\n            y.Hidden = 1;\n            break;\n\n          case \"veryHidden\":\n            y.Hidden = 2;\n            break;\n\n          default:\n            y.Hidden = 0;\n        }\n\n        delete y.state;\n        y.name = unescapexml(utf8read(y.name));\n        delete y[0];\n        wb.Sheets.push(y);\n        break;\n\n      case '</sheet>':\n        break;\n\n      /* 18.2.15 functionGroups CT_FunctionGroups ? */\n\n      case '<functionGroups':\n      case '<functionGroups/>':\n        break;\n\n      /* 18.2.14   functionGroup CT_FunctionGroup + */\n\n      case '<functionGroup':\n        break;\n\n      /* 18.2.9  externalReferences CT_ExternalReferences ? */\n\n      case '<externalReferences':\n      case '</externalReferences>':\n      case '<externalReferences>':\n        break;\n\n      /* 18.2.8    externalReference CT_ExternalReference + */\n\n      case '<externalReference':\n        break;\n\n      /* 18.2.6  definedNames CT_DefinedNames ? */\n\n      case '<definedNames/>':\n        break;\n\n      case '<definedNames>':\n      case '<definedNames':\n        pass = true;\n        break;\n\n      case '</definedNames>':\n        pass = false;\n        break;\n\n      /* 18.2.5    definedName CT_DefinedName + */\n\n      case '<definedName':\n        {\n          dname = {};\n          dname.Name = utf8read(y.name);\n          if (y.comment) dname.Comment = y.comment;\n          if (y.localSheetId) dname.Sheet = +y.localSheetId;\n          if (parsexmlbool(y.hidden || \"0\")) dname.Hidden = true;\n          dnstart = idx + x.length;\n        }\n        break;\n\n      case '</definedName>':\n        {\n          dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));\n          wb.Names.push(dname);\n        }\n        break;\n\n      case '<definedName/>':\n        break;\n\n      /* 18.2.2  calcPr CT_CalcPr ? */\n\n      case '<calcPr':\n        delete y[0];\n        wb.CalcPr = y;\n        break;\n\n      case '<calcPr/>':\n        delete y[0];\n        wb.CalcPr = y;\n        break;\n\n      case '</calcPr>':\n        break;\n\n      /* 18.2.16 oleSize CT_OleSize ? (ref required) */\n\n      case '<oleSize':\n        break;\n\n      /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */\n\n      case '<customWorkbookViews>':\n      case '</customWorkbookViews>':\n      case '<customWorkbookViews':\n        break;\n\n      /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */\n\n      case '<customWorkbookView':\n      case '</customWorkbookView>':\n        break;\n\n      /* 18.2.18 pivotCaches CT_PivotCaches ? */\n\n      case '<pivotCaches>':\n      case '</pivotCaches>':\n      case '<pivotCaches':\n        break;\n\n      /* 18.2.17 pivotCache CT_PivotCache ? */\n\n      case '<pivotCache':\n        break;\n\n      /* 18.2.21 smartTagPr CT_SmartTagPr ? */\n\n      case '<smartTagPr':\n      case '<smartTagPr/>':\n        break;\n\n      /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */\n\n      case '<smartTagTypes':\n      case '<smartTagTypes>':\n      case '</smartTagTypes>':\n        break;\n\n      /* 18.2.22 smartTagType CT_SmartTagType ? */\n\n      case '<smartTagType':\n        break;\n\n      /* 18.2.24 webPublishing CT_WebPublishing ? */\n\n      case '<webPublishing':\n      case '<webPublishing/>':\n        break;\n\n      /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */\n\n      case '<fileRecoveryPr':\n      case '<fileRecoveryPr/>':\n        break;\n\n      /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */\n\n      case '<webPublishObjects>':\n      case '<webPublishObjects':\n      case '</webPublishObjects>':\n        break;\n\n      /* 18.2.25 webPublishObject CT_WebPublishObject ? */\n\n      case '<webPublishObject':\n        break;\n\n      /* 18.2.10 extLst CT_ExtensionList ? */\n\n      case '<extLst':\n      case '<extLst>':\n      case '</extLst>':\n      case '<extLst/>':\n        break;\n\n      /* 18.2.7  ext CT_Extension + */\n\n      case '<ext':\n        pass = true;\n        break;\n      //TODO: check with versions of excel\n\n      case '</ext>':\n        pass = false;\n        break;\n\n      /* Others */\n\n      case '<ArchID':\n        break;\n\n      case '<AlternateContent':\n      case '<AlternateContent>':\n        pass = true;\n        break;\n\n      case '</AlternateContent>':\n        pass = false;\n        break;\n\n      /* TODO */\n\n      case '<revisionPtr':\n        break;\n\n      default:\n        if (!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');\n    }\n\n    return x;\n  });\n  if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n  parse_wb_defaults(wb);\n  return wb;\n}\n\nfunction write_wb_xml(wb\n/*:Workbook*/\n\n/*::, opts:?WriteOpts*/\n)\n/*:string*/\n{\n  var o = [XML_HEADER];\n  o[o.length] = writextag('workbook', null, {\n    'xmlns': XMLNS_main[0],\n    //'xmlns:mx': XMLNS.mx,\n    //'xmlns:s': XMLNS_main[0],\n    'xmlns:r': XMLNS.r\n  });\n  var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;\n  /* fileVersion */\n\n  /* fileSharing */\n\n  var workbookPr\n  /*:any*/\n  = {\n    codeName: \"ThisWorkbook\"\n  }\n  /*:any*/\n  ;\n\n  if (wb.Workbook && wb.Workbook.WBProps) {\n    WBPropsDef.forEach(function (x) {\n      /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw \"unreachable\"; */\n      if (wb.Workbook.WBProps[x[0]]\n      /*:any*/\n      == null) return;\n      if (wb.Workbook.WBProps[x[0]]\n      /*:any*/\n      == x[1]) return;\n      workbookPr[x[0]] = wb.Workbook.WBProps[x[0]]\n      /*:any*/\n      ;\n    });\n    /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw \"unreachable\"; */\n\n    if (wb.Workbook.WBProps.CodeName) {\n      workbookPr.codeName = wb.Workbook.WBProps.CodeName;\n      delete workbookPr.CodeName;\n    }\n  }\n\n  o[o.length] = writextag('workbookPr', null, workbookPr);\n  /* workbookProtection */\n\n  var sheets = wb.Workbook && wb.Workbook.Sheets || [];\n  var i = 0;\n  /* bookViews only written if first worksheet is hidden */\n\n  if (sheets && sheets[0] && !!sheets[0].Hidden) {\n    o[o.length] = \"<bookViews>\";\n\n    for (i = 0; i != wb.SheetNames.length; ++i) {\n      if (!sheets[i]) break;\n      if (!sheets[i].Hidden) break;\n    }\n\n    if (i == wb.SheetNames.length) i = 0;\n    o[o.length] = '<workbookView firstSheet=\"' + i + '\" activeTab=\"' + i + '\"/>';\n    o[o.length] = \"</bookViews>\";\n  }\n\n  o[o.length] = \"<sheets>\";\n\n  for (i = 0; i != wb.SheetNames.length; ++i) {\n    var sht = {\n      name: escapexml(wb.SheetNames[i].slice(0, 31))\n    }\n    /*:any*/\n    ;\n    sht.sheetId = \"\" + (i + 1);\n    sht[\"r:id\"] = \"rId\" + (i + 1);\n    if (sheets[i]) switch (sheets[i].Hidden) {\n      case 1:\n        sht.state = \"hidden\";\n        break;\n\n      case 2:\n        sht.state = \"veryHidden\";\n        break;\n    }\n    o[o.length] = writextag('sheet', null, sht);\n  }\n\n  o[o.length] = \"</sheets>\";\n  /* functionGroups */\n\n  /* externalReferences */\n\n  if (write_names) {\n    o[o.length] = \"<definedNames>\";\n    if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function (n) {\n      var d\n      /*:any*/\n      = {\n        name: n.Name\n      };\n      if (n.Comment) d.comment = n.Comment;\n      if (n.Sheet != null) d.localSheetId = \"\" + n.Sheet;\n      if (n.Hidden) d.hidden = \"1\";\n      if (!n.Ref) return;\n      o[o.length] = writextag('definedName', escapexml(n.Ref), d);\n    });\n    o[o.length] = \"</definedNames>\";\n  }\n  /* calcPr */\n\n  /* oleSize */\n\n  /* customWorkbookViews */\n\n  /* pivotCaches */\n\n  /* smartTagPr */\n\n  /* smartTagTypes */\n\n  /* webPublishing */\n\n  /* fileRecoveryPr */\n\n  /* webPublishObjects */\n\n  /* extLst */\n\n\n  if (o.length > 2) {\n    o[o.length] = '</workbook>';\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.304 BrtBundleSh */\n\n\nfunction parse_BrtBundleSh(data, length\n/*:number*/\n) {\n  var z = {};\n  z.Hidden = data.read_shift(4); //hsState ST_SheetState\n\n  z.iTabID = data.read_shift(4);\n  z.strRelID = parse_RelID(data, length - 8);\n  z.name = parse_XLWideString(data);\n  return z;\n}\n\nfunction write_BrtBundleSh(data, o) {\n  if (!o) o = new_buf(127);\n  o.write_shift(4, data.Hidden);\n  o.write_shift(4, data.iTabID);\n  write_RelID(data.strRelID, o);\n  write_XLWideString(data.name.slice(0, 31), o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.815 BrtWbProp */\n\n\nfunction parse_BrtWbProp(data, length)\n/*:WBProps*/\n{\n  var o\n  /*:WBProps*/\n  = {}\n  /*:any*/\n  ;\n  var flags = data.read_shift(4);\n  o.defaultThemeVersion = data.read_shift(4);\n  var strName = length > 8 ? parse_XLWideString(data) : \"\";\n  if (strName.length > 0) o.CodeName = strName;\n  o.autoCompressPictures = !!(flags & 0x10000);\n  o.backupFile = !!(flags & 0x40);\n  o.checkCompatibility = !!(flags & 0x1000);\n  o.date1904 = !!(flags & 0x01);\n  o.filterPrivacy = !!(flags & 0x08);\n  o.hidePivotFieldList = !!(flags & 0x400);\n  o.promptedSolutions = !!(flags & 0x10);\n  o.publishItems = !!(flags & 0x800);\n  o.refreshAllConnections = !!(flags & 0x40000);\n  o.saveExternalLinkValues = !!(flags & 0x80);\n  o.showBorderUnselectedTables = !!(flags & 0x04);\n  o.showInkAnnotation = !!(flags & 0x20);\n  o.showObjects = [\"all\", \"placeholders\", \"none\"][flags >> 13 & 0x03];\n  o.showPivotChartFilter = !!(flags & 0x8000);\n  o.updateLinks = [\"userSet\", \"never\", \"always\"][flags >> 8 & 0x03];\n  return o;\n}\n\nfunction write_BrtWbProp(data\n/*:?WBProps*/\n, o) {\n  if (!o) o = new_buf(72);\n  var flags = 0;\n\n  if (data) {\n    /* TODO: mirror parse_BrtWbProp fields */\n    if (data.date1904) flags |= 0x01;\n    if (data.filterPrivacy) flags |= 0x08;\n  }\n\n  o.write_shift(4, flags);\n  o.write_shift(4, 0);\n  write_XLSBCodeName(data && data.CodeName || \"ThisWorkbook\", o);\n  return o.slice(0, o.l);\n}\n\nfunction parse_BrtFRTArchID$(data, length) {\n  var o = {};\n  data.read_shift(4);\n  o.ArchID = data.read_shift(4);\n  data.l += length - 8;\n  return o;\n}\n/* [MS-XLSB] 2.4.687 BrtName */\n\n\nfunction parse_BrtName(data, length, opts) {\n  var end = data.l + length;\n  var flags = data.read_shift(4);\n  data.l += 1; //var chKey = data.read_shift(1);\n\n  var itab = data.read_shift(4);\n  var name = parse_XLNameWideString(data);\n  var formula = parse_XLSBNameParsedFormula(data, 0, opts);\n  var comment = parse_XLNullableWideString(data);\n  if (flags & 0x20) name = \"_xlnm.\" + name; //if(0 /* fProc */) {\n  // unusedstring1: XLNullableWideString\n  // description: XLNullableWideString\n  // helpTopic: XLNullableWideString\n  // unusedstring2: XLNullableWideString\n  //}\n\n  data.l = end;\n  var out = {\n    Name: name,\n    Ptg: formula,\n    Flags: flags\n  }\n  /*:any*/\n  ;\n  if (itab < 0xFFFFFFF) out.Sheet = itab;\n  if (comment) out.Comment = comment;\n  return out;\n}\n\nfunction write_BrtName(name, wb) {\n  var o = new_buf(9);\n  var flags = 0;\n  var dname = name.Name;\n\n  if (XLSLblBuiltIn.indexOf(dname) > -1) {\n    flags |= 0x20;\n    dname = dname.slice(6);\n  }\n\n  o.write_shift(4, flags); // flags\n\n  o.write_shift(1, 0); // chKey\n\n  o.write_shift(4, name.Sheet == null ? 0xFFFFFFFF : name.Sheet);\n  var arr = [o, write_XLWideString(dname), write_XLSBNameParsedFormula(name.Ref, wb)];\n  if (name.Comment) arr.push(write_XLNullableWideString(name.Comment));else {\n    var x = new_buf(4);\n    x.write_shift(4, 0xFFFFFFFF);\n    arr.push(x);\n  } // if macro (flags & 0x0F):\n  // write_shift(4, 0xFFFFFFFF);\n  // write_XLNullableWideString(description)\n  // write_XLNullableWideString(helpTopic)\n  // write_shift(4, 0xFFFFFFFF);\n\n  return bconcat(arr);\n}\n/* [MS-XLSB] 2.1.7.61 Workbook */\n\n\nfunction parse_wb_bin(data, opts)\n/*:WorkbookFile*/\n{\n  var wb = {\n    AppVersion: {},\n    WBProps: {},\n    WBView: [],\n    Sheets: [],\n    CalcPr: {},\n    xmlns: \"\"\n  };\n  var state\n  /*:Array<string>*/\n  = [];\n  var pass = false;\n  if (!opts) opts = {};\n  opts.biff = 12;\n  var Names = [];\n  var supbooks = [[]]\n  /*:any*/\n  ;\n  supbooks.SheetNames = [];\n  supbooks.XTI = [];\n  XLSBRecordEnum[0x0010] = {\n    n: \"BrtFRTArchID$\",\n    f: parse_BrtFRTArchID$\n  };\n  recordhopper(data, function hopper_wb(val, R, RT) {\n    switch (RT) {\n      case 0x009C:\n        /* 'BrtBundleSh' */\n        supbooks.SheetNames.push(val.name);\n        wb.Sheets.push(val);\n        break;\n\n      case 0x0099:\n        /* 'BrtWbProp' */\n        wb.WBProps = val;\n        break;\n\n      case 0x0027:\n        /* 'BrtName' */\n        if (val.Sheet != null) opts.SID = val.Sheet;\n        val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);\n        delete opts.SID;\n        delete val.Ptg;\n        Names.push(val);\n        break;\n\n      case 0x040C:\n        /* 'BrtNameExt' */\n        break;\n\n      case 0x0165:\n      /* 'BrtSupSelf' */\n\n      case 0x0166:\n      /* 'BrtSupSame' */\n\n      case 0x0163:\n      /* 'BrtSupBookSrc' */\n\n      case 0x029B:\n        /* 'BrtSupAddin' */\n        if (!supbooks[0].length) supbooks[0] = [RT, val];else supbooks.push([RT, val]);\n        supbooks[supbooks.length - 1].XTI = [];\n        break;\n\n      case 0x016A:\n        /* 'BrtExternSheet' */\n        if (supbooks.length === 0) {\n          supbooks[0] = [];\n          supbooks[0].XTI = [];\n        }\n\n        supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);\n        supbooks.XTI = supbooks.XTI.concat(val);\n        break;\n\n      case 0x0169:\n        /* 'BrtPlaceholderName' */\n        break;\n\n      case 0x0817:\n      /* 'BrtAbsPath15' */\n\n      case 0x009E:\n      /* 'BrtBookView' */\n\n      case 0x008F:\n      /* 'BrtBeginBundleShs' */\n\n      case 0x0298:\n      /* 'BrtBeginFnGroup' */\n\n      case 0x0161:\n        /* 'BrtBeginExternals' */\n        break;\n\n      /* case 'BrtModelTimeGroupingCalcCol' */\n\n      case 0x0C00:\n      /* 'BrtUid' */\n\n      case 0x0C01:\n      /* 'BrtRevisionPtr' */\n\n      case 0x0216:\n      /* 'BrtBookProtection' */\n\n      case 0x02A5:\n      /* 'BrtBookProtectionIso' */\n\n      case 0x009D:\n      /* 'BrtCalcProp' */\n\n      case 0x0262:\n      /* 'BrtCrashRecErr' */\n\n      case 0x0802:\n      /* 'BrtDecoupledPivotCacheID' */\n\n      case 0x009B:\n      /* 'BrtFileRecover' */\n\n      case 0x0224:\n      /* 'BrtFileSharing' */\n\n      case 0x02A4:\n      /* 'BrtFileSharingIso' */\n\n      case 0x0080:\n      /* 'BrtFileVersion' */\n\n      case 0x0299:\n      /* 'BrtFnGroup' */\n\n      case 0x0850:\n      /* 'BrtModelRelationship' */\n\n      case 0x084D:\n      /* 'BrtModelTable' */\n\n      case 0x0225:\n      /* 'BrtOleSize' */\n\n      case 0x0805:\n      /* 'BrtPivotTableRef' */\n\n      case 0x0254:\n      /* 'BrtSmartTagType' */\n\n      case 0x081C:\n      /* 'BrtTableSlicerCacheID' */\n\n      case 0x081B:\n      /* 'BrtTableSlicerCacheIDs' */\n\n      case 0x0822:\n      /* 'BrtTimelineCachePivotCacheID' */\n\n      case 0x018D:\n      /* 'BrtUserBookView' */\n\n      case 0x009A:\n      /* 'BrtWbFactoid' */\n\n      case 0x045D:\n      /* 'BrtWbProp14' */\n\n      case 0x0229:\n      /* 'BrtWebOpt' */\n\n      case 0x082B:\n        /* 'BrtWorkBookPr15' */\n        break;\n\n      case 0x0023:\n        /* 'BrtFRTBegin' */\n        state.push(RT);\n        pass = true;\n        break;\n\n      case 0x0024:\n        /* 'BrtFRTEnd' */\n        state.pop();\n        pass = false;\n        break;\n\n      case 0x0025:\n        /* 'BrtACBegin' */\n        state.push(RT);\n        pass = true;\n        break;\n\n      case 0x0026:\n        /* 'BrtACEnd' */\n        state.pop();\n        pass = false;\n        break;\n\n      case 0x0010:\n        /* 'BrtFRTArchID$' */\n        break;\n\n      default:\n        if (R.T) {\n          /* empty */\n        } else if (!pass || opts.WTF && state[state.length - 1] != 0x0025\n        /* BrtACBegin */\n        && state[state.length - 1] != 0x0023\n        /* BrtFRTBegin */\n        ) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n\n    }\n  }, opts);\n  parse_wb_defaults(wb); // $FlowIgnore\n\n  wb.Names = Names;\n  wb\n  /*:any*/\n  .supbooks = supbooks;\n  return wb;\n}\n\nfunction write_BUNDLESHS(ba, wb\n/*::, opts*/\n) {\n  write_record(ba, 0x008F\n  /* BrtBeginBundleShs */\n  );\n\n  for (var idx = 0; idx != wb.SheetNames.length; ++idx) {\n    var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;\n    var d = {\n      Hidden: viz,\n      iTabID: idx + 1,\n      strRelID: 'rId' + (idx + 1),\n      name: wb.SheetNames[idx]\n    };\n    write_record(ba, 0x009C\n    /* BrtBundleSh */\n    , write_BrtBundleSh(d));\n  }\n\n  write_record(ba, 0x0090\n  /* BrtEndBundleShs */\n  );\n}\n/* [MS-XLSB] 2.4.649 BrtFileVersion */\n\n\nfunction write_BrtFileVersion(data, o) {\n  if (!o) o = new_buf(127);\n\n  for (var i = 0; i != 4; ++i) {\n    o.write_shift(4, 0);\n  }\n\n  write_XLWideString(\"SheetJS\", o);\n  write_XLWideString(XLSX.version, o);\n  write_XLWideString(XLSX.version, o);\n  write_XLWideString(\"7262\", o);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.301 BrtBookView */\n\n\nfunction write_BrtBookView(idx, o) {\n  if (!o) o = new_buf(29);\n  o.write_shift(-4, 0);\n  o.write_shift(-4, 460);\n  o.write_shift(4, 28800);\n  o.write_shift(4, 17600);\n  o.write_shift(4, 500);\n  o.write_shift(4, idx);\n  o.write_shift(4, idx);\n  var flags = 0x78;\n  o.write_shift(1, flags);\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n\nfunction write_BOOKVIEWS(ba, wb\n/*::, opts*/\n) {\n  /* required if hidden tab appears before visible tab */\n  if (!wb.Workbook || !wb.Workbook.Sheets) return;\n  var sheets = wb.Workbook.Sheets;\n  var i = 0,\n      vistab = -1,\n      hidden = -1;\n\n  for (; i < sheets.length; ++i) {\n    if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;\n  }\n\n  if (hidden > vistab) return;\n  write_record(ba, 0x0087\n  /* BrtBeginBookViews */\n  );\n  write_record(ba, 0x009E\n  /* BrtBookView */\n  , write_BrtBookView(vistab));\n  /* 1*(BrtBookView *FRT) */\n\n  write_record(ba, 0x0088\n  /* BrtEndBookViews */\n  );\n}\n\nfunction write_BRTNAMES(ba, wb) {\n  if (!wb.Workbook || !wb.Workbook.Names) return;\n  wb.Workbook.Names.forEach(function (name) {\n    try {\n      if (name.Flags & 0x0e) return; // TODO: macro name write\n\n      write_record(ba, 0x0027\n      /* BrtName */\n      , write_BrtName(name, wb));\n    } catch (e) {\n      console.error(\"Could not serialize defined name \" + JSON.stringify(name));\n    }\n  });\n}\n\nfunction write_SELF_EXTERNS_xlsb(wb) {\n  var L = wb.SheetNames.length;\n  var o = new_buf(12 * L + 28);\n  o.write_shift(4, L + 2);\n  o.write_shift(4, 0);\n  o.write_shift(4, -2);\n  o.write_shift(4, -2); // workbook-level reference\n\n  o.write_shift(4, 0);\n  o.write_shift(4, -1);\n  o.write_shift(4, -1); // #REF!...\n\n  for (var i = 0; i < L; ++i) {\n    o.write_shift(4, 0);\n    o.write_shift(4, i);\n    o.write_shift(4, i);\n  }\n\n  return o;\n}\n\nfunction write_EXTERNALS_xlsb(ba, wb) {\n  write_record(ba, 0x0161\n  /* BrtBeginExternals */\n  );\n  write_record(ba, 0x0165\n  /* BrtSupSelf */\n  );\n  write_record(ba, 0x016A\n  /* BrtExternSheet */\n  , write_SELF_EXTERNS_xlsb(wb, 0));\n  write_record(ba, 0x0162\n  /* BrtEndExternals */\n  );\n}\n/* [MS-XLSB] 2.4.305 BrtCalcProp */\n\n/*function write_BrtCalcProp(data, o) {\n\tif(!o) o = new_buf(26);\n\to.write_shift(4,0); // force recalc\n\to.write_shift(4,1);\n\to.write_shift(4,0);\n\twrite_Xnum(0, o);\n\to.write_shift(-4, 1023);\n\to.write_shift(1, 0x33);\n\to.write_shift(1, 0x00);\n\treturn o;\n}*/\n\n/* [MS-XLSB] 2.4.646 BrtFileRecover */\n\n/*function write_BrtFileRecover(data, o) {\n\tif(!o) o = new_buf(1);\n\to.write_shift(1,0);\n\treturn o;\n}*/\n\n/* [MS-XLSB] 2.1.7.61 Workbook */\n\n\nfunction write_wb_bin(wb, opts) {\n  var ba = buf_array();\n  write_record(ba, 0x0083\n  /* BrtBeginBook */\n  );\n  write_record(ba, 0x0080\n  /* BrtFileVersion */\n  , write_BrtFileVersion());\n  /* [[BrtFileSharingIso] BrtFileSharing] */\n\n  write_record(ba, 0x0099\n  /* BrtWbProp */\n  , write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));\n  /* [ACABSPATH] */\n\n  /* [[BrtBookProtectionIso] BrtBookProtection] */\n\n  write_BOOKVIEWS(ba, wb, opts);\n  write_BUNDLESHS(ba, wb, opts);\n  /* [FNGROUP] */\n\n  write_EXTERNALS_xlsb(ba, wb);\n  if ((wb.Workbook || {}).Names) write_BRTNAMES(ba, wb);\n  /* write_record(ba, 0x009D BrtCalcProp, write_BrtCalcProp()); */\n\n  /* [BrtOleSize] */\n\n  /* *(BrtUserBookView *FRT) */\n\n  /* [PIVOTCACHEIDS] */\n\n  /* [BrtWbFactoid] */\n\n  /* [SMARTTAGTYPES] */\n\n  /* [BrtWebOpt] */\n\n  /* write_record(ba, 0x009B BrtFileRecover, write_BrtFileRecover()); */\n\n  /* [WEBPUBITEMS] */\n\n  /* [CRERRS] */\n\n  /* FRTWORKBOOK */\n\n  write_record(ba, 0x0084\n  /* BrtEndBook */\n  );\n  return ba.end();\n}\n\nfunction parse_wb(data, name\n/*:string*/\n, opts)\n/*:WorkbookFile*/\n{\n  if (name.slice(-4) === \".bin\") return parse_wb_bin(data\n  /*:any*/\n  , opts);\n  return parse_wb_xml(data\n  /*:any*/\n  , opts);\n}\n\nfunction parse_ws(data, name\n/*:string*/\n, idx\n/*:number*/\n, opts, rels, wb, themes, styles)\n/*:Worksheet*/\n{\n  if (name.slice(-4) === \".bin\") return parse_ws_bin(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n  return parse_ws_xml(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_cs(data, name\n/*:string*/\n, idx\n/*:number*/\n, opts, rels, wb, themes, styles)\n/*:Worksheet*/\n{\n  if (name.slice(-4) === \".bin\") return parse_cs_bin(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n  return parse_cs_xml(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_ms(data, name\n/*:string*/\n, idx\n/*:number*/\n, opts, rels, wb, themes, styles)\n/*:Worksheet*/\n{\n  if (name.slice(-4) === \".bin\") return parse_ms_bin(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n  return parse_ms_xml(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_ds(data, name\n/*:string*/\n, idx\n/*:number*/\n, opts, rels, wb, themes, styles)\n/*:Worksheet*/\n{\n  if (name.slice(-4) === \".bin\") return parse_ds_bin(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n  return parse_ds_xml(data\n  /*:any*/\n  , opts, idx, rels, wb, themes, styles);\n}\n\nfunction parse_sty(data, name\n/*:string*/\n, themes, opts) {\n  if (name.slice(-4) === \".bin\") return parse_sty_bin(data\n  /*:any*/\n  , themes, opts);\n  return parse_sty_xml(data\n  /*:any*/\n  , themes, opts);\n}\n\nfunction parse_sst(data, name\n/*:string*/\n, opts)\n/*:SST*/\n{\n  if (name.slice(-4) === \".bin\") return parse_sst_bin(data\n  /*:any*/\n  , opts);\n  return parse_sst_xml(data\n  /*:any*/\n  , opts);\n}\n\nfunction parse_cmnt(data, name\n/*:string*/\n, opts)\n/*:Array<RawComment>*/\n{\n  if (name.slice(-4) === \".bin\") return parse_comments_bin(data\n  /*:any*/\n  , opts);\n  return parse_comments_xml(data\n  /*:any*/\n  , opts);\n}\n\nfunction parse_cc(data, name\n/*:string*/\n, opts) {\n  if (name.slice(-4) === \".bin\") return parse_cc_bin(data\n  /*:any*/\n  , name, opts);\n  return parse_cc_xml(data\n  /*:any*/\n  , name, opts);\n}\n\nfunction parse_xlink(data, rel, name\n/*:string*/\n, opts) {\n  if (name.slice(-4) === \".bin\") return parse_xlink_bin(data\n  /*:any*/\n  , rel, name, opts);\n  return parse_xlink_xml(data\n  /*:any*/\n  , rel, name, opts);\n}\n\nfunction parse_xlmeta(data, name\n/*:string*/\n, opts) {\n  if (name.slice(-4) === \".bin\") return parse_xlmeta_bin(data\n  /*:any*/\n  , name, opts);\n  return parse_xlmeta_xml(data\n  /*:any*/\n  , name, opts);\n}\n\nvar attregexg2 = /([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\nvar attregex2 = /([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\n\nfunction xlml_parsexmltag(tag\n/*:string*/\n, skip_root\n/*:?boolean*/\n) {\n  var words = tag.split(/\\s+/);\n  var z\n  /*:any*/\n  = []\n  /*:any*/\n  ;\n  if (!skip_root) z[0] = words[0];\n  if (words.length === 1) return z;\n  var m = tag.match(attregexg2),\n      y,\n      j,\n      w,\n      i;\n  if (m) for (i = 0; i != m.length; ++i) {\n    y = m[i].match(attregex2);\n    /*:: if(!y || !y[2]) continue; */\n\n    if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);else {\n      if (y[1].slice(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].slice(6);else w = y[1].slice(j + 1);\n      z[w] = y[2].slice(1, y[2].length - 1);\n    }\n  }\n  return z;\n}\n\nfunction xlml_parsexmltagobj(tag\n/*:string*/\n) {\n  var words = tag.split(/\\s+/);\n  var z = {};\n  if (words.length === 1) return z;\n  var m = tag.match(attregexg2),\n      y,\n      j,\n      w,\n      i;\n  if (m) for (i = 0; i != m.length; ++i) {\n    y = m[i].match(attregex2);\n    /*:: if(!y || !y[2]) continue; */\n\n    if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);else {\n      if (y[1].slice(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].slice(6);else w = y[1].slice(j + 1);\n      z[w] = y[2].slice(1, y[2].length - 1);\n    }\n  }\n  return z;\n} // ----\n\n/* map from xlml named formats to SSF TODO: localize */\n\n\nvar XLMLFormatMap\n/*: {[string]:string}*/\n;\n\nfunction xlml_format(format, value)\n/*:string*/\n{\n  var fmt = XLMLFormatMap[format] || unescapexml(format);\n  if (fmt === \"General\") return SSF_general(value);\n  return SSF_format(fmt, value);\n}\n\nfunction xlml_set_custprop(Custprops, key, cp, val\n/*:string*/\n) {\n  var oval\n  /*:any*/\n  = val;\n\n  switch ((cp[0].match(/dt:dt=\"([\\w.]+)\"/) || [\"\", \"\"])[1]) {\n    case \"boolean\":\n      oval = parsexmlbool(val);\n      break;\n\n    case \"i2\":\n    case \"int\":\n      oval = parseInt(val, 10);\n      break;\n\n    case \"r4\":\n    case \"float\":\n      oval = parseFloat(val);\n      break;\n\n    case \"date\":\n    case \"dateTime.tz\":\n      oval = parseDate(val);\n      break;\n\n    case \"i8\":\n    case \"string\":\n    case \"fixed\":\n    case \"uuid\":\n    case \"bin.base64\":\n      break;\n\n    default:\n      throw new Error(\"bad custprop:\" + cp[0]);\n  }\n\n  Custprops[unescapexml(key)] = oval;\n}\n\nfunction safe_format_xlml(cell\n/*:Cell*/\n, nf, o) {\n  if (cell.t === 'z') return;\n  if (!o || o.cellText !== false) try {\n    if (cell.t === 'e') {\n      cell.w = cell.w || BErr[cell.v];\n    } else if (nf === \"General\") {\n      if (cell.t === 'n') {\n        if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);else cell.w = SSF_general_num(cell.v);\n      } else cell.w = SSF_general(cell.v);\n    } else cell.w = xlml_format(nf || \"General\", cell.v);\n  } catch (e) {\n    if (o.WTF) throw e;\n  }\n\n  try {\n    var z = XLMLFormatMap[nf] || nf || \"General\";\n    if (o.cellNF) cell.z = z;\n\n    if (o.cellDates && cell.t == 'n' && fmt_is_date(z)) {\n      var _d = SSF_parse_date_code(cell.v);\n\n      if (_d) {\n        cell.t = 'd';\n        cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n      }\n    }\n  } catch (e) {\n    if (o.WTF) throw e;\n  }\n}\n\nfunction process_style_xlml(styles, stag, opts) {\n  if (opts.cellStyles) {\n    if (stag.Interior) {\n      var I = stag.Interior;\n      if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n    }\n  }\n\n  styles[stag.ID] = stag;\n}\n/* TODO: there must exist some form of OSP-blessed spec */\n\n\nfunction parse_xlml_data(xml, ss, data, cell\n/*:any*/\n, base, styles, csty, row, arrayf, o) {\n  var nf = \"General\",\n      sid = cell.StyleID,\n      S = {};\n  o = o || {};\n  var interiors = [];\n  var i = 0;\n  if (sid === undefined && row) sid = row.StyleID;\n  if (sid === undefined && csty) sid = csty.StyleID;\n\n  while (styles[sid] !== undefined) {\n    if (styles[sid].nf) nf = styles[sid].nf;\n    if (styles[sid].Interior) interiors.push(styles[sid].Interior);\n    if (!styles[sid].Parent) break;\n    sid = styles[sid].Parent;\n  }\n\n  switch (data.Type) {\n    case 'Boolean':\n      cell.t = 'b';\n      cell.v = parsexmlbool(xml);\n      break;\n\n    case 'String':\n      cell.t = 's';\n      cell.r = xlml_fixstr(unescapexml(xml));\n      cell.v = xml.indexOf(\"<\") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, \"\") : cell.r; // todo: BR etc\n\n      break;\n\n    case 'DateTime':\n      if (xml.slice(-1) != \"Z\") xml += \"Z\";\n      cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n      if (cell.v !== cell.v) cell.v = unescapexml(xml);else if (cell.v < 60) cell.v = cell.v - 1;\n      if (!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n\n    /* falls through */\n\n    case 'Number':\n      if (cell.v === undefined) cell.v = +xml;\n      if (!cell.t) cell.t = 'n';\n      break;\n\n    case 'Error':\n      cell.t = 'e';\n      cell.v = RBErr[xml];\n      if (o.cellText !== false) cell.w = xml;\n      break;\n\n    default:\n      if (xml == \"\" && ss == \"\") {\n        cell.t = 'z';\n      } else {\n        cell.t = 's';\n        cell.v = xlml_fixstr(ss || xml);\n      }\n\n      break;\n  }\n\n  safe_format_xlml(cell, nf, o);\n\n  if (o.cellFormula !== false) {\n    if (cell.Formula) {\n      var fstr = unescapexml(cell.Formula);\n      /* strictly speaking, the leading = is required but some writers omit */\n\n      if (fstr.charCodeAt(0) == 61\n      /* = */\n      ) fstr = fstr.slice(1);\n      cell.f = rc_to_a1(fstr, base);\n      delete cell.Formula;\n      if (cell.ArrayRange == \"RC\") cell.F = rc_to_a1(\"RC:RC\", base);else if (cell.ArrayRange) {\n        cell.F = rc_to_a1(cell.ArrayRange, base);\n        arrayf.push([safe_decode_range(cell.F), cell.F]);\n      }\n    } else {\n      for (i = 0; i < arrayf.length; ++i) {\n        if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];\n      }\n    }\n  }\n\n  if (o.cellStyles) {\n    interiors.forEach(function (x) {\n      if (!S.patternType && x.patternType) S.patternType = x.patternType;\n    });\n    cell.s = S;\n  }\n\n  if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;\n}\n\nfunction xlml_prefix_dname(dname) {\n  return XLSLblBuiltIn.indexOf(\"_xlnm.\" + dname) > -1 ? \"_xlnm.\" + dname : dname;\n}\n\nfunction xlml_clean_comment(comment\n/*:any*/\n) {\n  comment.t = comment.v || \"\";\n  comment.t = comment.t.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  comment.v = comment.w = comment.ixfe = undefined;\n}\n/* TODO: Everything */\n\n\nfunction parse_xlml_xml(d, _opts)\n/*:Workbook*/\n{\n  var opts = _opts || {};\n  make_ssf();\n  var str = debom(xlml_normalize(d));\n\n  if (opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {\n    if (typeof $cptable !== 'undefined') str = $cptable.utils.decode(65001, char_codes(str));else str = utf8read(str);\n  }\n\n  var opening = str.slice(0, 1024).toLowerCase(),\n      ishtml = false;\n  opening = opening.replace(/\".*?\"/g, \"\");\n\n  if ((opening.indexOf(\">\") & 1023) > Math.min(opening.indexOf(\",\") & 1023, opening.indexOf(\";\") & 1023)) {\n    var _o = dup(opts);\n\n    _o.type = \"string\";\n    return PRN.to_workbook(str, _o);\n  }\n\n  if (opening.indexOf(\"<?xml\") == -1) [\"html\", \"table\", \"head\", \"meta\", \"script\", \"style\", \"div\"].forEach(function (tag) {\n    if (opening.indexOf(\"<\" + tag) >= 0) ishtml = true;\n  });\n  if (ishtml) return html_to_workbook(str, opts);\n  XLMLFormatMap = {\n    \"General Number\": \"General\",\n    \"General Date\": table_fmt[22],\n    \"Long Date\": \"dddd, mmmm dd, yyyy\",\n    \"Medium Date\": table_fmt[15],\n    \"Short Date\": table_fmt[14],\n    \"Long Time\": table_fmt[19],\n    \"Medium Time\": table_fmt[18],\n    \"Short Time\": table_fmt[20],\n    \"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    \"Fixed\": table_fmt[2],\n    \"Standard\": table_fmt[4],\n    \"Percent\": table_fmt[10],\n    \"Scientific\": table_fmt[11],\n    \"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n    \"True/False\": '\"True\";\"True\";\"False\";@',\n    \"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n  }\n  /*:any*/\n  ;\n  var Rn;\n  var state = [],\n      tmp;\n  if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n  var sheets = {},\n      sheetnames\n  /*:Array<string>*/\n  = [],\n      cursheet\n  /*:Worksheet*/\n  = opts.dense ? [] : {},\n      sheetname = \"\";\n  var cell = {}\n  /*:any*/\n  ,\n      row = {}; // eslint-disable-line no-unused-vars\n\n  var dtag = xlml_parsexmltag('<Data ss:Type=\"String\">'),\n      didx = 0;\n  var c = 0,\n      r = 0;\n  var refguess\n  /*:Range*/\n  = {\n    s: {\n      r: 2000000,\n      c: 2000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var styles = {},\n      stag = {};\n  var ss = \"\",\n      fidx = 0;\n  var merges\n  /*:Array<Range>*/\n  = [];\n  var Props = {},\n      Custprops = {},\n      pidx = 0,\n      cp = [];\n  var comments\n  /*:Array<Comment>*/\n  = [],\n      comment\n  /*:Comment*/\n  = {}\n  /*:any*/\n  ;\n  var cstys = [],\n      csty,\n      seencol = false;\n  var arrayf\n  /*:Array<[Range, string]>*/\n  = [];\n  var rowinfo\n  /*:Array<RowInfo>*/\n  = [],\n      rowobj = {},\n      cc = 0,\n      rr = 0;\n  var Workbook\n  /*:WBWBProps*/\n  = {\n    Sheets: [],\n    WBProps: {\n      date1904: false\n    }\n  }\n  /*:any*/\n  ,\n      wsprops = {};\n  xlmlregex.lastIndex = 0;\n  str = str.replace(/<!--([\\s\\S]*?)-->/mg, \"\");\n  var raw_Rn3 = \"\";\n\n  while (Rn = xlmlregex.exec(str)) {\n    switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {\n      case 'data'\n      /*case 'Data'*/\n      :\n        if (raw_Rn3 == \"data\") {\n          if (Rn[1] === '/') {\n            if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n          } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);\n\n          break;\n        }\n\n        if (state[state.length - 1][1]) break;\n        if (Rn[1] === '/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] ==\n        /*\"Comment\"*/\n        \"comment\" ? comment : cell, {\n          c: c,\n          r: r\n        }, styles, cstys[c], row, arrayf, opts);else {\n          ss = \"\";\n          dtag = xlml_parsexmltag(Rn[0]);\n          didx = Rn.index + Rn[0].length;\n        }\n        break;\n\n      case 'cell'\n      /*case 'Cell'*/\n      :\n        if (Rn[1] === '/') {\n          if (comments.length > 0) cell.c = comments;\n\n          if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== void 0) {\n            if (opts.dense) {\n              if (!cursheet[r]) cursheet[r] = [];\n              cursheet[r][c] = cell;\n            } else cursheet[encode_col(c) + encode_row(r)] = cell;\n          }\n\n          if (cell.HRef) {\n            cell.l = {\n              Target: unescapexml(cell.HRef)\n            }\n            /*:any*/\n            ;\n            if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;\n            delete cell.HRef;\n            delete cell.HRefScreenTip;\n          }\n\n          if (cell.MergeAcross || cell.MergeDown) {\n            cc = c + (parseInt(cell.MergeAcross, 10) | 0);\n            rr = r + (parseInt(cell.MergeDown, 10) | 0);\n            if (cc > c || rr > r) merges.push({\n              s: {\n                c: c,\n                r: r\n              },\n              e: {\n                c: cc,\n                r: rr\n              }\n            });\n          }\n\n          if (!opts.sheetStubs) {\n            if (cell.MergeAcross) c = cc + 1;else ++c;\n          } else if (cell.MergeAcross || cell.MergeDown) {\n            /*:: if(!cc) cc = 0; if(!rr) rr = 0; */\n            for (var cma = c; cma <= cc; ++cma) {\n              for (var cmd = r; cmd <= rr; ++cmd) {\n                if (cma > c || cmd > r) {\n                  if (opts.dense) {\n                    if (!cursheet[cmd]) cursheet[cmd] = [];\n                    cursheet[cmd][cma] = {\n                      t: 'z'\n                    };\n                  } else cursheet[encode_col(cma) + encode_row(cmd)] = {\n                    t: 'z'\n                  };\n                }\n              }\n            }\n\n            c = cc + 1;\n          } else ++c;\n        } else {\n          cell = xlml_parsexmltagobj(Rn[0]);\n          if (cell.Index) c = +cell.Index - 1;\n          if (c < refguess.s.c) refguess.s.c = c;\n          if (c > refguess.e.c) refguess.e.c = c;\n          if (Rn[0].slice(-2) === \"/>\") ++c;\n          comments = [];\n        }\n\n        break;\n\n      case 'row'\n      /*case 'Row'*/\n      :\n        if (Rn[1] === '/' || Rn[0].slice(-2) === \"/>\") {\n          if (r < refguess.s.r) refguess.s.r = r;\n          if (r > refguess.e.r) refguess.e.r = r;\n\n          if (Rn[0].slice(-2) === \"/>\") {\n            row = xlml_parsexmltag(Rn[0]);\n            if (row.Index) r = +row.Index - 1;\n          }\n\n          c = 0;\n          ++r;\n        } else {\n          row = xlml_parsexmltag(Rn[0]);\n          if (row.Index) r = +row.Index - 1;\n          rowobj = {};\n\n          if (row.AutoFitHeight == \"0\" || row.Height) {\n            rowobj.hpx = parseInt(row.Height, 10);\n            rowobj.hpt = px2pt(rowobj.hpx);\n            rowinfo[r] = rowobj;\n          }\n\n          if (row.Hidden == \"1\") {\n            rowobj.hidden = true;\n            rowinfo[r] = rowobj;\n          }\n        }\n\n        break;\n\n      case 'worksheet'\n      /*case 'Worksheet'*/\n      :\n        /* TODO: read range from FullRows/FullColumns */\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n          sheetnames.push(sheetname);\n\n          if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {\n            cursheet[\"!ref\"] = encode_range(refguess);\n\n            if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {\n              cursheet[\"!fullref\"] = cursheet[\"!ref\"];\n              refguess.e.r = opts.sheetRows - 1;\n              cursheet[\"!ref\"] = encode_range(refguess);\n            }\n          }\n\n          if (merges.length) cursheet[\"!merges\"] = merges;\n          if (cstys.length > 0) cursheet[\"!cols\"] = cstys;\n          if (rowinfo.length > 0) cursheet[\"!rows\"] = rowinfo;\n          sheets[sheetname] = cursheet;\n        } else {\n          refguess = {\n            s: {\n              r: 2000000,\n              c: 2000000\n            },\n            e: {\n              r: 0,\n              c: 0\n            }\n          };\n          r = c = 0;\n          state.push([Rn[3], false]);\n          tmp = xlml_parsexmltag(Rn[0]);\n          sheetname = unescapexml(tmp.Name);\n          cursheet = opts.dense ? [] : {};\n          merges = [];\n          arrayf = [];\n          rowinfo = [];\n          wsprops = {\n            name: sheetname,\n            Hidden: 0\n          };\n          Workbook.Sheets.push(wsprops);\n        }\n\n        break;\n\n      case 'table'\n      /*case 'Table'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n        } else if (Rn[0].slice(-2) == \"/>\") break;else {\n          state.push([Rn[3], false]);\n          cstys = [];\n          seencol = false;\n        }\n\n        break;\n\n      case 'style'\n      /*case 'Style'*/\n      :\n        if (Rn[1] === '/') process_style_xlml(styles, stag, opts);else stag = xlml_parsexmltag(Rn[0]);\n        break;\n\n      case 'numberformat'\n      /*case 'NumberFormat'*/\n      :\n        stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || \"General\");\n        if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];\n\n        for (var ssfidx = 0; ssfidx != 0x188; ++ssfidx) {\n          if (table_fmt[ssfidx] == stag.nf) break;\n        }\n\n        if (ssfidx == 0x188) for (ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) {\n          if (table_fmt[ssfidx] == null) {\n            SSF__load(stag.nf, ssfidx);\n            break;\n          }\n        }\n        break;\n\n      case 'column'\n      /*case 'Column'*/\n      :\n        if (state[state.length - 1][0] !==\n        /*'Table'*/\n        'table') break;\n        if (Rn[1] === '/') break;\n        csty = xlml_parsexmltag(Rn[0]);\n\n        if (csty.Hidden) {\n          csty.hidden = true;\n          delete csty.Hidden;\n        }\n\n        if (csty.Width) csty.wpx = parseInt(csty.Width, 10);\n\n        if (!seencol && csty.wpx > 10) {\n          seencol = true;\n          MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);\n\n          for (var _col = 0; _col < cstys.length; ++_col) {\n            if (cstys[_col]) process_col(cstys[_col]);\n          }\n        }\n\n        if (seencol) process_col(csty);\n        cstys[csty.Index - 1 || cstys.length] = csty;\n\n        for (var i = 0; i < +csty.Span; ++i) {\n          cstys[cstys.length] = dup(csty);\n        }\n\n        break;\n\n      case 'namedrange'\n      /*case 'NamedRange'*/\n      :\n        if (Rn[1] === '/') break;\n        if (!Workbook.Names) Workbook.Names = [];\n\n        var _NamedRange = parsexmltag(Rn[0]);\n\n        var _DefinedName\n        /*:DefinedName*/\n        = {\n          Name: xlml_prefix_dname(_NamedRange.Name),\n          Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {\n            r: 0,\n            c: 0\n          })\n        }\n        /*:any*/\n        ;\n        if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;\n        /*:: if(Workbook.Names) */\n\n        Workbook.Names.push(_DefinedName);\n        break;\n\n      case 'namedcell'\n      /*case 'NamedCell'*/\n      :\n        break;\n\n      case 'b'\n      /*case 'B'*/\n      :\n        break;\n\n      case 'i'\n      /*case 'I'*/\n      :\n        break;\n\n      case 'u'\n      /*case 'U'*/\n      :\n        break;\n\n      case 's'\n      /*case 'S'*/\n      :\n        break;\n\n      case 'em'\n      /*case 'EM'*/\n      :\n        break;\n\n      case 'h2'\n      /*case 'H2'*/\n      :\n        break;\n\n      case 'h3'\n      /*case 'H3'*/\n      :\n        break;\n\n      case 'sub'\n      /*case 'Sub'*/\n      :\n        break;\n\n      case 'sup'\n      /*case 'Sup'*/\n      :\n        break;\n\n      case 'span'\n      /*case 'Span'*/\n      :\n        break;\n\n      case 'alignment'\n      /*case 'Alignment'*/\n      :\n        break;\n\n      case 'borders'\n      /*case 'Borders'*/\n      :\n        break;\n\n      case 'border'\n      /*case 'Border'*/\n      :\n        break;\n\n      case 'font'\n      /*case 'Font'*/\n      :\n        if (Rn[0].slice(-2) === \"/>\") break;else if (Rn[1] === \"/\") ss += str.slice(fidx, Rn.index);else fidx = Rn.index + Rn[0].length;\n        break;\n\n      case 'interior'\n      /*case 'Interior'*/\n      :\n        if (!opts.cellStyles) break;\n        stag.Interior = xlml_parsexmltag(Rn[0]);\n        break;\n\n      case 'protection'\n      /*case 'Protection'*/\n      :\n        break;\n\n      case 'author'\n      /*case 'Author'*/\n      :\n      case 'title'\n      /*case 'Title'*/\n      :\n      case 'description'\n      /*case 'Description'*/\n      :\n      case 'created'\n      /*case 'Created'*/\n      :\n      case 'keywords'\n      /*case 'Keywords'*/\n      :\n      case 'subject'\n      /*case 'Subject'*/\n      :\n      case 'category'\n      /*case 'Category'*/\n      :\n      case 'company'\n      /*case 'Company'*/\n      :\n      case 'lastauthor'\n      /*case 'LastAuthor'*/\n      :\n      case 'lastsaved'\n      /*case 'LastSaved'*/\n      :\n      case 'lastprinted'\n      /*case 'LastPrinted'*/\n      :\n      case 'version'\n      /*case 'Version'*/\n      :\n      case 'revision'\n      /*case 'Revision'*/\n      :\n      case 'totaltime'\n      /*case 'TotalTime'*/\n      :\n      case 'hyperlinkbase'\n      /*case 'HyperlinkBase'*/\n      :\n      case 'manager'\n      /*case 'Manager'*/\n      :\n      case 'contentstatus'\n      /*case 'ContentStatus'*/\n      :\n      case 'identifier'\n      /*case 'Identifier'*/\n      :\n      case 'language'\n      /*case 'Language'*/\n      :\n      case 'appname'\n      /*case 'AppName'*/\n      :\n        if (Rn[0].slice(-2) === \"/>\") break;else if (Rn[1] === \"/\") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));else pidx = Rn.index + Rn[0].length;\n        break;\n\n      case 'paragraphs'\n      /*case 'Paragraphs'*/\n      :\n        break;\n\n      case 'styles'\n      /*case 'Styles'*/\n      :\n      case 'workbook'\n      /*case 'Workbook'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n        } else state.push([Rn[3], false]);\n\n        break;\n\n      case 'comment'\n      /*case 'Comment'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n          xlml_clean_comment(comment);\n          comments.push(comment);\n        } else {\n          state.push([Rn[3], false]);\n          tmp = xlml_parsexmltag(Rn[0]);\n          comment = {\n            a: tmp.Author\n          }\n          /*:any*/\n          ;\n        }\n\n        break;\n\n      case 'autofilter'\n      /*case 'AutoFilter'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          var AutoFilter = xlml_parsexmltag(Rn[0]);\n          cursheet['!autofilter'] = {\n            ref: rc_to_a1(AutoFilter.Range).replace(/\\$/g, \"\")\n          };\n          state.push([Rn[3], true]);\n        }\n\n        break;\n\n      case 'name'\n      /*case 'Name'*/\n      :\n        break;\n\n      case 'datavalidation'\n      /*case 'DataValidation'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n        } else {\n          if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);\n        }\n\n        break;\n\n      case 'pixelsperinch'\n      /*case 'PixelsPerInch'*/\n      :\n        break;\n\n      case 'componentoptions'\n      /*case 'ComponentOptions'*/\n      :\n      case 'documentproperties'\n      /*case 'DocumentProperties'*/\n      :\n      case 'customdocumentproperties'\n      /*case 'CustomDocumentProperties'*/\n      :\n      case 'officedocumentsettings'\n      /*case 'OfficeDocumentSettings'*/\n      :\n      case 'pivottable'\n      /*case 'PivotTable'*/\n      :\n      case 'pivotcache'\n      /*case 'PivotCache'*/\n      :\n      case 'names'\n      /*case 'Names'*/\n      :\n      case 'mapinfo'\n      /*case 'MapInfo'*/\n      :\n      case 'pagebreaks'\n      /*case 'PageBreaks'*/\n      :\n      case 'querytable'\n      /*case 'QueryTable'*/\n      :\n      case 'sorting'\n      /*case 'Sorting'*/\n      :\n      case 'schema'\n      /*case 'Schema'*/\n      : //case 'data' /*case 'data'*/:\n\n      case 'conditionalformatting'\n      /*case 'ConditionalFormatting'*/\n      :\n      case 'smarttagtype'\n      /*case 'SmartTagType'*/\n      :\n      case 'smarttags'\n      /*case 'SmartTags'*/\n      :\n      case 'excelworkbook'\n      /*case 'ExcelWorkbook'*/\n      :\n      case 'workbookoptions'\n      /*case 'WorkbookOptions'*/\n      :\n      case 'worksheetoptions'\n      /*case 'WorksheetOptions'*/\n      :\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);\n\n        break;\n\n      case 'null'\n      /*case 'Null'*/\n      :\n        break;\n\n      default:\n        /* FODS file root is <office:document> */\n        if (state.length == 0 && Rn[3] == \"document\") return parse_fods(str, opts);\n        /* UOS file root is <uof:UOF> */\n\n        if (state.length == 0 && Rn[3] == \"uof\"\n        /*\"UOF\"*/\n        ) return parse_fods(str, opts);\n        var seen = true;\n\n        switch (state[state.length - 1][0]) {\n          /* OfficeDocumentSettings */\n          case 'officedocumentsettings'\n          /*case 'OfficeDocumentSettings'*/\n          :\n            switch (Rn[3]) {\n              case 'allowpng'\n              /*case 'AllowPNG'*/\n              :\n                break;\n\n              case 'removepersonalinformation'\n              /*case 'RemovePersonalInformation'*/\n              :\n                break;\n\n              case 'downloadcomponents'\n              /*case 'DownloadComponents'*/\n              :\n                break;\n\n              case 'locationofcomponents'\n              /*case 'LocationOfComponents'*/\n              :\n                break;\n\n              case 'colors'\n              /*case 'Colors'*/\n              :\n                break;\n\n              case 'color'\n              /*case 'Color'*/\n              :\n                break;\n\n              case 'index'\n              /*case 'Index'*/\n              :\n                break;\n\n              case 'rgb'\n              /*case 'RGB'*/\n              :\n                break;\n\n              case 'targetscreensize'\n              /*case 'TargetScreenSize'*/\n              :\n                break;\n\n              case 'readonlyrecommended'\n              /*case 'ReadOnlyRecommended'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* ComponentOptions */\n\n          case 'componentoptions'\n          /*case 'ComponentOptions'*/\n          :\n            switch (Rn[3]) {\n              case 'toolbar'\n              /*case 'Toolbar'*/\n              :\n                break;\n\n              case 'hideofficelogo'\n              /*case 'HideOfficeLogo'*/\n              :\n                break;\n\n              case 'spreadsheetautofit'\n              /*case 'SpreadsheetAutoFit'*/\n              :\n                break;\n\n              case 'label'\n              /*case 'Label'*/\n              :\n                break;\n\n              case 'caption'\n              /*case 'Caption'*/\n              :\n                break;\n\n              case 'maxheight'\n              /*case 'MaxHeight'*/\n              :\n                break;\n\n              case 'maxwidth'\n              /*case 'MaxWidth'*/\n              :\n                break;\n\n              case 'nextsheetnumber'\n              /*case 'NextSheetNumber'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* ExcelWorkbook */\n\n          case 'excelworkbook'\n          /*case 'ExcelWorkbook'*/\n          :\n            switch (Rn[3]) {\n              case 'date1904'\n              /*case 'Date1904'*/\n              :\n                /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */\n                Workbook.WBProps.date1904 = true;\n                break;\n\n              case 'windowheight'\n              /*case 'WindowHeight'*/\n              :\n                break;\n\n              case 'windowwidth'\n              /*case 'WindowWidth'*/\n              :\n                break;\n\n              case 'windowtopx'\n              /*case 'WindowTopX'*/\n              :\n                break;\n\n              case 'windowtopy'\n              /*case 'WindowTopY'*/\n              :\n                break;\n\n              case 'tabratio'\n              /*case 'TabRatio'*/\n              :\n                break;\n\n              case 'protectstructure'\n              /*case 'ProtectStructure'*/\n              :\n                break;\n\n              case 'protectwindow'\n              /*case 'ProtectWindow'*/\n              :\n                break;\n\n              case 'protectwindows'\n              /*case 'ProtectWindows'*/\n              :\n                break;\n\n              case 'activesheet'\n              /*case 'ActiveSheet'*/\n              :\n                break;\n\n              case 'displayinknotes'\n              /*case 'DisplayInkNotes'*/\n              :\n                break;\n\n              case 'firstvisiblesheet'\n              /*case 'FirstVisibleSheet'*/\n              :\n                break;\n\n              case 'supbook'\n              /*case 'SupBook'*/\n              :\n                break;\n\n              case 'sheetname'\n              /*case 'SheetName'*/\n              :\n                break;\n\n              case 'sheetindex'\n              /*case 'SheetIndex'*/\n              :\n                break;\n\n              case 'sheetindexfirst'\n              /*case 'SheetIndexFirst'*/\n              :\n                break;\n\n              case 'sheetindexlast'\n              /*case 'SheetIndexLast'*/\n              :\n                break;\n\n              case 'dll'\n              /*case 'Dll'*/\n              :\n                break;\n\n              case 'acceptlabelsinformulas'\n              /*case 'AcceptLabelsInFormulas'*/\n              :\n                break;\n\n              case 'donotsavelinkvalues'\n              /*case 'DoNotSaveLinkValues'*/\n              :\n                break;\n\n              case 'iteration'\n              /*case 'Iteration'*/\n              :\n                break;\n\n              case 'maxiterations'\n              /*case 'MaxIterations'*/\n              :\n                break;\n\n              case 'maxchange'\n              /*case 'MaxChange'*/\n              :\n                break;\n\n              case 'path'\n              /*case 'Path'*/\n              :\n                break;\n\n              case 'xct'\n              /*case 'Xct'*/\n              :\n                break;\n\n              case 'count'\n              /*case 'Count'*/\n              :\n                break;\n\n              case 'selectedsheets'\n              /*case 'SelectedSheets'*/\n              :\n                break;\n\n              case 'calculation'\n              /*case 'Calculation'*/\n              :\n                break;\n\n              case 'uncalced'\n              /*case 'Uncalced'*/\n              :\n                break;\n\n              case 'startupprompt'\n              /*case 'StartupPrompt'*/\n              :\n                break;\n\n              case 'crn'\n              /*case 'Crn'*/\n              :\n                break;\n\n              case 'externname'\n              /*case 'ExternName'*/\n              :\n                break;\n\n              case 'formula'\n              /*case 'Formula'*/\n              :\n                break;\n\n              case 'colfirst'\n              /*case 'ColFirst'*/\n              :\n                break;\n\n              case 'collast'\n              /*case 'ColLast'*/\n              :\n                break;\n\n              case 'wantadvise'\n              /*case 'WantAdvise'*/\n              :\n                break;\n\n              case 'boolean'\n              /*case 'Boolean'*/\n              :\n                break;\n\n              case 'error'\n              /*case 'Error'*/\n              :\n                break;\n\n              case 'text'\n              /*case 'Text'*/\n              :\n                break;\n\n              case 'ole'\n              /*case 'OLE'*/\n              :\n                break;\n\n              case 'noautorecover'\n              /*case 'NoAutoRecover'*/\n              :\n                break;\n\n              case 'publishobjects'\n              /*case 'PublishObjects'*/\n              :\n                break;\n\n              case 'donotcalculatebeforesave'\n              /*case 'DoNotCalculateBeforeSave'*/\n              :\n                break;\n\n              case 'number'\n              /*case 'Number'*/\n              :\n                break;\n\n              case 'refmoder1c1'\n              /*case 'RefModeR1C1'*/\n              :\n                break;\n\n              case 'embedsavesmarttags'\n              /*case 'EmbedSaveSmartTags'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* WorkbookOptions */\n\n          case 'workbookoptions'\n          /*case 'WorkbookOptions'*/\n          :\n            switch (Rn[3]) {\n              case 'owcversion'\n              /*case 'OWCVersion'*/\n              :\n                break;\n\n              case 'height'\n              /*case 'Height'*/\n              :\n                break;\n\n              case 'width'\n              /*case 'Width'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* WorksheetOptions */\n\n          case 'worksheetoptions'\n          /*case 'WorksheetOptions'*/\n          :\n            switch (Rn[3]) {\n              case 'visible'\n              /*case 'Visible'*/\n              :\n                if (Rn[0].slice(-2) === \"/>\") {\n                  /* empty */\n                } else if (Rn[1] === \"/\") switch (str.slice(pidx, Rn.index)) {\n                  case \"SheetHidden\":\n                    wsprops.Hidden = 1;\n                    break;\n\n                  case \"SheetVeryHidden\":\n                    wsprops.Hidden = 2;\n                    break;\n                } else pidx = Rn.index + Rn[0].length;\n\n                break;\n\n              case 'header'\n              /*case 'Header'*/\n              :\n                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');\n                if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].header = +parsexmltag(Rn[0]).Margin;\n                break;\n\n              case 'footer'\n              /*case 'Footer'*/\n              :\n                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');\n                if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].footer = +parsexmltag(Rn[0]).Margin;\n                break;\n\n              case 'pagemargins'\n              /*case 'PageMargins'*/\n              :\n                var pagemargins = parsexmltag(Rn[0]);\n                if (!cursheet['!margins']) default_margins(cursheet['!margins'] = {}, 'xlml');\n                if (!isNaN(+pagemargins.Top)) cursheet['!margins'].top = +pagemargins.Top;\n                if (!isNaN(+pagemargins.Left)) cursheet['!margins'].left = +pagemargins.Left;\n                if (!isNaN(+pagemargins.Right)) cursheet['!margins'].right = +pagemargins.Right;\n                if (!isNaN(+pagemargins.Bottom)) cursheet['!margins'].bottom = +pagemargins.Bottom;\n                break;\n\n              case 'displayrighttoleft'\n              /*case 'DisplayRightToLeft'*/\n              :\n                if (!Workbook.Views) Workbook.Views = [];\n                if (!Workbook.Views[0]) Workbook.Views[0] = {};\n                Workbook.Views[0].RTL = true;\n                break;\n\n              case 'freezepanes'\n              /*case 'FreezePanes'*/\n              :\n                break;\n\n              case 'frozennosplit'\n              /*case 'FrozenNoSplit'*/\n              :\n                break;\n\n              case 'splithorizontal'\n              /*case 'SplitHorizontal'*/\n              :\n              case 'splitvertical'\n              /*case 'SplitVertical'*/\n              :\n                break;\n\n              case 'donotdisplaygridlines'\n              /*case 'DoNotDisplayGridlines'*/\n              :\n                break;\n\n              case 'activerow'\n              /*case 'ActiveRow'*/\n              :\n                break;\n\n              case 'activecol'\n              /*case 'ActiveCol'*/\n              :\n                break;\n\n              case 'toprowbottompane'\n              /*case 'TopRowBottomPane'*/\n              :\n                break;\n\n              case 'leftcolumnrightpane'\n              /*case 'LeftColumnRightPane'*/\n              :\n                break;\n\n              case 'unsynced'\n              /*case 'Unsynced'*/\n              :\n                break;\n\n              case 'print'\n              /*case 'Print'*/\n              :\n                break;\n\n              case 'printerrors'\n              /*case 'PrintErrors'*/\n              :\n                break;\n\n              case 'panes'\n              /*case 'Panes'*/\n              :\n                break;\n\n              case 'scale'\n              /*case 'Scale'*/\n              :\n                break;\n\n              case 'pane'\n              /*case 'Pane'*/\n              :\n                break;\n\n              case 'number'\n              /*case 'Number'*/\n              :\n                break;\n\n              case 'layout'\n              /*case 'Layout'*/\n              :\n                break;\n\n              case 'pagesetup'\n              /*case 'PageSetup'*/\n              :\n                break;\n\n              case 'selected'\n              /*case 'Selected'*/\n              :\n                break;\n\n              case 'protectobjects'\n              /*case 'ProtectObjects'*/\n              :\n                break;\n\n              case 'enableselection'\n              /*case 'EnableSelection'*/\n              :\n                break;\n\n              case 'protectscenarios'\n              /*case 'ProtectScenarios'*/\n              :\n                break;\n\n              case 'validprinterinfo'\n              /*case 'ValidPrinterInfo'*/\n              :\n                break;\n\n              case 'horizontalresolution'\n              /*case 'HorizontalResolution'*/\n              :\n                break;\n\n              case 'verticalresolution'\n              /*case 'VerticalResolution'*/\n              :\n                break;\n\n              case 'numberofcopies'\n              /*case 'NumberofCopies'*/\n              :\n                break;\n\n              case 'activepane'\n              /*case 'ActivePane'*/\n              :\n                break;\n\n              case 'toprowvisible'\n              /*case 'TopRowVisible'*/\n              :\n                break;\n\n              case 'leftcolumnvisible'\n              /*case 'LeftColumnVisible'*/\n              :\n                break;\n\n              case 'fittopage'\n              /*case 'FitToPage'*/\n              :\n                break;\n\n              case 'rangeselection'\n              /*case 'RangeSelection'*/\n              :\n                break;\n\n              case 'papersizeindex'\n              /*case 'PaperSizeIndex'*/\n              :\n                break;\n\n              case 'pagelayoutzoom'\n              /*case 'PageLayoutZoom'*/\n              :\n                break;\n\n              case 'pagebreakzoom'\n              /*case 'PageBreakZoom'*/\n              :\n                break;\n\n              case 'filteron'\n              /*case 'FilterOn'*/\n              :\n                break;\n\n              case 'fitwidth'\n              /*case 'FitWidth'*/\n              :\n                break;\n\n              case 'fitheight'\n              /*case 'FitHeight'*/\n              :\n                break;\n\n              case 'commentslayout'\n              /*case 'CommentsLayout'*/\n              :\n                break;\n\n              case 'zoom'\n              /*case 'Zoom'*/\n              :\n                break;\n\n              case 'lefttoright'\n              /*case 'LeftToRight'*/\n              :\n                break;\n\n              case 'gridlines'\n              /*case 'Gridlines'*/\n              :\n                break;\n\n              case 'allowsort'\n              /*case 'AllowSort'*/\n              :\n                break;\n\n              case 'allowfilter'\n              /*case 'AllowFilter'*/\n              :\n                break;\n\n              case 'allowinsertrows'\n              /*case 'AllowInsertRows'*/\n              :\n                break;\n\n              case 'allowdeleterows'\n              /*case 'AllowDeleteRows'*/\n              :\n                break;\n\n              case 'allowinsertcols'\n              /*case 'AllowInsertCols'*/\n              :\n                break;\n\n              case 'allowdeletecols'\n              /*case 'AllowDeleteCols'*/\n              :\n                break;\n\n              case 'allowinserthyperlinks'\n              /*case 'AllowInsertHyperlinks'*/\n              :\n                break;\n\n              case 'allowformatcells'\n              /*case 'AllowFormatCells'*/\n              :\n                break;\n\n              case 'allowsizecols'\n              /*case 'AllowSizeCols'*/\n              :\n                break;\n\n              case 'allowsizerows'\n              /*case 'AllowSizeRows'*/\n              :\n                break;\n\n              case 'nosummaryrowsbelowdetail'\n              /*case 'NoSummaryRowsBelowDetail'*/\n              :\n                if (!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n                cursheet[\"!outline\"].above = true;\n                break;\n\n              case 'tabcolorindex'\n              /*case 'TabColorIndex'*/\n              :\n                break;\n\n              case 'donotdisplayheadings'\n              /*case 'DoNotDisplayHeadings'*/\n              :\n                break;\n\n              case 'showpagelayoutzoom'\n              /*case 'ShowPageLayoutZoom'*/\n              :\n                break;\n\n              case 'nosummarycolumnsrightdetail'\n              /*case 'NoSummaryColumnsRightDetail'*/\n              :\n                if (!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n                cursheet[\"!outline\"].left = true;\n                break;\n\n              case 'blackandwhite'\n              /*case 'BlackAndWhite'*/\n              :\n                break;\n\n              case 'donotdisplayzeros'\n              /*case 'DoNotDisplayZeros'*/\n              :\n                break;\n\n              case 'displaypagebreak'\n              /*case 'DisplayPageBreak'*/\n              :\n                break;\n\n              case 'rowcolheadings'\n              /*case 'RowColHeadings'*/\n              :\n                break;\n\n              case 'donotdisplayoutline'\n              /*case 'DoNotDisplayOutline'*/\n              :\n                break;\n\n              case 'noorientation'\n              /*case 'NoOrientation'*/\n              :\n                break;\n\n              case 'allowusepivottables'\n              /*case 'AllowUsePivotTables'*/\n              :\n                break;\n\n              case 'zeroheight'\n              /*case 'ZeroHeight'*/\n              :\n                break;\n\n              case 'viewablerange'\n              /*case 'ViewableRange'*/\n              :\n                break;\n\n              case 'selection'\n              /*case 'Selection'*/\n              :\n                break;\n\n              case 'protectcontents'\n              /*case 'ProtectContents'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* PivotTable */\n\n          case 'pivottable'\n          /*case 'PivotTable'*/\n          :\n          case 'pivotcache'\n          /*case 'PivotCache'*/\n          :\n            switch (Rn[3]) {\n              case 'immediateitemsondrop'\n              /*case 'ImmediateItemsOnDrop'*/\n              :\n                break;\n\n              case 'showpagemultipleitemlabel'\n              /*case 'ShowPageMultipleItemLabel'*/\n              :\n                break;\n\n              case 'compactrowindent'\n              /*case 'CompactRowIndent'*/\n              :\n                break;\n\n              case 'location'\n              /*case 'Location'*/\n              :\n                break;\n\n              case 'pivotfield'\n              /*case 'PivotField'*/\n              :\n                break;\n\n              case 'orientation'\n              /*case 'Orientation'*/\n              :\n                break;\n\n              case 'layoutform'\n              /*case 'LayoutForm'*/\n              :\n                break;\n\n              case 'layoutsubtotallocation'\n              /*case 'LayoutSubtotalLocation'*/\n              :\n                break;\n\n              case 'layoutcompactrow'\n              /*case 'LayoutCompactRow'*/\n              :\n                break;\n\n              case 'position'\n              /*case 'Position'*/\n              :\n                break;\n\n              case 'pivotitem'\n              /*case 'PivotItem'*/\n              :\n                break;\n\n              case 'datatype'\n              /*case 'DataType'*/\n              :\n                break;\n\n              case 'datafield'\n              /*case 'DataField'*/\n              :\n                break;\n\n              case 'sourcename'\n              /*case 'SourceName'*/\n              :\n                break;\n\n              case 'parentfield'\n              /*case 'ParentField'*/\n              :\n                break;\n\n              case 'ptlineitems'\n              /*case 'PTLineItems'*/\n              :\n                break;\n\n              case 'ptlineitem'\n              /*case 'PTLineItem'*/\n              :\n                break;\n\n              case 'countofsameitems'\n              /*case 'CountOfSameItems'*/\n              :\n                break;\n\n              case 'item'\n              /*case 'Item'*/\n              :\n                break;\n\n              case 'itemtype'\n              /*case 'ItemType'*/\n              :\n                break;\n\n              case 'ptsource'\n              /*case 'PTSource'*/\n              :\n                break;\n\n              case 'cacheindex'\n              /*case 'CacheIndex'*/\n              :\n                break;\n\n              case 'consolidationreference'\n              /*case 'ConsolidationReference'*/\n              :\n                break;\n\n              case 'filename'\n              /*case 'FileName'*/\n              :\n                break;\n\n              case 'reference'\n              /*case 'Reference'*/\n              :\n                break;\n\n              case 'nocolumngrand'\n              /*case 'NoColumnGrand'*/\n              :\n                break;\n\n              case 'norowgrand'\n              /*case 'NoRowGrand'*/\n              :\n                break;\n\n              case 'blanklineafteritems'\n              /*case 'BlankLineAfterItems'*/\n              :\n                break;\n\n              case 'hidden'\n              /*case 'Hidden'*/\n              :\n                break;\n\n              case 'subtotal'\n              /*case 'Subtotal'*/\n              :\n                break;\n\n              case 'basefield'\n              /*case 'BaseField'*/\n              :\n                break;\n\n              case 'mapchilditems'\n              /*case 'MapChildItems'*/\n              :\n                break;\n\n              case 'function'\n              /*case 'Function'*/\n              :\n                break;\n\n              case 'refreshonfileopen'\n              /*case 'RefreshOnFileOpen'*/\n              :\n                break;\n\n              case 'printsettitles'\n              /*case 'PrintSetTitles'*/\n              :\n                break;\n\n              case 'mergelabels'\n              /*case 'MergeLabels'*/\n              :\n                break;\n\n              case 'defaultversion'\n              /*case 'DefaultVersion'*/\n              :\n                break;\n\n              case 'refreshname'\n              /*case 'RefreshName'*/\n              :\n                break;\n\n              case 'refreshdate'\n              /*case 'RefreshDate'*/\n              :\n                break;\n\n              case 'refreshdatecopy'\n              /*case 'RefreshDateCopy'*/\n              :\n                break;\n\n              case 'versionlastrefresh'\n              /*case 'VersionLastRefresh'*/\n              :\n                break;\n\n              case 'versionlastupdate'\n              /*case 'VersionLastUpdate'*/\n              :\n                break;\n\n              case 'versionupdateablemin'\n              /*case 'VersionUpdateableMin'*/\n              :\n                break;\n\n              case 'versionrefreshablemin'\n              /*case 'VersionRefreshableMin'*/\n              :\n                break;\n\n              case 'calculation'\n              /*case 'Calculation'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* PageBreaks */\n\n          case 'pagebreaks'\n          /*case 'PageBreaks'*/\n          :\n            switch (Rn[3]) {\n              case 'colbreaks'\n              /*case 'ColBreaks'*/\n              :\n                break;\n\n              case 'colbreak'\n              /*case 'ColBreak'*/\n              :\n                break;\n\n              case 'rowbreaks'\n              /*case 'RowBreaks'*/\n              :\n                break;\n\n              case 'rowbreak'\n              /*case 'RowBreak'*/\n              :\n                break;\n\n              case 'colstart'\n              /*case 'ColStart'*/\n              :\n                break;\n\n              case 'colend'\n              /*case 'ColEnd'*/\n              :\n                break;\n\n              case 'rowend'\n              /*case 'RowEnd'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* AutoFilter */\n\n          case 'autofilter'\n          /*case 'AutoFilter'*/\n          :\n            switch (Rn[3]) {\n              case 'autofiltercolumn'\n              /*case 'AutoFilterColumn'*/\n              :\n                break;\n\n              case 'autofiltercondition'\n              /*case 'AutoFilterCondition'*/\n              :\n                break;\n\n              case 'autofilterand'\n              /*case 'AutoFilterAnd'*/\n              :\n                break;\n\n              case 'autofilteror'\n              /*case 'AutoFilterOr'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* QueryTable */\n\n          case 'querytable'\n          /*case 'QueryTable'*/\n          :\n            switch (Rn[3]) {\n              case 'id'\n              /*case 'Id'*/\n              :\n                break;\n\n              case 'autoformatfont'\n              /*case 'AutoFormatFont'*/\n              :\n                break;\n\n              case 'autoformatpattern'\n              /*case 'AutoFormatPattern'*/\n              :\n                break;\n\n              case 'querysource'\n              /*case 'QuerySource'*/\n              :\n                break;\n\n              case 'querytype'\n              /*case 'QueryType'*/\n              :\n                break;\n\n              case 'enableredirections'\n              /*case 'EnableRedirections'*/\n              :\n                break;\n\n              case 'refreshedinxl9'\n              /*case 'RefreshedInXl9'*/\n              :\n                break;\n\n              case 'urlstring'\n              /*case 'URLString'*/\n              :\n                break;\n\n              case 'htmltables'\n              /*case 'HTMLTables'*/\n              :\n                break;\n\n              case 'connection'\n              /*case 'Connection'*/\n              :\n                break;\n\n              case 'commandtext'\n              /*case 'CommandText'*/\n              :\n                break;\n\n              case 'refreshinfo'\n              /*case 'RefreshInfo'*/\n              :\n                break;\n\n              case 'notitles'\n              /*case 'NoTitles'*/\n              :\n                break;\n\n              case 'nextid'\n              /*case 'NextId'*/\n              :\n                break;\n\n              case 'columninfo'\n              /*case 'ColumnInfo'*/\n              :\n                break;\n\n              case 'overwritecells'\n              /*case 'OverwriteCells'*/\n              :\n                break;\n\n              case 'donotpromptforfile'\n              /*case 'DoNotPromptForFile'*/\n              :\n                break;\n\n              case 'textwizardsettings'\n              /*case 'TextWizardSettings'*/\n              :\n                break;\n\n              case 'source'\n              /*case 'Source'*/\n              :\n                break;\n\n              case 'number'\n              /*case 'Number'*/\n              :\n                break;\n\n              case 'decimal'\n              /*case 'Decimal'*/\n              :\n                break;\n\n              case 'thousandseparator'\n              /*case 'ThousandSeparator'*/\n              :\n                break;\n\n              case 'trailingminusnumbers'\n              /*case 'TrailingMinusNumbers'*/\n              :\n                break;\n\n              case 'formatsettings'\n              /*case 'FormatSettings'*/\n              :\n                break;\n\n              case 'fieldtype'\n              /*case 'FieldType'*/\n              :\n                break;\n\n              case 'delimiters'\n              /*case 'Delimiters'*/\n              :\n                break;\n\n              case 'tab'\n              /*case 'Tab'*/\n              :\n                break;\n\n              case 'comma'\n              /*case 'Comma'*/\n              :\n                break;\n\n              case 'autoformatname'\n              /*case 'AutoFormatName'*/\n              :\n                break;\n\n              case 'versionlastedit'\n              /*case 'VersionLastEdit'*/\n              :\n                break;\n\n              case 'versionlastrefresh'\n              /*case 'VersionLastRefresh'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          case 'datavalidation'\n          /*case 'DataValidation'*/\n          :\n            switch (Rn[3]) {\n              case 'range'\n              /*case 'Range'*/\n              :\n                break;\n\n              case 'type'\n              /*case 'Type'*/\n              :\n                break;\n\n              case 'min'\n              /*case 'Min'*/\n              :\n                break;\n\n              case 'max'\n              /*case 'Max'*/\n              :\n                break;\n\n              case 'sort'\n              /*case 'Sort'*/\n              :\n                break;\n\n              case 'descending'\n              /*case 'Descending'*/\n              :\n                break;\n\n              case 'order'\n              /*case 'Order'*/\n              :\n                break;\n\n              case 'casesensitive'\n              /*case 'CaseSensitive'*/\n              :\n                break;\n\n              case 'value'\n              /*case 'Value'*/\n              :\n                break;\n\n              case 'errorstyle'\n              /*case 'ErrorStyle'*/\n              :\n                break;\n\n              case 'errormessage'\n              /*case 'ErrorMessage'*/\n              :\n                break;\n\n              case 'errortitle'\n              /*case 'ErrorTitle'*/\n              :\n                break;\n\n              case 'inputmessage'\n              /*case 'InputMessage'*/\n              :\n                break;\n\n              case 'inputtitle'\n              /*case 'InputTitle'*/\n              :\n                break;\n\n              case 'combohide'\n              /*case 'ComboHide'*/\n              :\n                break;\n\n              case 'inputhide'\n              /*case 'InputHide'*/\n              :\n                break;\n\n              case 'condition'\n              /*case 'Condition'*/\n              :\n                break;\n\n              case 'qualifier'\n              /*case 'Qualifier'*/\n              :\n                break;\n\n              case 'useblank'\n              /*case 'UseBlank'*/\n              :\n                break;\n\n              case 'value1'\n              /*case 'Value1'*/\n              :\n                break;\n\n              case 'value2'\n              /*case 'Value2'*/\n              :\n                break;\n\n              case 'format'\n              /*case 'Format'*/\n              :\n                break;\n\n              case 'cellrangelist'\n              /*case 'CellRangeList'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          case 'sorting'\n          /*case 'Sorting'*/\n          :\n          case 'conditionalformatting'\n          /*case 'ConditionalFormatting'*/\n          :\n            switch (Rn[3]) {\n              case 'range'\n              /*case 'Range'*/\n              :\n                break;\n\n              case 'type'\n              /*case 'Type'*/\n              :\n                break;\n\n              case 'min'\n              /*case 'Min'*/\n              :\n                break;\n\n              case 'max'\n              /*case 'Max'*/\n              :\n                break;\n\n              case 'sort'\n              /*case 'Sort'*/\n              :\n                break;\n\n              case 'descending'\n              /*case 'Descending'*/\n              :\n                break;\n\n              case 'order'\n              /*case 'Order'*/\n              :\n                break;\n\n              case 'casesensitive'\n              /*case 'CaseSensitive'*/\n              :\n                break;\n\n              case 'value'\n              /*case 'Value'*/\n              :\n                break;\n\n              case 'errorstyle'\n              /*case 'ErrorStyle'*/\n              :\n                break;\n\n              case 'errormessage'\n              /*case 'ErrorMessage'*/\n              :\n                break;\n\n              case 'errortitle'\n              /*case 'ErrorTitle'*/\n              :\n                break;\n\n              case 'cellrangelist'\n              /*case 'CellRangeList'*/\n              :\n                break;\n\n              case 'inputmessage'\n              /*case 'InputMessage'*/\n              :\n                break;\n\n              case 'inputtitle'\n              /*case 'InputTitle'*/\n              :\n                break;\n\n              case 'combohide'\n              /*case 'ComboHide'*/\n              :\n                break;\n\n              case 'inputhide'\n              /*case 'InputHide'*/\n              :\n                break;\n\n              case 'condition'\n              /*case 'Condition'*/\n              :\n                break;\n\n              case 'qualifier'\n              /*case 'Qualifier'*/\n              :\n                break;\n\n              case 'useblank'\n              /*case 'UseBlank'*/\n              :\n                break;\n\n              case 'value1'\n              /*case 'Value1'*/\n              :\n                break;\n\n              case 'value2'\n              /*case 'Value2'*/\n              :\n                break;\n\n              case 'format'\n              /*case 'Format'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* MapInfo (schema) */\n\n          case 'mapinfo'\n          /*case 'MapInfo'*/\n          :\n          case 'schema'\n          /*case 'Schema'*/\n          :\n          case 'data'\n          /*case 'data'*/\n          :\n            switch (Rn[3]) {\n              case 'map'\n              /*case 'Map'*/\n              :\n                break;\n\n              case 'entry'\n              /*case 'Entry'*/\n              :\n                break;\n\n              case 'range'\n              /*case 'Range'*/\n              :\n                break;\n\n              case 'xpath'\n              /*case 'XPath'*/\n              :\n                break;\n\n              case 'field'\n              /*case 'Field'*/\n              :\n                break;\n\n              case 'xsdtype'\n              /*case 'XSDType'*/\n              :\n                break;\n\n              case 'filteron'\n              /*case 'FilterOn'*/\n              :\n                break;\n\n              case 'aggregate'\n              /*case 'Aggregate'*/\n              :\n                break;\n\n              case 'elementtype'\n              /*case 'ElementType'*/\n              :\n                break;\n\n              case 'attributetype'\n              /*case 'AttributeType'*/\n              :\n                break;\n\n              /* These are from xsd (XML Schema Definition) */\n\n              case 'schema'\n              /*case 'schema'*/\n              :\n              case 'element'\n              /*case 'element'*/\n              :\n              case 'complextype'\n              /*case 'complexType'*/\n              :\n              case 'datatype'\n              /*case 'datatype'*/\n              :\n              case 'all'\n              /*case 'all'*/\n              :\n              case 'attribute'\n              /*case 'attribute'*/\n              :\n              case 'extends'\n              /*case 'extends'*/\n              :\n                break;\n\n              case 'row'\n              /*case 'row'*/\n              :\n                break;\n\n              default:\n                seen = false;\n            }\n\n            break;\n\n          /* SmartTags (can be anything) */\n\n          case 'smarttags'\n          /*case 'SmartTags'*/\n          :\n            break;\n\n          default:\n            seen = false;\n            break;\n        }\n\n        if (seen) break;\n        /* CustomDocumentProperties */\n\n        if (Rn[3].match(/!\\[CDATA/)) break;\n        if (!state[state.length - 1][1]) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\n        if (state[state.length - 1][0] ===\n        /*'CustomDocumentProperties'*/\n        'customdocumentproperties') {\n          if (Rn[0].slice(-2) === \"/>\") break;else if (Rn[1] === \"/\") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));else {\n            cp = Rn;\n            pidx = Rn.index + Rn[0].length;\n          }\n          break;\n        }\n\n        if (opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n    }\n  }\n\n  var out = {}\n  /*:any*/\n  ;\n  if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n  out.SheetNames = sheetnames;\n  out.Workbook = Workbook;\n  out.SSF = dup(table_fmt);\n  out.Props = Props;\n  out.Custprops = Custprops;\n  out.bookType = \"xlml\";\n  return out;\n}\n\nfunction parse_xlml(data\n/*:RawBytes|string*/\n, opts)\n/*:Workbook*/\n{\n  fix_read_opts(opts = opts || {});\n\n  switch (opts.type || \"base64\") {\n    case \"base64\":\n      return parse_xlml_xml(Base64_decode(data), opts);\n\n    case \"binary\":\n    case \"buffer\":\n    case \"file\":\n      return parse_xlml_xml(data, opts);\n\n    case \"array\":\n      return parse_xlml_xml(a2s(data), opts);\n  }\n  /*:: throw new Error(\"unsupported type \" + opts.type); */\n\n}\n/* TODO */\n\n\nfunction write_props_xlml(wb\n/*:Workbook*/\n, opts)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n  /* DocumentProperties */\n\n  if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));\n  /* CustomDocumentProperties */\n\n  if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));\n  return o.join(\"\");\n}\n/* TODO */\n\n\nfunction write_wb_xlml(wb\n/*::, opts*/\n)\n/*:string*/\n{\n  /* OfficeDocumentSettings */\n\n  /* ExcelWorkbook */\n  if ((((wb || {}).Workbook || {}).WBProps || {}).date1904) return '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\"><Date1904/></ExcelWorkbook>';\n  return \"\";\n}\n/* TODO */\n\n\nfunction write_sty_xlml(wb, opts)\n/*:string*/\n{\n  /* Styles */\n  var styles\n  /*:Array<string>*/\n  = ['<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>'];\n  opts.cellXfs.forEach(function (xf, id) {\n    var payload\n    /*:Array<string>*/\n    = [];\n    payload.push(writextag('NumberFormat', null, {\n      \"ss:Format\": escapexml(table_fmt[xf.numFmtId])\n    }));\n    var o =\n    /*::(*/\n    {\n      \"ss:ID\": \"s\" + (21 + id)\n    }\n    /*:: :any)*/\n    ;\n    styles.push(writextag('Style', payload.join(\"\"), o));\n  });\n  return writextag(\"Styles\", styles.join(\"\"));\n}\n\nfunction write_name_xlml(n) {\n  return writextag(\"NamedRange\", null, {\n    \"ss:Name\": n.Name.slice(0, 6) == \"_xlnm.\" ? n.Name.slice(6) : n.Name,\n    \"ss:RefersTo\": \"=\" + a1_to_rc(n.Ref, {\n      r: 0,\n      c: 0\n    })\n  });\n}\n\nfunction write_names_xlml(wb\n/*::, opts*/\n)\n/*:string*/\n{\n  if (!((wb || {}).Workbook || {}).Names) return \"\";\n  /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error(\"unreachable\"); */\n\n  var names\n  /*:Array<any>*/\n  = wb.Workbook.Names;\n  var out\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < names.length; ++i) {\n    var n = names[i];\n    if (n.Sheet != null) continue;\n    if (n.Name.match(/^_xlfn\\./)) continue;\n    out.push(write_name_xlml(n));\n  }\n\n  return writextag(\"Names\", out.join(\"\"));\n}\n\nfunction write_ws_xlml_names(ws\n/*:Worksheet*/\n, opts, idx\n/*:number*/\n, wb\n/*:Workbook*/\n)\n/*:string*/\n{\n  if (!ws) return \"\";\n  if (!((wb || {}).Workbook || {}).Names) return \"\";\n  /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error(\"unreachable\"); */\n\n  var names\n  /*:Array<any>*/\n  = wb.Workbook.Names;\n  var out\n  /*:Array<string>*/\n  = [];\n\n  for (var i = 0; i < names.length; ++i) {\n    var n = names[i];\n    if (n.Sheet != idx) continue;\n    /*switch(n.Name) {\n    \tcase \"_\": continue;\n    }*/\n\n    if (n.Name.match(/^_xlfn\\./)) continue;\n    out.push(write_name_xlml(n));\n  }\n\n  return out.join(\"\");\n}\n/* WorksheetOptions */\n\n\nfunction write_ws_xlml_wsopts(ws\n/*:Worksheet*/\n, opts, idx\n/*:number*/\n, wb\n/*:Workbook*/\n)\n/*:string*/\n{\n  if (!ws) return \"\";\n  var o\n  /*:Array<string>*/\n  = [];\n  /* NOTE: spec technically allows any order, but stick with implied order */\n\n  /* FitToPage */\n\n  /* DoNotDisplayColHeaders */\n\n  /* DoNotDisplayRowHeaders */\n\n  /* ViewableRange */\n\n  /* Selection */\n\n  /* GridlineColor */\n\n  /* Name */\n\n  /* ExcelWorksheetType */\n\n  /* IntlMacro */\n\n  /* Unsynced */\n\n  /* Selected */\n\n  /* CodeName */\n\n  if (ws['!margins']) {\n    o.push(\"<PageSetup>\");\n    if (ws['!margins'].header) o.push(writextag(\"Header\", null, {\n      'x:Margin': ws['!margins'].header\n    }));\n    if (ws['!margins'].footer) o.push(writextag(\"Footer\", null, {\n      'x:Margin': ws['!margins'].footer\n    }));\n    o.push(writextag(\"PageMargins\", null, {\n      'x:Bottom': ws['!margins'].bottom || \"0.75\",\n      'x:Left': ws['!margins'].left || \"0.7\",\n      'x:Right': ws['!margins'].right || \"0.7\",\n      'x:Top': ws['!margins'].top || \"0.75\"\n    }));\n    o.push(\"</PageSetup>\");\n  }\n  /* PageSetup */\n\n  /* DisplayPageBreak */\n\n  /* TransitionExpressionEvaluation */\n\n  /* TransitionFormulaEntry */\n\n  /* Print */\n\n  /* Zoom */\n\n  /* PageLayoutZoom */\n\n  /* PageBreakZoom */\n\n  /* ShowPageBreakZoom */\n\n  /* DefaultRowHeight */\n\n  /* DefaultColumnWidth */\n\n  /* StandardWidth */\n\n\n  if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {\n    /* Visible */\n    if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag(\"Visible\", wb.Workbook.Sheets[idx].Hidden == 1 ? \"SheetHidden\" : \"SheetVeryHidden\", {}));else {\n      /* Selected */\n      for (var i = 0; i < idx; ++i) {\n        if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;\n      }\n\n      if (i == idx) o.push(\"<Selected/>\");\n    }\n  }\n  /* LeftColumnVisible */\n\n\n  if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o.push(\"<DisplayRightToLeft/>\");\n  /* GridlineColorIndex */\n\n  /* DisplayFormulas */\n\n  /* DoNotDisplayGridlines */\n\n  /* DoNotDisplayHeadings */\n\n  /* DoNotDisplayOutline */\n\n  /* ApplyAutomaticOutlineStyles */\n\n  /* NoSummaryRowsBelowDetail */\n\n  /* NoSummaryColumnsRightDetail */\n\n  /* DoNotDisplayZeros */\n\n  /* ActiveRow */\n\n  /* ActiveColumn */\n\n  /* FilterOn */\n\n  /* RangeSelection */\n\n  /* TopRowVisible */\n\n  /* TopRowBottomPane */\n\n  /* LeftColumnRightPane */\n\n  /* ActivePane */\n\n  /* SplitHorizontal */\n\n  /* SplitVertical */\n\n  /* FreezePanes */\n\n  /* FrozenNoSplit */\n\n  /* TabColorIndex */\n\n  /* Panes */\n\n  /* NOTE: Password not supported in XLML Format */\n\n  if (ws['!protect']) {\n    o.push(writetag(\"ProtectContents\", \"True\"));\n    if (ws['!protect'].objects) o.push(writetag(\"ProtectObjects\", \"True\"));\n    if (ws['!protect'].scenarios) o.push(writetag(\"ProtectScenarios\", \"True\"));\n    if (ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag(\"EnableSelection\", \"NoSelection\"));else if (ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag(\"EnableSelection\", \"UnlockedCells\"));\n    [[\"formatCells\", \"AllowFormatCells\"], [\"formatColumns\", \"AllowSizeCols\"], [\"formatRows\", \"AllowSizeRows\"], [\"insertColumns\", \"AllowInsertCols\"], [\"insertRows\", \"AllowInsertRows\"], [\"insertHyperlinks\", \"AllowInsertHyperlinks\"], [\"deleteColumns\", \"AllowDeleteCols\"], [\"deleteRows\", \"AllowDeleteRows\"], [\"sort\", \"AllowSort\"], [\"autoFilter\", \"AllowFilter\"], [\"pivotTables\", \"AllowUsePivotTables\"]].forEach(function (x) {\n      if (ws['!protect'][x[0]]) o.push(\"<\" + x[1] + \"/>\");\n    });\n  }\n\n  if (o.length == 0) return \"\";\n  return writextag(\"WorksheetOptions\", o.join(\"\"), {\n    xmlns: XLMLNS.x\n  });\n}\n\nfunction write_ws_xlml_comment(comments\n/*:Array<any>*/\n)\n/*:string*/\n{\n  return comments.map(function (c) {\n    // TODO: formatted text\n    var t = xlml_unfixstr(c.t || \"\");\n    var d = writextag(\"ss:Data\", t, {\n      \"xmlns\": \"http://www.w3.org/TR/REC-html40\"\n    });\n    return writextag(\"Comment\", d, {\n      \"ss:Author\": c.a\n    });\n  }).join(\"\");\n}\n\nfunction write_ws_xlml_cell(cell, ref\n/*:string*/\n, ws, opts, idx\n/*:number*/\n, wb, addr)\n/*:string*/\n{\n  if (!cell || cell.v == undefined && cell.f == undefined) return \"\";\n  var attr = {};\n  if (cell.f) attr[\"ss:Formula\"] = \"=\" + escapexml(a1_to_rc(cell.f, addr));\n\n  if (cell.F && cell.F.slice(0, ref.length) == ref) {\n    var end = decode_cell(cell.F.slice(ref.length + 1));\n    attr[\"ss:ArrayRange\"] = \"RC:R\" + (end.r == addr.r ? \"\" : \"[\" + (end.r - addr.r) + \"]\") + \"C\" + (end.c == addr.c ? \"\" : \"[\" + (end.c - addr.c) + \"]\");\n  }\n\n  if (cell.l && cell.l.Target) {\n    attr[\"ss:HRef\"] = escapexml(cell.l.Target);\n    if (cell.l.Tooltip) attr[\"x:HRefScreenTip\"] = escapexml(cell.l.Tooltip);\n  }\n\n  if (ws['!merges']) {\n    var marr = ws['!merges'];\n\n    for (var mi = 0; mi != marr.length; ++mi) {\n      if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;\n      if (marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;\n      if (marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;\n    }\n  }\n\n  var t = \"\",\n      p = \"\";\n\n  switch (cell.t) {\n    case 'z':\n      if (!opts.sheetStubs) return \"\";\n      break;\n\n    case 'n':\n      t = 'Number';\n      p = String(cell.v);\n      break;\n\n    case 'b':\n      t = 'Boolean';\n      p = cell.v ? \"1\" : \"0\";\n      break;\n\n    case 'e':\n      t = 'Error';\n      p = BErr[cell.v];\n      break;\n\n    case 'd':\n      t = 'DateTime';\n      p = new Date(cell.v).toISOString();\n      if (cell.z == null) cell.z = cell.z || table_fmt[14];\n      break;\n\n    case 's':\n      t = 'String';\n      p = escapexlml(cell.v || \"\");\n      break;\n  }\n  /* TODO: cell style */\n\n\n  var os = get_cell_style(opts.cellXfs, cell, opts);\n  attr[\"ss:StyleID\"] = \"s\" + (21 + os);\n  attr[\"ss:Index\"] = addr.c + 1;\n\n  var _v = cell.v != null ? p : \"\";\n\n  var m = cell.t == 'z' ? \"\" : '<Data ss:Type=\"' + t + '\">' + _v + '</Data>';\n  if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);\n  return writextag(\"Cell\", m, attr);\n}\n\nfunction write_ws_xlml_row(R\n/*:number*/\n, row)\n/*:string*/\n{\n  var o = '<Row ss:Index=\"' + (R + 1) + '\"';\n\n  if (row) {\n    if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);\n    if (row.hpx) o += ' ss:AutoFitHeight=\"0\" ss:Height=\"' + row.hpx + '\"';\n    if (row.hidden) o += ' ss:Hidden=\"1\"';\n  }\n\n  return o + '>';\n}\n/* TODO */\n\n\nfunction write_ws_xlml_table(ws\n/*:Worksheet*/\n, opts, idx\n/*:number*/\n, wb\n/*:Workbook*/\n)\n/*:string*/\n{\n  if (!ws['!ref']) return \"\";\n  var range\n  /*:Range*/\n  = safe_decode_range(ws['!ref']);\n  var marr\n  /*:Array<Range>*/\n  = ws['!merges'] || [],\n      mi = 0;\n  var o\n  /*:Array<string>*/\n  = [];\n  if (ws['!cols']) ws['!cols'].forEach(function (n, i) {\n    process_col(n);\n    var w = !!n.width;\n    var p = col_obj_w(i, n);\n    var k\n    /*:any*/\n    = {\n      \"ss:Index\": i + 1\n    };\n    if (w) k['ss:Width'] = width2px(p.width);\n    if (n.hidden) k['ss:Hidden'] = \"1\";\n    o.push(writextag(\"Column\", null, k));\n  });\n  var dense = Array.isArray(ws);\n\n  for (var R = range.s.r; R <= range.e.r; ++R) {\n    var row = [write_ws_xlml_row(R, (ws['!rows'] || [])[R])];\n\n    for (var C = range.s.c; C <= range.e.c; ++C) {\n      var skip = false;\n\n      for (mi = 0; mi != marr.length; ++mi) {\n        if (marr[mi].s.c > C) continue;\n        if (marr[mi].s.r > R) continue;\n        if (marr[mi].e.c < C) continue;\n        if (marr[mi].e.r < R) continue;\n        if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n        break;\n      }\n\n      if (skip) continue;\n      var addr = {\n        r: R,\n        c: C\n      };\n      var ref = encode_cell(addr),\n          cell = dense ? (ws[R] || [])[C] : ws[ref];\n      row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));\n    }\n\n    row.push(\"</Row>\");\n    if (row.length > 2) o.push(row.join(\"\"));\n  }\n\n  return o.join(\"\");\n}\n\nfunction write_ws_xlml(idx\n/*:number*/\n, opts, wb\n/*:Workbook*/\n)\n/*:string*/\n{\n  var o\n  /*:Array<string>*/\n  = [];\n  var s = wb.SheetNames[idx];\n  var ws = wb.Sheets[s];\n  var t\n  /*:string*/\n  = ws ? write_ws_xlml_names(ws, opts, idx, wb) : \"\";\n  if (t.length > 0) o.push(\"<Names>\" + t + \"</Names>\");\n  /* Table */\n\n  t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : \"\";\n  if (t.length > 0) o.push(\"<Table>\" + t + \"</Table>\");\n  /* WorksheetOptions */\n\n  o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));\n  if (ws[\"!autofilter\"]) o.push('<AutoFilter x:Range=\"' + a1_to_rc(fix_range(ws[\"!autofilter\"].ref), {\n    r: 0,\n    c: 0\n  }) + '\" xmlns=\"urn:schemas-microsoft-com:office:excel\"></AutoFilter>');\n  return o.join(\"\");\n}\n\nfunction write_xlml(wb, opts)\n/*:string*/\n{\n  if (!opts) opts = {};\n  if (!wb.SSF) wb.SSF = dup(table_fmt);\n\n  if (wb.SSF) {\n    make_ssf();\n    SSF_load_table(wb.SSF); // $FlowIgnore\n\n    opts.revssf = evert_num(wb.SSF);\n    opts.revssf[wb.SSF[65535]] = 0;\n    opts.ssf = wb.SSF;\n    opts.cellXfs = [];\n    get_cell_style(opts.cellXfs, {}, {\n      revssf: {\n        \"General\": 0\n      }\n    });\n  }\n\n  var d\n  /*:Array<string>*/\n  = [];\n  d.push(write_props_xlml(wb, opts));\n  d.push(write_wb_xlml(wb, opts));\n  d.push(\"\");\n  d.push(\"\");\n\n  for (var i = 0; i < wb.SheetNames.length; ++i) {\n    d.push(writextag(\"Worksheet\", write_ws_xlml(i, opts, wb), {\n      \"ss:Name\": escapexml(wb.SheetNames[i])\n    }));\n  }\n\n  d[2] = write_sty_xlml(wb, opts);\n  d[3] = write_names_xlml(wb, opts);\n  return XML_HEADER + writextag(\"Workbook\", d.join(\"\"), {\n    'xmlns': XLMLNS.ss,\n    'xmlns:o': XLMLNS.o,\n    'xmlns:x': XLMLNS.x,\n    'xmlns:ss': XLMLNS.ss,\n    'xmlns:dt': XLMLNS.dt,\n    'xmlns:html': XLMLNS.html\n  });\n}\n/* [MS-OLEDS] 2.3.8 CompObjStream */\n\n\nfunction parse_compobj(obj\n/*:CFBEntry*/\n) {\n  var v = {};\n  var o = obj.content;\n  /*:: if(o == null) return; */\n\n  /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */\n\n  o.l = 28;\n  v.AnsiUserType = o.read_shift(0, \"lpstr-ansi\");\n  v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);\n  if (o.length - o.l <= 4) return v;\n  var m\n  /*:number*/\n  = o.read_shift(4);\n  if (m == 0 || m > 40) return v;\n  o.l -= 4;\n  v.Reserved1 = o.read_shift(0, \"lpstr-ansi\");\n  if (o.length - o.l <= 4) return v;\n  m = o.read_shift(4);\n  if (m !== 0x71b239f4) return v;\n  v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);\n  m = o.read_shift(4);\n  if (m == 0 || m > 40) return v;\n  o.l -= 4;\n  v.Reserved2 = o.read_shift(0, \"lpwstr\");\n}\n/*\n\tContinue logic for:\n\t- 2.4.58 Continue          0x003c\n\t- 2.4.59 ContinueBigName   0x043c\n\t- 2.4.60 ContinueFrt       0x0812\n\t- 2.4.61 ContinueFrt11     0x0875\n\t- 2.4.62 ContinueFrt12     0x087f\n*/\n\n\nvar CONTINUE_RT = [0x003c, 0x043c, 0x0812, 0x0875, 0x087f];\n\nfunction slurp(RecordType, R, blob, length\n/*:number*/\n, opts)\n/*:any*/\n{\n  var l = length;\n  var bufs = [];\n  var d = blob.slice(blob.l, blob.l + l);\n  if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch (RecordType) {\n    case 0x0009:\n    case 0x0209:\n    case 0x0409:\n    case 0x0809\n    /* BOF */\n    :\n    case 0x002F\n    /* FilePass */\n    :\n    case 0x0195\n    /* FileLock */\n    :\n    case 0x00E1\n    /* InterfaceHdr */\n    :\n    case 0x0196\n    /* RRDInfo */\n    :\n    case 0x0138\n    /* RRDHead */\n    :\n    case 0x0194\n    /* UsrExcl */\n    :\n    case 0x000a\n    /* EOF */\n    :\n      break;\n\n    case 0x0085\n    /* BoundSheet8 */\n    :\n      break;\n\n    default:\n      opts.enc.insitu(d);\n  }\n  bufs.push(d);\n  blob.l += l;\n\n  var nextrt = __readUInt16LE(blob, blob.l),\n      next = XLSRecordEnum[nextrt];\n\n  var start = 0;\n\n  while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {\n    l = __readUInt16LE(blob, blob.l + 2);\n    start = blob.l + 4;\n    if (nextrt == 0x0812\n    /* ContinueFrt */\n    ) start += 4;else if (nextrt == 0x0875 || nextrt == 0x087f) {\n      start += 12;\n    }\n    d = blob.slice(start, blob.l + 4 + l);\n    bufs.push(d);\n    blob.l += 4 + l;\n    next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];\n  }\n\n  var b = bconcat(bufs)\n  /*:any*/\n  ;\n  prep_blob(b, 0);\n  var ll = 0;\n  b.lens = [];\n\n  for (var j = 0; j < bufs.length; ++j) {\n    b.lens.push(ll);\n    ll += bufs[j].length;\n  }\n\n  if (b.length < length) throw \"XLS Record 0x\" + RecordType.toString(16) + \" Truncated: \" + b.length + \" < \" + length;\n  return R.f(b, b.length, opts);\n}\n\nfunction safe_format_xf(p\n/*:any*/\n, opts\n/*:ParseOpts*/\n, date1904\n/*:?boolean*/\n) {\n  if (p.t === 'z') return;\n  if (!p.XF) return;\n  var fmtid = 0;\n\n  try {\n    fmtid = p.z || p.XF.numFmtId || 0;\n    if (opts.cellNF) p.z = table_fmt[fmtid];\n  } catch (e) {\n    if (opts.WTF) throw e;\n  }\n\n  if (!opts || opts.cellText !== false) try {\n    if (p.t === 'e') {\n      p.w = p.w || BErr[p.v];\n    } else if (fmtid === 0 || fmtid == \"General\") {\n      if (p.t === 'n') {\n        if ((p.v | 0) === p.v) p.w = p.v.toString(10);else p.w = SSF_general_num(p.v);\n      } else p.w = SSF_general(p.v);\n    } else p.w = SSF_format(fmtid, p.v, {\n      date1904: !!date1904,\n      dateNF: opts && opts.dateNF\n    });\n  } catch (e) {\n    if (opts.WTF) throw e;\n  }\n\n  if (opts.cellDates && fmtid && p.t == 'n' && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {\n    var _d = SSF_parse_date_code(p.v);\n\n    if (_d) {\n      p.t = 'd';\n      p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n    }\n  }\n}\n\nfunction make_cell(val, ixfe, t)\n/*:Cell*/\n{\n  return {\n    v: val,\n    ixfe: ixfe,\n    t: t\n  }\n  /*:any*/\n  ;\n} // 2.3.2\n\n\nfunction parse_workbook(blob, options\n/*:ParseOpts*/\n)\n/*:Workbook*/\n{\n  var wb = {\n    opts: {}\n  }\n  /*:any*/\n  ;\n  var Sheets = {};\n  if (DENSE != null && options.dense == null) options.dense = DENSE;\n  var out\n  /*:Worksheet*/\n  = options.dense ? [] : {}\n  /*:any*/\n  ;\n  var Directory = {};\n  var range\n  /*:Range*/\n  = {}\n  /*:any*/\n  ;\n  var last_formula = null;\n  var sst\n  /*:SST*/\n  = []\n  /*:any*/\n  ;\n  var cur_sheet = \"\";\n  var Preamble = {};\n  var lastcell,\n      last_cell = \"\",\n      cc\n  /*:Cell*/\n  ,\n      cmnt,\n      rngC,\n      rngR;\n  var sharedf = {};\n  var arrayf\n  /*:Array<[Range, string]>*/\n  = [];\n  var temp_val\n  /*:Cell*/\n  ;\n  var country;\n  var XFs = [];\n  /* XF records */\n\n  var palette\n  /*:Array<[number, number, number]>*/\n  = [];\n  var Workbook\n  /*:WBWBProps*/\n  = {\n    Sheets: [],\n    WBProps: {\n      date1904: false\n    },\n    Views: [{}]\n  }\n  /*:any*/\n  ,\n      wsprops = {};\n\n  var get_rgb = function getrgb(icv\n  /*:number*/\n  )\n  /*:[number, number, number]*/\n  {\n    if (icv < 8) return XLSIcv[icv];\n    if (icv < 64) return palette[icv - 8] || XLSIcv[icv];\n    return XLSIcv[icv];\n  };\n\n  var process_cell_style = function pcs(cell, line\n  /*:any*/\n  , options) {\n    var xfd = line.XF.data;\n    if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;\n    line.s = {}\n    /*:any*/\n    ;\n    line.s.patternType = xfd.patternType;\n    var t;\n\n    if (t = rgb2Hex(get_rgb(xfd.icvFore))) {\n      line.s.fgColor = {\n        rgb: t\n      };\n    }\n\n    if (t = rgb2Hex(get_rgb(xfd.icvBack))) {\n      line.s.bgColor = {\n        rgb: t\n      };\n    }\n  };\n\n  var addcell = function addcell(cell\n  /*:any*/\n  , line\n  /*:any*/\n  , options\n  /*:any*/\n  ) {\n    if (file_depth > 1) return;\n    if (options.sheetRows && cell.r >= options.sheetRows) return;\n    if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);\n    delete line.ixfe;\n    delete line.XF;\n    lastcell = cell;\n    last_cell = encode_cell(cell);\n    if (!range || !range.s || !range.e) range = {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: 0,\n        c: 0\n      }\n    };\n    if (cell.r < range.s.r) range.s.r = cell.r;\n    if (cell.c < range.s.c) range.s.c = cell.c;\n    if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n    if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n\n    if (options.cellFormula && line.f) {\n      for (var afi = 0; afi < arrayf.length; ++afi) {\n        if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;\n        if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;\n        line.F = encode_range(arrayf[afi][0]);\n        if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;\n        if (line.f) line.f = \"\" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);\n        break;\n      }\n    }\n\n    {\n      if (options.dense) {\n        if (!out[cell.r]) out[cell.r] = [];\n        out[cell.r][cell.c] = line;\n      } else out[last_cell] = line;\n    }\n  };\n\n  var opts = {\n    enc: false,\n    // encrypted\n    sbcch: 0,\n    // cch in the preceding SupBook\n    snames: [],\n    // sheetnames\n    sharedf: sharedf,\n    // shared formulae by address\n    arrayf: arrayf,\n    // array formulae array\n    rrtabid: [],\n    // RRTabId\n    lastuser: \"\",\n    // Last User from WriteAccess\n    biff: 8,\n    // BIFF version\n    codepage: 0,\n    // CP from CodePage record\n    winlocked: 0,\n    // fLockWn from WinProtect\n    cellStyles: !!options && !!options.cellStyles,\n    WTF: !!options && !!options.wtf\n  }\n  /*:any*/\n  ;\n  if (options.password) opts.password = options.password;\n  var themes;\n  var merges\n  /*:Array<Range>*/\n  = [];\n  var objects = [];\n  var colinfo\n  /*:Array<ColInfo>*/\n  = [],\n      rowinfo\n  /*:Array<RowInfo>*/\n  = [];\n  var seencol = false;\n  var supbooks = []\n  /*:any*/\n  ; // 1-indexed, will hold extern names\n\n  supbooks.SheetNames = opts.snames;\n  supbooks.sharedf = opts.sharedf;\n  supbooks.arrayf = opts.arrayf;\n  supbooks.names = [];\n  supbooks.XTI = [];\n  var last_RT = 0;\n  var file_depth = 0;\n  /* TODO: make a real stack */\n\n  var BIFF2Fmt = 0,\n      BIFF2FmtTable\n  /*:Array<string>*/\n  = [];\n  var FilterDatabases = [];\n  /* TODO: sort out supbooks and process elsewhere */\n\n  var last_lbl\n  /*:?DefinedName*/\n  ;\n  /* explicit override for some broken writers */\n\n  opts.codepage = 1200;\n  set_cp(1200);\n  var seen_codepage = false;\n\n  while (blob.l < blob.length - 1) {\n    var s = blob.l;\n    var RecordType = blob.read_shift(2);\n    if (RecordType === 0 && last_RT === 0x000a\n    /* EOF */\n    ) break;\n    var length = blob.l === blob.length ? 0 : blob.read_shift(2);\n    var R = XLSRecordEnum[RecordType];\n    if (file_depth == 0 && [0x0009, 0x0209, 0x0409, 0x0809].indexOf(RecordType) == -1\n    /* BOF */\n    ) break; //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);\n    //if(!R) console.log(blob.slice(blob.l, blob.l + length));\n\n    if (R && R.f) {\n      if (options.bookSheets) {\n        if (last_RT === 0x0085\n        /* BoundSheet8 */\n        && RecordType !== 0x0085\n        /* R.n !== 'BoundSheet8' */\n        ) break;\n      }\n\n      last_RT = RecordType;\n\n      if (R.r === 2 || R.r == 12) {\n        var rt = blob.read_shift(2);\n        length -= 2;\n        if (!opts.enc && rt !== RecordType && ((rt & 0xFF) << 8 | rt >> 8) !== RecordType) throw new Error(\"rt mismatch: \" + rt + \"!=\" + RecordType);\n\n        if (R.r == 12) {\n          blob.l += 10;\n          length -= 10;\n        } // skip FRT\n\n      } //console.error(R,blob.l,length,blob.length);\n\n\n      var val\n      /*:any*/\n      = {}\n      /*:any*/\n      ;\n      if (RecordType === 0x000a\n      /* EOF */\n      ) val =\n      /*::(*/\n      R.f(blob, length, opts)\n      /*:: :any)*/\n      ;else val =\n      /*::(*/\n      slurp(RecordType, R, blob, length, opts)\n      /*:: :any)*/\n      ;\n      /*:: val = (val:any); */\n\n      if (file_depth == 0 && [0x0009, 0x0209, 0x0409, 0x0809].indexOf(last_RT) === -1\n      /* BOF */\n      ) continue;\n\n      switch (RecordType) {\n        case 0x0022\n        /* Date1904 */\n        :\n          /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */\n          wb.opts.Date1904 = Workbook.WBProps.date1904 = val;\n          break;\n\n        case 0x0086\n        /* WriteProtect */\n        :\n          wb.opts.WriteProtect = true;\n          break;\n\n        case 0x002f\n        /* FilePass */\n        :\n          if (!opts.enc) blob.l = 0;\n          opts.enc = val;\n          if (!options.password) throw new Error(\"File is password-protected\");\n          if (val.valid == null) throw new Error(\"Encryption scheme unsupported\");\n          if (!val.valid) throw new Error(\"Password is incorrect\");\n          break;\n\n        case 0x005c\n        /* WriteAccess */\n        :\n          opts.lastuser = val;\n          break;\n\n        case 0x0042\n        /* CodePage */\n        :\n          var cpval = Number(val);\n          /* overrides based on test cases */\n\n          switch (cpval) {\n            case 0x5212:\n              cpval = 1200;\n              break;\n\n            case 0x8000:\n              cpval = 10000;\n              break;\n\n            case 0x8001:\n              cpval = 1252;\n              break;\n          }\n\n          set_cp(opts.codepage = cpval);\n          seen_codepage = true;\n          break;\n\n        case 0x013d\n        /* RRTabId */\n        :\n          opts.rrtabid = val;\n          break;\n\n        case 0x0019\n        /* WinProtect */\n        :\n          opts.winlocked = val;\n          break;\n\n        case 0x01b7\n        /* RefreshAll */\n        :\n          wb.opts[\"RefreshAll\"] = val;\n          break;\n\n        case 0x000c\n        /* CalcCount */\n        :\n          wb.opts[\"CalcCount\"] = val;\n          break;\n\n        case 0x0010\n        /* CalcDelta */\n        :\n          wb.opts[\"CalcDelta\"] = val;\n          break;\n\n        case 0x0011\n        /* CalcIter */\n        :\n          wb.opts[\"CalcIter\"] = val;\n          break;\n\n        case 0x000d\n        /* CalcMode */\n        :\n          wb.opts[\"CalcMode\"] = val;\n          break;\n\n        case 0x000e\n        /* CalcPrecision */\n        :\n          wb.opts[\"CalcPrecision\"] = val;\n          break;\n\n        case 0x005f\n        /* CalcSaveRecalc */\n        :\n          wb.opts[\"CalcSaveRecalc\"] = val;\n          break;\n\n        case 0x000f\n        /* CalcRefMode */\n        :\n          opts.CalcRefMode = val;\n          break;\n        // TODO: implement R1C1\n\n        case 0x08a3\n        /* ForceFullCalculation */\n        :\n          wb.opts.FullCalc = val;\n          break;\n\n        case 0x0081\n        /* WsBool */\n        :\n          if (val.fDialog) out[\"!type\"] = \"dialog\";\n          if (!val.fBelow) (out[\"!outline\"] || (out[\"!outline\"] = {})).above = true;\n          if (!val.fRight) (out[\"!outline\"] || (out[\"!outline\"] = {})).left = true;\n          break;\n        // TODO\n\n        case 0x00e0\n        /* XF */\n        :\n          XFs.push(val);\n          break;\n\n        case 0x01ae\n        /* SupBook */\n        :\n          supbooks.push([val]);\n          supbooks[supbooks.length - 1].XTI = [];\n          break;\n\n        case 0x0023:\n        case 0x0223\n        /* ExternName */\n        :\n          supbooks[supbooks.length - 1].push(val);\n          break;\n\n        case 0x0018:\n        case 0x0218\n        /* Lbl */\n        :\n          last_lbl = {\n            Name: val.Name,\n            Ref: stringify_formula(val.rgce, range, null, supbooks, opts)\n          }\n          /*:DefinedName*/\n          ;\n          if (val.itab > 0) last_lbl.Sheet = val.itab - 1;\n          supbooks.names.push(last_lbl);\n\n          if (!supbooks[0]) {\n            supbooks[0] = [];\n            supbooks[0].XTI = [];\n          }\n\n          supbooks[supbooks.length - 1].push(val);\n          if (val.Name == \"_xlnm._FilterDatabase\" && val.itab > 0) if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d') FilterDatabases[val.itab - 1] = {\n            ref: encode_range(val.rgce[0][0][1][2])\n          };\n          break;\n\n        case 0x0016\n        /* ExternCount */\n        :\n          opts.ExternCount = val;\n          break;\n\n        case 0x0017\n        /* ExternSheet */\n        :\n          if (supbooks.length == 0) {\n            supbooks[0] = [];\n            supbooks[0].XTI = [];\n          }\n\n          supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);\n          supbooks.XTI = supbooks.XTI.concat(val);\n          break;\n\n        case 0x0894\n        /* NameCmt */\n        :\n          /* TODO: search for correct name */\n          if (opts.biff < 8) break;\n          if (last_lbl != null) last_lbl.Comment = val[1];\n          break;\n\n        case 0x0012\n        /* Protect */\n        :\n          out[\"!protect\"] = val;\n          break;\n\n        /* for sheet or book */\n\n        case 0x0013\n        /* Password */\n        :\n          if (val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val);\n          break;\n\n        case 0x0085\n        /* BoundSheet8 */\n        :\n          {\n            Directory[val.pos] = val;\n            opts.snames.push(val.name);\n          }\n          break;\n\n        case 0x000a\n        /* EOF */\n        :\n          {\n            if (--file_depth) break;\n\n            if (range.e) {\n              if (range.e.r > 0 && range.e.c > 0) {\n                range.e.r--;\n                range.e.c--;\n                out[\"!ref\"] = encode_range(range);\n\n                if (options.sheetRows && options.sheetRows <= range.e.r) {\n                  var tmpri = range.e.r;\n                  range.e.r = options.sheetRows - 1;\n                  out[\"!fullref\"] = out[\"!ref\"];\n                  out[\"!ref\"] = encode_range(range);\n                  range.e.r = tmpri;\n                }\n\n                range.e.r++;\n                range.e.c++;\n              }\n\n              if (merges.length > 0) out[\"!merges\"] = merges;\n              if (objects.length > 0) out[\"!objects\"] = objects;\n              if (colinfo.length > 0) out[\"!cols\"] = colinfo;\n              if (rowinfo.length > 0) out[\"!rows\"] = rowinfo;\n              Workbook.Sheets.push(wsprops);\n            }\n\n            if (cur_sheet === \"\") Preamble = out;else Sheets[cur_sheet] = out;\n            out = options.dense ? [] : {}\n            /*:any*/\n            ;\n          }\n          break;\n\n        case 0x0009:\n        case 0x0209:\n        case 0x0409:\n        case 0x0809\n        /* BOF */\n        :\n          {\n            if (opts.biff === 8) opts.biff = {\n              /*::[*/\n              0x0009\n              /*::]*/\n              : 2,\n\n              /*::[*/\n              0x0209\n              /*::]*/\n              : 3,\n\n              /*::[*/\n              0x0409\n              /*::]*/\n              : 4\n            }[RecordType] || {\n              /*::[*/\n              0x0200\n              /*::]*/\n              : 2,\n\n              /*::[*/\n              0x0300\n              /*::]*/\n              : 3,\n\n              /*::[*/\n              0x0400\n              /*::]*/\n              : 4,\n\n              /*::[*/\n              0x0500\n              /*::]*/\n              : 5,\n\n              /*::[*/\n              0x0600\n              /*::]*/\n              : 8,\n\n              /*::[*/\n              0x0002\n              /*::]*/\n              : 2,\n\n              /*::[*/\n              0x0007\n              /*::]*/\n              : 2\n            }[val.BIFFVer] || 8;\n            opts.biffguess = val.BIFFVer == 0;\n\n            if (val.BIFFVer == 0 && val.dt == 0x1000) {\n              opts.biff = 5;\n              seen_codepage = true;\n              set_cp(opts.codepage = 28591);\n            }\n\n            if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;\n            if (file_depth++) break;\n            out = options.dense ? [] : {}\n            /*:any*/\n            ;\n\n            if (opts.biff < 8 && !seen_codepage) {\n              seen_codepage = true;\n              set_cp(opts.codepage = options.codepage || 1252);\n            }\n\n            if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {\n              if (cur_sheet === \"\") cur_sheet = \"Sheet1\";\n              range = {\n                s: {\n                  r: 0,\n                  c: 0\n                },\n                e: {\n                  r: 0,\n                  c: 0\n                }\n              };\n              /* fake BoundSheet8 */\n\n              var fakebs8 = {\n                pos: blob.l - length,\n                name: cur_sheet\n              };\n              Directory[fakebs8.pos] = fakebs8;\n              opts.snames.push(cur_sheet);\n            } else cur_sheet = (Directory[s] || {\n              name: \"\"\n            }).name;\n\n            if (val.dt == 0x20) out[\"!type\"] = \"chart\";\n            if (val.dt == 0x40) out[\"!type\"] = \"macro\";\n            merges = [];\n            objects = [];\n            opts.arrayf = arrayf = [];\n            colinfo = [];\n            rowinfo = [];\n            seencol = false;\n            wsprops = {\n              Hidden: (Directory[s] || {\n                hs: 0\n              }).hs,\n              name: cur_sheet\n            };\n          }\n          break;\n\n        case 0x0203\n        /* Number */\n        :\n        case 0x0003\n        /* BIFF2NUM */\n        :\n        case 0x0002\n        /* BIFF2INT */\n        :\n          {\n            if (out[\"!type\"] == \"chart\") if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({\n              c: val.c,\n              r: val.r\n            })]) ++val.c;\n            temp_val = {\n              ixfe: val.ixfe,\n              XF: XFs[val.ixfe] || {},\n              v: val.val,\n              t: 'n'\n            }\n            /*:any*/\n            ;\n            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n            safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n          }\n          break;\n\n        case 0x0005:\n        case 0x0205\n        /* BoolErr */\n        :\n          {\n            temp_val = {\n              ixfe: val.ixfe,\n              XF: XFs[val.ixfe],\n              v: val.val,\n              t: val.t\n            }\n            /*:any*/\n            ;\n            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n            safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n          }\n          break;\n\n        case 0x027e\n        /* RK */\n        :\n          {\n            temp_val = {\n              ixfe: val.ixfe,\n              XF: XFs[val.ixfe],\n              v: val.rknum,\n              t: 'n'\n            }\n            /*:any*/\n            ;\n            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n            safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n          }\n          break;\n\n        case 0x00bd\n        /* MulRk */\n        :\n          {\n            for (var j = val.c; j <= val.C; ++j) {\n              var ixfe = val.rkrec[j - val.c][0];\n              temp_val = {\n                ixfe: ixfe,\n                XF: XFs[ixfe],\n                v: val.rkrec[j - val.c][1],\n                t: 'n'\n              }\n              /*:any*/\n              ;\n              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n              safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell({\n                c: j,\n                r: val.r\n              }, temp_val, options);\n            }\n          }\n          break;\n\n        case 0x0006:\n        case 0x0206:\n        case 0x0406\n        /* Formula */\n        :\n          {\n            if (val.val == 'String') {\n              last_formula = val;\n              break;\n            }\n\n            temp_val = make_cell(val.val, val.cell.ixfe, val.tt);\n            temp_val.XF = XFs[temp_val.ixfe];\n\n            if (options.cellFormula) {\n              var _f = val.formula;\n\n              if (_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {\n                var _fr = _f[0][0][1][0],\n                    _fc = _f[0][0][1][1];\n\n                var _fe = encode_cell({\n                  r: _fr,\n                  c: _fc\n                });\n\n                if (sharedf[_fe]) temp_val.f = \"\" + stringify_formula(val.formula, range, val.cell, supbooks, opts);else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;\n              } else temp_val.f = \"\" + stringify_formula(val.formula, range, val.cell, supbooks, opts);\n            }\n\n            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n            safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell(val.cell, temp_val, options);\n            last_formula = val;\n          }\n          break;\n\n        case 0x0007:\n        case 0x0207\n        /* String */\n        :\n          {\n            if (last_formula) {\n              /* technically always true */\n              last_formula.val = val;\n              temp_val = make_cell(val, last_formula.cell.ixfe, 's');\n              temp_val.XF = XFs[temp_val.ixfe];\n\n              if (options.cellFormula) {\n                temp_val.f = \"\" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n              }\n\n              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n              safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell(last_formula.cell, temp_val, options);\n              last_formula = null;\n            } else throw new Error(\"String record expects Formula\");\n          }\n          break;\n\n        case 0x0021:\n        case 0x0221\n        /* Array */\n        :\n          {\n            arrayf.push(val);\n\n            var _arraystart = encode_cell(val[0].s);\n\n            cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];\n\n            if (options.cellFormula && cc) {\n              if (!last_formula) break;\n              /* technically unreachable */\n\n              if (!_arraystart || !cc) break;\n              cc.f = \"\" + stringify_formula(val[1], range, val[0], supbooks, opts);\n              cc.F = encode_range(val[0]);\n            }\n          }\n          break;\n\n        case 0x04bc\n        /* ShrFmla */\n        :\n          {\n            if (!options.cellFormula) break;\n\n            if (last_cell) {\n              /* TODO: capture range */\n              if (!last_formula) break;\n              /* technically unreachable */\n\n              sharedf[encode_cell(last_formula.cell)] = val[0];\n              cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];\n              (cc || {}).f = \"\" + stringify_formula(val[0], range, lastcell, supbooks, opts);\n            }\n          }\n          break;\n\n        case 0x00fd\n        /* LabelSst */\n        :\n          temp_val = make_cell(sst[val.isst].t, val.ixfe, 's');\n          if (sst[val.isst].h) temp_val.h = sst[val.isst].h;\n          temp_val.XF = XFs[temp_val.ixfe];\n          if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n          safe_format_xf(temp_val, options, wb.opts.Date1904);\n          addcell({\n            c: val.c,\n            r: val.r\n          }, temp_val, options);\n          break;\n\n        case 0x0201\n        /* Blank */\n        :\n          if (options.sheetStubs) {\n            temp_val = {\n              ixfe: val.ixfe,\n              XF: XFs[val.ixfe],\n              t: 'z'\n            }\n            /*:any*/\n            ;\n            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n            safe_format_xf(temp_val, options, wb.opts.Date1904);\n            addcell({\n              c: val.c,\n              r: val.r\n            }, temp_val, options);\n          }\n\n          break;\n\n        case 0x00be\n        /* MulBlank */\n        :\n          if (options.sheetStubs) {\n            for (var _j = val.c; _j <= val.C; ++_j) {\n              var _ixfe = val.ixfe[_j - val.c];\n              temp_val = {\n                ixfe: _ixfe,\n                XF: XFs[_ixfe],\n                t: 'z'\n              }\n              /*:any*/\n              ;\n              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n              safe_format_xf(temp_val, options, wb.opts.Date1904);\n              addcell({\n                c: _j,\n                r: val.r\n              }, temp_val, options);\n            }\n          }\n\n          break;\n\n        case 0x00d6\n        /* RString */\n        :\n        case 0x0204\n        /* Label */\n        :\n        case 0x0004\n        /* BIFF2STR */\n        :\n          temp_val = make_cell(val.val, val.ixfe, 's');\n          temp_val.XF = XFs[temp_val.ixfe];\n          if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n          safe_format_xf(temp_val, options, wb.opts.Date1904);\n          addcell({\n            c: val.c,\n            r: val.r\n          }, temp_val, options);\n          break;\n\n        case 0x0000:\n        case 0x0200\n        /* Dimensions */\n        :\n          {\n            if (file_depth === 1) range = val;\n            /* TODO: stack */\n          }\n          break;\n\n        case 0x00fc\n        /* SST */\n        :\n          {\n            sst = val;\n          }\n          break;\n\n        case 0x041e\n        /* Format */\n        :\n          {\n            /* val = [id, fmt] */\n            if (opts.biff == 4) {\n              BIFF2FmtTable[BIFF2Fmt++] = val[1];\n\n              for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) {\n                if (table_fmt[b4idx] == val[1]) break;\n              }\n\n              if (b4idx >= 163) SSF__load(val[1], BIFF2Fmt + 163);\n            } else SSF__load(val[1], val[0]);\n          }\n          break;\n\n        case 0x001e\n        /* BIFF2FORMAT */\n        :\n          {\n            BIFF2FmtTable[BIFF2Fmt++] = val;\n\n            for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) {\n              if (table_fmt[b2idx] == val) break;\n            }\n\n            if (b2idx >= 163) SSF__load(val, BIFF2Fmt + 163);\n          }\n          break;\n\n        case 0x00e5\n        /* MergeCells */\n        :\n          merges = merges.concat(val);\n          break;\n\n        case 0x005d\n        /* Obj */\n        :\n          objects[val.cmo[0]] = opts.lastobj = val;\n          break;\n\n        case 0x01b6\n        /* TxO */\n        :\n          opts.lastobj.TxO = val;\n          break;\n\n        case 0x007f\n        /* ImData */\n        :\n          opts.lastobj.ImData = val;\n          break;\n\n        case 0x01b8\n        /* HLink */\n        :\n          {\n            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) {\n              for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({\n                  c: rngC,\n                  r: rngR\n                })];\n                if (cc) cc.l = val[1];\n              }\n            }\n          }\n          break;\n\n        case 0x0800\n        /* HLinkTooltip */\n        :\n          {\n            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) {\n              for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {\n                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({\n                  c: rngC,\n                  r: rngR\n                })];\n                if (cc && cc.l) cc.l.Tooltip = val[1];\n              }\n            }\n          }\n          break;\n\n        case 0x001c\n        /* Note */\n        :\n          {\n            if (opts.biff <= 5 && opts.biff >= 2) break;\n            /* TODO: BIFF5 */\n\n            cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];\n            var noteobj = objects[val[2]];\n\n            if (!cc) {\n              if (options.dense) {\n                if (!out[val[0].r]) out[val[0].r] = [];\n                cc = out[val[0].r][val[0].c] = {\n                  t: \"z\"\n                }\n                /*:any*/\n                ;\n              } else {\n                cc = out[encode_cell(val[0])] = {\n                  t: \"z\"\n                }\n                /*:any*/\n                ;\n              }\n\n              range.e.r = Math.max(range.e.r, val[0].r);\n              range.s.r = Math.min(range.s.r, val[0].r);\n              range.e.c = Math.max(range.e.c, val[0].c);\n              range.s.c = Math.min(range.s.c, val[0].c);\n            }\n\n            if (!cc.c) cc.c = [];\n            cmnt = {\n              a: val[1],\n              t: noteobj.TxO.t\n            };\n            cc.c.push(cmnt);\n          }\n          break;\n\n        case 0x087d\n        /* XFExt */\n        :\n          update_xfext(XFs[val.ixfe], val.ext);\n          break;\n\n        case 0x007d\n        /* ColInfo */\n        :\n          {\n            if (!opts.cellStyles) break;\n\n            while (val.e >= val.s) {\n              colinfo[val.e--] = {\n                width: val.w / 256,\n                level: val.level || 0,\n                hidden: !!(val.flags & 1)\n              };\n\n              if (!seencol) {\n                seencol = true;\n                find_mdw_colw(val.w / 256);\n              }\n\n              process_col(colinfo[val.e + 1]);\n            }\n          }\n          break;\n\n        case 0x0208\n        /* Row */\n        :\n          {\n            var rowobj = {};\n\n            if (val.level != null) {\n              rowinfo[val.r] = rowobj;\n              rowobj.level = val.level;\n            }\n\n            if (val.hidden) {\n              rowinfo[val.r] = rowobj;\n              rowobj.hidden = true;\n            }\n\n            if (val.hpt) {\n              rowinfo[val.r] = rowobj;\n              rowobj.hpt = val.hpt;\n              rowobj.hpx = pt2px(val.hpt);\n            }\n          }\n          break;\n\n        case 0x0026\n        /* LeftMargin */\n        :\n        case 0x0027\n        /* RightMargin */\n        :\n        case 0x0028\n        /* TopMargin */\n        :\n        case 0x0029\n        /* BottomMargin */\n        :\n          if (!out['!margins']) default_margins(out['!margins'] = {});\n          out['!margins'][{\n            0x26: \"left\",\n            0x27: \"right\",\n            0x28: \"top\",\n            0x29: \"bottom\"\n          }[RecordType]] = val;\n          break;\n\n        case 0x00a1\n        /* Setup */\n        :\n          // TODO\n          if (!out['!margins']) default_margins(out['!margins'] = {});\n          out['!margins'].header = val.header;\n          out['!margins'].footer = val.footer;\n          break;\n\n        case 0x023e\n        /* Window2 */\n        :\n          // TODO\n          // $FlowIgnore\n          if (val.RTL) Workbook.Views[0].RTL = true;\n          break;\n\n        case 0x0092\n        /* Palette */\n        :\n          palette = val;\n          break;\n\n        case 0x0896\n        /* Theme */\n        :\n          themes = val;\n          break;\n\n        case 0x008c\n        /* Country */\n        :\n          country = val;\n          break;\n\n        case 0x01ba\n        /* CodeName */\n        :\n          {\n            /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */\n            if (!cur_sheet) Workbook.WBProps.CodeName = val || \"ThisWorkbook\";else wsprops.CodeName = val || wsprops.name;\n          }\n          break;\n      }\n    } else {\n      if (!R) console.error(\"Missing Info for XLS Record 0x\" + RecordType.toString(16));\n      blob.l += length;\n    }\n  }\n\n  wb.SheetNames = keys(Directory).sort(function (a, b) {\n    return Number(a) - Number(b);\n  }).map(function (x) {\n    return Directory[x].name;\n  });\n  if (!options.bookSheets) wb.Sheets = Sheets;\n\n  if (!wb.SheetNames.length && Preamble[\"!ref\"]) {\n    wb.SheetNames.push(\"Sheet1\");\n    /*jshint -W069 */\n\n    if (wb.Sheets) wb.Sheets[\"Sheet1\"] = Preamble;\n    /*jshint +W069 */\n  } else wb.Preamble = Preamble;\n\n  if (wb.Sheets) FilterDatabases.forEach(function (r, i) {\n    wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r;\n  });\n  wb.Strings = sst;\n  wb.SSF = dup(table_fmt);\n  if (opts.enc) wb.Encryption = opts.enc;\n  if (themes) wb.Themes = themes;\n  wb.Metadata = {};\n  if (country !== undefined) wb.Metadata.Country = country;\n  if (supbooks.names.length > 0) Workbook.Names = supbooks.names;\n  wb.Workbook = Workbook;\n  return wb;\n}\n/* TODO: split props*/\n\n\nvar PSCLSID = {\n  SI: \"e0859ff2f94f6810ab9108002b27b3d9\",\n  DSI: \"02d5cdd59c2e1b10939708002b2cf9ae\",\n  UDI: \"05d5cdd59c2e1b10939708002b2cf9ae\"\n};\n\nfunction parse_xls_props(cfb\n/*:CFBContainer*/\n, props, o) {\n  /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */\n  var DSI = CFB.find(cfb, '/!DocumentSummaryInformation');\n  if (DSI && DSI.size > 0) try {\n    var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);\n\n    for (var d in DocSummary) {\n      props[d] = DocSummary[d];\n    }\n  } catch (e) {\n    if (o.WTF) throw e;\n    /* empty */\n  }\n  /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/\n\n  var SI = CFB.find(cfb, '/!SummaryInformation');\n  if (SI && SI.size > 0) try {\n    var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);\n\n    for (var s in Summary) {\n      if (props[s] == null) props[s] = Summary[s];\n    }\n  } catch (e) {\n    if (o.WTF) throw e;\n    /* empty */\n  }\n\n  if (props.HeadingPairs && props.TitlesOfParts) {\n    load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);\n    delete props.HeadingPairs;\n    delete props.TitlesOfParts;\n  }\n}\n\nfunction write_xls_props(wb\n/*:Workbook*/\n, cfb\n/*:CFBContainer*/\n) {\n  var DSEntries = [],\n      SEntries = [],\n      CEntries = [];\n  var i = 0,\n      Keys;\n  var DocSummaryRE\n  /*:{[key:string]:string}*/\n  = evert_key(DocSummaryPIDDSI, \"n\");\n  var SummaryRE\n  /*:{[key:string]:string}*/\n  = evert_key(SummaryPIDSI, \"n\");\n\n  if (wb.Props) {\n    Keys = keys(wb.Props); // $FlowIgnore\n\n    for (i = 0; i < Keys.length; ++i) {\n      (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);\n    }\n  }\n\n  if (wb.Custprops) {\n    Keys = keys(wb.Custprops); // $FlowIgnore\n\n    for (i = 0; i < Keys.length; ++i) {\n      if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);\n    }\n  }\n\n  var CEntries2 = [];\n\n  for (i = 0; i < CEntries.length; ++i) {\n    if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;\n    if (CEntries[i][1] == null) continue;\n    CEntries2.push(CEntries[i]);\n  }\n\n  if (SEntries.length) CFB.utils.cfb_add(cfb, \"/\\x05SummaryInformation\", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));\n  if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, \"/\\x05DocumentSummaryInformation\", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));\n}\n\nfunction parse_xlscfb(cfb\n/*:any*/\n, options\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  if (!options) options = {};\n  fix_read_opts(options);\n  reset_cp();\n  if (options.codepage) set_ansi(options.codepage);\n  var CompObj\n  /*:?CFBEntry*/\n  , WB\n  /*:?any*/\n  ;\n\n  if (cfb.FullPaths) {\n    if (CFB.find(cfb, '/encryption')) throw new Error(\"File is password-protected\");\n    CompObj = CFB.find(cfb, '!CompObj');\n    WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');\n  } else {\n    switch (options.type) {\n      case 'base64':\n        cfb = s2a(Base64_decode(cfb));\n        break;\n\n      case 'binary':\n        cfb = s2a(cfb);\n        break;\n\n      case 'buffer':\n        break;\n\n      case 'array':\n        if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);\n        break;\n    }\n\n    prep_blob(cfb, 0);\n    WB = {\n      content: cfb\n    }\n    /*:any*/\n    ;\n  }\n\n  var\n  /*::CompObjP, */\n  WorkbookP\n  /*:: :Workbook = XLSX.utils.book_new(); */\n  ;\n\n  var _data\n  /*:?any*/\n  ;\n\n  if (CompObj)\n    /*::CompObjP = */\n    parse_compobj(CompObj);\n  if (options.bookProps && !options.bookSheets) WorkbookP = {}\n  /*:any*/\n  ;else\n    /*:: if(cfb instanceof CFBContainer) */\n    {\n      var T = has_buf ? 'buffer' : 'array';\n      if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);\n      /* Quattro Pro 7-8 */\n      else if ((_data = CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n      /* Quattro Pro 9 */\n      else if ((_data = CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n      /* Works 4 for Mac */\n      else if ((_data = CFB.find(cfb, 'MN0')) && _data.content) throw new Error(\"Unsupported Works 4 for Mac file\");else throw new Error(\"Cannot find Workbook stream\");\n      if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);\n    }\n  var props = {};\n  if (cfb.FullPaths) parse_xls_props(\n  /*::((*/\n  cfb\n  /*:: :any):CFBContainer)*/\n  , props, options);\n  WorkbookP.Props = WorkbookP.Custprops = props;\n  /* TODO: split up properties */\n\n  if (options.bookFiles) WorkbookP.cfb = cfb;\n  /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */\n\n  return WorkbookP;\n}\n\nfunction write_xlscfb(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n)\n/*:CFBContainer*/\n{\n  var o = opts || {};\n  var cfb = CFB.utils.cfb_new({\n    root: \"R\"\n  });\n  var wbpath = \"/Workbook\";\n\n  switch (o.bookType || \"xls\") {\n    case \"xls\":\n      o.bookType = \"biff8\";\n\n    /* falls through */\n\n    case \"xla\":\n      if (!o.bookType) o.bookType = \"xla\";\n\n    /* falls through */\n\n    case \"biff8\":\n      wbpath = \"/Workbook\";\n      o.biff = 8;\n      break;\n\n    case \"biff5\":\n      wbpath = \"/Book\";\n      o.biff = 5;\n      break;\n\n    default:\n      throw new Error(\"invalid type \" + o.bookType + \" for XLS CFB\");\n  }\n\n  CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));\n  if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb); // TODO: SI, DSI, CO\n\n  if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {\n    type: typeof wb.vbaraw == \"string\" ? \"binary\" : \"buffer\"\n  }));\n  return cfb;\n}\n/* [MS-XLSB] 2.3 Record Enumeration */\n\n\nvar XLSBRecordEnum = {\n  /*::[*/\n  0x0000\n  /*::]*/\n  : {\n    /* n:\"BrtRowHdr\", */\n    f: parse_BrtRowHdr\n  },\n\n  /*::[*/\n  0x0001\n  /*::]*/\n  : {\n    /* n:\"BrtCellBlank\", */\n    f: parse_BrtCellBlank\n  },\n\n  /*::[*/\n  0x0002\n  /*::]*/\n  : {\n    /* n:\"BrtCellRk\", */\n    f: parse_BrtCellRk\n  },\n\n  /*::[*/\n  0x0003\n  /*::]*/\n  : {\n    /* n:\"BrtCellError\", */\n    f: parse_BrtCellError\n  },\n\n  /*::[*/\n  0x0004\n  /*::]*/\n  : {\n    /* n:\"BrtCellBool\", */\n    f: parse_BrtCellBool\n  },\n\n  /*::[*/\n  0x0005\n  /*::]*/\n  : {\n    /* n:\"BrtCellReal\", */\n    f: parse_BrtCellReal\n  },\n\n  /*::[*/\n  0x0006\n  /*::]*/\n  : {\n    /* n:\"BrtCellSt\", */\n    f: parse_BrtCellSt\n  },\n\n  /*::[*/\n  0x0007\n  /*::]*/\n  : {\n    /* n:\"BrtCellIsst\", */\n    f: parse_BrtCellIsst\n  },\n\n  /*::[*/\n  0x0008\n  /*::]*/\n  : {\n    /* n:\"BrtFmlaString\", */\n    f: parse_BrtFmlaString\n  },\n\n  /*::[*/\n  0x0009\n  /*::]*/\n  : {\n    /* n:\"BrtFmlaNum\", */\n    f: parse_BrtFmlaNum\n  },\n\n  /*::[*/\n  0x000A\n  /*::]*/\n  : {\n    /* n:\"BrtFmlaBool\", */\n    f: parse_BrtFmlaBool\n  },\n\n  /*::[*/\n  0x000B\n  /*::]*/\n  : {\n    /* n:\"BrtFmlaError\", */\n    f: parse_BrtFmlaError\n  },\n\n  /*::[*/\n  0x000C\n  /*::]*/\n  : {\n    /* n:\"BrtShortBlank\", */\n    f: parse_BrtShortBlank\n  },\n\n  /*::[*/\n  0x000D\n  /*::]*/\n  : {\n    /* n:\"BrtShortRk\", */\n    f: parse_BrtShortRk\n  },\n\n  /*::[*/\n  0x000E\n  /*::]*/\n  : {\n    /* n:\"BrtShortError\", */\n    f: parse_BrtShortError\n  },\n\n  /*::[*/\n  0x000F\n  /*::]*/\n  : {\n    /* n:\"BrtShortBool\", */\n    f: parse_BrtShortBool\n  },\n\n  /*::[*/\n  0x0010\n  /*::]*/\n  : {\n    /* n:\"BrtShortReal\", */\n    f: parse_BrtShortReal\n  },\n\n  /*::[*/\n  0x0011\n  /*::]*/\n  : {\n    /* n:\"BrtShortSt\", */\n    f: parse_BrtShortSt\n  },\n\n  /*::[*/\n  0x0012\n  /*::]*/\n  : {\n    /* n:\"BrtShortIsst\", */\n    f: parse_BrtShortIsst\n  },\n\n  /*::[*/\n  0x0013\n  /*::]*/\n  : {\n    /* n:\"BrtSSTItem\", */\n    f: parse_RichStr\n  },\n\n  /*::[*/\n  0x0014\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIMissing\" */\n  },\n\n  /*::[*/\n  0x0015\n  /*::]*/\n  : {\n    /* n:\"BrtPCDINumber\" */\n  },\n\n  /*::[*/\n  0x0016\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIBoolean\" */\n  },\n\n  /*::[*/\n  0x0017\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIError\" */\n  },\n\n  /*::[*/\n  0x0018\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIString\" */\n  },\n\n  /*::[*/\n  0x0019\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIDatetime\" */\n  },\n\n  /*::[*/\n  0x001A\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIIndex\" */\n  },\n\n  /*::[*/\n  0x001B\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIAMissing\" */\n  },\n\n  /*::[*/\n  0x001C\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIANumber\" */\n  },\n\n  /*::[*/\n  0x001D\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIABoolean\" */\n  },\n\n  /*::[*/\n  0x001E\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIAError\" */\n  },\n\n  /*::[*/\n  0x001F\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIAString\" */\n  },\n\n  /*::[*/\n  0x0020\n  /*::]*/\n  : {\n    /* n:\"BrtPCDIADatetime\" */\n  },\n\n  /*::[*/\n  0x0021\n  /*::]*/\n  : {\n    /* n:\"BrtPCRRecord\" */\n  },\n\n  /*::[*/\n  0x0022\n  /*::]*/\n  : {\n    /* n:\"BrtPCRRecordDt\" */\n  },\n\n  /*::[*/\n  0x0023\n  /*::]*/\n  : {\n    /* n:\"BrtFRTBegin\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0024\n  /*::]*/\n  : {\n    /* n:\"BrtFRTEnd\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0025\n  /*::]*/\n  : {\n    /* n:\"BrtACBegin\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0026\n  /*::]*/\n  : {\n    /* n:\"BrtACEnd\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0027\n  /*::]*/\n  : {\n    /* n:\"BrtName\", */\n    f: parse_BrtName\n  },\n\n  /*::[*/\n  0x0028\n  /*::]*/\n  : {\n    /* n:\"BrtIndexRowBlock\" */\n  },\n\n  /*::[*/\n  0x002A\n  /*::]*/\n  : {\n    /* n:\"BrtIndexBlock\" */\n  },\n\n  /*::[*/\n  0x002B\n  /*::]*/\n  : {\n    /* n:\"BrtFont\", */\n    f: parse_BrtFont\n  },\n\n  /*::[*/\n  0x002C\n  /*::]*/\n  : {\n    /* n:\"BrtFmt\", */\n    f: parse_BrtFmt\n  },\n\n  /*::[*/\n  0x002D\n  /*::]*/\n  : {\n    /* n:\"BrtFill\", */\n    f: parse_BrtFill\n  },\n\n  /*::[*/\n  0x002E\n  /*::]*/\n  : {\n    /* n:\"BrtBorder\", */\n    f: parse_BrtBorder\n  },\n\n  /*::[*/\n  0x002F\n  /*::]*/\n  : {\n    /* n:\"BrtXF\", */\n    f: parse_BrtXF\n  },\n\n  /*::[*/\n  0x0030\n  /*::]*/\n  : {\n    /* n:\"BrtStyle\" */\n  },\n\n  /*::[*/\n  0x0031\n  /*::]*/\n  : {\n    /* n:\"BrtCellMeta\", */\n    f: parse_Int32LE\n  },\n\n  /*::[*/\n  0x0032\n  /*::]*/\n  : {\n    /* n:\"BrtValueMeta\" */\n  },\n\n  /*::[*/\n  0x0033\n  /*::]*/\n  : {\n    /* n:\"BrtMdb\" */\n    f: parse_BrtMdb\n  },\n\n  /*::[*/\n  0x0034\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFmd\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0035\n  /*::]*/\n  : {\n    /* n:\"BrtEndFmd\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0036\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMdx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0037\n  /*::]*/\n  : {\n    /* n:\"BrtEndMdx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0038\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMdxTuple\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0039\n  /*::]*/\n  : {\n    /* n:\"BrtEndMdxTuple\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x003A\n  /*::]*/\n  : {\n    /* n:\"BrtMdxMbrIstr\" */\n  },\n\n  /*::[*/\n  0x003B\n  /*::]*/\n  : {\n    /* n:\"BrtStr\" */\n  },\n\n  /*::[*/\n  0x003C\n  /*::]*/\n  : {\n    /* n:\"BrtColInfo\", */\n    f: parse_ColInfo\n  },\n\n  /*::[*/\n  0x003E\n  /*::]*/\n  : {\n    /* n:\"BrtCellRString\", */\n    f: parse_BrtCellRString\n  },\n\n  /*::[*/\n  0x003F\n  /*::]*/\n  : {\n    /* n:\"BrtCalcChainItem$\", */\n    f: parse_BrtCalcChainItem$\n  },\n\n  /*::[*/\n  0x0040\n  /*::]*/\n  : {\n    /* n:\"BrtDVal\", */\n    f: parse_BrtDVal\n  },\n\n  /*::[*/\n  0x0041\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellNum\" */\n  },\n\n  /*::[*/\n  0x0042\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellStr\" */\n  },\n\n  /*::[*/\n  0x0043\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellBool\" */\n  },\n\n  /*::[*/\n  0x0044\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellErr\" */\n  },\n\n  /*::[*/\n  0x0045\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellDate\" */\n  },\n\n  /*::[*/\n  0x0046\n  /*::]*/\n  : {\n    /* n:\"BrtSxvcellNil\" */\n  },\n\n  /*::[*/\n  0x0080\n  /*::]*/\n  : {\n    /* n:\"BrtFileVersion\" */\n  },\n\n  /*::[*/\n  0x0081\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSheet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0082\n  /*::]*/\n  : {\n    /* n:\"BrtEndSheet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0083\n  /*::]*/\n  : {\n    /* n:\"BrtBeginBook\", */\n    T: 1,\n    f: parsenoop,\n    p: 0\n  },\n\n  /*::[*/\n  0x0084\n  /*::]*/\n  : {\n    /* n:\"BrtEndBook\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0085\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWsViews\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0086\n  /*::]*/\n  : {\n    /* n:\"BrtEndWsViews\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0087\n  /*::]*/\n  : {\n    /* n:\"BrtBeginBookViews\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0088\n  /*::]*/\n  : {\n    /* n:\"BrtEndBookViews\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0089\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWsView\", */\n    T: 1,\n    f: parse_BrtBeginWsView\n  },\n\n  /*::[*/\n  0x008A\n  /*::]*/\n  : {\n    /* n:\"BrtEndWsView\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x008B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCsViews\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x008C\n  /*::]*/\n  : {\n    /* n:\"BrtEndCsViews\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x008D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCsView\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x008E\n  /*::]*/\n  : {\n    /* n:\"BrtEndCsView\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x008F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginBundleShs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0090\n  /*::]*/\n  : {\n    /* n:\"BrtEndBundleShs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0091\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSheetData\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0092\n  /*::]*/\n  : {\n    /* n:\"BrtEndSheetData\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0093\n  /*::]*/\n  : {\n    /* n:\"BrtWsProp\", */\n    f: parse_BrtWsProp\n  },\n\n  /*::[*/\n  0x0094\n  /*::]*/\n  : {\n    /* n:\"BrtWsDim\", */\n    f: parse_BrtWsDim,\n    p: 16\n  },\n\n  /*::[*/\n  0x0097\n  /*::]*/\n  : {\n    /* n:\"BrtPane\", */\n    f: parse_BrtPane\n  },\n\n  /*::[*/\n  0x0098\n  /*::]*/\n  : {\n    /* n:\"BrtSel\" */\n  },\n\n  /*::[*/\n  0x0099\n  /*::]*/\n  : {\n    /* n:\"BrtWbProp\", */\n    f: parse_BrtWbProp\n  },\n\n  /*::[*/\n  0x009A\n  /*::]*/\n  : {\n    /* n:\"BrtWbFactoid\" */\n  },\n\n  /*::[*/\n  0x009B\n  /*::]*/\n  : {\n    /* n:\"BrtFileRecover\" */\n  },\n\n  /*::[*/\n  0x009C\n  /*::]*/\n  : {\n    /* n:\"BrtBundleSh\", */\n    f: parse_BrtBundleSh\n  },\n\n  /*::[*/\n  0x009D\n  /*::]*/\n  : {\n    /* n:\"BrtCalcProp\" */\n  },\n\n  /*::[*/\n  0x009E\n  /*::]*/\n  : {\n    /* n:\"BrtBookView\" */\n  },\n\n  /*::[*/\n  0x009F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSst\", */\n    T: 1,\n    f: parse_BrtBeginSst\n  },\n\n  /*::[*/\n  0x00A0\n  /*::]*/\n  : {\n    /* n:\"BrtEndSst\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00A1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginAFilter\", */\n    T: 1,\n    f: parse_UncheckedRfX\n  },\n\n  /*::[*/\n  0x00A2\n  /*::]*/\n  : {\n    /* n:\"BrtEndAFilter\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00A3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFilterColumn\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00A4\n  /*::]*/\n  : {\n    /* n:\"BrtEndFilterColumn\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00A5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00A6\n  /*::]*/\n  : {\n    /* n:\"BrtEndFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00A7\n  /*::]*/\n  : {\n    /* n:\"BrtFilter\" */\n  },\n\n  /*::[*/\n  0x00A8\n  /*::]*/\n  : {\n    /* n:\"BrtColorFilter\" */\n  },\n\n  /*::[*/\n  0x00A9\n  /*::]*/\n  : {\n    /* n:\"BrtIconFilter\" */\n  },\n\n  /*::[*/\n  0x00AA\n  /*::]*/\n  : {\n    /* n:\"BrtTop10Filter\" */\n  },\n\n  /*::[*/\n  0x00AB\n  /*::]*/\n  : {\n    /* n:\"BrtDynamicFilter\" */\n  },\n\n  /*::[*/\n  0x00AC\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCustomFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00AD\n  /*::]*/\n  : {\n    /* n:\"BrtEndCustomFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00AE\n  /*::]*/\n  : {\n    /* n:\"BrtCustomFilter\" */\n  },\n\n  /*::[*/\n  0x00AF\n  /*::]*/\n  : {\n    /* n:\"BrtAFilterDateGroupItem\" */\n  },\n\n  /*::[*/\n  0x00B0\n  /*::]*/\n  : {\n    /* n:\"BrtMergeCell\", */\n    f: parse_BrtMergeCell\n  },\n\n  /*::[*/\n  0x00B1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMergeCells\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00B2\n  /*::]*/\n  : {\n    /* n:\"BrtEndMergeCells\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00B3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotCacheDef\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00B4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotCacheDef\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00B5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFields\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00B6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFields\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00B7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDField\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00B8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDField\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00B9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSource\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00BA\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSource\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00BB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSRange\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00BC\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSRange\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00BD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFAtbl\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00BE\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFAtbl\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00BF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDIRun\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00C0\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDIRun\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00C1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotCacheRecords\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00C2\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotCacheRecords\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00C3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHierarchies\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00C4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHierarchies\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00C5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHierarchy\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00C6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHierarchy\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00C7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHFieldsUsage\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00C8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHFieldsUsage\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00C9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginExtConnection\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00CA\n  /*::]*/\n  : {\n    /* n:\"BrtEndExtConnection\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00CB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECDbProps\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00CC\n  /*::]*/\n  : {\n    /* n:\"BrtEndECDbProps\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00CD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECOlapProps\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00CE\n  /*::]*/\n  : {\n    /* n:\"BrtEndECOlapProps\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00CF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSConsol\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00D0\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSConsol\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00D1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSCPages\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00D2\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSCPages\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00D3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSCPage\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00D4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSCPage\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00D5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSCPItem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00D6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSCPItem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00D7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSCSets\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00D8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSCSets\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00D9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSCSet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00DA\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSCSet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00DB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFGroup\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00DC\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFGroup\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00DD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFGItems\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00DE\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFGItems\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00DF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFGRange\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00E0\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFGRange\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00E1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDFGDiscrete\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00E2\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDFGDiscrete\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00E3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTupleCache\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00E4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTupleCache\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00E5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCEntries\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00E6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCEntries\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00E7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCEMembers\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00E8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCEMembers\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00E9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCEMember\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00EA\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCEMember\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00EB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCQueries\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00EC\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCQueries\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00ED\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCQuery\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00EE\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCQuery\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00EF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCSets\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00F0\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCSets\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00F1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCSet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00F2\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSDTCSet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00F3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcItems\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00F4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcItems\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00F5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcItem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00F6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcItem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00F7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRule\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00F8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRule\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00F9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00FA\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00FB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFilter\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00FC\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFilter\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00FD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPNames\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x00FE\n  /*::]*/\n  : {\n    /* n:\"BrtEndPNames\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x00FF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPName\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0100\n  /*::]*/\n  : {\n    /* n:\"BrtEndPName\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0101\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPNPairs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0102\n  /*::]*/\n  : {\n    /* n:\"BrtEndPNPairs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0103\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPNPair\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0104\n  /*::]*/\n  : {\n    /* n:\"BrtEndPNPair\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0105\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECWebProps\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0106\n  /*::]*/\n  : {\n    /* n:\"BrtEndECWebProps\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0107\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEcWpTables\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0108\n  /*::]*/\n  : {\n    /* n:\"BrtEndECWPTables\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0109\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECParams\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x010A\n  /*::]*/\n  : {\n    /* n:\"BrtEndECParams\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x010B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECParam\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x010C\n  /*::]*/\n  : {\n    /* n:\"BrtEndECParam\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x010D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDKPIs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x010E\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDKPIs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x010F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDKPI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0110\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDKPI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0111\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDims\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0112\n  /*::]*/\n  : {\n    /* n:\"BrtEndDims\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0113\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDim\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0114\n  /*::]*/\n  : {\n    /* n:\"BrtEndDim\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0115\n  /*::]*/\n  : {\n    /* n:\"BrtIndexPartEnd\" */\n  },\n\n  /*::[*/\n  0x0116\n  /*::]*/\n  : {\n    /* n:\"BrtBeginStyleSheet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0117\n  /*::]*/\n  : {\n    /* n:\"BrtEndStyleSheet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0118\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXView\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0119\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXVI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x011A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXVI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x011B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXVIs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x011C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXVIs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x011D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXVD\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x011E\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXVD\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x011F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXVDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0120\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXVDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0121\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXPI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0122\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXPI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0123\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXPIs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0124\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXPIs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0125\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXDI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0126\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXDI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0127\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXDIs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0128\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXDIs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0129\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXLI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x012A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXLI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x012B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXLIRws\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x012C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXLIRws\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x012D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXLICols\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x012E\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXLICols\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x012F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXFormat\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0130\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXFormat\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0131\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXFormats\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0132\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxFormats\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0133\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSxSelect\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0134\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxSelect\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0135\n  /*::]*/\n  : {\n    /* n:\"BrtBeginISXVDRws\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0136\n  /*::]*/\n  : {\n    /* n:\"BrtEndISXVDRws\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0137\n  /*::]*/\n  : {\n    /* n:\"BrtBeginISXVDCols\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0138\n  /*::]*/\n  : {\n    /* n:\"BrtEndISXVDCols\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0139\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXLocation\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x013A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXLocation\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x013B\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXView\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x013C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTHs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x013D\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTHs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x013E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTH\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x013F\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTH\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0140\n  /*::]*/\n  : {\n    /* n:\"BrtBeginISXTHRws\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0141\n  /*::]*/\n  : {\n    /* n:\"BrtEndISXTHRws\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0142\n  /*::]*/\n  : {\n    /* n:\"BrtBeginISXTHCols\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0143\n  /*::]*/\n  : {\n    /* n:\"BrtEndISXTHCols\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0144\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTDMPS\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0145\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTDMPs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0146\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTDMP\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0147\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTDMP\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0148\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTHItems\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0149\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTHItems\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x014A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTHItem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x014B\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTHItem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x014C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMetadata\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x014D\n  /*::]*/\n  : {\n    /* n:\"BrtEndMetadata\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x014E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEsmdtinfo\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x014F\n  /*::]*/\n  : {\n    /* n:\"BrtMdtinfo\", */\n    f: parse_BrtMdtinfo\n  },\n\n  /*::[*/\n  0x0150\n  /*::]*/\n  : {\n    /* n:\"BrtEndEsmdtinfo\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0151\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEsmdb\", */\n    f: parse_BrtBeginEsmdb,\n    T: 1\n  },\n\n  /*::[*/\n  0x0152\n  /*::]*/\n  : {\n    /* n:\"BrtEndEsmdb\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0153\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEsfmd\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0154\n  /*::]*/\n  : {\n    /* n:\"BrtEndEsfmd\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0155\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSingleCells\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0156\n  /*::]*/\n  : {\n    /* n:\"BrtEndSingleCells\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0157\n  /*::]*/\n  : {\n    /* n:\"BrtBeginList\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0158\n  /*::]*/\n  : {\n    /* n:\"BrtEndList\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0159\n  /*::]*/\n  : {\n    /* n:\"BrtBeginListCols\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x015A\n  /*::]*/\n  : {\n    /* n:\"BrtEndListCols\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x015B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginListCol\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x015C\n  /*::]*/\n  : {\n    /* n:\"BrtEndListCol\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x015D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginListXmlCPr\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x015E\n  /*::]*/\n  : {\n    /* n:\"BrtEndListXmlCPr\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x015F\n  /*::]*/\n  : {\n    /* n:\"BrtListCCFmla\" */\n  },\n\n  /*::[*/\n  0x0160\n  /*::]*/\n  : {\n    /* n:\"BrtListTrFmla\" */\n  },\n\n  /*::[*/\n  0x0161\n  /*::]*/\n  : {\n    /* n:\"BrtBeginExternals\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0162\n  /*::]*/\n  : {\n    /* n:\"BrtEndExternals\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0163\n  /*::]*/\n  : {\n    /* n:\"BrtSupBookSrc\", */\n    f: parse_RelID\n  },\n\n  /*::[*/\n  0x0165\n  /*::]*/\n  : {\n    /* n:\"BrtSupSelf\" */\n  },\n\n  /*::[*/\n  0x0166\n  /*::]*/\n  : {\n    /* n:\"BrtSupSame\" */\n  },\n\n  /*::[*/\n  0x0167\n  /*::]*/\n  : {\n    /* n:\"BrtSupTabs\" */\n  },\n\n  /*::[*/\n  0x0168\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSupBook\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0169\n  /*::]*/\n  : {\n    /* n:\"BrtPlaceholderName\" */\n  },\n\n  /*::[*/\n  0x016A\n  /*::]*/\n  : {\n    /* n:\"BrtExternSheet\", */\n    f: parse_ExternSheet\n  },\n\n  /*::[*/\n  0x016B\n  /*::]*/\n  : {\n    /* n:\"BrtExternTableStart\" */\n  },\n\n  /*::[*/\n  0x016C\n  /*::]*/\n  : {\n    /* n:\"BrtExternTableEnd\" */\n  },\n\n  /*::[*/\n  0x016E\n  /*::]*/\n  : {\n    /* n:\"BrtExternRowHdr\" */\n  },\n\n  /*::[*/\n  0x016F\n  /*::]*/\n  : {\n    /* n:\"BrtExternCellBlank\" */\n  },\n\n  /*::[*/\n  0x0170\n  /*::]*/\n  : {\n    /* n:\"BrtExternCellReal\" */\n  },\n\n  /*::[*/\n  0x0171\n  /*::]*/\n  : {\n    /* n:\"BrtExternCellBool\" */\n  },\n\n  /*::[*/\n  0x0172\n  /*::]*/\n  : {\n    /* n:\"BrtExternCellError\" */\n  },\n\n  /*::[*/\n  0x0173\n  /*::]*/\n  : {\n    /* n:\"BrtExternCellString\" */\n  },\n\n  /*::[*/\n  0x0174\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEsmdx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0175\n  /*::]*/\n  : {\n    /* n:\"BrtEndEsmdx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0176\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMdxSet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0177\n  /*::]*/\n  : {\n    /* n:\"BrtEndMdxSet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0178\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMdxMbrProp\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0179\n  /*::]*/\n  : {\n    /* n:\"BrtEndMdxMbrProp\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x017A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMdxKPI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x017B\n  /*::]*/\n  : {\n    /* n:\"BrtEndMdxKPI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x017C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginEsstr\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x017D\n  /*::]*/\n  : {\n    /* n:\"BrtEndEsstr\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x017E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFItem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x017F\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFItem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0180\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0181\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0182\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotCacheID\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0183\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotCacheID\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0184\n  /*::]*/\n  : {\n    /* n:\"BrtBeginISXVIs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0185\n  /*::]*/\n  : {\n    /* n:\"BrtEndISXVIs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0186\n  /*::]*/\n  : {\n    /* n:\"BrtBeginColInfos\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0187\n  /*::]*/\n  : {\n    /* n:\"BrtEndColInfos\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0188\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRwBrk\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0189\n  /*::]*/\n  : {\n    /* n:\"BrtEndRwBrk\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x018A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginColBrk\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x018B\n  /*::]*/\n  : {\n    /* n:\"BrtEndColBrk\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x018C\n  /*::]*/\n  : {\n    /* n:\"BrtBrk\" */\n  },\n\n  /*::[*/\n  0x018D\n  /*::]*/\n  : {\n    /* n:\"BrtUserBookView\" */\n  },\n\n  /*::[*/\n  0x018E\n  /*::]*/\n  : {\n    /* n:\"BrtInfo\" */\n  },\n\n  /*::[*/\n  0x018F\n  /*::]*/\n  : {\n    /* n:\"BrtCUsr\" */\n  },\n\n  /*::[*/\n  0x0190\n  /*::]*/\n  : {\n    /* n:\"BrtUsr\" */\n  },\n\n  /*::[*/\n  0x0191\n  /*::]*/\n  : {\n    /* n:\"BrtBeginUsers\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0193\n  /*::]*/\n  : {\n    /* n:\"BrtEOF\" */\n  },\n\n  /*::[*/\n  0x0194\n  /*::]*/\n  : {\n    /* n:\"BrtUCR\" */\n  },\n\n  /*::[*/\n  0x0195\n  /*::]*/\n  : {\n    /* n:\"BrtRRInsDel\" */\n  },\n\n  /*::[*/\n  0x0196\n  /*::]*/\n  : {\n    /* n:\"BrtRREndInsDel\" */\n  },\n\n  /*::[*/\n  0x0197\n  /*::]*/\n  : {\n    /* n:\"BrtRRMove\" */\n  },\n\n  /*::[*/\n  0x0198\n  /*::]*/\n  : {\n    /* n:\"BrtRREndMove\" */\n  },\n\n  /*::[*/\n  0x0199\n  /*::]*/\n  : {\n    /* n:\"BrtRRChgCell\" */\n  },\n\n  /*::[*/\n  0x019A\n  /*::]*/\n  : {\n    /* n:\"BrtRREndChgCell\" */\n  },\n\n  /*::[*/\n  0x019B\n  /*::]*/\n  : {\n    /* n:\"BrtRRHeader\" */\n  },\n\n  /*::[*/\n  0x019C\n  /*::]*/\n  : {\n    /* n:\"BrtRRUserView\" */\n  },\n\n  /*::[*/\n  0x019D\n  /*::]*/\n  : {\n    /* n:\"BrtRRRenSheet\" */\n  },\n\n  /*::[*/\n  0x019E\n  /*::]*/\n  : {\n    /* n:\"BrtRRInsertSh\" */\n  },\n\n  /*::[*/\n  0x019F\n  /*::]*/\n  : {\n    /* n:\"BrtRRDefName\" */\n  },\n\n  /*::[*/\n  0x01A0\n  /*::]*/\n  : {\n    /* n:\"BrtRRNote\" */\n  },\n\n  /*::[*/\n  0x01A1\n  /*::]*/\n  : {\n    /* n:\"BrtRRConflict\" */\n  },\n\n  /*::[*/\n  0x01A2\n  /*::]*/\n  : {\n    /* n:\"BrtRRTQSIF\" */\n  },\n\n  /*::[*/\n  0x01A3\n  /*::]*/\n  : {\n    /* n:\"BrtRRFormat\" */\n  },\n\n  /*::[*/\n  0x01A4\n  /*::]*/\n  : {\n    /* n:\"BrtRREndFormat\" */\n  },\n\n  /*::[*/\n  0x01A5\n  /*::]*/\n  : {\n    /* n:\"BrtRRAutoFmt\" */\n  },\n\n  /*::[*/\n  0x01A6\n  /*::]*/\n  : {\n    /* n:\"BrtBeginUserShViews\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01A7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginUserShView\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01A8\n  /*::]*/\n  : {\n    /* n:\"BrtEndUserShView\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01A9\n  /*::]*/\n  : {\n    /* n:\"BrtEndUserShViews\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01AA\n  /*::]*/\n  : {\n    /* n:\"BrtArrFmla\", */\n    f: parse_BrtArrFmla\n  },\n\n  /*::[*/\n  0x01AB\n  /*::]*/\n  : {\n    /* n:\"BrtShrFmla\", */\n    f: parse_BrtShrFmla\n  },\n\n  /*::[*/\n  0x01AC\n  /*::]*/\n  : {\n    /* n:\"BrtTable\" */\n  },\n\n  /*::[*/\n  0x01AD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginExtConnections\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01AE\n  /*::]*/\n  : {\n    /* n:\"BrtEndExtConnections\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01AF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcMems\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01B0\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcMems\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01B1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcMem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01B2\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcMem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01B3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLevels\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01B4\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLevels\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01B5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLevel\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01B6\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLevel\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01B7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLGroups\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01B8\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLGroups\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01B9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLGroup\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01BA\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLGroup\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01BB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLGMembers\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01BC\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLGMembers\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01BD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDHGLGMember\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01BE\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDHGLGMember\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01BF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginQSI\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01C0\n  /*::]*/\n  : {\n    /* n:\"BrtEndQSI\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01C1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginQSIR\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01C2\n  /*::]*/\n  : {\n    /* n:\"BrtEndQSIR\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01C3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDeletedNames\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01C4\n  /*::]*/\n  : {\n    /* n:\"BrtEndDeletedNames\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01C5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDeletedName\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01C6\n  /*::]*/\n  : {\n    /* n:\"BrtEndDeletedName\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01C7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginQSIFs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01C8\n  /*::]*/\n  : {\n    /* n:\"BrtEndQSIFs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01C9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginQSIF\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01CA\n  /*::]*/\n  : {\n    /* n:\"BrtEndQSIF\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01CB\n  /*::]*/\n  : {\n    /* n:\"BrtBeginAutoSortScope\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01CC\n  /*::]*/\n  : {\n    /* n:\"BrtEndAutoSortScope\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01CD\n  /*::]*/\n  : {\n    /* n:\"BrtBeginConditionalFormatting\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01CE\n  /*::]*/\n  : {\n    /* n:\"BrtEndConditionalFormatting\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01CF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCFRule\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01D0\n  /*::]*/\n  : {\n    /* n:\"BrtEndCFRule\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01D1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginIconSet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01D2\n  /*::]*/\n  : {\n    /* n:\"BrtEndIconSet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01D3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDatabar\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01D4\n  /*::]*/\n  : {\n    /* n:\"BrtEndDatabar\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01D5\n  /*::]*/\n  : {\n    /* n:\"BrtBeginColorScale\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01D6\n  /*::]*/\n  : {\n    /* n:\"BrtEndColorScale\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01D7\n  /*::]*/\n  : {\n    /* n:\"BrtCFVO\" */\n  },\n\n  /*::[*/\n  0x01D8\n  /*::]*/\n  : {\n    /* n:\"BrtExternValueMeta\" */\n  },\n\n  /*::[*/\n  0x01D9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginColorPalette\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01DA\n  /*::]*/\n  : {\n    /* n:\"BrtEndColorPalette\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01DB\n  /*::]*/\n  : {\n    /* n:\"BrtIndexedColor\" */\n  },\n\n  /*::[*/\n  0x01DC\n  /*::]*/\n  : {\n    /* n:\"BrtMargins\", */\n    f: parse_BrtMargins\n  },\n\n  /*::[*/\n  0x01DD\n  /*::]*/\n  : {\n    /* n:\"BrtPrintOptions\" */\n  },\n\n  /*::[*/\n  0x01DE\n  /*::]*/\n  : {\n    /* n:\"BrtPageSetup\" */\n  },\n\n  /*::[*/\n  0x01DF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginHeaderFooter\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01E0\n  /*::]*/\n  : {\n    /* n:\"BrtEndHeaderFooter\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01E1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCrtFormat\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01E2\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCrtFormat\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01E3\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCrtFormats\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01E4\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCrtFormats\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01E5\n  /*::]*/\n  : {\n    /* n:\"BrtWsFmtInfo\", */\n    f: parse_BrtWsFmtInfo\n  },\n\n  /*::[*/\n  0x01E6\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMgs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01E7\n  /*::]*/\n  : {\n    /* n:\"BrtEndMGs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01E8\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMGMaps\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01E9\n  /*::]*/\n  : {\n    /* n:\"BrtEndMGMaps\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01EA\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMG\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01EB\n  /*::]*/\n  : {\n    /* n:\"BrtEndMG\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01EC\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMap\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01ED\n  /*::]*/\n  : {\n    /* n:\"BrtEndMap\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01EE\n  /*::]*/\n  : {\n    /* n:\"BrtHLink\", */\n    f: parse_BrtHLink\n  },\n\n  /*::[*/\n  0x01EF\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDCon\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01F0\n  /*::]*/\n  : {\n    /* n:\"BrtEndDCon\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01F1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDRefs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01F2\n  /*::]*/\n  : {\n    /* n:\"BrtEndDRefs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01F3\n  /*::]*/\n  : {\n    /* n:\"BrtDRef\" */\n  },\n\n  /*::[*/\n  0x01F4\n  /*::]*/\n  : {\n    /* n:\"BrtBeginScenMan\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01F5\n  /*::]*/\n  : {\n    /* n:\"BrtEndScenMan\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01F6\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSct\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01F7\n  /*::]*/\n  : {\n    /* n:\"BrtEndSct\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01F8\n  /*::]*/\n  : {\n    /* n:\"BrtSlc\" */\n  },\n\n  /*::[*/\n  0x01F9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDXFs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01FA\n  /*::]*/\n  : {\n    /* n:\"BrtEndDXFs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01FB\n  /*::]*/\n  : {\n    /* n:\"BrtDXF\" */\n  },\n\n  /*::[*/\n  0x01FC\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTableStyles\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01FD\n  /*::]*/\n  : {\n    /* n:\"BrtEndTableStyles\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x01FE\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTableStyle\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x01FF\n  /*::]*/\n  : {\n    /* n:\"BrtEndTableStyle\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0200\n  /*::]*/\n  : {\n    /* n:\"BrtTableStyleElement\" */\n  },\n\n  /*::[*/\n  0x0201\n  /*::]*/\n  : {\n    /* n:\"BrtTableStyleClient\" */\n  },\n\n  /*::[*/\n  0x0202\n  /*::]*/\n  : {\n    /* n:\"BrtBeginVolDeps\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0203\n  /*::]*/\n  : {\n    /* n:\"BrtEndVolDeps\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0204\n  /*::]*/\n  : {\n    /* n:\"BrtBeginVolType\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0205\n  /*::]*/\n  : {\n    /* n:\"BrtEndVolType\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0206\n  /*::]*/\n  : {\n    /* n:\"BrtBeginVolMain\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0207\n  /*::]*/\n  : {\n    /* n:\"BrtEndVolMain\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0208\n  /*::]*/\n  : {\n    /* n:\"BrtBeginVolTopic\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0209\n  /*::]*/\n  : {\n    /* n:\"BrtEndVolTopic\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x020A\n  /*::]*/\n  : {\n    /* n:\"BrtVolSubtopic\" */\n  },\n\n  /*::[*/\n  0x020B\n  /*::]*/\n  : {\n    /* n:\"BrtVolRef\" */\n  },\n\n  /*::[*/\n  0x020C\n  /*::]*/\n  : {\n    /* n:\"BrtVolNum\" */\n  },\n\n  /*::[*/\n  0x020D\n  /*::]*/\n  : {\n    /* n:\"BrtVolErr\" */\n  },\n\n  /*::[*/\n  0x020E\n  /*::]*/\n  : {\n    /* n:\"BrtVolStr\" */\n  },\n\n  /*::[*/\n  0x020F\n  /*::]*/\n  : {\n    /* n:\"BrtVolBool\" */\n  },\n\n  /*::[*/\n  0x0210\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCalcChain$\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0211\n  /*::]*/\n  : {\n    /* n:\"BrtEndCalcChain$\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0212\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSortState\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0213\n  /*::]*/\n  : {\n    /* n:\"BrtEndSortState\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0214\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSortCond\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0215\n  /*::]*/\n  : {\n    /* n:\"BrtEndSortCond\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0216\n  /*::]*/\n  : {\n    /* n:\"BrtBookProtection\" */\n  },\n\n  /*::[*/\n  0x0217\n  /*::]*/\n  : {\n    /* n:\"BrtSheetProtection\" */\n  },\n\n  /*::[*/\n  0x0218\n  /*::]*/\n  : {\n    /* n:\"BrtRangeProtection\" */\n  },\n\n  /*::[*/\n  0x0219\n  /*::]*/\n  : {\n    /* n:\"BrtPhoneticInfo\" */\n  },\n\n  /*::[*/\n  0x021A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTxtWiz\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x021B\n  /*::]*/\n  : {\n    /* n:\"BrtEndECTxtWiz\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x021C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTWFldInfoLst\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x021D\n  /*::]*/\n  : {\n    /* n:\"BrtEndECTWFldInfoLst\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x021E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTwFldInfo\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0224\n  /*::]*/\n  : {\n    /* n:\"BrtFileSharing\" */\n  },\n\n  /*::[*/\n  0x0225\n  /*::]*/\n  : {\n    /* n:\"BrtOleSize\" */\n  },\n\n  /*::[*/\n  0x0226\n  /*::]*/\n  : {\n    /* n:\"BrtDrawing\", */\n    f: parse_RelID\n  },\n\n  /*::[*/\n  0x0227\n  /*::]*/\n  : {\n    /* n:\"BrtLegacyDrawing\" */\n  },\n\n  /*::[*/\n  0x0228\n  /*::]*/\n  : {\n    /* n:\"BrtLegacyDrawingHF\" */\n  },\n\n  /*::[*/\n  0x0229\n  /*::]*/\n  : {\n    /* n:\"BrtWebOpt\" */\n  },\n\n  /*::[*/\n  0x022A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWebPubItems\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x022B\n  /*::]*/\n  : {\n    /* n:\"BrtEndWebPubItems\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x022C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWebPubItem\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x022D\n  /*::]*/\n  : {\n    /* n:\"BrtEndWebPubItem\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x022E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCondFmt\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x022F\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCondFmt\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0230\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCondFmts\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0231\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCondFmts\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0232\n  /*::]*/\n  : {\n    /* n:\"BrtBkHim\" */\n  },\n\n  /*::[*/\n  0x0234\n  /*::]*/\n  : {\n    /* n:\"BrtColor\" */\n  },\n\n  /*::[*/\n  0x0235\n  /*::]*/\n  : {\n    /* n:\"BrtBeginIndexedColors\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0236\n  /*::]*/\n  : {\n    /* n:\"BrtEndIndexedColors\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0239\n  /*::]*/\n  : {\n    /* n:\"BrtBeginMRUColors\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x023A\n  /*::]*/\n  : {\n    /* n:\"BrtEndMRUColors\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x023C\n  /*::]*/\n  : {\n    /* n:\"BrtMRUColor\" */\n  },\n\n  /*::[*/\n  0x023D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDVals\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x023E\n  /*::]*/\n  : {\n    /* n:\"BrtEndDVals\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0241\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameStart\" */\n  },\n\n  /*::[*/\n  0x0242\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameValueStart\" */\n  },\n\n  /*::[*/\n  0x0243\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameValueEnd\" */\n  },\n\n  /*::[*/\n  0x0244\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameNum\" */\n  },\n\n  /*::[*/\n  0x0245\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameErr\" */\n  },\n\n  /*::[*/\n  0x0246\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameSt\" */\n  },\n\n  /*::[*/\n  0x0247\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameNil\" */\n  },\n\n  /*::[*/\n  0x0248\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameBool\" */\n  },\n\n  /*::[*/\n  0x0249\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameFmla\" */\n  },\n\n  /*::[*/\n  0x024A\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameBits\" */\n  },\n\n  /*::[*/\n  0x024B\n  /*::]*/\n  : {\n    /* n:\"BrtSupNameEnd\" */\n  },\n\n  /*::[*/\n  0x024C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSupBook\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x024D\n  /*::]*/\n  : {\n    /* n:\"BrtCellSmartTagProperty\" */\n  },\n\n  /*::[*/\n  0x024E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellSmartTag\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x024F\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellSmartTag\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0250\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellSmartTags\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0251\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellSmartTags\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0252\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSmartTags\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0253\n  /*::]*/\n  : {\n    /* n:\"BrtEndSmartTags\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0254\n  /*::]*/\n  : {\n    /* n:\"BrtSmartTagType\" */\n  },\n\n  /*::[*/\n  0x0255\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSmartTagTypes\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0256\n  /*::]*/\n  : {\n    /* n:\"BrtEndSmartTagTypes\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0257\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0258\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0259\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXFILTER\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x025A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXFilter\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x025B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFills\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x025C\n  /*::]*/\n  : {\n    /* n:\"BrtEndFills\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x025D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellWatches\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x025E\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellWatches\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x025F\n  /*::]*/\n  : {\n    /* n:\"BrtCellWatch\" */\n  },\n\n  /*::[*/\n  0x0260\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCRErrs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0261\n  /*::]*/\n  : {\n    /* n:\"BrtEndCRErrs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0262\n  /*::]*/\n  : {\n    /* n:\"BrtCrashRecErr\" */\n  },\n\n  /*::[*/\n  0x0263\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFonts\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0264\n  /*::]*/\n  : {\n    /* n:\"BrtEndFonts\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0265\n  /*::]*/\n  : {\n    /* n:\"BrtBeginBorders\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0266\n  /*::]*/\n  : {\n    /* n:\"BrtEndBorders\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0267\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFmts\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0268\n  /*::]*/\n  : {\n    /* n:\"BrtEndFmts\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0269\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellXFs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x026A\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellXFs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x026B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginStyles\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x026C\n  /*::]*/\n  : {\n    /* n:\"BrtEndStyles\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0271\n  /*::]*/\n  : {\n    /* n:\"BrtBigName\" */\n  },\n\n  /*::[*/\n  0x0272\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellStyleXFs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0273\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellStyleXFs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0274\n  /*::]*/\n  : {\n    /* n:\"BrtBeginComments\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0275\n  /*::]*/\n  : {\n    /* n:\"BrtEndComments\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0276\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCommentAuthors\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0277\n  /*::]*/\n  : {\n    /* n:\"BrtEndCommentAuthors\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0278\n  /*::]*/\n  : {\n    /* n:\"BrtCommentAuthor\", */\n    f: parse_BrtCommentAuthor\n  },\n\n  /*::[*/\n  0x0279\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCommentList\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x027A\n  /*::]*/\n  : {\n    /* n:\"BrtEndCommentList\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x027B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginComment\", */\n    T: 1,\n    f: parse_BrtBeginComment\n  },\n\n  /*::[*/\n  0x027C\n  /*::]*/\n  : {\n    /* n:\"BrtEndComment\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x027D\n  /*::]*/\n  : {\n    /* n:\"BrtCommentText\", */\n    f: parse_BrtCommentText\n  },\n\n  /*::[*/\n  0x027E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginOleObjects\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x027F\n  /*::]*/\n  : {\n    /* n:\"BrtOleObject\" */\n  },\n\n  /*::[*/\n  0x0280\n  /*::]*/\n  : {\n    /* n:\"BrtEndOleObjects\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0281\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSxrules\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0282\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxRules\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0283\n  /*::]*/\n  : {\n    /* n:\"BrtBeginActiveXControls\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0284\n  /*::]*/\n  : {\n    /* n:\"BrtActiveX\" */\n  },\n\n  /*::[*/\n  0x0285\n  /*::]*/\n  : {\n    /* n:\"BrtEndActiveXControls\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0286\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDSDTCEMembersSortBy\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0288\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellIgnoreECs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0289\n  /*::]*/\n  : {\n    /* n:\"BrtCellIgnoreEC\" */\n  },\n\n  /*::[*/\n  0x028A\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellIgnoreECs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x028B\n  /*::]*/\n  : {\n    /* n:\"BrtCsProp\", */\n    f: parse_BrtCsProp\n  },\n\n  /*::[*/\n  0x028C\n  /*::]*/\n  : {\n    /* n:\"BrtCsPageSetup\" */\n  },\n\n  /*::[*/\n  0x028D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginUserCsViews\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x028E\n  /*::]*/\n  : {\n    /* n:\"BrtEndUserCsViews\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x028F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginUserCsView\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0290\n  /*::]*/\n  : {\n    /* n:\"BrtEndUserCsView\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0291\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPcdSFCIEntries\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0292\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDSFCIEntries\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0293\n  /*::]*/\n  : {\n    /* n:\"BrtPCDSFCIEntry\" */\n  },\n\n  /*::[*/\n  0x0294\n  /*::]*/\n  : {\n    /* n:\"BrtBeginListParts\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0295\n  /*::]*/\n  : {\n    /* n:\"BrtListPart\" */\n  },\n\n  /*::[*/\n  0x0296\n  /*::]*/\n  : {\n    /* n:\"BrtEndListParts\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0297\n  /*::]*/\n  : {\n    /* n:\"BrtSheetCalcProp\" */\n  },\n\n  /*::[*/\n  0x0298\n  /*::]*/\n  : {\n    /* n:\"BrtBeginFnGroup\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0299\n  /*::]*/\n  : {\n    /* n:\"BrtFnGroup\" */\n  },\n\n  /*::[*/\n  0x029A\n  /*::]*/\n  : {\n    /* n:\"BrtEndFnGroup\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x029B\n  /*::]*/\n  : {\n    /* n:\"BrtSupAddin\" */\n  },\n\n  /*::[*/\n  0x029C\n  /*::]*/\n  : {\n    /* n:\"BrtSXTDMPOrder\" */\n  },\n\n  /*::[*/\n  0x029D\n  /*::]*/\n  : {\n    /* n:\"BrtCsProtection\" */\n  },\n\n  /*::[*/\n  0x029F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWsSortMap\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x02A0\n  /*::]*/\n  : {\n    /* n:\"BrtEndWsSortMap\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x02A1\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRRSort\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x02A2\n  /*::]*/\n  : {\n    /* n:\"BrtEndRRSort\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x02A3\n  /*::]*/\n  : {\n    /* n:\"BrtRRSortItem\" */\n  },\n\n  /*::[*/\n  0x02A4\n  /*::]*/\n  : {\n    /* n:\"BrtFileSharingIso\" */\n  },\n\n  /*::[*/\n  0x02A5\n  /*::]*/\n  : {\n    /* n:\"BrtBookProtectionIso\" */\n  },\n\n  /*::[*/\n  0x02A6\n  /*::]*/\n  : {\n    /* n:\"BrtSheetProtectionIso\" */\n  },\n\n  /*::[*/\n  0x02A7\n  /*::]*/\n  : {\n    /* n:\"BrtCsProtectionIso\" */\n  },\n\n  /*::[*/\n  0x02A8\n  /*::]*/\n  : {\n    /* n:\"BrtRangeProtectionIso\" */\n  },\n\n  /*::[*/\n  0x02A9\n  /*::]*/\n  : {\n    /* n:\"BrtDValList\" */\n  },\n\n  /*::[*/\n  0x0400\n  /*::]*/\n  : {\n    /* n:\"BrtRwDescent\" */\n  },\n\n  /*::[*/\n  0x0401\n  /*::]*/\n  : {\n    /* n:\"BrtKnownFonts\" */\n  },\n\n  /*::[*/\n  0x0402\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTupleSet\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0403\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTupleSet\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0404\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTupleSetHeader\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0405\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTupleSetHeader\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0406\n  /*::]*/\n  : {\n    /* n:\"BrtSXTupleSetHeaderItem\" */\n  },\n\n  /*::[*/\n  0x0407\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTupleSetData\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0408\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTupleSetData\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0409\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXTupleSetRow\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x040A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXTupleSetRow\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x040B\n  /*::]*/\n  : {\n    /* n:\"BrtSXTupleSetRowItem\" */\n  },\n\n  /*::[*/\n  0x040C\n  /*::]*/\n  : {\n    /* n:\"BrtNameExt\" */\n  },\n\n  /*::[*/\n  0x040D\n  /*::]*/\n  : {\n    /* n:\"BrtPCDH14\" */\n  },\n\n  /*::[*/\n  0x040E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcMem14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x040F\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcMem14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0410\n  /*::]*/\n  : {\n    /* n:\"BrtSXTH14\" */\n  },\n\n  /*::[*/\n  0x0411\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSparklineGroup\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0412\n  /*::]*/\n  : {\n    /* n:\"BrtEndSparklineGroup\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0413\n  /*::]*/\n  : {\n    /* n:\"BrtSparkline\" */\n  },\n\n  /*::[*/\n  0x0414\n  /*::]*/\n  : {\n    /* n:\"BrtSXDI14\" */\n  },\n\n  /*::[*/\n  0x0415\n  /*::]*/\n  : {\n    /* n:\"BrtWsFmtInfoEx14\" */\n  },\n\n  /*::[*/\n  0x0416\n  /*::]*/\n  : {\n    /* n:\"BrtBeginConditionalFormatting14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0417\n  /*::]*/\n  : {\n    /* n:\"BrtEndConditionalFormatting14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0418\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCFRule14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0419\n  /*::]*/\n  : {\n    /* n:\"BrtEndCFRule14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x041A\n  /*::]*/\n  : {\n    /* n:\"BrtCFVO14\" */\n  },\n\n  /*::[*/\n  0x041B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDatabar14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x041C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginIconSet14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x041D\n  /*::]*/\n  : {\n    /* n:\"BrtDVal14\", */\n    f: parse_BrtDVal14\n  },\n\n  /*::[*/\n  0x041E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDVals14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x041F\n  /*::]*/\n  : {\n    /* n:\"BrtColor14\" */\n  },\n\n  /*::[*/\n  0x0420\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSparklines\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0421\n  /*::]*/\n  : {\n    /* n:\"BrtEndSparklines\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0422\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSparklineGroups\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0423\n  /*::]*/\n  : {\n    /* n:\"BrtEndSparklineGroups\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0425\n  /*::]*/\n  : {\n    /* n:\"BrtSXVD14\" */\n  },\n\n  /*::[*/\n  0x0426\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXView14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0427\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXView14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0428\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXView16\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0429\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXView16\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x042A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCD14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x042B\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCD14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x042C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginExtConn14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x042D\n  /*::]*/\n  : {\n    /* n:\"BrtEndExtConn14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x042E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x042F\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0430\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheID\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0431\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheID\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0433\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCache\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0434\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCache\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0435\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheDef\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0436\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheDef\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0437\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicersEx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0438\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicersEx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0439\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerEx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x043A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerEx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x043B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicer\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x043C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicer\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x043D\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCachePivotTables\" */\n  },\n\n  /*::[*/\n  0x043E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheOlapImpl\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x043F\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheOlapImpl\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0440\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheLevelsData\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0441\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheLevelsData\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0442\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheLevelData\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0443\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheLevelData\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0444\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheSiRanges\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0445\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheSiRanges\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0446\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheSiRange\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0447\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheSiRange\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0448\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCacheOlapItem\" */\n  },\n\n  /*::[*/\n  0x0449\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheSelections\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x044A\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCacheSelection\" */\n  },\n\n  /*::[*/\n  0x044B\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheSelections\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x044C\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCacheNative\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x044D\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCacheNative\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x044E\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCacheNativeItem\" */\n  },\n\n  /*::[*/\n  0x044F\n  /*::]*/\n  : {\n    /* n:\"BrtRangeProtection14\" */\n  },\n\n  /*::[*/\n  0x0450\n  /*::]*/\n  : {\n    /* n:\"BrtRangeProtectionIso14\" */\n  },\n\n  /*::[*/\n  0x0451\n  /*::]*/\n  : {\n    /* n:\"BrtCellIgnoreEC14\" */\n  },\n\n  /*::[*/\n  0x0457\n  /*::]*/\n  : {\n    /* n:\"BrtList14\" */\n  },\n\n  /*::[*/\n  0x0458\n  /*::]*/\n  : {\n    /* n:\"BrtCFIcon\" */\n  },\n\n  /*::[*/\n  0x0459\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCachesPivotCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x045A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCachesPivotCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x045B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicers\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x045C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicers\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x045D\n  /*::]*/\n  : {\n    /* n:\"BrtWbProp14\" */\n  },\n\n  /*::[*/\n  0x045E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXEdit\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x045F\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXEdit\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0460\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXEdits\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0461\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXEdits\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0462\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXChange\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0463\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXChange\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0464\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXChanges\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0465\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXChanges\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0466\n  /*::]*/\n  : {\n    /* n:\"BrtSXTupleItems\" */\n  },\n\n  /*::[*/\n  0x0468\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerStyle\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0469\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerStyle\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x046A\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerStyleElement\" */\n  },\n\n  /*::[*/\n  0x046B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginStyleSheetExt14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x046C\n  /*::]*/\n  : {\n    /* n:\"BrtEndStyleSheetExt14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x046D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerCachesPivotCacheID\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x046E\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerCachesPivotCacheID\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x046F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginConditionalFormattings\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0470\n  /*::]*/\n  : {\n    /* n:\"BrtEndConditionalFormattings\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0471\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcMemExt\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0472\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcMemExt\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0473\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPCDCalcMemsExt\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0474\n  /*::]*/\n  : {\n    /* n:\"BrtEndPCDCalcMemsExt\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0475\n  /*::]*/\n  : {\n    /* n:\"BrtPCDField14\" */\n  },\n\n  /*::[*/\n  0x0476\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerStyles\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0477\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerStyles\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0478\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSlicerStyleElements\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0479\n  /*::]*/\n  : {\n    /* n:\"BrtEndSlicerStyleElements\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x047A\n  /*::]*/\n  : {\n    /* n:\"BrtCFRuleExt\" */\n  },\n\n  /*::[*/\n  0x047B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCondFmt14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x047C\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCondFmt14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x047D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSXCondFmts14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x047E\n  /*::]*/\n  : {\n    /* n:\"BrtEndSXCondFmts14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0480\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSortCond14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0481\n  /*::]*/\n  : {\n    /* n:\"BrtEndSortCond14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0482\n  /*::]*/\n  : {\n    /* n:\"BrtEndDVals14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0483\n  /*::]*/\n  : {\n    /* n:\"BrtEndIconSet14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0484\n  /*::]*/\n  : {\n    /* n:\"BrtEndDatabar14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0485\n  /*::]*/\n  : {\n    /* n:\"BrtBeginColorScale14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0486\n  /*::]*/\n  : {\n    /* n:\"BrtEndColorScale14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0487\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSxrules14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0488\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxrules14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0489\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRule14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x048A\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRule14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x048B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFilters14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x048C\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFilters14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x048D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFilter14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x048E\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFilter14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x048F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPRFItem14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0490\n  /*::]*/\n  : {\n    /* n:\"BrtEndPRFItem14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0491\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCellIgnoreECs14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0492\n  /*::]*/\n  : {\n    /* n:\"BrtEndCellIgnoreECs14\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0493\n  /*::]*/\n  : {\n    /* n:\"BrtDxf14\" */\n  },\n\n  /*::[*/\n  0x0494\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDxF14s\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0495\n  /*::]*/\n  : {\n    /* n:\"BrtEndDxf14s\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0499\n  /*::]*/\n  : {\n    /* n:\"BrtFilter14\" */\n  },\n\n  /*::[*/\n  0x049A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCustomFilters14\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x049C\n  /*::]*/\n  : {\n    /* n:\"BrtCustomFilter14\" */\n  },\n\n  /*::[*/\n  0x049D\n  /*::]*/\n  : {\n    /* n:\"BrtIconFilter14\" */\n  },\n\n  /*::[*/\n  0x049E\n  /*::]*/\n  : {\n    /* n:\"BrtPivotCacheConnectionName\" */\n  },\n\n  /*::[*/\n  0x0800\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDecoupledPivotCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0801\n  /*::]*/\n  : {\n    /* n:\"BrtEndDecoupledPivotCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0802\n  /*::]*/\n  : {\n    /* n:\"BrtDecoupledPivotCacheID\" */\n  },\n\n  /*::[*/\n  0x0803\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotTableRefs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0804\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotTableRefs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0805\n  /*::]*/\n  : {\n    /* n:\"BrtPivotTableRef\" */\n  },\n\n  /*::[*/\n  0x0806\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCacheBookPivotTables\" */\n  },\n\n  /*::[*/\n  0x0807\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSxvcells\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0808\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxvcells\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0809\n  /*::]*/\n  : {\n    /* n:\"BrtBeginSxRow\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x080A\n  /*::]*/\n  : {\n    /* n:\"BrtEndSxRow\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x080C\n  /*::]*/\n  : {\n    /* n:\"BrtPcdCalcMem15\" */\n  },\n\n  /*::[*/\n  0x0813\n  /*::]*/\n  : {\n    /* n:\"BrtQsi15\" */\n  },\n\n  /*::[*/\n  0x0814\n  /*::]*/\n  : {\n    /* n:\"BrtBeginWebExtensions\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0815\n  /*::]*/\n  : {\n    /* n:\"BrtEndWebExtensions\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0816\n  /*::]*/\n  : {\n    /* n:\"BrtWebExtension\" */\n  },\n\n  /*::[*/\n  0x0817\n  /*::]*/\n  : {\n    /* n:\"BrtAbsPath15\" */\n  },\n\n  /*::[*/\n  0x0818\n  /*::]*/\n  : {\n    /* n:\"BrtBeginPivotTableUISettings\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0819\n  /*::]*/\n  : {\n    /* n:\"BrtEndPivotTableUISettings\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x081B\n  /*::]*/\n  : {\n    /* n:\"BrtTableSlicerCacheIDs\" */\n  },\n\n  /*::[*/\n  0x081C\n  /*::]*/\n  : {\n    /* n:\"BrtTableSlicerCacheID\" */\n  },\n\n  /*::[*/\n  0x081D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTableSlicerCache\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x081E\n  /*::]*/\n  : {\n    /* n:\"BrtEndTableSlicerCache\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x081F\n  /*::]*/\n  : {\n    /* n:\"BrtSxFilter15\" */\n  },\n\n  /*::[*/\n  0x0820\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineCachePivotCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0821\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineCachePivotCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0822\n  /*::]*/\n  : {\n    /* n:\"BrtTimelineCachePivotCacheID\" */\n  },\n\n  /*::[*/\n  0x0823\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineCacheIDs\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0824\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineCacheIDs\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0825\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineCacheID\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0826\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineCacheID\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0827\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelinesEx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0828\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelinesEx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0829\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineEx\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x082A\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineEx\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x082B\n  /*::]*/\n  : {\n    /* n:\"BrtWorkBookPr15\" */\n  },\n\n  /*::[*/\n  0x082C\n  /*::]*/\n  : {\n    /* n:\"BrtPCDH15\" */\n  },\n\n  /*::[*/\n  0x082D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineStyle\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x082E\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineStyle\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x082F\n  /*::]*/\n  : {\n    /* n:\"BrtTimelineStyleElement\" */\n  },\n\n  /*::[*/\n  0x0830\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineStylesheetExt15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0831\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineStylesheetExt15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0832\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineStyles\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0833\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineStyles\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0834\n  /*::]*/\n  : {\n    /* n:\"BrtBeginTimelineStyleElements\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0835\n  /*::]*/\n  : {\n    /* n:\"BrtEndTimelineStyleElements\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0836\n  /*::]*/\n  : {\n    /* n:\"BrtDxf15\" */\n  },\n\n  /*::[*/\n  0x0837\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDxfs15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0838\n  /*::]*/\n  : {\n    /* n:\"BrtEndDxfs15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0839\n  /*::]*/\n  : {\n    /* n:\"BrtSlicerCacheHideItemsWithNoData\" */\n  },\n\n  /*::[*/\n  0x083A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginItemUniqueNames\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x083B\n  /*::]*/\n  : {\n    /* n:\"BrtEndItemUniqueNames\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x083C\n  /*::]*/\n  : {\n    /* n:\"BrtItemUniqueName\" */\n  },\n\n  /*::[*/\n  0x083D\n  /*::]*/\n  : {\n    /* n:\"BrtBeginExtConn15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x083E\n  /*::]*/\n  : {\n    /* n:\"BrtEndExtConn15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x083F\n  /*::]*/\n  : {\n    /* n:\"BrtBeginOledbPr15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0840\n  /*::]*/\n  : {\n    /* n:\"BrtEndOledbPr15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0841\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDataFeedPr15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0842\n  /*::]*/\n  : {\n    /* n:\"BrtEndDataFeedPr15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0843\n  /*::]*/\n  : {\n    /* n:\"BrtTextPr15\" */\n  },\n\n  /*::[*/\n  0x0844\n  /*::]*/\n  : {\n    /* n:\"BrtRangePr15\" */\n  },\n\n  /*::[*/\n  0x0845\n  /*::]*/\n  : {\n    /* n:\"BrtDbCommand15\" */\n  },\n\n  /*::[*/\n  0x0846\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDbTables15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0847\n  /*::]*/\n  : {\n    /* n:\"BrtEndDbTables15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0848\n  /*::]*/\n  : {\n    /* n:\"BrtDbTable15\" */\n  },\n\n  /*::[*/\n  0x0849\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDataModel\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x084A\n  /*::]*/\n  : {\n    /* n:\"BrtEndDataModel\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x084B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginModelTables\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x084C\n  /*::]*/\n  : {\n    /* n:\"BrtEndModelTables\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x084D\n  /*::]*/\n  : {\n    /* n:\"BrtModelTable\" */\n  },\n\n  /*::[*/\n  0x084E\n  /*::]*/\n  : {\n    /* n:\"BrtBeginModelRelationships\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x084F\n  /*::]*/\n  : {\n    /* n:\"BrtEndModelRelationships\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0850\n  /*::]*/\n  : {\n    /* n:\"BrtModelRelationship\" */\n  },\n\n  /*::[*/\n  0x0851\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTxtWiz15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0852\n  /*::]*/\n  : {\n    /* n:\"BrtEndECTxtWiz15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0853\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTWFldInfoLst15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0854\n  /*::]*/\n  : {\n    /* n:\"BrtEndECTWFldInfoLst15\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x0855\n  /*::]*/\n  : {\n    /* n:\"BrtBeginECTWFldInfo15\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x0856\n  /*::]*/\n  : {\n    /* n:\"BrtFieldListActiveItem\" */\n  },\n\n  /*::[*/\n  0x0857\n  /*::]*/\n  : {\n    /* n:\"BrtPivotCacheIdVersion\" */\n  },\n\n  /*::[*/\n  0x0858\n  /*::]*/\n  : {\n    /* n:\"BrtSXDI15\" */\n  },\n\n  /*::[*/\n  0x0859\n  /*::]*/\n  : {\n    /* n:\"BrtBeginModelTimeGroupings\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x085A\n  /*::]*/\n  : {\n    /* n:\"BrtEndModelTimeGroupings\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x085B\n  /*::]*/\n  : {\n    /* n:\"BrtBeginModelTimeGrouping\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x085C\n  /*::]*/\n  : {\n    /* n:\"BrtEndModelTimeGrouping\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x085D\n  /*::]*/\n  : {\n    /* n:\"BrtModelTimeGroupingCalcCol\" */\n  },\n\n  /*::[*/\n  0x0C00\n  /*::]*/\n  : {\n    /* n:\"BrtUid\" */\n  },\n\n  /*::[*/\n  0x0C01\n  /*::]*/\n  : {\n    /* n:\"BrtRevisionPtr\" */\n  },\n\n  /*::[*/\n  0x1000\n  /*::]*/\n  : {\n    /* n:\"BrtBeginDynamicArrayPr\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x1001\n  /*::]*/\n  : {\n    /* n:\"BrtEndDynamicArrayPr\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x138A\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRichValueBlock\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x138B\n  /*::]*/\n  : {\n    /* n:\"BrtEndRichValueBlock\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13D9\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRichFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x13DA\n  /*::]*/\n  : {\n    /* n:\"BrtEndRichFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13DB\n  /*::]*/\n  : {\n    /* n:\"BrtRichFilter\" */\n  },\n\n  /*::[*/\n  0x13DC\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRichFilterColumn\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x13DD\n  /*::]*/\n  : {\n    /* n:\"BrtEndRichFilterColumn\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13DE\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCustomRichFilters\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x13DF\n  /*::]*/\n  : {\n    /* n:\"BrtEndCustomRichFilters\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13E0\n  /*::]*/\n  : {\n    /* n:\"BrtCustomRichFilter\" */\n  },\n\n  /*::[*/\n  0x13E1\n  /*::]*/\n  : {\n    /* n:\"BrtTop10RichFilter\" */\n  },\n\n  /*::[*/\n  0x13E2\n  /*::]*/\n  : {\n    /* n:\"BrtDynamicRichFilter\" */\n  },\n\n  /*::[*/\n  0x13E4\n  /*::]*/\n  : {\n    /* n:\"BrtBeginRichSortCondition\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x13E5\n  /*::]*/\n  : {\n    /* n:\"BrtEndRichSortCondition\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13E6\n  /*::]*/\n  : {\n    /* n:\"BrtRichFilterDateGroupItem\" */\n  },\n\n  /*::[*/\n  0x13E7\n  /*::]*/\n  : {\n    /* n:\"BrtBeginCalcFeatures\", */\n    T: 1\n  },\n\n  /*::[*/\n  0x13E8\n  /*::]*/\n  : {\n    /* n:\"BrtEndCalcFeatures\", */\n    T: -1\n  },\n\n  /*::[*/\n  0x13E9\n  /*::]*/\n  : {\n    /* n:\"BrtCalcFeature\" */\n  },\n\n  /*::[*/\n  0x13EB\n  /*::]*/\n  : {\n    /* n:\"BrtExternalLinksPr\" */\n  },\n\n  /*::[*/\n  0xFFFF\n  /*::]*/\n  : {\n    n: \"\"\n  }\n};\n/* [MS-XLS] 2.3 Record Enumeration (and other sources) */\n\nvar XLSRecordEnum = {\n  /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */\n\n  /*::[*/\n  0x0006\n  /*::]*/\n  : {\n    /* n:\"Formula\", */\n    f: parse_Formula\n  },\n\n  /*::[*/\n  0x000a\n  /*::]*/\n  : {\n    /* n:\"EOF\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x000c\n  /*::]*/\n  : {\n    /* n:\"CalcCount\", */\n    f: parseuint16\n  },\n  //\n\n  /*::[*/\n  0x000d\n  /*::]*/\n  : {\n    /* n:\"CalcMode\", */\n    f: parseuint16\n  },\n  //\n\n  /*::[*/\n  0x000e\n  /*::]*/\n  : {\n    /* n:\"CalcPrecision\", */\n    f: parsebool\n  },\n  //\n\n  /*::[*/\n  0x000f\n  /*::]*/\n  : {\n    /* n:\"CalcRefMode\", */\n    f: parsebool\n  },\n  //\n\n  /*::[*/\n  0x0010\n  /*::]*/\n  : {\n    /* n:\"CalcDelta\", */\n    f: parse_Xnum\n  },\n  //\n\n  /*::[*/\n  0x0011\n  /*::]*/\n  : {\n    /* n:\"CalcIter\", */\n    f: parsebool\n  },\n  //\n\n  /*::[*/\n  0x0012\n  /*::]*/\n  : {\n    /* n:\"Protect\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0013\n  /*::]*/\n  : {\n    /* n:\"Password\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x0014\n  /*::]*/\n  : {\n    /* n:\"Header\", */\n    f: parse_XLHeaderFooter\n  },\n\n  /*::[*/\n  0x0015\n  /*::]*/\n  : {\n    /* n:\"Footer\", */\n    f: parse_XLHeaderFooter\n  },\n\n  /*::[*/\n  0x0017\n  /*::]*/\n  : {\n    /* n:\"ExternSheet\", */\n    f: parse_ExternSheet\n  },\n\n  /*::[*/\n  0x0018\n  /*::]*/\n  : {\n    /* n:\"Lbl\", */\n    f: parse_Lbl\n  },\n\n  /*::[*/\n  0x0019\n  /*::]*/\n  : {\n    /* n:\"WinProtect\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x001a\n  /*::]*/\n  : {\n    /* n:\"VerticalPageBreaks\", */\n  },\n\n  /*::[*/\n  0x001b\n  /*::]*/\n  : {\n    /* n:\"HorizontalPageBreaks\", */\n  },\n\n  /*::[*/\n  0x001c\n  /*::]*/\n  : {\n    /* n:\"Note\", */\n    f: parse_Note\n  },\n\n  /*::[*/\n  0x001d\n  /*::]*/\n  : {\n    /* n:\"Selection\", */\n  },\n\n  /*::[*/\n  0x0022\n  /*::]*/\n  : {\n    /* n:\"Date1904\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0023\n  /*::]*/\n  : {\n    /* n:\"ExternName\", */\n    f: parse_ExternName\n  },\n\n  /*::[*/\n  0x0026\n  /*::]*/\n  : {\n    /* n:\"LeftMargin\", */\n    f: parse_Xnum\n  },\n  // *\n\n  /*::[*/\n  0x0027\n  /*::]*/\n  : {\n    /* n:\"RightMargin\", */\n    f: parse_Xnum\n  },\n  // *\n\n  /*::[*/\n  0x0028\n  /*::]*/\n  : {\n    /* n:\"TopMargin\", */\n    f: parse_Xnum\n  },\n  // *\n\n  /*::[*/\n  0x0029\n  /*::]*/\n  : {\n    /* n:\"BottomMargin\", */\n    f: parse_Xnum\n  },\n  // *\n\n  /*::[*/\n  0x002a\n  /*::]*/\n  : {\n    /* n:\"PrintRowCol\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x002b\n  /*::]*/\n  : {\n    /* n:\"PrintGrid\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x002f\n  /*::]*/\n  : {\n    /* n:\"FilePass\", */\n    f: parse_FilePass\n  },\n\n  /*::[*/\n  0x0031\n  /*::]*/\n  : {\n    /* n:\"Font\", */\n    f: parse_Font\n  },\n\n  /*::[*/\n  0x0033\n  /*::]*/\n  : {\n    /* n:\"PrintSize\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x003c\n  /*::]*/\n  : {\n    /* n:\"Continue\", */\n  },\n\n  /*::[*/\n  0x003d\n  /*::]*/\n  : {\n    /* n:\"Window1\", */\n    f: parse_Window1\n  },\n\n  /*::[*/\n  0x0040\n  /*::]*/\n  : {\n    /* n:\"Backup\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0041\n  /*::]*/\n  : {\n    /* n:\"Pane\", */\n    f: parse_Pane\n  },\n\n  /*::[*/\n  0x0042\n  /*::]*/\n  : {\n    /* n:\"CodePage\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x004d\n  /*::]*/\n  : {\n    /* n:\"Pls\", */\n  },\n\n  /*::[*/\n  0x0050\n  /*::]*/\n  : {\n    /* n:\"DCon\", */\n  },\n\n  /*::[*/\n  0x0051\n  /*::]*/\n  : {\n    /* n:\"DConRef\", */\n  },\n\n  /*::[*/\n  0x0052\n  /*::]*/\n  : {\n    /* n:\"DConName\", */\n  },\n\n  /*::[*/\n  0x0055\n  /*::]*/\n  : {\n    /* n:\"DefColWidth\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x0059\n  /*::]*/\n  : {\n    /* n:\"XCT\", */\n  },\n\n  /*::[*/\n  0x005a\n  /*::]*/\n  : {\n    /* n:\"CRN\", */\n  },\n\n  /*::[*/\n  0x005b\n  /*::]*/\n  : {\n    /* n:\"FileSharing\", */\n  },\n\n  /*::[*/\n  0x005c\n  /*::]*/\n  : {\n    /* n:\"WriteAccess\", */\n    f: parse_WriteAccess\n  },\n\n  /*::[*/\n  0x005d\n  /*::]*/\n  : {\n    /* n:\"Obj\", */\n    f: parse_Obj\n  },\n\n  /*::[*/\n  0x005e\n  /*::]*/\n  : {\n    /* n:\"Uncalced\", */\n  },\n\n  /*::[*/\n  0x005f\n  /*::]*/\n  : {\n    /* n:\"CalcSaveRecalc\", */\n    f: parsebool\n  },\n  //\n\n  /*::[*/\n  0x0060\n  /*::]*/\n  : {\n    /* n:\"Template\", */\n  },\n\n  /*::[*/\n  0x0061\n  /*::]*/\n  : {\n    /* n:\"Intl\", */\n  },\n\n  /*::[*/\n  0x0063\n  /*::]*/\n  : {\n    /* n:\"ObjProtect\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x007d\n  /*::]*/\n  : {\n    /* n:\"ColInfo\", */\n    f: parse_ColInfo\n  },\n\n  /*::[*/\n  0x0080\n  /*::]*/\n  : {\n    /* n:\"Guts\", */\n    f: parse_Guts\n  },\n\n  /*::[*/\n  0x0081\n  /*::]*/\n  : {\n    /* n:\"WsBool\", */\n    f: parse_WsBool\n  },\n\n  /*::[*/\n  0x0082\n  /*::]*/\n  : {\n    /* n:\"GridSet\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x0083\n  /*::]*/\n  : {\n    /* n:\"HCenter\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0084\n  /*::]*/\n  : {\n    /* n:\"VCenter\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0085\n  /*::]*/\n  : {\n    /* n:\"BoundSheet8\", */\n    f: parse_BoundSheet8\n  },\n\n  /*::[*/\n  0x0086\n  /*::]*/\n  : {\n    /* n:\"WriteProtect\", */\n  },\n\n  /*::[*/\n  0x008c\n  /*::]*/\n  : {\n    /* n:\"Country\", */\n    f: parse_Country\n  },\n\n  /*::[*/\n  0x008d\n  /*::]*/\n  : {\n    /* n:\"HideObj\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x0090\n  /*::]*/\n  : {\n    /* n:\"Sort\", */\n  },\n\n  /*::[*/\n  0x0092\n  /*::]*/\n  : {\n    /* n:\"Palette\", */\n    f: parse_Palette\n  },\n\n  /*::[*/\n  0x0097\n  /*::]*/\n  : {\n    /* n:\"Sync\", */\n  },\n\n  /*::[*/\n  0x0098\n  /*::]*/\n  : {\n    /* n:\"LPr\", */\n  },\n\n  /*::[*/\n  0x0099\n  /*::]*/\n  : {\n    /* n:\"DxGCol\", */\n  },\n\n  /*::[*/\n  0x009a\n  /*::]*/\n  : {\n    /* n:\"FnGroupName\", */\n  },\n\n  /*::[*/\n  0x009b\n  /*::]*/\n  : {\n    /* n:\"FilterMode\", */\n  },\n\n  /*::[*/\n  0x009c\n  /*::]*/\n  : {\n    /* n:\"BuiltInFnGroupCount\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x009d\n  /*::]*/\n  : {\n    /* n:\"AutoFilterInfo\", */\n  },\n\n  /*::[*/\n  0x009e\n  /*::]*/\n  : {\n    /* n:\"AutoFilter\", */\n  },\n\n  /*::[*/\n  0x00a0\n  /*::]*/\n  : {\n    /* n:\"Scl\", */\n    f: parse_Scl\n  },\n\n  /*::[*/\n  0x00a1\n  /*::]*/\n  : {\n    /* n:\"Setup\", */\n    f: parse_Setup\n  },\n\n  /*::[*/\n  0x00ae\n  /*::]*/\n  : {\n    /* n:\"ScenMan\", */\n  },\n\n  /*::[*/\n  0x00af\n  /*::]*/\n  : {\n    /* n:\"SCENARIO\", */\n  },\n\n  /*::[*/\n  0x00b0\n  /*::]*/\n  : {\n    /* n:\"SxView\", */\n  },\n\n  /*::[*/\n  0x00b1\n  /*::]*/\n  : {\n    /* n:\"Sxvd\", */\n  },\n\n  /*::[*/\n  0x00b2\n  /*::]*/\n  : {\n    /* n:\"SXVI\", */\n  },\n\n  /*::[*/\n  0x00b4\n  /*::]*/\n  : {\n    /* n:\"SxIvd\", */\n  },\n\n  /*::[*/\n  0x00b5\n  /*::]*/\n  : {\n    /* n:\"SXLI\", */\n  },\n\n  /*::[*/\n  0x00b6\n  /*::]*/\n  : {\n    /* n:\"SXPI\", */\n  },\n\n  /*::[*/\n  0x00b8\n  /*::]*/\n  : {\n    /* n:\"DocRoute\", */\n  },\n\n  /*::[*/\n  0x00b9\n  /*::]*/\n  : {\n    /* n:\"RecipName\", */\n  },\n\n  /*::[*/\n  0x00bd\n  /*::]*/\n  : {\n    /* n:\"MulRk\", */\n    f: parse_MulRk\n  },\n\n  /*::[*/\n  0x00be\n  /*::]*/\n  : {\n    /* n:\"MulBlank\", */\n    f: parse_MulBlank\n  },\n\n  /*::[*/\n  0x00c1\n  /*::]*/\n  : {\n    /* n:\"Mms\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x00c5\n  /*::]*/\n  : {\n    /* n:\"SXDI\", */\n  },\n\n  /*::[*/\n  0x00c6\n  /*::]*/\n  : {\n    /* n:\"SXDB\", */\n  },\n\n  /*::[*/\n  0x00c7\n  /*::]*/\n  : {\n    /* n:\"SXFDB\", */\n  },\n\n  /*::[*/\n  0x00c8\n  /*::]*/\n  : {\n    /* n:\"SXDBB\", */\n  },\n\n  /*::[*/\n  0x00c9\n  /*::]*/\n  : {\n    /* n:\"SXNum\", */\n  },\n\n  /*::[*/\n  0x00ca\n  /*::]*/\n  : {\n    /* n:\"SxBool\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x00cb\n  /*::]*/\n  : {\n    /* n:\"SxErr\", */\n  },\n\n  /*::[*/\n  0x00cc\n  /*::]*/\n  : {\n    /* n:\"SXInt\", */\n  },\n\n  /*::[*/\n  0x00cd\n  /*::]*/\n  : {\n    /* n:\"SXString\", */\n  },\n\n  /*::[*/\n  0x00ce\n  /*::]*/\n  : {\n    /* n:\"SXDtr\", */\n  },\n\n  /*::[*/\n  0x00cf\n  /*::]*/\n  : {\n    /* n:\"SxNil\", */\n  },\n\n  /*::[*/\n  0x00d0\n  /*::]*/\n  : {\n    /* n:\"SXTbl\", */\n  },\n\n  /*::[*/\n  0x00d1\n  /*::]*/\n  : {\n    /* n:\"SXTBRGIITM\", */\n  },\n\n  /*::[*/\n  0x00d2\n  /*::]*/\n  : {\n    /* n:\"SxTbpg\", */\n  },\n\n  /*::[*/\n  0x00d3\n  /*::]*/\n  : {\n    /* n:\"ObProj\", */\n  },\n\n  /*::[*/\n  0x00d5\n  /*::]*/\n  : {\n    /* n:\"SXStreamID\", */\n  },\n\n  /*::[*/\n  0x00d7\n  /*::]*/\n  : {\n    /* n:\"DBCell\", */\n  },\n\n  /*::[*/\n  0x00d8\n  /*::]*/\n  : {\n    /* n:\"SXRng\", */\n  },\n\n  /*::[*/\n  0x00d9\n  /*::]*/\n  : {\n    /* n:\"SxIsxoper\", */\n  },\n\n  /*::[*/\n  0x00da\n  /*::]*/\n  : {\n    /* n:\"BookBool\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x00dc\n  /*::]*/\n  : {\n    /* n:\"DbOrParamQry\", */\n  },\n\n  /*::[*/\n  0x00dd\n  /*::]*/\n  : {\n    /* n:\"ScenarioProtect\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x00de\n  /*::]*/\n  : {\n    /* n:\"OleObjectSize\", */\n  },\n\n  /*::[*/\n  0x00e0\n  /*::]*/\n  : {\n    /* n:\"XF\", */\n    f: parse_XF\n  },\n\n  /*::[*/\n  0x00e1\n  /*::]*/\n  : {\n    /* n:\"InterfaceHdr\", */\n    f: parse_InterfaceHdr\n  },\n\n  /*::[*/\n  0x00e2\n  /*::]*/\n  : {\n    /* n:\"InterfaceEnd\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x00e3\n  /*::]*/\n  : {\n    /* n:\"SXVS\", */\n  },\n\n  /*::[*/\n  0x00e5\n  /*::]*/\n  : {\n    /* n:\"MergeCells\", */\n    f: parse_MergeCells\n  },\n\n  /*::[*/\n  0x00e9\n  /*::]*/\n  : {\n    /* n:\"BkHim\", */\n  },\n\n  /*::[*/\n  0x00eb\n  /*::]*/\n  : {\n    /* n:\"MsoDrawingGroup\", */\n  },\n\n  /*::[*/\n  0x00ec\n  /*::]*/\n  : {\n    /* n:\"MsoDrawing\", */\n  },\n\n  /*::[*/\n  0x00ed\n  /*::]*/\n  : {\n    /* n:\"MsoDrawingSelection\", */\n  },\n\n  /*::[*/\n  0x00ef\n  /*::]*/\n  : {\n    /* n:\"PhoneticInfo\", */\n  },\n\n  /*::[*/\n  0x00f0\n  /*::]*/\n  : {\n    /* n:\"SxRule\", */\n  },\n\n  /*::[*/\n  0x00f1\n  /*::]*/\n  : {\n    /* n:\"SXEx\", */\n  },\n\n  /*::[*/\n  0x00f2\n  /*::]*/\n  : {\n    /* n:\"SxFilt\", */\n  },\n\n  /*::[*/\n  0x00f4\n  /*::]*/\n  : {\n    /* n:\"SxDXF\", */\n  },\n\n  /*::[*/\n  0x00f5\n  /*::]*/\n  : {\n    /* n:\"SxItm\", */\n  },\n\n  /*::[*/\n  0x00f6\n  /*::]*/\n  : {\n    /* n:\"SxName\", */\n  },\n\n  /*::[*/\n  0x00f7\n  /*::]*/\n  : {\n    /* n:\"SxSelect\", */\n  },\n\n  /*::[*/\n  0x00f8\n  /*::]*/\n  : {\n    /* n:\"SXPair\", */\n  },\n\n  /*::[*/\n  0x00f9\n  /*::]*/\n  : {\n    /* n:\"SxFmla\", */\n  },\n\n  /*::[*/\n  0x00fb\n  /*::]*/\n  : {\n    /* n:\"SxFormat\", */\n  },\n\n  /*::[*/\n  0x00fc\n  /*::]*/\n  : {\n    /* n:\"SST\", */\n    f: parse_SST\n  },\n\n  /*::[*/\n  0x00fd\n  /*::]*/\n  : {\n    /* n:\"LabelSst\", */\n    f: parse_LabelSst\n  },\n\n  /*::[*/\n  0x00ff\n  /*::]*/\n  : {\n    /* n:\"ExtSST\", */\n    f: parse_ExtSST\n  },\n\n  /*::[*/\n  0x0100\n  /*::]*/\n  : {\n    /* n:\"SXVDEx\", */\n  },\n\n  /*::[*/\n  0x0103\n  /*::]*/\n  : {\n    /* n:\"SXFormula\", */\n  },\n\n  /*::[*/\n  0x0122\n  /*::]*/\n  : {\n    /* n:\"SXDBEx\", */\n  },\n\n  /*::[*/\n  0x0137\n  /*::]*/\n  : {\n    /* n:\"RRDInsDel\", */\n  },\n\n  /*::[*/\n  0x0138\n  /*::]*/\n  : {\n    /* n:\"RRDHead\", */\n  },\n\n  /*::[*/\n  0x013b\n  /*::]*/\n  : {\n    /* n:\"RRDChgCell\", */\n  },\n\n  /*::[*/\n  0x013d\n  /*::]*/\n  : {\n    /* n:\"RRTabId\", */\n    f: parseuint16a\n  },\n\n  /*::[*/\n  0x013e\n  /*::]*/\n  : {\n    /* n:\"RRDRenSheet\", */\n  },\n\n  /*::[*/\n  0x013f\n  /*::]*/\n  : {\n    /* n:\"RRSort\", */\n  },\n\n  /*::[*/\n  0x0140\n  /*::]*/\n  : {\n    /* n:\"RRDMove\", */\n  },\n\n  /*::[*/\n  0x014a\n  /*::]*/\n  : {\n    /* n:\"RRFormat\", */\n  },\n\n  /*::[*/\n  0x014b\n  /*::]*/\n  : {\n    /* n:\"RRAutoFmt\", */\n  },\n\n  /*::[*/\n  0x014d\n  /*::]*/\n  : {\n    /* n:\"RRInsertSh\", */\n  },\n\n  /*::[*/\n  0x014e\n  /*::]*/\n  : {\n    /* n:\"RRDMoveBegin\", */\n  },\n\n  /*::[*/\n  0x014f\n  /*::]*/\n  : {\n    /* n:\"RRDMoveEnd\", */\n  },\n\n  /*::[*/\n  0x0150\n  /*::]*/\n  : {\n    /* n:\"RRDInsDelBegin\", */\n  },\n\n  /*::[*/\n  0x0151\n  /*::]*/\n  : {\n    /* n:\"RRDInsDelEnd\", */\n  },\n\n  /*::[*/\n  0x0152\n  /*::]*/\n  : {\n    /* n:\"RRDConflict\", */\n  },\n\n  /*::[*/\n  0x0153\n  /*::]*/\n  : {\n    /* n:\"RRDDefName\", */\n  },\n\n  /*::[*/\n  0x0154\n  /*::]*/\n  : {\n    /* n:\"RRDRstEtxp\", */\n  },\n\n  /*::[*/\n  0x015f\n  /*::]*/\n  : {\n    /* n:\"LRng\", */\n  },\n\n  /*::[*/\n  0x0160\n  /*::]*/\n  : {\n    /* n:\"UsesELFs\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x0161\n  /*::]*/\n  : {\n    /* n:\"DSF\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x0191\n  /*::]*/\n  : {\n    /* n:\"CUsr\", */\n  },\n\n  /*::[*/\n  0x0192\n  /*::]*/\n  : {\n    /* n:\"CbUsr\", */\n  },\n\n  /*::[*/\n  0x0193\n  /*::]*/\n  : {\n    /* n:\"UsrInfo\", */\n  },\n\n  /*::[*/\n  0x0194\n  /*::]*/\n  : {\n    /* n:\"UsrExcl\", */\n  },\n\n  /*::[*/\n  0x0195\n  /*::]*/\n  : {\n    /* n:\"FileLock\", */\n  },\n\n  /*::[*/\n  0x0196\n  /*::]*/\n  : {\n    /* n:\"RRDInfo\", */\n  },\n\n  /*::[*/\n  0x0197\n  /*::]*/\n  : {\n    /* n:\"BCUsrs\", */\n  },\n\n  /*::[*/\n  0x0198\n  /*::]*/\n  : {\n    /* n:\"UsrChk\", */\n  },\n\n  /*::[*/\n  0x01a9\n  /*::]*/\n  : {\n    /* n:\"UserBView\", */\n  },\n\n  /*::[*/\n  0x01aa\n  /*::]*/\n  : {\n    /* n:\"UserSViewBegin\", */\n  },\n\n  /*::[*/\n  0x01ab\n  /*::]*/\n  : {\n    /* n:\"UserSViewEnd\", */\n  },\n\n  /*::[*/\n  0x01ac\n  /*::]*/\n  : {\n    /* n:\"RRDUserView\", */\n  },\n\n  /*::[*/\n  0x01ad\n  /*::]*/\n  : {\n    /* n:\"Qsi\", */\n  },\n\n  /*::[*/\n  0x01ae\n  /*::]*/\n  : {\n    /* n:\"SupBook\", */\n    f: parse_SupBook\n  },\n\n  /*::[*/\n  0x01af\n  /*::]*/\n  : {\n    /* n:\"Prot4Rev\", */\n    f: parsebool\n  },\n\n  /*::[*/\n  0x01b0\n  /*::]*/\n  : {\n    /* n:\"CondFmt\", */\n  },\n\n  /*::[*/\n  0x01b1\n  /*::]*/\n  : {\n    /* n:\"CF\", */\n  },\n\n  /*::[*/\n  0x01b2\n  /*::]*/\n  : {\n    /* n:\"DVal\", */\n  },\n\n  /*::[*/\n  0x01b5\n  /*::]*/\n  : {\n    /* n:\"DConBin\", */\n  },\n\n  /*::[*/\n  0x01b6\n  /*::]*/\n  : {\n    /* n:\"TxO\", */\n    f: parse_TxO\n  },\n\n  /*::[*/\n  0x01b7\n  /*::]*/\n  : {\n    /* n:\"RefreshAll\", */\n    f: parsebool\n  },\n  //\n\n  /*::[*/\n  0x01b8\n  /*::]*/\n  : {\n    /* n:\"HLink\", */\n    f: parse_HLink\n  },\n\n  /*::[*/\n  0x01b9\n  /*::]*/\n  : {\n    /* n:\"Lel\", */\n  },\n\n  /*::[*/\n  0x01ba\n  /*::]*/\n  : {\n    /* n:\"CodeName\", */\n    f: parse_XLUnicodeString\n  },\n\n  /*::[*/\n  0x01bb\n  /*::]*/\n  : {\n    /* n:\"SXFDBType\", */\n  },\n\n  /*::[*/\n  0x01bc\n  /*::]*/\n  : {\n    /* n:\"Prot4RevPass\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x01bd\n  /*::]*/\n  : {\n    /* n:\"ObNoMacros\", */\n  },\n\n  /*::[*/\n  0x01be\n  /*::]*/\n  : {\n    /* n:\"Dv\", */\n  },\n\n  /*::[*/\n  0x01c0\n  /*::]*/\n  : {\n    /* n:\"Excel9File\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x01c1\n  /*::]*/\n  : {\n    /* n:\"RecalcId\", */\n    f: parse_RecalcId,\n    r: 2\n  },\n\n  /*::[*/\n  0x01c2\n  /*::]*/\n  : {\n    /* n:\"EntExU2\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x0200\n  /*::]*/\n  : {\n    /* n:\"Dimensions\", */\n    f: parse_Dimensions\n  },\n\n  /*::[*/\n  0x0201\n  /*::]*/\n  : {\n    /* n:\"Blank\", */\n    f: parse_Blank\n  },\n\n  /*::[*/\n  0x0203\n  /*::]*/\n  : {\n    /* n:\"Number\", */\n    f: parse_Number\n  },\n\n  /*::[*/\n  0x0204\n  /*::]*/\n  : {\n    /* n:\"Label\", */\n    f: parse_Label\n  },\n\n  /*::[*/\n  0x0205\n  /*::]*/\n  : {\n    /* n:\"BoolErr\", */\n    f: parse_BoolErr\n  },\n\n  /*::[*/\n  0x0207\n  /*::]*/\n  : {\n    /* n:\"String\", */\n    f: parse_String\n  },\n\n  /*::[*/\n  0x0208\n  /*::]*/\n  : {\n    /* n:\"Row\", */\n    f: parse_Row\n  },\n\n  /*::[*/\n  0x020b\n  /*::]*/\n  : {\n    /* n:\"Index\", */\n  },\n\n  /*::[*/\n  0x0221\n  /*::]*/\n  : {\n    /* n:\"Array\", */\n    f: parse_Array\n  },\n\n  /*::[*/\n  0x0225\n  /*::]*/\n  : {\n    /* n:\"DefaultRowHeight\", */\n    f: parse_DefaultRowHeight\n  },\n\n  /*::[*/\n  0x0236\n  /*::]*/\n  : {\n    /* n:\"Table\", */\n  },\n\n  /*::[*/\n  0x023e\n  /*::]*/\n  : {\n    /* n:\"Window2\", */\n    f: parse_Window2\n  },\n\n  /*::[*/\n  0x027e\n  /*::]*/\n  : {\n    /* n:\"RK\", */\n    f: parse_RK\n  },\n\n  /*::[*/\n  0x0293\n  /*::]*/\n  : {\n    /* n:\"Style\", */\n  },\n\n  /*::[*/\n  0x0418\n  /*::]*/\n  : {\n    /* n:\"BigName\", */\n  },\n\n  /*::[*/\n  0x041e\n  /*::]*/\n  : {\n    /* n:\"Format\", */\n    f: parse_Format\n  },\n\n  /*::[*/\n  0x043c\n  /*::]*/\n  : {\n    /* n:\"ContinueBigName\", */\n  },\n\n  /*::[*/\n  0x04bc\n  /*::]*/\n  : {\n    /* n:\"ShrFmla\", */\n    f: parse_ShrFmla\n  },\n\n  /*::[*/\n  0x0800\n  /*::]*/\n  : {\n    /* n:\"HLinkTooltip\", */\n    f: parse_HLinkTooltip\n  },\n\n  /*::[*/\n  0x0801\n  /*::]*/\n  : {\n    /* n:\"WebPub\", */\n  },\n\n  /*::[*/\n  0x0802\n  /*::]*/\n  : {\n    /* n:\"QsiSXTag\", */\n  },\n\n  /*::[*/\n  0x0803\n  /*::]*/\n  : {\n    /* n:\"DBQueryExt\", */\n  },\n\n  /*::[*/\n  0x0804\n  /*::]*/\n  : {\n    /* n:\"ExtString\", */\n  },\n\n  /*::[*/\n  0x0805\n  /*::]*/\n  : {\n    /* n:\"TxtQry\", */\n  },\n\n  /*::[*/\n  0x0806\n  /*::]*/\n  : {\n    /* n:\"Qsir\", */\n  },\n\n  /*::[*/\n  0x0807\n  /*::]*/\n  : {\n    /* n:\"Qsif\", */\n  },\n\n  /*::[*/\n  0x0808\n  /*::]*/\n  : {\n    /* n:\"RRDTQSIF\", */\n  },\n\n  /*::[*/\n  0x0809\n  /*::]*/\n  : {\n    /* n:\"BOF\", */\n    f: parse_BOF\n  },\n\n  /*::[*/\n  0x080a\n  /*::]*/\n  : {\n    /* n:\"OleDbConn\", */\n  },\n\n  /*::[*/\n  0x080b\n  /*::]*/\n  : {\n    /* n:\"WOpt\", */\n  },\n\n  /*::[*/\n  0x080c\n  /*::]*/\n  : {\n    /* n:\"SXViewEx\", */\n  },\n\n  /*::[*/\n  0x080d\n  /*::]*/\n  : {\n    /* n:\"SXTH\", */\n  },\n\n  /*::[*/\n  0x080e\n  /*::]*/\n  : {\n    /* n:\"SXPIEx\", */\n  },\n\n  /*::[*/\n  0x080f\n  /*::]*/\n  : {\n    /* n:\"SXVDTEx\", */\n  },\n\n  /*::[*/\n  0x0810\n  /*::]*/\n  : {\n    /* n:\"SXViewEx9\", */\n  },\n\n  /*::[*/\n  0x0812\n  /*::]*/\n  : {\n    /* n:\"ContinueFrt\", */\n  },\n\n  /*::[*/\n  0x0813\n  /*::]*/\n  : {\n    /* n:\"RealTimeData\", */\n  },\n\n  /*::[*/\n  0x0850\n  /*::]*/\n  : {\n    /* n:\"ChartFrtInfo\", */\n  },\n\n  /*::[*/\n  0x0851\n  /*::]*/\n  : {\n    /* n:\"FrtWrapper\", */\n  },\n\n  /*::[*/\n  0x0852\n  /*::]*/\n  : {\n    /* n:\"StartBlock\", */\n  },\n\n  /*::[*/\n  0x0853\n  /*::]*/\n  : {\n    /* n:\"EndBlock\", */\n  },\n\n  /*::[*/\n  0x0854\n  /*::]*/\n  : {\n    /* n:\"StartObject\", */\n  },\n\n  /*::[*/\n  0x0855\n  /*::]*/\n  : {\n    /* n:\"EndObject\", */\n  },\n\n  /*::[*/\n  0x0856\n  /*::]*/\n  : {\n    /* n:\"CatLab\", */\n  },\n\n  /*::[*/\n  0x0857\n  /*::]*/\n  : {\n    /* n:\"YMult\", */\n  },\n\n  /*::[*/\n  0x0858\n  /*::]*/\n  : {\n    /* n:\"SXViewLink\", */\n  },\n\n  /*::[*/\n  0x0859\n  /*::]*/\n  : {\n    /* n:\"PivotChartBits\", */\n  },\n\n  /*::[*/\n  0x085a\n  /*::]*/\n  : {\n    /* n:\"FrtFontList\", */\n  },\n\n  /*::[*/\n  0x0862\n  /*::]*/\n  : {\n    /* n:\"SheetExt\", */\n  },\n\n  /*::[*/\n  0x0863\n  /*::]*/\n  : {\n    /* n:\"BookExt\", */\n    r: 12\n  },\n\n  /*::[*/\n  0x0864\n  /*::]*/\n  : {\n    /* n:\"SXAddl\", */\n  },\n\n  /*::[*/\n  0x0865\n  /*::]*/\n  : {\n    /* n:\"CrErr\", */\n  },\n\n  /*::[*/\n  0x0866\n  /*::]*/\n  : {\n    /* n:\"HFPicture\", */\n  },\n\n  /*::[*/\n  0x0867\n  /*::]*/\n  : {\n    /* n:\"FeatHdr\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x0868\n  /*::]*/\n  : {\n    /* n:\"Feat\", */\n  },\n\n  /*::[*/\n  0x086a\n  /*::]*/\n  : {\n    /* n:\"DataLabExt\", */\n  },\n\n  /*::[*/\n  0x086b\n  /*::]*/\n  : {\n    /* n:\"DataLabExtContents\", */\n  },\n\n  /*::[*/\n  0x086c\n  /*::]*/\n  : {\n    /* n:\"CellWatch\", */\n  },\n\n  /*::[*/\n  0x0871\n  /*::]*/\n  : {\n    /* n:\"FeatHdr11\", */\n  },\n\n  /*::[*/\n  0x0872\n  /*::]*/\n  : {\n    /* n:\"Feature11\", */\n  },\n\n  /*::[*/\n  0x0874\n  /*::]*/\n  : {\n    /* n:\"DropDownObjIds\", */\n  },\n\n  /*::[*/\n  0x0875\n  /*::]*/\n  : {\n    /* n:\"ContinueFrt11\", */\n  },\n\n  /*::[*/\n  0x0876\n  /*::]*/\n  : {\n    /* n:\"DConn\", */\n  },\n\n  /*::[*/\n  0x0877\n  /*::]*/\n  : {\n    /* n:\"List12\", */\n  },\n\n  /*::[*/\n  0x0878\n  /*::]*/\n  : {\n    /* n:\"Feature12\", */\n  },\n\n  /*::[*/\n  0x0879\n  /*::]*/\n  : {\n    /* n:\"CondFmt12\", */\n  },\n\n  /*::[*/\n  0x087a\n  /*::]*/\n  : {\n    /* n:\"CF12\", */\n  },\n\n  /*::[*/\n  0x087b\n  /*::]*/\n  : {\n    /* n:\"CFEx\", */\n  },\n\n  /*::[*/\n  0x087c\n  /*::]*/\n  : {\n    /* n:\"XFCRC\", */\n    f: parse_XFCRC,\n    r: 12\n  },\n\n  /*::[*/\n  0x087d\n  /*::]*/\n  : {\n    /* n:\"XFExt\", */\n    f: parse_XFExt,\n    r: 12\n  },\n\n  /*::[*/\n  0x087e\n  /*::]*/\n  : {\n    /* n:\"AutoFilter12\", */\n  },\n\n  /*::[*/\n  0x087f\n  /*::]*/\n  : {\n    /* n:\"ContinueFrt12\", */\n  },\n\n  /*::[*/\n  0x0884\n  /*::]*/\n  : {\n    /* n:\"MDTInfo\", */\n  },\n\n  /*::[*/\n  0x0885\n  /*::]*/\n  : {\n    /* n:\"MDXStr\", */\n  },\n\n  /*::[*/\n  0x0886\n  /*::]*/\n  : {\n    /* n:\"MDXTuple\", */\n  },\n\n  /*::[*/\n  0x0887\n  /*::]*/\n  : {\n    /* n:\"MDXSet\", */\n  },\n\n  /*::[*/\n  0x0888\n  /*::]*/\n  : {\n    /* n:\"MDXProp\", */\n  },\n\n  /*::[*/\n  0x0889\n  /*::]*/\n  : {\n    /* n:\"MDXKPI\", */\n  },\n\n  /*::[*/\n  0x088a\n  /*::]*/\n  : {\n    /* n:\"MDB\", */\n  },\n\n  /*::[*/\n  0x088b\n  /*::]*/\n  : {\n    /* n:\"PLV\", */\n  },\n\n  /*::[*/\n  0x088c\n  /*::]*/\n  : {\n    /* n:\"Compat12\", */\n    f: parsebool,\n    r: 12\n  },\n\n  /*::[*/\n  0x088d\n  /*::]*/\n  : {\n    /* n:\"DXF\", */\n  },\n\n  /*::[*/\n  0x088e\n  /*::]*/\n  : {\n    /* n:\"TableStyles\", */\n    r: 12\n  },\n\n  /*::[*/\n  0x088f\n  /*::]*/\n  : {\n    /* n:\"TableStyle\", */\n  },\n\n  /*::[*/\n  0x0890\n  /*::]*/\n  : {\n    /* n:\"TableStyleElement\", */\n  },\n\n  /*::[*/\n  0x0892\n  /*::]*/\n  : {\n    /* n:\"StyleExt\", */\n  },\n\n  /*::[*/\n  0x0893\n  /*::]*/\n  : {\n    /* n:\"NamePublish\", */\n  },\n\n  /*::[*/\n  0x0894\n  /*::]*/\n  : {\n    /* n:\"NameCmt\", */\n    f: parse_NameCmt,\n    r: 12\n  },\n\n  /*::[*/\n  0x0895\n  /*::]*/\n  : {\n    /* n:\"SortData\", */\n  },\n\n  /*::[*/\n  0x0896\n  /*::]*/\n  : {\n    /* n:\"Theme\", */\n    f: parse_Theme,\n    r: 12\n  },\n\n  /*::[*/\n  0x0897\n  /*::]*/\n  : {\n    /* n:\"GUIDTypeLib\", */\n  },\n\n  /*::[*/\n  0x0898\n  /*::]*/\n  : {\n    /* n:\"FnGrp12\", */\n  },\n\n  /*::[*/\n  0x0899\n  /*::]*/\n  : {\n    /* n:\"NameFnGrp12\", */\n  },\n\n  /*::[*/\n  0x089a\n  /*::]*/\n  : {\n    /* n:\"MTRSettings\", */\n    f: parse_MTRSettings,\n    r: 12\n  },\n\n  /*::[*/\n  0x089b\n  /*::]*/\n  : {\n    /* n:\"CompressPictures\", */\n    f: parsenoop2\n  },\n\n  /*::[*/\n  0x089c\n  /*::]*/\n  : {\n    /* n:\"HeaderFooter\", */\n  },\n\n  /*::[*/\n  0x089d\n  /*::]*/\n  : {\n    /* n:\"CrtLayout12\", */\n  },\n\n  /*::[*/\n  0x089e\n  /*::]*/\n  : {\n    /* n:\"CrtMlFrt\", */\n  },\n\n  /*::[*/\n  0x089f\n  /*::]*/\n  : {\n    /* n:\"CrtMlFrtContinue\", */\n  },\n\n  /*::[*/\n  0x08a3\n  /*::]*/\n  : {\n    /* n:\"ForceFullCalculation\", */\n    f: parse_ForceFullCalculation\n  },\n\n  /*::[*/\n  0x08a4\n  /*::]*/\n  : {\n    /* n:\"ShapePropsStream\", */\n  },\n\n  /*::[*/\n  0x08a5\n  /*::]*/\n  : {\n    /* n:\"TextPropsStream\", */\n  },\n\n  /*::[*/\n  0x08a6\n  /*::]*/\n  : {\n    /* n:\"RichTextStream\", */\n  },\n\n  /*::[*/\n  0x08a7\n  /*::]*/\n  : {\n    /* n:\"CrtLayout12A\", */\n  },\n\n  /*::[*/\n  0x1001\n  /*::]*/\n  : {\n    /* n:\"Units\", */\n  },\n\n  /*::[*/\n  0x1002\n  /*::]*/\n  : {\n    /* n:\"Chart\", */\n  },\n\n  /*::[*/\n  0x1003\n  /*::]*/\n  : {\n    /* n:\"Series\", */\n  },\n\n  /*::[*/\n  0x1006\n  /*::]*/\n  : {\n    /* n:\"DataFormat\", */\n  },\n\n  /*::[*/\n  0x1007\n  /*::]*/\n  : {\n    /* n:\"LineFormat\", */\n  },\n\n  /*::[*/\n  0x1009\n  /*::]*/\n  : {\n    /* n:\"MarkerFormat\", */\n  },\n\n  /*::[*/\n  0x100a\n  /*::]*/\n  : {\n    /* n:\"AreaFormat\", */\n  },\n\n  /*::[*/\n  0x100b\n  /*::]*/\n  : {\n    /* n:\"PieFormat\", */\n  },\n\n  /*::[*/\n  0x100c\n  /*::]*/\n  : {\n    /* n:\"AttachedLabel\", */\n  },\n\n  /*::[*/\n  0x100d\n  /*::]*/\n  : {\n    /* n:\"SeriesText\", */\n  },\n\n  /*::[*/\n  0x1014\n  /*::]*/\n  : {\n    /* n:\"ChartFormat\", */\n  },\n\n  /*::[*/\n  0x1015\n  /*::]*/\n  : {\n    /* n:\"Legend\", */\n  },\n\n  /*::[*/\n  0x1016\n  /*::]*/\n  : {\n    /* n:\"SeriesList\", */\n  },\n\n  /*::[*/\n  0x1017\n  /*::]*/\n  : {\n    /* n:\"Bar\", */\n  },\n\n  /*::[*/\n  0x1018\n  /*::]*/\n  : {\n    /* n:\"Line\", */\n  },\n\n  /*::[*/\n  0x1019\n  /*::]*/\n  : {\n    /* n:\"Pie\", */\n  },\n\n  /*::[*/\n  0x101a\n  /*::]*/\n  : {\n    /* n:\"Area\", */\n  },\n\n  /*::[*/\n  0x101b\n  /*::]*/\n  : {\n    /* n:\"Scatter\", */\n  },\n\n  /*::[*/\n  0x101c\n  /*::]*/\n  : {\n    /* n:\"CrtLine\", */\n  },\n\n  /*::[*/\n  0x101d\n  /*::]*/\n  : {\n    /* n:\"Axis\", */\n  },\n\n  /*::[*/\n  0x101e\n  /*::]*/\n  : {\n    /* n:\"Tick\", */\n  },\n\n  /*::[*/\n  0x101f\n  /*::]*/\n  : {\n    /* n:\"ValueRange\", */\n  },\n\n  /*::[*/\n  0x1020\n  /*::]*/\n  : {\n    /* n:\"CatSerRange\", */\n  },\n\n  /*::[*/\n  0x1021\n  /*::]*/\n  : {\n    /* n:\"AxisLine\", */\n  },\n\n  /*::[*/\n  0x1022\n  /*::]*/\n  : {\n    /* n:\"CrtLink\", */\n  },\n\n  /*::[*/\n  0x1024\n  /*::]*/\n  : {\n    /* n:\"DefaultText\", */\n  },\n\n  /*::[*/\n  0x1025\n  /*::]*/\n  : {\n    /* n:\"Text\", */\n  },\n\n  /*::[*/\n  0x1026\n  /*::]*/\n  : {\n    /* n:\"FontX\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x1027\n  /*::]*/\n  : {\n    /* n:\"ObjectLink\", */\n  },\n\n  /*::[*/\n  0x1032\n  /*::]*/\n  : {\n    /* n:\"Frame\", */\n  },\n\n  /*::[*/\n  0x1033\n  /*::]*/\n  : {\n    /* n:\"Begin\", */\n  },\n\n  /*::[*/\n  0x1034\n  /*::]*/\n  : {\n    /* n:\"End\", */\n  },\n\n  /*::[*/\n  0x1035\n  /*::]*/\n  : {\n    /* n:\"PlotArea\", */\n  },\n\n  /*::[*/\n  0x103a\n  /*::]*/\n  : {\n    /* n:\"Chart3d\", */\n  },\n\n  /*::[*/\n  0x103c\n  /*::]*/\n  : {\n    /* n:\"PicF\", */\n  },\n\n  /*::[*/\n  0x103d\n  /*::]*/\n  : {\n    /* n:\"DropBar\", */\n  },\n\n  /*::[*/\n  0x103e\n  /*::]*/\n  : {\n    /* n:\"Radar\", */\n  },\n\n  /*::[*/\n  0x103f\n  /*::]*/\n  : {\n    /* n:\"Surf\", */\n  },\n\n  /*::[*/\n  0x1040\n  /*::]*/\n  : {\n    /* n:\"RadarArea\", */\n  },\n\n  /*::[*/\n  0x1041\n  /*::]*/\n  : {\n    /* n:\"AxisParent\", */\n  },\n\n  /*::[*/\n  0x1043\n  /*::]*/\n  : {\n    /* n:\"LegendException\", */\n  },\n\n  /*::[*/\n  0x1044\n  /*::]*/\n  : {\n    /* n:\"ShtProps\", */\n    f: parse_ShtProps\n  },\n\n  /*::[*/\n  0x1045\n  /*::]*/\n  : {\n    /* n:\"SerToCrt\", */\n  },\n\n  /*::[*/\n  0x1046\n  /*::]*/\n  : {\n    /* n:\"AxesUsed\", */\n  },\n\n  /*::[*/\n  0x1048\n  /*::]*/\n  : {\n    /* n:\"SBaseRef\", */\n  },\n\n  /*::[*/\n  0x104a\n  /*::]*/\n  : {\n    /* n:\"SerParent\", */\n  },\n\n  /*::[*/\n  0x104b\n  /*::]*/\n  : {\n    /* n:\"SerAuxTrend\", */\n  },\n\n  /*::[*/\n  0x104e\n  /*::]*/\n  : {\n    /* n:\"IFmtRecord\", */\n  },\n\n  /*::[*/\n  0x104f\n  /*::]*/\n  : {\n    /* n:\"Pos\", */\n  },\n\n  /*::[*/\n  0x1050\n  /*::]*/\n  : {\n    /* n:\"AlRuns\", */\n  },\n\n  /*::[*/\n  0x1051\n  /*::]*/\n  : {\n    /* n:\"BRAI\", */\n  },\n\n  /*::[*/\n  0x105b\n  /*::]*/\n  : {\n    /* n:\"SerAuxErrBar\", */\n  },\n\n  /*::[*/\n  0x105c\n  /*::]*/\n  : {\n    /* n:\"ClrtClient\", */\n    f: parse_ClrtClient\n  },\n\n  /*::[*/\n  0x105d\n  /*::]*/\n  : {\n    /* n:\"SerFmt\", */\n  },\n\n  /*::[*/\n  0x105f\n  /*::]*/\n  : {\n    /* n:\"Chart3DBarShape\", */\n  },\n\n  /*::[*/\n  0x1060\n  /*::]*/\n  : {\n    /* n:\"Fbi\", */\n  },\n\n  /*::[*/\n  0x1061\n  /*::]*/\n  : {\n    /* n:\"BopPop\", */\n  },\n\n  /*::[*/\n  0x1062\n  /*::]*/\n  : {\n    /* n:\"AxcExt\", */\n  },\n\n  /*::[*/\n  0x1063\n  /*::]*/\n  : {\n    /* n:\"Dat\", */\n  },\n\n  /*::[*/\n  0x1064\n  /*::]*/\n  : {\n    /* n:\"PlotGrowth\", */\n  },\n\n  /*::[*/\n  0x1065\n  /*::]*/\n  : {\n    /* n:\"SIIndex\", */\n  },\n\n  /*::[*/\n  0x1066\n  /*::]*/\n  : {\n    /* n:\"GelFrame\", */\n  },\n\n  /*::[*/\n  0x1067\n  /*::]*/\n  : {\n    /* n:\"BopPopCustom\", */\n  },\n\n  /*::[*/\n  0x1068\n  /*::]*/\n  : {\n    /* n:\"Fbi2\", */\n  },\n\n  /*::[*/\n  0x0000\n  /*::]*/\n  : {\n    /* n:\"Dimensions\", */\n    f: parse_Dimensions\n  },\n\n  /*::[*/\n  0x0001\n  /*::]*/\n  : {\n    /* n:\"BIFF2BLANK\", */\n  },\n\n  /*::[*/\n  0x0002\n  /*::]*/\n  : {\n    /* n:\"BIFF2INT\", */\n    f: parse_BIFF2INT\n  },\n\n  /*::[*/\n  0x0003\n  /*::]*/\n  : {\n    /* n:\"BIFF2NUM\", */\n    f: parse_BIFF2NUM\n  },\n\n  /*::[*/\n  0x0004\n  /*::]*/\n  : {\n    /* n:\"BIFF2STR\", */\n    f: parse_BIFF2STR\n  },\n\n  /*::[*/\n  0x0005\n  /*::]*/\n  : {\n    /* n:\"BoolErr\", */\n    f: parse_BoolErr\n  },\n\n  /*::[*/\n  0x0007\n  /*::]*/\n  : {\n    /* n:\"String\", */\n    f: parse_BIFF2STRING\n  },\n\n  /*::[*/\n  0x0008\n  /*::]*/\n  : {\n    /* n:\"BIFF2ROW\", */\n  },\n\n  /*::[*/\n  0x0009\n  /*::]*/\n  : {\n    /* n:\"BOF\", */\n    f: parse_BOF\n  },\n\n  /*::[*/\n  0x000b\n  /*::]*/\n  : {\n    /* n:\"Index\", */\n  },\n\n  /*::[*/\n  0x0016\n  /*::]*/\n  : {\n    /* n:\"ExternCount\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x001e\n  /*::]*/\n  : {\n    /* n:\"BIFF2FORMAT\", */\n    f: parse_BIFF2Format\n  },\n\n  /*::[*/\n  0x001f\n  /*::]*/\n  : {\n    /* n:\"BIFF2FMTCNT\", */\n  },\n\n  /* 16-bit cnt of BIFF2FORMAT records */\n\n  /*::[*/\n  0x0020\n  /*::]*/\n  : {\n    /* n:\"BIFF2COLINFO\", */\n  },\n\n  /*::[*/\n  0x0021\n  /*::]*/\n  : {\n    /* n:\"Array\", */\n    f: parse_Array\n  },\n\n  /*::[*/\n  0x0024\n  /*::]*/\n  : {\n    /* n:\"COLWIDTH\", */\n  },\n\n  /*::[*/\n  0x0025\n  /*::]*/\n  : {\n    /* n:\"DefaultRowHeight\", */\n    f: parse_DefaultRowHeight\n  },\n  // 0x2c ??\n  // 0x2d ??\n  // 0x2e ??\n  // 0x30 FONTCOUNT: number of fonts\n\n  /*::[*/\n  0x0032\n  /*::]*/\n  : {\n    /* n:\"BIFF2FONTXTRA\", */\n    f: parse_BIFF2FONTXTRA\n  },\n  // 0x35: INFOOPTS\n  // 0x36: TABLE (BIFF2 only)\n  // 0x37: TABLE2 (BIFF2 only)\n  // 0x38: WNDESK\n  // 0x39 ??\n  // 0x3a: BEGINPREF\n  // 0x3b: ENDPREF\n\n  /*::[*/\n  0x003e\n  /*::]*/\n  : {\n    /* n:\"BIFF2WINDOW2\", */\n  },\n  // 0x3f ??\n  // 0x46: SHOWSCROLL\n  // 0x47: SHOWFORMULA\n  // 0x48: STATUSBAR\n  // 0x49: SHORTMENUS\n  // 0x4A:\n  // 0x4B:\n  // 0x4C:\n  // 0x4E:\n  // 0x4F:\n  // 0x58: TOOLBAR (BIFF3)\n\n  /* - - - */\n\n  /*::[*/\n  0x0034\n  /*::]*/\n  : {\n    /* n:\"DDEObjName\", */\n  },\n\n  /*::[*/\n  0x0043\n  /*::]*/\n  : {\n    /* n:\"BIFF2XF\", */\n  },\n\n  /*::[*/\n  0x0044\n  /*::]*/\n  : {\n    /* n:\"BIFF2XFINDEX\", */\n    f: parseuint16\n  },\n\n  /*::[*/\n  0x0045\n  /*::]*/\n  : {\n    /* n:\"BIFF2FONTCLR\", */\n  },\n\n  /*::[*/\n  0x0056\n  /*::]*/\n  : {\n    /* n:\"BIFF4FMTCNT\", */\n  },\n\n  /* 16-bit cnt, similar to BIFF2 */\n\n  /*::[*/\n  0x007e\n  /*::]*/\n  : {\n    /* n:\"RK\", */\n  },\n\n  /* Not necessarily same as 0x027e */\n\n  /*::[*/\n  0x007f\n  /*::]*/\n  : {\n    /* n:\"ImData\", */\n    f: parse_ImData\n  },\n\n  /*::[*/\n  0x0087\n  /*::]*/\n  : {\n    /* n:\"Addin\", */\n  },\n\n  /*::[*/\n  0x0088\n  /*::]*/\n  : {\n    /* n:\"Edg\", */\n  },\n\n  /*::[*/\n  0x0089\n  /*::]*/\n  : {\n    /* n:\"Pub\", */\n  },\n  // 0x8A\n  // 0x8B LH: alternate menu key flag (BIFF3/4)\n  // 0x8E\n  // 0x8F\n\n  /*::[*/\n  0x0091\n  /*::]*/\n  : {\n    /* n:\"Sub\", */\n  },\n  // 0x93 STYLE\n\n  /*::[*/\n  0x0094\n  /*::]*/\n  : {\n    /* n:\"LHRecord\", */\n  },\n\n  /*::[*/\n  0x0095\n  /*::]*/\n  : {\n    /* n:\"LHNGraph\", */\n  },\n\n  /*::[*/\n  0x0096\n  /*::]*/\n  : {\n    /* n:\"Sound\", */\n  },\n  // 0xA2 FNPROTO: function prototypes (BIFF4)\n  // 0xA3\n  // 0xA8\n\n  /*::[*/\n  0x00a9\n  /*::]*/\n  : {\n    /* n:\"CoordList\", */\n  },\n\n  /*::[*/\n  0x00ab\n  /*::]*/\n  : {\n    /* n:\"GCW\", */\n  },\n\n  /*::[*/\n  0x00bc\n  /*::]*/\n  : {\n    /* n:\"ShrFmla\", */\n  },\n\n  /* Not necessarily same as 0x04bc */\n\n  /*::[*/\n  0x00bf\n  /*::]*/\n  : {\n    /* n:\"ToolbarHdr\", */\n  },\n\n  /*::[*/\n  0x00c0\n  /*::]*/\n  : {\n    /* n:\"ToolbarEnd\", */\n  },\n\n  /*::[*/\n  0x00c2\n  /*::]*/\n  : {\n    /* n:\"AddMenu\", */\n  },\n\n  /*::[*/\n  0x00c3\n  /*::]*/\n  : {\n    /* n:\"DelMenu\", */\n  },\n\n  /*::[*/\n  0x00d6\n  /*::]*/\n  : {\n    /* n:\"RString\", */\n    f: parse_RString\n  },\n\n  /*::[*/\n  0x00df\n  /*::]*/\n  : {\n    /* n:\"UDDesc\", */\n  },\n\n  /*::[*/\n  0x00ea\n  /*::]*/\n  : {\n    /* n:\"TabIdConf\", */\n  },\n\n  /*::[*/\n  0x0162\n  /*::]*/\n  : {\n    /* n:\"XL5Modify\", */\n  },\n\n  /*::[*/\n  0x01a5\n  /*::]*/\n  : {\n    /* n:\"FileSharing2\", */\n  },\n\n  /*::[*/\n  0x0206\n  /*::]*/\n  : {\n    /* n:\"Formula\", */\n    f: parse_Formula\n  },\n\n  /*::[*/\n  0x0209\n  /*::]*/\n  : {\n    /* n:\"BOF\", */\n    f: parse_BOF\n  },\n\n  /*::[*/\n  0x0218\n  /*::]*/\n  : {\n    /* n:\"Lbl\", */\n    f: parse_Lbl\n  },\n\n  /*::[*/\n  0x0223\n  /*::]*/\n  : {\n    /* n:\"ExternName\", */\n    f: parse_ExternName\n  },\n\n  /*::[*/\n  0x0231\n  /*::]*/\n  : {\n    /* n:\"Font\", */\n  },\n\n  /*::[*/\n  0x0243\n  /*::]*/\n  : {\n    /* n:\"BIFF3XF\", */\n  },\n\n  /*::[*/\n  0x0406\n  /*::]*/\n  : {\n    /* n:\"Formula\", */\n    f: parse_Formula\n  },\n\n  /*::[*/\n  0x0409\n  /*::]*/\n  : {\n    /* n:\"BOF\", */\n    f: parse_BOF\n  },\n\n  /*::[*/\n  0x0443\n  /*::]*/\n  : {\n    /* n:\"BIFF4XF\", */\n  },\n\n  /*::[*/\n  0x086d\n  /*::]*/\n  : {\n    /* n:\"FeatInfo\", */\n  },\n\n  /*::[*/\n  0x0873\n  /*::]*/\n  : {\n    /* n:\"FeatInfo11\", */\n  },\n\n  /*::[*/\n  0x0881\n  /*::]*/\n  : {\n    /* n:\"SXAddl12\", */\n  },\n\n  /*::[*/\n  0x08c0\n  /*::]*/\n  : {\n    /* n:\"AutoWebPub\", */\n  },\n\n  /*::[*/\n  0x08c1\n  /*::]*/\n  : {\n    /* n:\"ListObj\", */\n  },\n\n  /*::[*/\n  0x08c2\n  /*::]*/\n  : {\n    /* n:\"ListField\", */\n  },\n\n  /*::[*/\n  0x08c3\n  /*::]*/\n  : {\n    /* n:\"ListDV\", */\n  },\n\n  /*::[*/\n  0x08c4\n  /*::]*/\n  : {\n    /* n:\"ListCondFmt\", */\n  },\n\n  /*::[*/\n  0x08c5\n  /*::]*/\n  : {\n    /* n:\"ListCF\", */\n  },\n\n  /*::[*/\n  0x08c6\n  /*::]*/\n  : {\n    /* n:\"FMQry\", */\n  },\n\n  /*::[*/\n  0x08c7\n  /*::]*/\n  : {\n    /* n:\"FMSQry\", */\n  },\n\n  /*::[*/\n  0x08c8\n  /*::]*/\n  : {\n    /* n:\"PLV\", */\n  },\n\n  /*::[*/\n  0x08c9\n  /*::]*/\n  : {\n    /* n:\"LnExt\", */\n  },\n\n  /*::[*/\n  0x08ca\n  /*::]*/\n  : {\n    /* n:\"MkrExt\", */\n  },\n\n  /*::[*/\n  0x08cb\n  /*::]*/\n  : {\n    /* n:\"CrtCoopt\", */\n  },\n\n  /*::[*/\n  0x08d6\n  /*::]*/\n  : {\n    /* n:\"FRTArchId$\", */\n    r: 12\n  },\n\n  /* --- multiplan 4 records --- */\n\n  /*::[*/\n  0x0065\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // one per window\n\n  /*::[*/\n  0x0066\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // calc settings\n\n  /*::[*/\n  0x0069\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // print header\n\n  /*::[*/\n  0x006a\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // print footer\n\n  /*::[*/\n  0x006b\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // print settings\n\n  /*::[*/\n  0x006d\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // one per window\n\n  /*::[*/\n  0x0070\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // includes default col width\n\n  /*::[*/\n  0x0072\n  /*::]*/\n  : {\n    /* n:\"\", */\n  },\n  // includes selected cell\n\n  /*::[*/\n  0x7262\n  /*::]*/\n  : {}\n};\n\nfunction write_biff_rec(ba\n/*:BufArray*/\n, type\n/*:number*/\n, payload, length\n/*:?number*/\n)\n/*:void*/\n{\n  var t\n  /*:number*/\n  = type;\n  if (isNaN(t)) return;\n  var len = length || (payload || []).length || 0;\n  var o = ba.next(4);\n  o.write_shift(2, t);\n  o.write_shift(2, len);\n  if (\n  /*:: len != null &&*/\n  len > 0 && is_buf(payload)) ba.push(payload);\n}\n\nfunction write_biff_continue(ba\n/*:BufArray*/\n, type\n/*:number*/\n, payload, length\n/*:?number*/\n)\n/*:void*/\n{\n  var len = length || (payload || []).length || 0;\n  if (len <= 8224) return write_biff_rec(ba, type, payload, len);\n  var t = type;\n  if (isNaN(t)) return;\n  var parts = payload.parts || [],\n      sidx = 0;\n  var i = 0,\n      w = 0;\n\n  while (w + (parts[sidx] || 8224) <= 8224) {\n    w += parts[sidx] || 8224;\n    sidx++;\n  }\n\n  var o = ba.next(4);\n  o.write_shift(2, t);\n  o.write_shift(2, w);\n  ba.push(payload.slice(i, i + w));\n  i += w;\n\n  while (i < len) {\n    o = ba.next(4);\n    o.write_shift(2, 0x3c); // TODO: figure out correct continue type\n\n    w = 0;\n\n    while (w + (parts[sidx] || 8224) <= 8224) {\n      w += parts[sidx] || 8224;\n      sidx++;\n    }\n\n    o.write_shift(2, w);\n    ba.push(payload.slice(i, i + w));\n    i += w;\n  }\n}\n\nfunction write_BIFF2Cell(out, r\n/*:number*/\n, c\n/*:number*/\n) {\n  if (!out) out = new_buf(7);\n  out.write_shift(2, r);\n  out.write_shift(2, c);\n  out.write_shift(2, 0);\n  out.write_shift(1, 0);\n  return out;\n}\n\nfunction write_BIFF2BERR(r\n/*:number*/\n, c\n/*:number*/\n, val, t\n/*:?string*/\n) {\n  var out = new_buf(9);\n  write_BIFF2Cell(out, r, c);\n  write_Bes(val, t || 'b', out);\n  return out;\n}\n/* TODO: codepage, large strings */\n\n\nfunction write_BIFF2LABEL(r\n/*:number*/\n, c\n/*:number*/\n, val) {\n  var out = new_buf(8 + 2 * val.length);\n  write_BIFF2Cell(out, r, c);\n  out.write_shift(1, val.length);\n  out.write_shift(val.length, val, 'sbcs');\n  return out.l < out.length ? out.slice(0, out.l) : out;\n}\n\nfunction write_ws_biff2_cell(ba\n/*:BufArray*/\n, cell\n/*:Cell*/\n, R\n/*:number*/\n, C\n/*:number*/\n\n/*::, opts*/\n) {\n  if (cell.v != null) switch (cell.t) {\n    case 'd':\n    case 'n':\n      var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;\n      if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));else write_biff_rec(ba, 0x0003, write_BIFF2NUM(R, C, v));\n      return;\n\n    case 'b':\n    case 'e':\n      write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t));\n      return;\n\n    /* TODO: codepage, sst */\n\n    case 's':\n    case 'str':\n      write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v || \"\").slice(0, 255)));\n      return;\n  }\n  write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));\n}\n\nfunction write_ws_biff2(ba\n/*:BufArray*/\n, ws\n/*:Worksheet*/\n, idx\n/*:number*/\n, opts\n/*::, wb:Workbook*/\n) {\n  var dense = Array.isArray(ws);\n  var range = safe_decode_range(ws['!ref'] || \"A1\"),\n      ref\n  /*:string*/\n  ,\n      rr = \"\",\n      cols\n  /*:Array<string>*/\n  = [];\n\n  if (range.e.c > 0xFF || range.e.r > 0x3FFF) {\n    if (opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:IV16384\");\n    range.e.c = Math.min(range.e.c, 0xFF);\n    range.e.r = Math.min(range.e.c, 0x3FFF);\n    ref = encode_range(range);\n  }\n\n  for (var R = range.s.r; R <= range.e.r; ++R) {\n    rr = encode_row(R);\n\n    for (var C = range.s.c; C <= range.e.c; ++C) {\n      if (R === range.s.r) cols[C] = encode_col(C);\n      ref = cols[C] + rr;\n      var cell = dense ? (ws[R] || [])[C] : ws[ref];\n      if (!cell) continue;\n      /* write cell */\n\n      write_ws_biff2_cell(ba, cell, R, C, opts);\n    }\n  }\n}\n/* Based on test files */\n\n\nfunction write_biff2_buf(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n) {\n  var o = opts || {};\n  if (DENSE != null && o.dense == null) o.dense = DENSE;\n  var ba = buf_array();\n  var idx = 0;\n\n  for (var i = 0; i < wb.SheetNames.length; ++i) {\n    if (wb.SheetNames[i] == o.sheet) idx = i;\n  }\n\n  if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error(\"Sheet not found: \" + o.sheet);\n  write_biff_rec(ba, o.biff == 4 ? 0x0409 : o.biff == 3 ? 0x0209 : 0x0009, write_BOF(wb, 0x10, o));\n  /* ... */\n\n  write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);\n  /* ... */\n\n  write_biff_rec(ba, 0x000A);\n  return ba.end();\n}\n\nfunction write_FONTS_biff8(ba, data, opts) {\n  write_biff_rec(ba, 0x0031\n  /* Font */\n  , write_Font({\n    sz: 12,\n    color: {\n      theme: 1\n    },\n    name: \"Arial\",\n    family: 2,\n    scheme: \"minor\"\n  }, opts));\n}\n\nfunction write_FMTS_biff8(ba, NF\n/*:?SSFTable*/\n, opts) {\n  if (!NF) return;\n  [[5, 8], [23, 26], [41, 44], [\n  /*63*/\n  50,\n  /*66],[164,*/\n  392]].forEach(function (r) {\n    /*:: if(!NF) return; */\n    for (var i = r[0]; i <= r[1]; ++i) {\n      if (NF[i] != null) write_biff_rec(ba, 0x041E\n      /* Format */\n      , write_Format(i, NF[i], opts));\n    }\n  });\n}\n\nfunction write_FEAT(ba, ws) {\n  /* [MS-XLS] 2.4.112 */\n  var o = new_buf(19);\n  o.write_shift(4, 0x867);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  o.write_shift(2, 3);\n  o.write_shift(1, 1);\n  o.write_shift(4, 0);\n  write_biff_rec(ba, 0x0867\n  /* FeatHdr */\n  , o);\n  /* [MS-XLS] 2.4.111 */\n\n  o = new_buf(39);\n  o.write_shift(4, 0x868);\n  o.write_shift(4, 0);\n  o.write_shift(4, 0);\n  o.write_shift(2, 3);\n  o.write_shift(1, 0);\n  o.write_shift(4, 0);\n  o.write_shift(2, 1);\n  o.write_shift(4, 4);\n  o.write_shift(2, 0);\n  write_Ref8U(safe_decode_range(ws['!ref'] || \"A1\"), o);\n  o.write_shift(4, 4);\n  write_biff_rec(ba, 0x0868\n  /* Feat */\n  , o);\n}\n\nfunction write_CELLXFS_biff8(ba, opts) {\n  for (var i = 0; i < 16; ++i) {\n    write_biff_rec(ba, 0x00e0\n    /* XF */\n    , write_XF({\n      numFmtId: 0,\n      style: true\n    }, 0, opts));\n  }\n\n  opts.cellXfs.forEach(function (c) {\n    write_biff_rec(ba, 0x00e0\n    /* XF */\n    , write_XF(c, 0, opts));\n  });\n}\n\nfunction write_ws_biff8_hlinks(ba\n/*:BufArray*/\n, ws) {\n  for (var R = 0; R < ws['!links'].length; ++R) {\n    var HL = ws['!links'][R];\n    write_biff_rec(ba, 0x01b8\n    /* HLink */\n    , write_HLink(HL));\n    if (HL[1].Tooltip) write_biff_rec(ba, 0x0800\n    /* HLinkTooltip */\n    , write_HLinkTooltip(HL));\n  }\n\n  delete ws['!links'];\n}\n\nfunction write_ws_cols_biff8(ba, cols) {\n  if (!cols) return;\n  var cnt = 0;\n  cols.forEach(function (col, idx) {\n    if (++cnt <= 256 && col) {\n      write_biff_rec(ba, 0x007d\n      /* ColInfo */\n      , write_ColInfo(col_obj_w(idx, col), idx));\n    }\n  });\n}\n\nfunction write_ws_biff8_cell(ba\n/*:BufArray*/\n, cell\n/*:Cell*/\n, R\n/*:number*/\n, C\n/*:number*/\n, opts) {\n  var os = 16 + get_cell_style(opts.cellXfs, cell, opts);\n\n  if (cell.v == null && !cell.bf) {\n    write_biff_rec(ba, 0x0201\n    /* Blank */\n    , write_XLSCell(R, C, os));\n    return;\n  }\n\n  if (cell.bf) write_biff_rec(ba, 0x0006\n  /* Formula */\n  , write_Formula(cell, R, C, opts, os));else switch (cell.t) {\n    case 'd':\n    case 'n':\n      var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;\n      /* TODO: emit RK as appropriate */\n\n      write_biff_rec(ba, 0x0203\n      /* Number */\n      , write_Number(R, C, v, os, opts));\n      break;\n\n    case 'b':\n    case 'e':\n      write_biff_rec(ba, 0x0205\n      /* BoolErr */\n      , write_BoolErr(R, C, cell.v, os, opts, cell.t));\n      break;\n\n    /* TODO: codepage, sst */\n\n    case 's':\n    case 'str':\n      if (opts.bookSST) {\n        var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);\n        write_biff_rec(ba, 0x00fd\n        /* LabelSst */\n        , write_LabelSst(R, C, isst, os, opts));\n      } else write_biff_rec(ba, 0x0204\n      /* Label */\n      , write_Label(R, C, (cell.v || \"\").slice(0, 255), os, opts));\n\n      break;\n\n    default:\n      write_biff_rec(ba, 0x0201\n      /* Blank */\n      , write_XLSCell(R, C, os));\n  }\n}\n/* [MS-XLS] 2.1.7.20.5 */\n\n\nfunction write_ws_biff8(idx\n/*:number*/\n, opts, wb\n/*:Workbook*/\n) {\n  var ba = buf_array();\n  var s = wb.SheetNames[idx],\n      ws = wb.Sheets[s] || {};\n\n  var _WB\n  /*:WBWBProps*/\n  = (wb || {}).Workbook || {}\n  /*:any*/\n  ;\n\n  var _sheet\n  /*:WBWSProp*/\n  = (_WB.Sheets || [])[idx] || {}\n  /*:any*/\n  ;\n\n  var dense = Array.isArray(ws);\n  var b8 = opts.biff == 8;\n  var ref\n  /*:string*/\n  ,\n      rr = \"\",\n      cols\n  /*:Array<string>*/\n  = [];\n  var range = safe_decode_range(ws['!ref'] || \"A1\");\n  var MAX_ROWS = b8 ? 65536 : 16384;\n\n  if (range.e.c > 0xFF || range.e.r >= MAX_ROWS) {\n    if (opts.WTF) throw new Error(\"Range \" + (ws['!ref'] || \"A1\") + \" exceeds format limit A1:IV16384\");\n    range.e.c = Math.min(range.e.c, 0xFF);\n    range.e.r = Math.min(range.e.c, MAX_ROWS - 1);\n  }\n\n  write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));\n  /* [Uncalced] Index */\n\n  write_biff_rec(ba, 0x000d\n  /* CalcMode */\n  , writeuint16(1));\n  write_biff_rec(ba, 0x000c\n  /* CalcCount */\n  , writeuint16(100));\n  write_biff_rec(ba, 0x000f\n  /* CalcRefMode */\n  , writebool(true));\n  write_biff_rec(ba, 0x0011\n  /* CalcIter */\n  , writebool(false));\n  write_biff_rec(ba, 0x0010\n  /* CalcDelta */\n  , write_Xnum(0.001));\n  write_biff_rec(ba, 0x005f\n  /* CalcSaveRecalc */\n  , writebool(true));\n  write_biff_rec(ba, 0x002a\n  /* PrintRowCol */\n  , writebool(false));\n  write_biff_rec(ba, 0x002b\n  /* PrintGrid */\n  , writebool(false));\n  write_biff_rec(ba, 0x0082\n  /* GridSet */\n  , writeuint16(1));\n  write_biff_rec(ba, 0x0080\n  /* Guts */\n  , write_Guts([0, 0]));\n  /* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */\n\n  /* Header (string) */\n\n  /* Footer (string) */\n\n  write_biff_rec(ba, 0x0083\n  /* HCenter */\n  , writebool(false));\n  write_biff_rec(ba, 0x0084\n  /* VCenter */\n  , writebool(false));\n  /* ... */\n\n  if (b8) write_ws_cols_biff8(ba, ws[\"!cols\"]);\n  /* ... */\n\n  write_biff_rec(ba, 0x0200\n  /* Dimensions */\n  , write_Dimensions(range, opts));\n  /* ... */\n\n  if (b8) ws['!links'] = [];\n  var comments = [];\n\n  for (var R = range.s.r; R <= range.e.r; ++R) {\n    rr = encode_row(R);\n\n    for (var C = range.s.c; C <= range.e.c; ++C) {\n      if (R === range.s.r) cols[C] = encode_col(C);\n      ref = cols[C] + rr;\n      var cell = dense ? (ws[R] || [])[C] : ws[ref];\n      if (!cell) continue;\n      /* write cell */\n\n      write_ws_biff8_cell(ba, cell, R, C, opts);\n      if (b8 && cell.l) ws['!links'].push([ref, cell.l]);\n      if (b8 && cell.c) comments.push([ref, cell.c]);\n    }\n  }\n\n  var cname\n  /*:string*/\n  = _sheet.CodeName || _sheet.name || s;\n  /* ... */\n  // if(b8) comments.forEach(function(comment) { write_biff_rec(ba, 0x001c /* Note */, write_NoteSh(comment)); });\n\n  /* ... */\n\n  if (b8) write_biff_rec(ba, 0x023e\n  /* Window2 */\n  , write_Window2((_WB.Views || [])[0]));\n  /* ... */\n\n  if (b8 && (ws['!merges'] || []).length) write_biff_rec(ba, 0x00e5\n  /* MergeCells */\n  , write_MergeCells(ws['!merges']));\n  /* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */\n\n  if (b8) write_ws_biff8_hlinks(ba, ws);\n  /* [DVAL] */\n\n  write_biff_rec(ba, 0x01ba\n  /* CodeName */\n  , write_XLUnicodeString(cname, opts));\n  /* *WebPub *CellWatch [SheetExt] */\n\n  if (b8) write_FEAT(ba, ws);\n  /* *FEAT11 *RECORD12 */\n\n  write_biff_rec(ba, 0x000a\n  /* EOF */\n  );\n  return ba.end();\n}\n/* [MS-XLS] 2.1.7.20.3 */\n\n\nfunction write_biff8_global(wb\n/*:Workbook*/\n, bufs, opts\n/*:WriteOpts*/\n) {\n  var A = buf_array();\n\n  var _WB\n  /*:WBWBProps*/\n  = (wb || {}).Workbook || {}\n  /*:any*/\n  ;\n\n  var _sheets\n  /*:Array<WBWSProp>*/\n  = _WB.Sheets || [];\n\n  var _wb\n  /*:WBProps*/\n  =\n  /*::((*/\n  _WB.WBProps || {\n    /*::CodeName:\"ThisWorkbook\"*/\n  }\n  /*:: ):any)*/\n  ;\n\n  var b8 = opts.biff == 8,\n      b5 = opts.biff == 5;\n  write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));\n  if (opts.bookType == \"xla\") write_biff_rec(A, 0x0087\n  /* Addin */\n  );\n  write_biff_rec(A, 0x00e1\n  /* InterfaceHdr */\n  , b8 ? writeuint16(0x04b0) : null);\n  write_biff_rec(A, 0x00c1\n  /* Mms */\n  , writezeroes(2));\n  if (b5) write_biff_rec(A, 0x00bf\n  /* ToolbarHdr */\n  );\n  if (b5) write_biff_rec(A, 0x00c0\n  /* ToolbarEnd */\n  );\n  write_biff_rec(A, 0x00e2\n  /* InterfaceEnd */\n  );\n  write_biff_rec(A, 0x005c\n  /* WriteAccess */\n  , write_WriteAccess(\"SheetJS\", opts));\n  /* [FileSharing] */\n\n  write_biff_rec(A, 0x0042\n  /* CodePage */\n  , writeuint16(b8 ? 0x04b0 : 0x04E4));\n  /* *2047 Lel */\n\n  if (b8) write_biff_rec(A, 0x0161\n  /* DSF */\n  , writeuint16(0));\n  if (b8) write_biff_rec(A, 0x01c0\n  /* Excel9File */\n  );\n  write_biff_rec(A, 0x013d\n  /* RRTabId */\n  , write_RRTabId(wb.SheetNames.length));\n  if (b8 && wb.vbaraw) write_biff_rec(A, 0x00d3\n  /* ObProj */\n  );\n  /* [ObNoMacros] */\n\n  if (b8 && wb.vbaraw) {\n    var cname\n    /*:string*/\n    = _wb.CodeName || \"ThisWorkbook\";\n    write_biff_rec(A, 0x01ba\n    /* CodeName */\n    , write_XLUnicodeString(cname, opts));\n  }\n\n  write_biff_rec(A, 0x009c\n  /* BuiltInFnGroupCount */\n  , writeuint16(0x11));\n  /* *FnGroupName *FnGrp12 */\n\n  /* *Lbl */\n\n  /* [OleObjectSize] */\n\n  write_biff_rec(A, 0x0019\n  /* WinProtect */\n  , writebool(false));\n  write_biff_rec(A, 0x0012\n  /* Protect */\n  , writebool(false));\n  write_biff_rec(A, 0x0013\n  /* Password */\n  , writeuint16(0));\n  if (b8) write_biff_rec(A, 0x01af\n  /* Prot4Rev */\n  , writebool(false));\n  if (b8) write_biff_rec(A, 0x01bc\n  /* Prot4RevPass */\n  , writeuint16(0));\n  write_biff_rec(A, 0x003d\n  /* Window1 */\n  , write_Window1(opts));\n  write_biff_rec(A, 0x0040\n  /* Backup */\n  , writebool(false));\n  write_biff_rec(A, 0x008d\n  /* HideObj */\n  , writeuint16(0));\n  write_biff_rec(A, 0x0022\n  /* Date1904 */\n  , writebool(safe1904(wb) == \"true\"));\n  write_biff_rec(A, 0x000e\n  /* CalcPrecision */\n  , writebool(true));\n  if (b8) write_biff_rec(A, 0x01b7\n  /* RefreshAll */\n  , writebool(false));\n  write_biff_rec(A, 0x00DA\n  /* BookBool */\n  , writeuint16(0));\n  /* ... */\n\n  write_FONTS_biff8(A, wb, opts);\n  write_FMTS_biff8(A, wb.SSF, opts);\n  write_CELLXFS_biff8(A, opts);\n  /* ... */\n\n  if (b8) write_biff_rec(A, 0x0160\n  /* UsesELFs */\n  , writebool(false));\n  var a = A.end();\n  var C = buf_array();\n  /* METADATA [MTRSettings] [ForceFullCalculation] */\n\n  if (b8) write_biff_rec(C, 0x008C\n  /* Country */\n  , write_Country());\n  /* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */\n\n  /* BIFF8: [SST *Continue] ExtSST */\n\n  if (b8 && opts.Strings) write_biff_continue(C, 0x00FC\n  /* SST */\n  , write_SST(opts.Strings, opts));\n  /* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */\n\n  write_biff_rec(C, 0x000A\n  /* EOF */\n  );\n  var c = C.end();\n  var B = buf_array();\n  var blen = 0,\n      j = 0;\n\n  for (j = 0; j < wb.SheetNames.length; ++j) {\n    blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;\n  }\n\n  var start = a.length + blen + c.length;\n\n  for (j = 0; j < wb.SheetNames.length; ++j) {\n    var _sheet\n    /*:WBWSProp*/\n    = _sheets[j] || {}\n    /*:any*/\n    ;\n\n    write_biff_rec(B, 0x0085\n    /* BoundSheet8 */\n    , write_BoundSheet8({\n      pos: start,\n      hs: _sheet.Hidden || 0,\n      dt: 0,\n      name: wb.SheetNames[j]\n    }, opts));\n    start += bufs[j].length;\n  }\n  /* 1*BoundSheet8 */\n\n\n  var b = B.end();\n  if (blen != b.length) throw new Error(\"BS8 \" + blen + \" != \" + b.length);\n  var out = [];\n  if (a.length) out.push(a);\n  if (b.length) out.push(b);\n  if (c.length) out.push(c);\n  return bconcat(out);\n}\n/* [MS-XLS] 2.1.7.20 Workbook Stream */\n\n\nfunction write_biff8_buf(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n) {\n  var o = opts || {};\n  var bufs = [];\n\n  if (wb && !wb.SSF) {\n    wb.SSF = dup(table_fmt);\n  }\n\n  if (wb && wb.SSF) {\n    make_ssf();\n    SSF_load_table(wb.SSF); // $FlowIgnore\n\n    o.revssf = evert_num(wb.SSF);\n    o.revssf[wb.SSF[65535]] = 0;\n    o.ssf = wb.SSF;\n  }\n\n  o.Strings =\n  /*::((*/\n  []\n  /*:: :any):SST)*/\n  ;\n  o.Strings.Count = 0;\n  o.Strings.Unique = 0;\n  fix_write_opts(o);\n  o.cellXfs = [];\n  get_cell_style(o.cellXfs, {}, {\n    revssf: {\n      \"General\": 0\n    }\n  });\n  if (!wb.Props) wb.Props = {};\n\n  for (var i = 0; i < wb.SheetNames.length; ++i) {\n    bufs[bufs.length] = write_ws_biff8(i, o, wb);\n  }\n\n  bufs.unshift(write_biff8_global(wb, bufs, o));\n  return bconcat(bufs);\n}\n\nfunction write_biff_buf(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n) {\n  for (var i = 0; i <= wb.SheetNames.length; ++i) {\n    var ws = wb.Sheets[wb.SheetNames[i]];\n    if (!ws || !ws[\"!ref\"]) continue;\n    var range = decode_range(ws[\"!ref\"]);\n\n    if (range.e.c > 255) {\n      // note: 255 is IV\n      if (typeof console != \"undefined\" && console.error) console.error(\"Worksheet '\" + wb.SheetNames[i] + \"' extends beyond column IV (255).  Data may be lost.\");\n    }\n  }\n\n  var o = opts || {};\n\n  switch (o.biff || 2) {\n    case 8:\n    case 5:\n      return write_biff8_buf(wb, opts);\n\n    case 4:\n    case 3:\n    case 2:\n      return write_biff2_buf(wb, opts);\n  }\n\n  throw new Error(\"invalid type \" + o.bookType + \" for BIFF\");\n}\n/* note: browser DOM element cannot see mso- style attrs, must parse */\n\n\nfunction html_to_sheet(str\n/*:string*/\n, _opts)\n/*:Workbook*/\n{\n  var opts = _opts || {};\n  if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n  var ws\n  /*:Worksheet*/\n  = opts.dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  ;\n  str = str.replace(/<!--.*?-->/g, \"\");\n  var mtch\n  /*:any*/\n  = str.match(/<table/i);\n  if (!mtch) throw new Error(\"Invalid HTML: could not find <table>\");\n  var mtch2\n  /*:any*/\n  = str.match(/<\\/table/i);\n  var i\n  /*:number*/\n  = mtch.index,\n      j\n  /*:number*/\n  = mtch2 && mtch2.index || str.length;\n  var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, \"<tr>\");\n  var R = -1,\n      C = 0,\n      RS = 0,\n      CS = 0;\n  var range\n  /*:Range*/\n  = {\n    s: {\n      r: 10000000,\n      c: 10000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var merges\n  /*:Array<Range>*/\n  = [];\n\n  for (i = 0; i < rows.length; ++i) {\n    var row = rows[i].trim();\n    var hd = row.slice(0, 3).toLowerCase();\n\n    if (hd == \"<tr\") {\n      ++R;\n\n      if (opts.sheetRows && opts.sheetRows <= R) {\n        --R;\n        break;\n      }\n\n      C = 0;\n      continue;\n    }\n\n    if (hd != \"<td\" && hd != \"<th\") continue;\n    var cells = row.split(/<\\/t[dh]>/i);\n\n    for (j = 0; j < cells.length; ++j) {\n      var cell = cells[j].trim();\n      if (!cell.match(/<t[dh]/i)) continue;\n      var m = cell,\n          cc = 0;\n      /* TODO: parse styles etc */\n\n      while (m.charAt(0) == \"<\" && (cc = m.indexOf(\">\")) > -1) {\n        m = m.slice(cc + 1);\n      }\n\n      for (var midx = 0; midx < merges.length; ++midx) {\n        var _merge\n        /*:Range*/\n        = merges[midx];\n\n        if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {\n          C = _merge.e.c + 1;\n          midx = -1;\n        }\n      }\n\n      var tag = parsexmltag(cell.slice(0, cell.indexOf(\">\")));\n      CS = tag.colspan ? +tag.colspan : 1;\n      if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({\n        s: {\n          r: R,\n          c: C\n        },\n        e: {\n          r: R + (RS || 1) - 1,\n          c: C + CS - 1\n        }\n      });\n\n      var _t\n      /*:string*/\n      = tag.t || tag[\"data-t\"] || \"\";\n      /* TODO: generate stub cells */\n\n\n      if (!m.length) {\n        C += CS;\n        continue;\n      }\n\n      m = htmldecode(m);\n      if (range.s.r > R) range.s.r = R;\n      if (range.e.r < R) range.e.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.c < C) range.e.c = C;\n\n      if (!m.length) {\n        C += CS;\n        continue;\n      }\n\n      var o\n      /*:Cell*/\n      = {\n        t: 's',\n        v: m\n      };\n\n      if (opts.raw || !m.trim().length || _t == 's') {} else if (m === 'TRUE') o = {\n        t: 'b',\n        v: true\n      };else if (m === 'FALSE') o = {\n        t: 'b',\n        v: false\n      };else if (!isNaN(fuzzynum(m))) o = {\n        t: 'n',\n        v: fuzzynum(m)\n      };else if (!isNaN(fuzzydate(m).getDate())) {\n        o = {\n          t: 'd',\n          v: parseDate(m)\n        }\n        /*:any*/\n        ;\n        if (!opts.cellDates) o = {\n          t: 'n',\n          v: datenum(o.v)\n        }\n        /*:any*/\n        ;\n        o.z = opts.dateNF || table_fmt[14];\n      }\n\n      if (opts.dense) {\n        if (!ws[R]) ws[R] = [];\n        ws[R][C] = o;\n      } else ws[encode_cell({\n        r: R,\n        c: C\n      })] = o;\n\n      C += CS;\n    }\n  }\n\n  ws['!ref'] = encode_range(range);\n  if (merges.length) ws[\"!merges\"] = merges;\n  return ws;\n}\n\nfunction make_html_row(ws\n/*:Worksheet*/\n, r\n/*:Range*/\n, R\n/*:number*/\n, o\n/*:Sheet2HTMLOpts*/\n)\n/*:string*/\n{\n  var M\n  /*:Array<Range>*/\n  = ws['!merges'] || [];\n  var oo\n  /*:Array<string>*/\n  = [];\n  var sp = {}\n  /*:any*/\n  ;\n\n  for (var C = r.s.c; C <= r.e.c; ++C) {\n    var RS = 0,\n        CS = 0;\n\n    for (var j = 0; j < M.length; ++j) {\n      if (M[j].s.r > R || M[j].s.c > C) continue;\n      if (M[j].e.r < R || M[j].e.c < C) continue;\n\n      if (M[j].s.r < R || M[j].s.c < C) {\n        RS = -1;\n        break;\n      }\n\n      RS = M[j].e.r - M[j].s.r + 1;\n      CS = M[j].e.c - M[j].s.c + 1;\n      break;\n    }\n\n    if (RS < 0) continue;\n    var coord = encode_cell({\n      r: R,\n      c: C\n    });\n    var cell = o.dense ? (ws[R] || [])[C] : ws[coord];\n    /* TODO: html entities */\n\n    var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || \"\")) || \"\";\n    sp = {}\n    /*:any*/\n    ;\n    if (RS > 1) sp.rowspan = RS;\n    if (CS > 1) sp.colspan = CS;\n    if (o.editable) w = '<span contenteditable=\"true\">' + w + '</span>';else if (cell) {\n      sp[\"data-t\"] = cell && cell.t || 'z';\n      if (cell.v != null) sp[\"data-v\"] = cell.v;\n      if (cell.z != null) sp[\"data-z\"] = cell.z;\n      if (cell.l && (cell.l.Target || \"#\").charAt(0) != \"#\") w = '<a href=\"' + cell.l.Target + '\">' + w + '</a>';\n    }\n    sp.id = (o.id || \"sjs\") + \"-\" + coord;\n    oo.push(writextag('td', w, sp));\n  }\n\n  var preamble = \"<tr>\";\n  return preamble + oo.join(\"\") + \"</tr>\";\n}\n\nvar HTML_BEGIN = '<html><head><meta charset=\"utf-8\"/><title>SheetJS Table Export</title></head><body>';\nvar HTML_END = '</body></html>';\n\nfunction html_to_workbook(str\n/*:string*/\n, opts)\n/*:Workbook*/\n{\n  var mtch = str.match(/<table[\\s\\S]*?>[\\s\\S]*?<\\/table>/gi);\n  if (!mtch || mtch.length == 0) throw new Error(\"Invalid HTML: could not find <table>\");\n\n  if (mtch.length == 1) {\n    var w = sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);\n    w.bookType = \"html\";\n    return w;\n  }\n\n  var wb = book_new();\n  mtch.forEach(function (s, idx) {\n    book_append_sheet(wb, html_to_sheet(s, opts), \"Sheet\" + (idx + 1));\n  });\n  wb.bookType = \"html\";\n  return wb;\n}\n\nfunction make_html_preamble(ws\n/*:Worksheet*/\n, R\n/*:Range*/\n, o\n/*:Sheet2HTMLOpts*/\n)\n/*:string*/\n{\n  var out\n  /*:Array<string>*/\n  = [];\n  return out.join(\"\") + '<table' + (o && o.id ? ' id=\"' + o.id + '\"' : \"\") + '>';\n}\n\nfunction sheet_to_html(ws\n/*:Worksheet*/\n, opts\n/*:?Sheet2HTMLOpts*/\n\n/*, wb:?Workbook*/\n)\n/*:string*/\n{\n  var o = opts || {};\n  var header = o.header != null ? o.header : HTML_BEGIN;\n  var footer = o.footer != null ? o.footer : HTML_END;\n  var out\n  /*:Array<string>*/\n  = [header];\n  var r = decode_range(ws['!ref']);\n  o.dense = Array.isArray(ws);\n  out.push(make_html_preamble(ws, r, o));\n\n  for (var R = r.s.r; R <= r.e.r; ++R) {\n    out.push(make_html_row(ws, r, R, o));\n  }\n\n  out.push(\"</table>\" + footer);\n  return out.join(\"\");\n}\n\nfunction sheet_add_dom(ws\n/*:Worksheet*/\n, table\n/*:HTMLElement*/\n, _opts\n/*:?any*/\n)\n/*:Worksheet*/\n{\n  var rows\n  /*:HTMLCollection<HTMLTableRowElement>*/\n  = table.rows;\n\n  if (!rows) {\n    /* not an HTML TABLE */\n    throw \"Unsupported origin when \" + table.tagName + \" is not a TABLE\";\n  }\n\n  var opts = _opts || {};\n  if (DENSE != null) opts.dense = DENSE;\n  var or_R = 0,\n      or_C = 0;\n\n  if (opts.origin != null) {\n    if (typeof opts.origin == 'number') or_R = opts.origin;else {\n      var _origin\n      /*:CellAddress*/\n      = typeof opts.origin == \"string\" ? decode_cell(opts.origin) : opts.origin;\n\n      or_R = _origin.r;\n      or_C = _origin.c;\n    }\n  }\n\n  var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);\n  var range\n  /*:Range*/\n  = {\n    s: {\n      r: 0,\n      c: 0\n    },\n    e: {\n      r: or_R,\n      c: or_C\n    }\n  };\n\n  if (ws[\"!ref\"]) {\n    var _range\n    /*:Range*/\n    = decode_range(ws[\"!ref\"]);\n\n    range.s.r = Math.min(range.s.r, _range.s.r);\n    range.s.c = Math.min(range.s.c, _range.s.c);\n    range.e.r = Math.max(range.e.r, _range.e.r);\n    range.e.c = Math.max(range.e.c, _range.e.c);\n    if (or_R == -1) range.e.r = or_R = _range.e.r + 1;\n  }\n\n  var merges\n  /*:Array<Range>*/\n  = [],\n      midx = 0;\n  var rowinfo\n  /*:Array<RowInfo>*/\n  = ws[\"!rows\"] || (ws[\"!rows\"] = []);\n  var _R = 0,\n      R = 0,\n      _C = 0,\n      C = 0,\n      RS = 0,\n      CS = 0;\n  if (!ws[\"!cols\"]) ws['!cols'] = [];\n\n  for (; _R < rows.length && R < sheetRows; ++_R) {\n    var row\n    /*:HTMLTableRowElement*/\n    = rows[_R];\n\n    if (is_dom_element_hidden(row)) {\n      if (opts.display) continue;\n      rowinfo[R] = {\n        hidden: true\n      };\n    }\n\n    var elts\n    /*:HTMLCollection<HTMLTableCellElement>*/\n    = row.cells;\n\n    for (_C = C = 0; _C < elts.length; ++_C) {\n      var elt\n      /*:HTMLTableCellElement*/\n      = elts[_C];\n      if (opts.display && is_dom_element_hidden(elt)) continue;\n      var v\n      /*:?string*/\n      = elt.hasAttribute('data-v') ? elt.getAttribute('data-v') : elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);\n      var z\n      /*:?string*/\n      = elt.getAttribute('data-z') || elt.getAttribute('z');\n\n      for (midx = 0; midx < merges.length; ++midx) {\n        var m\n        /*:Range*/\n        = merges[midx];\n\n        if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {\n          C = m.e.c + 1 - or_C;\n          midx = -1;\n        }\n      }\n      /* TODO: figure out how to extract nonstandard mso- style */\n\n\n      CS = +elt.getAttribute(\"colspan\") || 1;\n      if ((RS = +elt.getAttribute(\"rowspan\") || 1) > 1 || CS > 1) merges.push({\n        s: {\n          r: R + or_R,\n          c: C + or_C\n        },\n        e: {\n          r: R + or_R + (RS || 1) - 1,\n          c: C + or_C + (CS || 1) - 1\n        }\n      });\n      var o\n      /*:Cell*/\n      = {\n        t: 's',\n        v: v\n      };\n\n      var _t\n      /*:string*/\n      = elt.getAttribute(\"data-t\") || elt.getAttribute(\"t\") || \"\";\n\n      if (v != null) {\n        if (v.length == 0) o.t = _t || 'z';else if (opts.raw || v.trim().length == 0 || _t == \"s\") {} else if (v === 'TRUE') o = {\n          t: 'b',\n          v: true\n        };else if (v === 'FALSE') o = {\n          t: 'b',\n          v: false\n        };else if (!isNaN(fuzzynum(v))) o = {\n          t: 'n',\n          v: fuzzynum(v)\n        };else if (!isNaN(fuzzydate(v).getDate())) {\n          o = {\n            t: 'd',\n            v: parseDate(v)\n          }\n          /*:any*/\n          ;\n          if (!opts.cellDates) o = {\n            t: 'n',\n            v: datenum(o.v)\n          }\n          /*:any*/\n          ;\n          o.z = opts.dateNF || table_fmt[14];\n        }\n      }\n\n      if (o.z === undefined && z != null) o.z = z;\n      /* The first link is used.  Links are assumed to be fully specified.\n       * TODO: The right way to process relative links is to make a new <a> */\n\n      var l = \"\",\n          Aelts = elt.getElementsByTagName(\"A\");\n      if (Aelts && Aelts.length) for (var Aelti = 0; Aelti < Aelts.length; ++Aelti) {\n        if (Aelts[Aelti].hasAttribute(\"href\")) {\n          l = Aelts[Aelti].getAttribute(\"href\");\n          if (l.charAt(0) != \"#\") break;\n        }\n      }\n      if (l && l.charAt(0) != \"#\" && l.slice(0, 11).toLowerCase() != 'javascript:') o.l = {\n        Target: l\n      };\n\n      if (opts.dense) {\n        if (!ws[R + or_R]) ws[R + or_R] = [];\n        ws[R + or_R][C + or_C] = o;\n      } else ws[encode_cell({\n        c: C + or_C,\n        r: R + or_R\n      })] = o;\n\n      if (range.e.c < C + or_C) range.e.c = C + or_C;\n      C += CS;\n    }\n\n    ++R;\n  }\n\n  if (merges.length) ws['!merges'] = (ws[\"!merges\"] || []).concat(merges);\n  range.e.r = Math.max(range.e.r, R - 1 + or_R);\n  ws['!ref'] = encode_range(range);\n  if (R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range)); // We can count the real number of rows to parse but we don't to improve the performance\n\n  return ws;\n}\n\nfunction parse_dom_table(table\n/*:HTMLElement*/\n, _opts\n/*:?any*/\n)\n/*:Worksheet*/\n{\n  var opts = _opts || {};\n  var ws\n  /*:Worksheet*/\n  = opts.dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  ;\n  return sheet_add_dom(ws, table, _opts);\n}\n\nfunction table_to_book(table\n/*:HTMLElement*/\n, opts\n/*:?any*/\n)\n/*:Workbook*/\n{\n  var o = sheet_to_workbook(parse_dom_table(table, opts), opts); //o.bookType = \"dom\"; // TODO: define a type for this\n\n  return o;\n}\n\nfunction is_dom_element_hidden(element\n/*:HTMLElement*/\n)\n/*:boolean*/\n{\n  var display\n  /*:string*/\n  = '';\n  var get_computed_style\n  /*:?function*/\n  = get_get_computed_style_function(element);\n  if (get_computed_style) display = get_computed_style(element).getPropertyValue('display');\n  if (!display) display = element.style && element.style.display;\n  return display === 'none';\n}\n/* global getComputedStyle */\n\n\nfunction get_get_computed_style_function(element\n/*:HTMLElement*/\n)\n/*:?function*/\n{\n  // The proper getComputedStyle implementation is the one defined in the element window\n  if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle; // If it is not available, try to get one from the global namespace\n\n  if (typeof getComputedStyle === 'function') return getComputedStyle;\n  return null;\n}\n/* OpenDocument */\n\n\nfunction parse_text_p(text\n/*:string*/\n\n/*::, tag*/\n)\n/*:Array<any>*/\n{\n  /* 6.1.2 White Space Characters */\n  var fixed = text.replace(/[\\t\\r\\n]/g, \" \").trim().replace(/ +/g, \" \").replace(/<text:s\\/>/g, \" \").replace(/<text:s text:c=\"(\\d+)\"\\/>/g, function ($$, $1) {\n    return Array(parseInt($1, 10) + 1).join(\" \");\n  }).replace(/<text:tab[^>]*\\/>/g, \"\\t\").replace(/<text:line-break\\/>/g, \"\\n\");\n  var v = unescapexml(fixed.replace(/<[^>]*>/g, \"\"));\n  return [v];\n}\n/* Note: ODS can stick styles in content.xml or styles.xml, FODS blurs lines */\n\n\nfunction parse_ods_styles(d\n/*:string*/\n, _opts, _nfm) {\n  var number_format_map = _nfm || {};\n  var str = xlml_normalize(d);\n  xlmlregex.lastIndex = 0;\n  str = str.replace(/<!--([\\s\\S]*?)-->/mg, \"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm, \"\");\n  var Rn,\n      NFtag,\n      NF = \"\",\n      tNF = \"\",\n      y,\n      etpos = 0,\n      tidx = -1,\n      infmt = false,\n      payload = \"\";\n\n  while (Rn = xlmlregex.exec(str)) {\n    switch (Rn[3] = Rn[3].replace(/_.*$/, \"\")) {\n      /* Number Format Definitions */\n      case 'number-style': // <number:number-style> 16.29.2\n\n      case 'currency-style': // <number:currency-style> 16.29.8\n\n      case 'percentage-style': // <number:percentage-style> 16.29.10\n\n      case 'date-style': // <number:date-style> 16.29.11\n\n      case 'time-style': // <number:time-style> 16.29.19\n\n      case 'text-style':\n        // <number:text-style> 16.29.26\n        if (Rn[1] === '/') {\n          infmt = false;\n\n          if (NFtag['truncate-on-overflow'] == \"false\") {\n            if (NF.match(/h/)) NF = NF.replace(/h+/, \"[$&]\");else if (NF.match(/m/)) NF = NF.replace(/m+/, \"[$&]\");else if (NF.match(/s/)) NF = NF.replace(/s+/, \"[$&]\");\n          }\n\n          number_format_map[NFtag.name] = NF;\n          NF = \"\";\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          infmt = true;\n          NF = \"\";\n          NFtag = parsexmltag(Rn[0], false);\n        }\n\n        break;\n      // LibreOffice bug https://bugs.documentfoundation.org/show_bug.cgi?id=149484\n\n      case 'boolean-style':\n        // <number:boolean-style> 16.29.24\n        if (Rn[1] === '/') {\n          infmt = false;\n          number_format_map[NFtag.name] = \"General\";\n          NF = \"\";\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          infmt = true;\n          NF = \"\";\n          NFtag = parsexmltag(Rn[0], false);\n        }\n\n        break;\n\n      /* Number Format Elements */\n\n      case 'boolean':\n        // <number:boolean> 16.29.25\n        NF += \"General\"; // ODF spec is unfortunately underspecified here\n\n        break;\n\n      case 'text':\n        // <number:text> 16.29.27\n        if (Rn[1] === '/') {\n          payload = str.slice(tidx, xlmlregex.lastIndex - Rn[0].length); // NOTE: Excel has a different interpretation of \"%%\" and friends\n\n          if (payload == \"%\" && NFtag[0] == '<number:percentage-style') NF += \"%\";else NF += '\"' + payload.replace(/\"/g, '\"\"') + '\"';\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          tidx = xlmlregex.lastIndex;\n        }\n\n        break;\n\n      case 'day':\n        {\n          // <number:day> 16.29.12\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"d\";\n              break;\n\n            case \"long\":\n              NF += \"dd\";\n              break;\n\n            default:\n              NF += \"dd\";\n              break;\n            // TODO: error condition\n          }\n        }\n        break;\n\n      case 'day-of-week':\n        {\n          // <number:day-of-week> 16.29.16\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"ddd\";\n              break;\n\n            case \"long\":\n              NF += \"dddd\";\n              break;\n\n            default:\n              NF += \"ddd\";\n              break;\n          }\n        }\n        break;\n\n      case 'era':\n        {\n          // <number:era> 16.29.15 TODO: proper mapping\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"ee\";\n              break;\n\n            case \"long\":\n              NF += \"eeee\";\n              break;\n\n            default:\n              NF += \"eeee\";\n              break;\n            // TODO: error condition\n          }\n        }\n        break;\n\n      case 'hours':\n        {\n          // <number:hours> 16.29.20\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"h\";\n              break;\n\n            case \"long\":\n              NF += \"hh\";\n              break;\n\n            default:\n              NF += \"hh\";\n              break;\n            // TODO: error condition\n          }\n        }\n        break;\n\n      case 'minutes':\n        {\n          // <number:minutes> 16.29.21\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"m\";\n              break;\n\n            case \"long\":\n              NF += \"mm\";\n              break;\n\n            default:\n              NF += \"mm\";\n              break;\n            // TODO: error condition\n          }\n        }\n        break;\n\n      case 'month':\n        {\n          // <number:month> 16.29.13\n          y = parsexmltag(Rn[0], false);\n          if (y[\"textual\"]) NF += \"mm\";\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"m\";\n              break;\n\n            case \"long\":\n              NF += \"mm\";\n              break;\n\n            default:\n              NF += \"m\";\n              break;\n          }\n        }\n        break;\n\n      case 'seconds':\n        {\n          // <number:seconds> 16.29.22\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"s\";\n              break;\n\n            case \"long\":\n              NF += \"ss\";\n              break;\n\n            default:\n              NF += \"ss\";\n              break;\n            // TODO: error condition\n          }\n\n          if (y[\"decimal-places\"]) NF += \".\" + fill(\"0\", +y[\"decimal-places\"]);\n        }\n        break;\n\n      case 'year':\n        {\n          // <number:year> 16.29.14\n          y = parsexmltag(Rn[0], false);\n\n          switch (y[\"style\"]) {\n            case \"short\":\n              NF += \"yy\";\n              break;\n\n            case \"long\":\n              NF += \"yyyy\";\n              break;\n\n            default:\n              NF += \"yy\";\n              break;\n            // TODO: error condition\n          }\n        }\n        break;\n\n      case 'am-pm':\n        // <number:am-pm> 16.29.23\n        NF += \"AM/PM\"; // LO autocorrects A/P -> AM/PM\n\n        break;\n\n      case 'week-of-year': // <number:week-of-year> 16.29.17\n\n      case 'quarter':\n        // <number:quarter> 16.29.18\n        console.error(\"Excel does not support ODS format token \" + Rn[3]);\n        break;\n\n      case 'fill-character':\n        // <number:fill-character> 16.29.5\n        if (Rn[1] === '/') {\n          payload = str.slice(tidx, xlmlregex.lastIndex - Rn[0].length); // NOTE: Excel has a different interpretation of \"%%\" and friends\n\n          NF += '\"' + payload.replace(/\"/g, '\"\"') + '\"*';\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          tidx = xlmlregex.lastIndex;\n        }\n\n        break;\n\n      case 'scientific-number':\n        // <number:scientific-number> 16.29.6\n        // TODO: find a mapping for all parameters\n        y = parsexmltag(Rn[0], false);\n        NF += \"0.\" + fill(\"0\", +y[\"min-decimal-places\"] || +y[\"decimal-places\"] || 2) + fill(\"?\", +y[\"decimal-places\"] - +y[\"min-decimal-places\"] || 0) + \"E\" + (parsexmlbool(y[\"forced-exponent-sign\"]) ? \"+\" : \"\") + fill(\"0\", +y[\"min-exponent-digits\"] || 2);\n        break;\n\n      case 'fraction':\n        // <number:fraction> 16.29.7\n        // TODO: find a mapping for all parameters\n        y = parsexmltag(Rn[0], false);\n        if (!+y[\"min-integer-digits\"]) NF += \"#\";else NF += fill(\"0\", +y[\"min-integer-digits\"]);\n        NF += \" \";\n        NF += fill(\"?\", +y[\"min-numerator-digits\"] || 1);\n        NF += \"/\";\n        if (+y[\"denominator-value\"]) NF += y[\"denominator-value\"];else NF += fill(\"?\", +y[\"min-denominator-digits\"] || 1);\n        break;\n\n      case 'currency-symbol':\n        // <number:currency-symbol> 16.29.9\n        // TODO: localization with [$-...]\n        if (Rn[1] === '/') {\n          NF += '\"' + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/\"/g, '\"\"') + '\"';\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          tidx = xlmlregex.lastIndex;\n        } else NF += \"$\";\n\n        break;\n\n      case 'text-properties':\n        // <style:text-properties> 16.29.29\n        y = parsexmltag(Rn[0], false);\n\n        switch ((y[\"color\"] || \"\").toLowerCase().replace(\"#\", \"\")) {\n          case \"ff0000\":\n          case \"red\":\n            NF = \"[Red]\" + NF;\n            break;\n        }\n\n        break;\n\n      case 'text-content':\n        // <number:text-content> 16.29.28\n        NF += \"@\";\n        break;\n\n      case 'map':\n        // <style:map> 16.3\n        // TODO: handle more complex maps\n        y = parsexmltag(Rn[0], false);\n        if (unescapexml(y[\"condition\"]) == \"value()>=0\") NF = number_format_map[y[\"apply-style-name\"]] + \";\" + NF;else console.error(\"ODS number format may be incorrect: \" + y[\"condition\"]);\n        break;\n\n      case 'number':\n        // <number:number> 16.29.3\n        // TODO: handle all the attributes\n        if (Rn[1] === '/') break;\n        y = parsexmltag(Rn[0], false);\n        tNF = \"\";\n        tNF += fill(\"0\", +y[\"min-integer-digits\"] || 1);\n        if (parsexmlbool(y[\"grouping\"])) tNF = commaify(fill(\"#\", Math.max(0, 4 - tNF.length)) + tNF);\n        if (+y[\"min-decimal-places\"] || +y[\"decimal-places\"]) tNF += \".\";\n        if (+y[\"min-decimal-places\"]) tNF += fill(\"0\", +y[\"min-decimal-places\"] || 1);\n        if (+y[\"decimal-places\"] - (+y[\"min-decimal-places\"] || 0)) tNF += fill(\"0\", +y[\"decimal-places\"] - (+y[\"min-decimal-places\"] || 0)); // TODO: should this be \"#\" ?\n\n        NF += tNF;\n        break;\n\n      case 'embedded-text':\n        // <number:embedded-text> 16.29.4\n        // TODO: verify interplay with grouping et al\n        if (Rn[1] === '/') {\n          if (etpos == 0) NF += '\"' + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/\"/g, '\"\"') + '\"';else NF = NF.slice(0, etpos) + '\"' + str.slice(tidx, xlmlregex.lastIndex - Rn[0].length).replace(/\"/g, '\"\"') + '\"' + NF.slice(etpos);\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          tidx = xlmlregex.lastIndex;\n          etpos = -+parsexmltag(Rn[0], false)[\"position\"] || 0;\n        }\n\n        break;\n    }\n  }\n\n  return number_format_map;\n}\n\nfunction parse_content_xml(d\n/*:string*/\n, _opts, _nfm)\n/*:Workbook*/\n{\n  var opts = _opts || {};\n  if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n  var str = xlml_normalize(d);\n  var state\n  /*:Array<any>*/\n  = [],\n      tmp;\n  var tag\n  /*:: = {}*/\n  ;\n  var nfidx,\n      NF = \"\",\n      pidx = 0;\n  var sheetag\n  /*:: = {name:\"\", '名称':\"\"}*/\n  ;\n  var rowtag\n  /*:: = {'行号':\"\"}*/\n  ;\n  var Sheets = {},\n      SheetNames\n  /*:Array<string>*/\n  = [];\n  var ws = opts.dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  ;\n  var Rn, q\n  /*:: :any = ({t:\"\", v:null, z:null, w:\"\",c:[],}:any)*/\n  ;\n  var ctag = {\n    value: \"\"\n  }\n  /*:any*/\n  ;\n  var textp = \"\",\n      textpidx = 0,\n      textptag\n  /*:: = {}*/\n  ;\n  var textR = [];\n  var R = -1,\n      C = -1,\n      range = {\n    s: {\n      r: 1000000,\n      c: 10000000\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var row_ol = 0;\n  var number_format_map = _nfm || {},\n      styles = {};\n  var merges\n  /*:Array<Range>*/\n  = [],\n      mrange = {},\n      mR = 0,\n      mC = 0;\n  var rowinfo\n  /*:Array<RowInfo>*/\n  = [],\n      rowpeat = 1,\n      colpeat = 1;\n  var arrayf\n  /*:Array<[Range, string]>*/\n  = [];\n  var WB = {\n    Names: [],\n    WBProps: {}\n  };\n  var atag = {}\n  /*:any*/\n  ;\n  var _Ref\n  /*:[string, string]*/\n  = [\"\", \"\"];\n  var comments\n  /*:Array<Comment>*/\n  = [],\n      comment\n  /*:Comment*/\n  = {}\n  /*:any*/\n  ;\n  var creator = \"\",\n      creatoridx = 0;\n  var isstub = false,\n      intable = false;\n  var i = 0;\n  var baddate = 0;\n  xlmlregex.lastIndex = 0;\n  str = str.replace(/<!--([\\s\\S]*?)-->/mg, \"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm, \"\");\n\n  while (Rn = xlmlregex.exec(str)) {\n    switch (Rn[3] = Rn[3].replace(/_.*$/, \"\")) {\n      case 'table':\n      case '工作表':\n        // 9.1.2 <table:table>\n        if (Rn[1] === '/') {\n          if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);else ws['!ref'] = \"A1:A1\";\n\n          if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {\n            ws['!fullref'] = ws['!ref'];\n            range.e.r = opts.sheetRows - 1;\n            ws['!ref'] = encode_range(range);\n          }\n\n          if (merges.length) ws['!merges'] = merges;\n          if (rowinfo.length) ws[\"!rows\"] = rowinfo;\n          sheetag.name = sheetag['名称'] || sheetag.name;\n          if (typeof JSON !== 'undefined') JSON.stringify(sheetag);\n          SheetNames.push(sheetag.name);\n          Sheets[sheetag.name] = ws;\n          intable = false;\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          sheetag = parsexmltag(Rn[0], false);\n          R = C = -1;\n          range.s.r = range.s.c = 10000000;\n          range.e.r = range.e.c = 0;\n          ws = opts.dense ? []\n          /*:any*/\n          : {}\n          /*:any*/\n          ;\n          merges = [];\n          rowinfo = [];\n          intable = true;\n        }\n\n        break;\n\n      case 'table-row-group':\n        // 9.1.9 <table:table-row-group>\n        if (Rn[1] === \"/\") --row_ol;else ++row_ol;\n        break;\n\n      case 'table-row':\n      case '行':\n        // 9.1.3 <table:table-row>\n        if (Rn[1] === '/') {\n          R += rowpeat;\n          rowpeat = 1;\n          break;\n        }\n\n        rowtag = parsexmltag(Rn[0], false);\n        if (rowtag['行号']) R = rowtag['行号'] - 1;else if (R == -1) R = 0;\n        rowpeat = +rowtag['number-rows-repeated'] || 1;\n        /* TODO: remove magic */\n\n        if (rowpeat < 10) for (i = 0; i < rowpeat; ++i) {\n          if (row_ol > 0) rowinfo[R + i] = {\n            level: row_ol\n          };\n        }\n        C = -1;\n        break;\n\n      case 'covered-table-cell':\n        // 9.1.5 <table:covered-table-cell>\n        if (Rn[1] !== '/') ++C;\n\n        if (opts.sheetStubs) {\n          if (opts.dense) {\n            if (!ws[R]) ws[R] = [];\n            ws[R][C] = {\n              t: 'z'\n            };\n          } else ws[encode_cell({\n            r: R,\n            c: C\n          })] = {\n            t: 'z'\n          };\n        }\n\n        textp = \"\";\n        textR = [];\n        break;\n\n      /* stub */\n\n      case 'table-cell':\n      case '数据':\n        if (Rn[0].charAt(Rn[0].length - 2) === '/') {\n          ++C;\n          ctag = parsexmltag(Rn[0], false);\n          colpeat = parseInt(ctag['number-columns-repeated'] || \"1\", 10);\n          q = {\n            t: 'z',\n            v: null\n            /*:: , z:null, w:\"\",c:[]*/\n\n          }\n          /*:any*/\n          ;\n          if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));\n          if (ctag[\"style-name\"] && styles[ctag[\"style-name\"]]) q.z = styles[ctag[\"style-name\"]];\n\n          if ((ctag['数据类型'] || ctag['value-type']) == \"string\") {\n            q.t = \"s\";\n            q.v = unescapexml(ctag['string-value'] || \"\");\n\n            if (opts.dense) {\n              if (!ws[R]) ws[R] = [];\n              ws[R][C] = q;\n            } else {\n              ws[encode_cell({\n                r: R,\n                c: C\n              })] = q;\n            }\n          }\n\n          C += colpeat - 1;\n        } else if (Rn[1] !== '/') {\n          ++C;\n          textp = \"\";\n          textpidx = 0;\n          textR = [];\n          colpeat = 1;\n          var rptR = rowpeat ? R + rowpeat - 1 : R;\n          if (C > range.e.c) range.e.c = C;\n          if (C < range.s.c) range.s.c = C;\n          if (R < range.s.r) range.s.r = R;\n          if (rptR > range.e.r) range.e.r = rptR;\n          ctag = parsexmltag(Rn[0], false);\n          comments = [];\n          comment = {}\n          /*:any*/\n          ;\n          q = {\n            t: ctag['数据类型'] || ctag['value-type'],\n            v: null\n            /*:: , z:null, w:\"\",c:[]*/\n\n          }\n          /*:any*/\n          ;\n          if (ctag[\"style-name\"] && styles[ctag[\"style-name\"]]) q.z = styles[ctag[\"style-name\"]];\n\n          if (opts.cellFormula) {\n            if (ctag.formula) ctag.formula = unescapexml(ctag.formula);\n\n            if (ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {\n              mR = parseInt(ctag['number-matrix-rows-spanned'], 10) || 0;\n              mC = parseInt(ctag['number-matrix-columns-spanned'], 10) || 0;\n              mrange = {\n                s: {\n                  r: R,\n                  c: C\n                },\n                e: {\n                  r: R + mR - 1,\n                  c: C + mC - 1\n                }\n              };\n              q.F = encode_range(mrange);\n              arrayf.push([mrange, q.F]);\n            }\n\n            if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);else for (i = 0; i < arrayf.length; ++i) {\n              if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];\n            }\n          }\n\n          if (ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {\n            mR = parseInt(ctag['number-rows-spanned'], 10) || 0;\n            mC = parseInt(ctag['number-columns-spanned'], 10) || 0;\n            mrange = {\n              s: {\n                r: R,\n                c: C\n              },\n              e: {\n                r: R + mR - 1,\n                c: C + mC - 1\n              }\n            };\n            merges.push(mrange);\n          }\n          /* 19.675.2 table:number-columns-repeated */\n\n\n          if (ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);\n          /* 19.385 office:value-type */\n\n          switch (q.t) {\n            case 'boolean':\n              q.t = 'b';\n              q.v = parsexmlbool(ctag['boolean-value']) || +ctag['boolean-value'] >= 1;\n              break;\n\n            case 'float':\n              q.t = 'n';\n              q.v = parseFloat(ctag.value);\n              break;\n\n            case 'percentage':\n              q.t = 'n';\n              q.v = parseFloat(ctag.value);\n              break;\n\n            case 'currency':\n              q.t = 'n';\n              q.v = parseFloat(ctag.value);\n              break;\n\n            case 'date':\n              q.t = 'd';\n              q.v = parseDate(ctag['date-value']);\n\n              if (!opts.cellDates) {\n                q.t = 'n';\n                q.v = datenum(q.v, WB.WBProps.date1904) - baddate;\n              }\n\n              if (!q.z) q.z = 'm/d/yy';\n              break;\n\n            case 'time':\n              q.t = 'n';\n              q.v = parse_isodur(ctag['time-value']) / 86400;\n\n              if (opts.cellDates) {\n                q.t = 'd';\n                q.v = numdate(q.v);\n              }\n\n              if (!q.z) q.z = 'HH:MM:SS';\n              break;\n\n            case 'number':\n              q.t = 'n';\n              q.v = parseFloat(ctag['数据数值']);\n              break;\n\n            default:\n              if (q.t === 'string' || q.t === 'text' || !q.t) {\n                q.t = 's';\n\n                if (ctag['string-value'] != null) {\n                  textp = unescapexml(ctag['string-value']);\n                  textR = [];\n                }\n              } else throw new Error('Unsupported value type ' + q.t);\n\n          }\n        } else {\n          isstub = false;\n\n          if (q.t === 's') {\n            q.v = textp || '';\n            if (textR.length) q.R = textR;\n            isstub = textpidx == 0;\n          }\n\n          if (atag.Target) q.l = atag;\n\n          if (comments.length > 0) {\n            q.c = comments;\n            comments = [];\n          }\n\n          if (textp && opts.cellText !== false) q.w = textp;\n\n          if (isstub) {\n            q.t = \"z\";\n            delete q.v;\n          }\n\n          if (!isstub || opts.sheetStubs) {\n            if (!(opts.sheetRows && opts.sheetRows <= R)) {\n              for (var rpt = 0; rpt < rowpeat; ++rpt) {\n                colpeat = parseInt(ctag['number-columns-repeated'] || \"1\", 10);\n\n                if (opts.dense) {\n                  if (!ws[R + rpt]) ws[R + rpt] = [];\n                  ws[R + rpt][C] = rpt == 0 ? q : dup(q);\n\n                  while (--colpeat > 0) {\n                    ws[R + rpt][C + colpeat] = dup(q);\n                  }\n                } else {\n                  ws[encode_cell({\n                    r: R + rpt,\n                    c: C\n                  })] = q;\n\n                  while (--colpeat > 0) {\n                    ws[encode_cell({\n                      r: R + rpt,\n                      c: C + colpeat\n                    })] = dup(q);\n                  }\n                }\n\n                if (range.e.c <= C) range.e.c = C;\n              }\n            }\n          }\n\n          colpeat = parseInt(ctag['number-columns-repeated'] || \"1\", 10);\n          C += colpeat - 1;\n          colpeat = 0;\n          q = {\n            /*:: t:\"\", v:null, z:null, w:\"\",c:[]*/\n          };\n          textp = \"\";\n          textR = [];\n        }\n\n        atag = {}\n        /*:any*/\n        ;\n        break;\n      // 9.1.4 <table:table-cell>\n\n      /* pure state */\n\n      case 'document': // TODO: <office:document> is the root for FODS\n\n      case 'document-content':\n      case '电子表格文档': // 3.1.3.2 <office:document-content>\n\n      case 'spreadsheet':\n      case '主体': // 3.7 <office:spreadsheet>\n\n      case 'scripts': // 3.12 <office:scripts>\n\n      case 'styles': // TODO <office:styles>\n\n      case 'font-face-decls': // 3.14 <office:font-face-decls>\n\n      case 'master-styles':\n        // 3.15.4 <office:master-styles> -- relevant for FODS\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], true]);\n\n        break;\n\n      case 'annotation':\n        // 14.1 <office:annotation>\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n          comment.t = textp;\n          if (textR.length)\n            /*::(*/\n            comment\n            /*:: :any)*/\n            .R = textR;\n          comment.a = creator;\n          comments.push(comment);\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          state.push([Rn[3], false]);\n        }\n\n        creator = \"\";\n        creatoridx = 0;\n        textp = \"\";\n        textpidx = 0;\n        textR = [];\n        break;\n\n      case 'creator':\n        // 4.3.2.7 <dc:creator>\n        if (Rn[1] === '/') {\n          creator = str.slice(creatoridx, Rn.index);\n        } else creatoridx = Rn.index + Rn[0].length;\n\n        break;\n\n      /* ignore state */\n\n      case 'meta':\n      case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF\n\n      case 'settings': // TODO: <office:settings>\n\n      case 'config-item-set': // TODO: <office:config-item-set>\n\n      case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>\n\n      case 'config-item-map-entry': // TODO: <office:config-item-map-entry>\n\n      case 'config-item-map-named': // TODO: <office:config-item-map-entry>\n\n      case 'shapes': // 9.2.8 <table:shapes>\n\n      case 'frame': // 10.4.2 <draw:frame>\n\n      case 'text-box': // 10.4.3 <draw:text-box>\n\n      case 'image': // 10.4.4 <draw:image>\n\n      case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>\n\n      case 'list-style': // 16.30 <text:list-style>\n\n      case 'form': // 13.13 <form:form>\n\n      case 'dde-links': // 9.8 <table:dde-links>\n\n      case 'event-listeners': // TODO\n\n      case 'chart':\n        // TODO\n        if (Rn[1] === '/') {\n          if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') state.push([Rn[3], false]);\n\n        textp = \"\";\n        textpidx = 0;\n        textR = [];\n        break;\n\n      case 'scientific-number': // <number:scientific-number>\n\n      case 'currency-symbol': // <number:currency-symbol>\n\n      case 'fill-character':\n        // 16.29.5 <number:fill-character>\n        break;\n\n      case 'text-style': // 16.27.25 <number:text-style>\n\n      case 'boolean-style': // 16.27.23 <number:boolean-style>\n\n      case 'number-style': // 16.27.2 <number:number-style>\n\n      case 'currency-style': // 16.29.8 <number:currency-style>\n\n      case 'percentage-style': // 16.27.9 <number:percentage-style>\n\n      case 'date-style': // 16.27.10 <number:date-style>\n\n      case 'time-style':\n        // 16.27.18 <number:time-style>\n        if (Rn[1] === '/') {\n          var xlmlidx = xlmlregex.lastIndex;\n          parse_ods_styles(str.slice(nfidx, xlmlregex.lastIndex), _opts, number_format_map);\n          xlmlregex.lastIndex = xlmlidx;\n        } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {\n          nfidx = xlmlregex.lastIndex - Rn[0].length;\n        }\n\n        break;\n\n      case 'script':\n        break;\n      // 3.13 <office:script>\n\n      case 'libraries':\n        break;\n      // TODO: <ooo:libraries>\n\n      case 'automatic-styles':\n        break;\n      // 3.15.3 <office:automatic-styles>\n\n      case 'default-style': // TODO: <style:default-style>\n\n      case 'page-layout':\n        break;\n      // TODO: <style:page-layout>\n\n      case 'style':\n        {\n          // 16.2 <style:style>\n          var styletag = parsexmltag(Rn[0], false);\n          if (styletag[\"family\"] == \"table-cell\" && number_format_map[styletag[\"data-style-name\"]]) styles[styletag[\"name\"]] = number_format_map[styletag[\"data-style-name\"]];\n        }\n        break;\n\n      case 'map':\n        break;\n      // 16.3 <style:map>\n\n      case 'font-face':\n        break;\n      // 16.21 <style:font-face>\n\n      case 'paragraph-properties':\n        break;\n      // 17.6 <style:paragraph-properties>\n\n      case 'table-properties':\n        break;\n      // 17.15 <style:table-properties>\n\n      case 'table-column-properties':\n        break;\n      // 17.16 <style:table-column-properties>\n\n      case 'table-row-properties':\n        break;\n      // 17.17 <style:table-row-properties>\n\n      case 'table-cell-properties':\n        break;\n      // 17.18 <style:table-cell-properties>\n\n      case 'number':\n        // 16.27.3 <number:number>\n        break;\n\n      case 'fraction':\n        break;\n      // TODO 16.27.6 <number:fraction>\n\n      case 'day': // 16.27.11 <number:day>\n\n      case 'month': // 16.27.12 <number:month>\n\n      case 'year': // 16.27.13 <number:year>\n\n      case 'era': // 16.27.14 <number:era>\n\n      case 'day-of-week': // 16.27.15 <number:day-of-week>\n\n      case 'week-of-year': // 16.27.16 <number:week-of-year>\n\n      case 'quarter': // 16.27.17 <number:quarter>\n\n      case 'hours': // 16.27.19 <number:hours>\n\n      case 'minutes': // 16.27.20 <number:minutes>\n\n      case 'seconds': // 16.27.21 <number:seconds>\n\n      case 'am-pm':\n        // 16.27.22 <number:am-pm>\n        break;\n\n      case 'boolean':\n        break;\n      // 16.27.24 <number:boolean>\n\n      case 'text':\n        // 16.27.26 <number:text>\n        if (Rn[0].slice(-2) === \"/>\") break;else if (Rn[1] === \"/\") switch (state[state.length - 1][0]) {\n          case 'number-style':\n          case 'date-style':\n          case 'time-style':\n            NF += str.slice(pidx, Rn.index);\n            break;\n        } else pidx = Rn.index + Rn[0].length;\n        break;\n\n      case 'named-range':\n        // 9.4.12 <table:named-range>\n        tag = parsexmltag(Rn[0], false);\n        _Ref = ods_to_csf_3D(tag['cell-range-address']);\n        var nrange = {\n          Name: tag.name,\n          Ref: _Ref[0] + '!' + _Ref[1]\n        }\n        /*:any*/\n        ;\n        if (intable) nrange.Sheet = SheetNames.length;\n        WB.Names.push(nrange);\n        break;\n\n      case 'text-content':\n        break;\n      // 16.27.27 <number:text-content>\n\n      case 'text-properties':\n        break;\n      // 16.27.27 <style:text-properties>\n\n      case 'embedded-text':\n        break;\n      // 16.27.4 <number:embedded-text>\n\n      case 'body':\n      case '电子表格':\n        break;\n      // 3.3 16.9.6 19.726.3\n\n      case 'forms':\n        break;\n      // 12.25.2 13.2\n\n      case 'table-column':\n        break;\n      // 9.1.6 <table:table-column>\n\n      case 'table-header-rows':\n        break;\n      // 9.1.7 <table:table-header-rows>\n\n      case 'table-rows':\n        break;\n      // 9.1.12 <table:table-rows>\n\n      /* TODO: outline levels */\n\n      case 'table-column-group':\n        break;\n      // 9.1.10 <table:table-column-group>\n\n      case 'table-header-columns':\n        break;\n      // 9.1.11 <table:table-header-columns>\n\n      case 'table-columns':\n        break;\n      // 9.1.12 <table:table-columns>\n\n      case 'null-date':\n        // 9.4.2 <table:null-date>\n        tag = parsexmltag(Rn[0], false);\n\n        switch (tag[\"date-value\"]) {\n          case \"1904-01-01\":\n            WB.WBProps.date1904 = true;\n\n          /* falls through */\n\n          case \"1900-01-01\":\n            baddate = 0;\n        }\n\n        break;\n\n      case 'graphic-properties':\n        break;\n      // 17.21 <style:graphic-properties>\n\n      case 'calculation-settings':\n        break;\n      // 9.4.1 <table:calculation-settings>\n\n      case 'named-expressions':\n        break;\n      // 9.4.11 <table:named-expressions>\n\n      case 'label-range':\n        break;\n      // 9.4.9 <table:label-range>\n\n      case 'label-ranges':\n        break;\n      // 9.4.10 <table:label-ranges>\n\n      case 'named-expression':\n        break;\n      // 9.4.13 <table:named-expression>\n\n      case 'sort':\n        break;\n      // 9.4.19 <table:sort>\n\n      case 'sort-by':\n        break;\n      // 9.4.20 <table:sort-by>\n\n      case 'sort-groups':\n        break;\n      // 9.4.22 <table:sort-groups>\n\n      case 'tab':\n        break;\n      // 6.1.4 <text:tab>\n\n      case 'line-break':\n        break;\n      // 6.1.5 <text:line-break>\n\n      case 'span':\n        break;\n      // 6.1.7 <text:span>\n\n      case 'p':\n      case '文本串':\n        // 5.1.3 <text:p>\n        if (['master-styles'].indexOf(state[state.length - 1][0]) > -1) break;\n\n        if (Rn[1] === '/' && (!ctag || !ctag['string-value'])) {\n          var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);\n          textp = (textp.length > 0 ? textp + \"\\n\" : \"\") + ptp[0];\n        } else {\n          textptag = parsexmltag(Rn[0], false);\n          textpidx = Rn.index + Rn[0].length;\n        }\n\n        break;\n      // <text:p>\n\n      case 's':\n        break;\n      // <text:s>\n\n      case 'database-range':\n        // 9.4.15 <table:database-range>\n        if (Rn[1] === '/') break;\n\n        try {\n          _Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);\n          Sheets[_Ref[0]]['!autofilter'] = {\n            ref: _Ref[1]\n          };\n        } catch (e) {\n          /* empty */\n        }\n\n        break;\n\n      case 'date':\n        break;\n      // <*:date>\n\n      case 'object':\n        break;\n      // 10.4.6.2 <draw:object>\n\n      case 'title':\n      case '标题':\n        break;\n      // <*:title> OR <uof:标题>\n\n      case 'desc':\n        break;\n      // <*:desc>\n\n      case 'binary-data':\n        break;\n      // 10.4.5 TODO: b64 blob\n\n      /* 9.2 Advanced Tables */\n\n      case 'table-source':\n        break;\n      // 9.2.6\n\n      case 'scenario':\n        break;\n      // 9.2.6\n\n      case 'iteration':\n        break;\n      // 9.4.3 <table:iteration>\n\n      case 'content-validations':\n        break;\n      // 9.4.4 <table:\n\n      case 'content-validation':\n        break;\n      // 9.4.5 <table:\n\n      case 'help-message':\n        break;\n      // 9.4.6 <table:\n\n      case 'error-message':\n        break;\n      // 9.4.7 <table:\n\n      case 'database-ranges':\n        break;\n      // 9.4.14 <table:database-ranges>\n\n      case 'filter':\n        break;\n      // 9.5.2 <table:filter>\n\n      case 'filter-and':\n        break;\n      // 9.5.3 <table:filter-and>\n\n      case 'filter-or':\n        break;\n      // 9.5.4 <table:filter-or>\n\n      case 'filter-condition':\n        break;\n      // 9.5.5 <table:filter-condition>\n\n      case 'list-level-style-bullet':\n        break;\n      // 16.31 <text:\n\n      case 'list-level-style-number':\n        break;\n      // 16.32 <text:\n\n      case 'list-level-properties':\n        break;\n      // 17.19 <style:\n\n      /* 7.3 Document Fields */\n\n      case 'sender-firstname': // 7.3.6.2\n\n      case 'sender-lastname': // 7.3.6.3\n\n      case 'sender-initials': // 7.3.6.4\n\n      case 'sender-title': // 7.3.6.5\n\n      case 'sender-position': // 7.3.6.6\n\n      case 'sender-email': // 7.3.6.7\n\n      case 'sender-phone-private': // 7.3.6.8\n\n      case 'sender-fax': // 7.3.6.9\n\n      case 'sender-company': // 7.3.6.10\n\n      case 'sender-phone-work': // 7.3.6.11\n\n      case 'sender-street': // 7.3.6.12\n\n      case 'sender-city': // 7.3.6.13\n\n      case 'sender-postal-code': // 7.3.6.14\n\n      case 'sender-country': // 7.3.6.15\n\n      case 'sender-state-or-province': // 7.3.6.16\n\n      case 'author-name': // 7.3.7.1\n\n      case 'author-initials': // 7.3.7.2\n\n      case 'chapter': // 7.3.8\n\n      case 'file-name': // 7.3.9\n\n      case 'template-name': // 7.3.9\n\n      case 'sheet-name':\n        // 7.3.9\n        break;\n\n      case 'event-listener':\n        break;\n\n      /* TODO: FODS Properties */\n\n      case 'initial-creator':\n      case 'creation-date':\n      case 'print-date':\n      case 'generator':\n      case 'document-statistic':\n      case 'user-defined':\n      case 'editing-duration':\n      case 'editing-cycles':\n        break;\n\n      /* TODO: FODS Config */\n\n      case 'config-item':\n        break;\n\n      /* TODO: style tokens */\n\n      case 'page-number':\n        break;\n      // TODO <text:page-number>\n\n      case 'page-count':\n        break;\n      // TODO <text:page-count>\n\n      case 'time':\n        break;\n      // TODO <text:time>\n\n      /* 9.3 Advanced Table Cells */\n\n      case 'cell-range-source':\n        break;\n      // 9.3.1 <table:\n\n      case 'detective':\n        break;\n      // 9.3.2 <table:\n\n      case 'operation':\n        break;\n      // 9.3.3 <table:\n\n      case 'highlighted-range':\n        break;\n      // 9.3.4 <table:\n\n      /* 9.6 Data Pilot Tables <table: */\n\n      case 'data-pilot-table': // 9.6.3\n\n      case 'source-cell-range': // 9.6.5\n\n      case 'source-service': // 9.6.6\n\n      case 'data-pilot-field': // 9.6.7\n\n      case 'data-pilot-level': // 9.6.8\n\n      case 'data-pilot-subtotals': // 9.6.9\n\n      case 'data-pilot-subtotal': // 9.6.10\n\n      case 'data-pilot-members': // 9.6.11\n\n      case 'data-pilot-member': // 9.6.12\n\n      case 'data-pilot-display-info': // 9.6.13\n\n      case 'data-pilot-sort-info': // 9.6.14\n\n      case 'data-pilot-layout-info': // 9.6.15\n\n      case 'data-pilot-field-reference': // 9.6.16\n\n      case 'data-pilot-groups': // 9.6.17\n\n      case 'data-pilot-group': // 9.6.18\n\n      case 'data-pilot-group-member':\n        // 9.6.19\n        break;\n\n      /* 10.3 Drawing Shapes */\n\n      case 'rect':\n        // 10.3.2\n        break;\n\n      /* 14.6 DDE Connections */\n\n      case 'dde-connection-decls': // 14.6.2 <text:\n\n      case 'dde-connection-decl': // 14.6.3 <text:\n\n      case 'dde-link': // 14.6.4 <table:\n\n      case 'dde-source':\n        // 14.6.5 <office:\n        break;\n\n      case 'properties':\n        break;\n      // 13.7 <form:properties>\n\n      case 'property':\n        break;\n      // 13.8 <form:property>\n\n      case 'a':\n        // 6.1.8 hyperlink\n        if (Rn[1] !== '/') {\n          atag = parsexmltag(Rn[0], false);\n          if (!atag.href) break;\n          atag.Target = unescapexml(atag.href);\n          delete atag.href;\n\n          if (atag.Target.charAt(0) == \"#\" && atag.Target.indexOf(\".\") > -1) {\n            _Ref = ods_to_csf_3D(atag.Target.slice(1));\n            atag.Target = \"#\" + _Ref[0] + \"!\" + _Ref[1];\n          } else if (atag.Target.match(/^\\.\\.[\\\\\\/]/)) atag.Target = atag.Target.slice(3);\n        }\n\n        break;\n\n      /* non-standard */\n\n      case 'table-protection':\n        break;\n\n      case 'data-pilot-grand-total':\n        break;\n      // <table:\n\n      case 'office-document-common-attrs':\n        break;\n      // bare\n\n      default:\n        switch (Rn[2]) {\n          case 'dc:': // TODO: properties\n\n          case 'calcext:': // ignore undocumented extensions\n\n          case 'loext:': // ignore undocumented extensions\n\n          case 'ooo:': // ignore undocumented extensions\n\n          case 'chartooo:': // ignore undocumented extensions\n\n          case 'draw:': // TODO: drawing\n\n          case 'style:': // TODO: styles\n\n          case 'chart:': // TODO: charts\n\n          case 'form:': // TODO: forms\n\n          case 'uof:': // TODO: uof\n\n          case '表:': // TODO: uof\n\n          case '字:':\n            // TODO: uof\n            break;\n\n          default:\n            if (opts.WTF) throw new Error(Rn);\n        }\n\n    }\n  }\n\n  var out\n  /*:Workbook*/\n  = {\n    Sheets: Sheets,\n    SheetNames: SheetNames,\n    Workbook: WB\n  }\n  /*:any*/\n  ;\n  if (opts.bookSheets) delete\n  /*::(*/\n  out\n  /*:: :any)*/\n  .Sheets;\n  return out;\n}\n\nfunction parse_ods(zip\n/*:ZIPFile*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  opts = opts || {}\n  /*:any*/\n  ;\n  if (safegetzipfile(zip, 'META-INF/manifest.xml')) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);\n  var styles = getzipstr(zip, 'styles.xml');\n  var Styles = styles && parse_ods_styles(utf8read(styles), opts);\n  var content = getzipstr(zip, 'content.xml');\n  if (!content) throw new Error(\"Missing content.xml in ODS / UOF file\");\n  var wb = parse_content_xml(utf8read(content), opts, Styles);\n  if (safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));\n  wb.bookType = \"ods\";\n  return wb;\n}\n\nfunction parse_fods(data\n/*:string*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  var wb = parse_content_xml(data, opts);\n  wb.bookType = \"fods\";\n  return wb;\n}\n/* OpenDocument */\n\n\nvar write_styles_ods\n/*:{(wb:any, opts:any):string}*/\n= /* @__PURE__ */function () {\n  var master_styles = ['<office:master-styles>', '<style:master-page style:name=\"mp1\" style:page-layout-name=\"mp1\">', '<style:header/>', '<style:header-left style:display=\"false\"/>', '<style:footer/>', '<style:footer-left style:display=\"false\"/>', '</style:master-page>', '</office:master-styles>'].join(\"\");\n  var payload = '<office:document-styles ' + wxt_helper({\n    'xmlns:office': \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n    'xmlns:table': \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n    'xmlns:style': \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n    'xmlns:text': \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n    'xmlns:draw': \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n    'xmlns:fo': \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n    'xmlns:xlink': \"http://www.w3.org/1999/xlink\",\n    'xmlns:dc': \"http://purl.org/dc/elements/1.1/\",\n    'xmlns:number': \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n    'xmlns:svg': \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n    'xmlns:of': \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n    'office:version': \"1.2\"\n  }) + '>' + master_styles + '</office:document-styles>';\n  return function\n    /*::wb, opts*/\n  wso() {\n    return XML_HEADER + payload;\n  };\n}(); // TODO: find out if anyone actually read the spec.  LO has some wild errors\n\n\nfunction write_number_format_ods(nf\n/*:string*/\n, nfidx\n/*:string*/\n)\n/*:string*/\n{\n  var type = \"number\",\n      payload = \"\",\n      nopts = {\n    \"style:name\": nfidx\n  },\n      c = \"\",\n      i = 0;\n  nf = nf.replace(/\"[$]\"/g, \"$\");\n  /* TODO: replace with an actual parser based on a real grammar */\n\n  j: {\n    // TODO: support style maps\n    if (nf.indexOf(\";\") > -1) {\n      console.error(\"Unsupported ODS Style Map exported.  Using first branch of \" + nf);\n      nf = nf.slice(0, nf.indexOf(\";\"));\n    }\n\n    if (nf == \"@\") {\n      type = \"text\";\n      payload = \"<number:text-content/>\";\n      break j;\n    }\n    /* currency flag */\n\n\n    if (nf.indexOf(/\\$/) > -1) {\n      type = \"currency\";\n    }\n    /* opening string literal */\n\n\n    if (nf[i] == '\"') {\n      c = \"\";\n\n      while (nf[++i] != '\"' || nf[++i] == '\"') {\n        c += nf[i];\n      }\n\n      --i;\n\n      if (nf[i + 1] == \"*\") {\n        i++;\n        payload += '<number:fill-character>' + escapexml(c.replace(/\"\"/g, '\"')) + '</number:fill-character>';\n      } else {\n        payload += '<number:text>' + escapexml(c.replace(/\"\"/g, '\"')) + '</number:text>';\n      }\n\n      nf = nf.slice(i + 1);\n      i = 0;\n    }\n    /* fractions */\n\n\n    var t = nf.match(/# (\\?+)\\/(\\?+)/);\n\n    if (t) {\n      payload += writextag(\"number:fraction\", null, {\n        \"number:min-integer-digits\": 0,\n        \"number:min-numerator-digits\": t[1].length,\n        \"number:max-denominator-value\": Math.max(+t[1].replace(/./g, \"9\"), +t[2].replace(/./g, \"9\"))\n      });\n      break j;\n    }\n\n    if (t = nf.match(/# (\\?+)\\/(\\d+)/)) {\n      payload += writextag(\"number:fraction\", null, {\n        \"number:min-integer-digits\": 0,\n        \"number:min-numerator-digits\": t[1].length,\n        \"number:denominator-value\": +t[2]\n      });\n      break j;\n    }\n    /* percentages */\n\n\n    if (t = nf.match(/(\\d+)(|\\.\\d+)%/)) {\n      type = \"percentage\";\n      payload += writextag(\"number:number\", null, {\n        \"number:decimal-places\": t[2] && t.length - 1 || 0,\n        \"number:min-decimal-places\": t[2] && t.length - 1 || 0,\n        \"number:min-integer-digits\": t[1].length\n      }) + \"<number:text>%</number:text>\";\n      break j;\n    }\n    /* datetime */\n\n\n    var has_time = false;\n\n    if ([\"y\", \"m\", \"d\"].indexOf(nf[0]) > -1) {\n      type = \"date\";\n\n      k: for (; i < nf.length; ++i) {\n        switch (c = nf[i].toLowerCase()) {\n          case \"h\":\n          case \"s\":\n            has_time = true;\n            --i;\n            break k;\n\n          case \"m\":\n            l: for (var h = i + 1; h < nf.length; ++h) {\n              switch (nf[h]) {\n                case \"y\":\n                case \"d\":\n                  break l;\n\n                case \"h\":\n                case \"s\":\n                  has_time = true;\n                  --i;\n                  break k;\n              }\n            }\n\n          /* falls through */\n\n          case \"y\":\n          case \"d\":\n            while ((nf[++i] || \"\").toLowerCase() == c[0]) {\n              c += c[0];\n            }\n\n            --i;\n\n            switch (c) {\n              case \"y\":\n              case \"yy\":\n                payload += \"<number:year/>\";\n                break;\n\n              case \"yyy\":\n              case \"yyyy\":\n                payload += '<number:year number:style=\"long\"/>';\n                break;\n\n              case \"mmmmm\":\n                console.error(\"ODS has no equivalent of format |mmmmm|\");\n\n              /* falls through */\n\n              case \"m\":\n              case \"mm\":\n              case \"mmm\":\n              case \"mmmm\":\n                payload += '<number:month number:style=\"' + (c.length % 2 ? \"short\" : \"long\") + '\" number:textual=\"' + (c.length >= 3 ? \"true\" : \"false\") + '\"/>';\n                break;\n\n              case \"d\":\n              case \"dd\":\n                payload += '<number:day number:style=\"' + (c.length % 2 ? \"short\" : \"long\") + '\"/>';\n                break;\n\n              case \"ddd\":\n              case \"dddd\":\n                payload += '<number:day-of-week number:style=\"' + (c.length % 2 ? \"short\" : \"long\") + '\"/>';\n                break;\n            }\n\n            break;\n\n          case '\"':\n            while (nf[++i] != '\"' || nf[++i] == '\"') {\n              c += nf[i];\n            }\n\n            --i;\n            payload += '<number:text>' + escapexml(c.slice(1).replace(/\"\"/g, '\"')) + '</number:text>';\n            break;\n\n          case '/':\n            payload += '<number:text>' + escapexml(c) + '</number:text>';\n            break;\n\n          default:\n            console.error(\"unrecognized character \" + c + \" in ODF format \" + nf);\n        }\n      }\n\n      if (!has_time) break j;\n      nf = nf.slice(i + 1);\n      i = 0;\n    }\n\n    if (nf.match(/^\\[?[hms]/)) {\n      if (type == \"number\") type = \"time\";\n\n      if (nf.match(/\\[/)) {\n        nf = nf.replace(/[\\[\\]]/g, \"\");\n        nopts['number:truncate-on-overflow'] = \"false\";\n      }\n\n      for (; i < nf.length; ++i) {\n        switch (c = nf[i].toLowerCase()) {\n          case \"h\":\n          case \"m\":\n          case \"s\":\n            while ((nf[++i] || \"\").toLowerCase() == c[0]) {\n              c += c[0];\n            }\n\n            --i;\n\n            switch (c) {\n              case \"h\":\n              case \"hh\":\n                payload += '<number:hours number:style=\"' + (c.length % 2 ? \"short\" : \"long\") + '\"/>';\n                break;\n\n              case \"m\":\n              case \"mm\":\n                payload += '<number:minutes number:style=\"' + (c.length % 2 ? \"short\" : \"long\") + '\"/>';\n                break;\n\n              case \"s\":\n              case \"ss\":\n                if (nf[i + 1] == \".\") do {\n                  c += nf[i + 1];\n                  ++i;\n                } while (nf[i + 1] == \"0\");\n                payload += '<number:seconds number:style=\"' + (c.match(\"ss\") ? \"long\" : \"short\") + '\"' + (c.match(/\\./) ? ' number:decimal-places=\"' + (c.match(/0+/) || [\"\"])[0].length + '\"' : \"\") + '/>';\n                break;\n            }\n\n            break;\n\n          case '\"':\n            while (nf[++i] != '\"' || nf[++i] == '\"') {\n              c += nf[i];\n            }\n\n            --i;\n            payload += '<number:text>' + escapexml(c.slice(1).replace(/\"\"/g, '\"')) + '</number:text>';\n            break;\n\n          case '/':\n            payload += '<number:text>' + escapexml(c) + '</number:text>';\n            break;\n\n          case \"a\":\n            if (nf.slice(i, i + 3).toLowerCase() == \"a/p\") {\n              payload += '<number:am-pm/>';\n              i += 2;\n              break;\n            } // Note: ODF does not support A/P\n\n\n            if (nf.slice(i, i + 5).toLowerCase() == \"am/pm\") {\n              payload += '<number:am-pm/>';\n              i += 4;\n              break;\n            }\n\n          /* falls through */\n\n          default:\n            console.error(\"unrecognized character \" + c + \" in ODF format \" + nf);\n        }\n      }\n\n      break j;\n    }\n    /* currency flag */\n\n\n    if (nf.indexOf(/\\$/) > -1) {\n      type = \"currency\";\n    }\n    /* should be in a char loop */\n\n\n    if (nf[0] == \"$\") {\n      payload += '<number:currency-symbol number:language=\"en\" number:country=\"US\">$</number:currency-symbol>';\n      nf = nf.slice(1);\n      i = 0;\n    }\n\n    i = 0;\n\n    if (nf[i] == '\"') {\n      while (nf[++i] != '\"' || nf[++i] == '\"') {\n        c += nf[i];\n      }\n\n      --i;\n\n      if (nf[i + 1] == \"*\") {\n        i++;\n        payload += '<number:fill-character>' + escapexml(c.replace(/\"\"/g, '\"')) + '</number:fill-character>';\n      } else {\n        payload += '<number:text>' + escapexml(c.replace(/\"\"/g, '\"')) + '</number:text>';\n      }\n\n      nf = nf.slice(i + 1);\n      i = 0;\n    }\n    /* number TODO: interstitial text e.g. 000)000-0000 */\n\n\n    var np = nf.match(/([#0][0#,]*)(\\.[0#]*|)(E[+]?0*|)/i);\n    if (!np || !np[0]) console.error(\"Could not find numeric part of \" + nf);else {\n      var base = np[1].replace(/,/g, \"\");\n      payload += '<number:' + (np[3] ? \"scientific-\" : \"\") + 'number' + ' number:min-integer-digits=\"' + (base.indexOf(\"0\") == -1 ? \"0\" : base.length - base.indexOf(\"0\")) + '\"' + (np[0].indexOf(\",\") > -1 ? ' number:grouping=\"true\"' : \"\") + (np[2] && ' number:decimal-places=\"' + (np[2].length - 1) + '\"' || ' number:decimal-places=\"0\"') + (np[3] && np[3].indexOf(\"+\") > -1 ? ' number:forced-exponent-sign=\"true\"' : \"\") + (np[3] ? ' number:min-exponent-digits=\"' + np[3].match(/0+/)[0].length + '\"' : \"\") + '>' +\n      /* TODO: interstitial text placeholders */\n      '</number:' + (np[3] ? \"scientific-\" : \"\") + 'number>';\n      i = np.index + np[0].length;\n    }\n    /* residual text */\n\n    if (nf[i] == '\"') {\n      c = \"\";\n\n      while (nf[++i] != '\"' || nf[++i] == '\"') {\n        c += nf[i];\n      }\n\n      --i;\n      payload += '<number:text>' + escapexml(c.replace(/\"\"/g, '\"')) + '</number:text>';\n    }\n  }\n\n  if (!payload) {\n    console.error(\"Could not generate ODS number format for |\" + nf + \"|\");\n    return \"\";\n  }\n\n  return writextag(\"number:\" + type + \"-style\", payload, nopts);\n}\n\nfunction write_names_ods(Names, SheetNames, idx) {\n  var scoped = Names.filter(function (name) {\n    return name.Sheet == (idx == -1 ? null : idx);\n  });\n  if (!scoped.length) return \"\";\n  return \"      <table:named-expressions>\\n\" + scoped.map(function (name) {\n    var odsref = csf_to_ods_3D(name.Ref);\n    return \"        \" + writextag(\"table:named-range\", null, {\n      \"table:name\": name.Name,\n      \"table:cell-range-address\": odsref,\n      \"table:base-cell-address\": odsref.replace(/[\\.]?[^\\.]*$/, \".$A$1\")\n    });\n  }).join(\"\\n\") + \"\\n      </table:named-expressions>\\n\";\n}\n\nvar write_content_ods\n/*:{(wb:any, opts:any):string}*/\n= /* @__PURE__ */function () {\n  /* 6.1.2 White Space Characters */\n  var write_text_p = function write_text_p(text\n  /*:string*/\n  )\n  /*:string*/\n  {\n    return escapexml(text).replace(/  +/g, function ($$) {\n      return '<text:s text:c=\"' + $$.length + '\"/>';\n    }).replace(/\\t/g, \"<text:tab/>\").replace(/\\n/g, \"</text:p><text:p>\").replace(/^ /, \"<text:s/>\").replace(/ $/, \"<text:s/>\");\n  };\n\n  var null_cell_xml = '          <table:table-cell />\\n';\n  var covered_cell_xml = '          <table:covered-table-cell/>\\n';\n\n  var write_ws = function write_ws(ws, wb\n  /*:Workbook*/\n  , i\n  /*:number*/\n  , opts, nfs)\n  /*:string*/\n  {\n    /* Section 9 Tables */\n    var o\n    /*:Array<string>*/\n    = [];\n    o.push('      <table:table table:name=\"' + escapexml(wb.SheetNames[i]) + '\" table:style-name=\"ta1\">\\n');\n    var R = 0,\n        C = 0,\n        range = decode_range(ws['!ref'] || \"A1\");\n    var marr\n    /*:Array<Range>*/\n    = ws['!merges'] || [],\n        mi = 0;\n    var dense = Array.isArray(ws);\n\n    if (ws[\"!cols\"]) {\n      for (C = 0; C <= range.e.c; ++C) {\n        o.push('        <table:table-column' + (ws[\"!cols\"][C] ? ' table:style-name=\"co' + ws[\"!cols\"][C].ods + '\"' : '') + '></table:table-column>\\n');\n      }\n    }\n\n    var H = \"\",\n        ROWS = ws[\"!rows\"] || [];\n\n    for (R = 0; R < range.s.r; ++R) {\n      H = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n      o.push('        <table:table-row' + H + '></table:table-row>\\n');\n    }\n\n    for (; R <= range.e.r; ++R) {\n      H = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n      o.push('        <table:table-row' + H + '>\\n');\n\n      for (C = 0; C < range.s.c; ++C) {\n        o.push(null_cell_xml);\n      }\n\n      for (; C <= range.e.c; ++C) {\n        var skip = false,\n            ct = {},\n            textp = \"\";\n\n        for (mi = 0; mi != marr.length; ++mi) {\n          if (marr[mi].s.c > C) continue;\n          if (marr[mi].s.r > R) continue;\n          if (marr[mi].e.c < C) continue;\n          if (marr[mi].e.r < R) continue;\n          if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n          ct['table:number-columns-spanned'] = marr[mi].e.c - marr[mi].s.c + 1;\n          ct['table:number-rows-spanned'] = marr[mi].e.r - marr[mi].s.r + 1;\n          break;\n        }\n\n        if (skip) {\n          o.push(covered_cell_xml);\n          continue;\n        }\n\n        var ref = encode_cell({\n          r: R,\n          c: C\n        }),\n            cell = dense ? (ws[R] || [])[C] : ws[ref];\n\n        if (cell && cell.f) {\n          ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));\n\n          if (cell.F) {\n            if (cell.F.slice(0, ref.length) == ref) {\n              var _Fref = decode_range(cell.F);\n\n              ct['table:number-matrix-columns-spanned'] = _Fref.e.c - _Fref.s.c + 1;\n              ct['table:number-matrix-rows-spanned'] = _Fref.e.r - _Fref.s.r + 1;\n            }\n          }\n        }\n\n        if (!cell) {\n          o.push(null_cell_xml);\n          continue;\n        }\n\n        switch (cell.t) {\n          case 'b':\n            textp = cell.v ? 'TRUE' : 'FALSE';\n            ct['office:value-type'] = \"boolean\";\n            ct['office:boolean-value'] = cell.v ? 'true' : 'false';\n            break;\n\n          case 'n':\n            textp = cell.w || String(cell.v || 0);\n            ct['office:value-type'] = \"float\";\n            ct['office:value'] = cell.v || 0;\n            break;\n\n          case 's':\n          case 'str':\n            textp = cell.v == null ? \"\" : cell.v;\n            ct['office:value-type'] = \"string\";\n            break;\n\n          case 'd':\n            textp = cell.w || parseDate(cell.v).toISOString();\n            ct['office:value-type'] = \"date\";\n            ct['office:date-value'] = parseDate(cell.v).toISOString();\n            ct['table:style-name'] = \"ce1\";\n            break;\n          //case 'e':\n\n          default:\n            o.push(null_cell_xml);\n            continue;\n        }\n\n        var text_p = write_text_p(textp);\n\n        if (cell.l && cell.l.Target) {\n          var _tgt = cell.l.Target;\n          _tgt = _tgt.charAt(0) == \"#\" ? \"#\" + csf_to_ods_3D(_tgt.slice(1)) : _tgt; // TODO: choose correct parent path format based on link delimiters\n\n          if (_tgt.charAt(0) != \"#\" && !_tgt.match(/^\\w+:/)) _tgt = '../' + _tgt;\n          text_p = writextag('text:a', text_p, {\n            'xlink:href': _tgt.replace(/&/g, \"&amp;\")\n          });\n        }\n\n        if (nfs[cell.z]) ct[\"table:style-name\"] = \"ce\" + nfs[cell.z].slice(1);\n        o.push('          ' + writextag('table:table-cell', writextag('text:p', text_p, {}), ct) + '\\n');\n      }\n\n      o.push('        </table:table-row>\\n');\n    }\n\n    if ((wb.Workbook || {}).Names) o.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, i));\n    o.push('      </table:table>\\n');\n    return o.join(\"\");\n  };\n\n  var write_automatic_styles_ods = function write_automatic_styles_ods(o\n  /*:Array<string>*/\n  , wb) {\n    o.push(' <office:automatic-styles>\\n');\n    /* column styles */\n\n    var cidx = 0;\n    wb.SheetNames.map(function (n) {\n      return wb.Sheets[n];\n    }).forEach(function (ws) {\n      if (!ws) return;\n\n      if (ws[\"!cols\"]) {\n        for (var C = 0; C < ws[\"!cols\"].length; ++C) {\n          if (ws[\"!cols\"][C]) {\n            var colobj = ws[\"!cols\"][C];\n            if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;\n            process_col(colobj);\n            colobj.ods = cidx;\n            var w = ws[\"!cols\"][C].wpx + \"px\";\n            o.push('  <style:style style:name=\"co' + cidx + '\" style:family=\"table-column\">\\n');\n            o.push('   <style:table-column-properties fo:break-before=\"auto\" style:column-width=\"' + w + '\"/>\\n');\n            o.push('  </style:style>\\n');\n            ++cidx;\n          }\n        }\n      }\n    });\n    /* row styles */\n\n    var ridx = 0;\n    wb.SheetNames.map(function (n) {\n      return wb.Sheets[n];\n    }).forEach(function (ws) {\n      if (!ws) return;\n\n      if (ws[\"!rows\"]) {\n        for (var R = 0; R < ws[\"!rows\"].length; ++R) {\n          if (ws[\"!rows\"][R]) {\n            ws[\"!rows\"][R].ods = ridx;\n            var h = ws[\"!rows\"][R].hpx + \"px\";\n            o.push('  <style:style style:name=\"ro' + ridx + '\" style:family=\"table-row\">\\n');\n            o.push('   <style:table-row-properties fo:break-before=\"auto\" style:row-height=\"' + h + '\"/>\\n');\n            o.push('  </style:style>\\n');\n            ++ridx;\n          }\n        }\n      }\n    });\n    /* table */\n\n    o.push('  <style:style style:name=\"ta1\" style:family=\"table\" style:master-page-name=\"mp1\">\\n');\n    o.push('   <style:table-properties table:display=\"true\" style:writing-mode=\"lr-tb\"/>\\n');\n    o.push('  </style:style>\\n');\n    o.push('  <number:date-style style:name=\"N37\" number:automatic-order=\"true\">\\n');\n    o.push('   <number:month number:style=\"long\"/>\\n');\n    o.push('   <number:text>/</number:text>\\n');\n    o.push('   <number:day number:style=\"long\"/>\\n');\n    o.push('   <number:text>/</number:text>\\n');\n    o.push('   <number:year/>\\n');\n    o.push('  </number:date-style>\\n');\n    /* number formats, table cells, text */\n\n    var nfs = {};\n    var nfi = 69;\n    wb.SheetNames.map(function (n) {\n      return wb.Sheets[n];\n    }).forEach(function (ws) {\n      if (!ws) return;\n      var range = decode_range(ws[\"!ref\"]);\n\n      for (var R = 0; R <= range.e.r; ++R) {\n        for (var C = 0; C <= range.e.c; ++C) {\n          var c = Array.isArray(ws) ? (ws[R] || [])[C] : ws[encode_cell({\n            r: R,\n            c: C\n          })];\n          if (!c || !c.z || c.z.toLowerCase() == \"general\") continue;\n\n          if (!nfs[c.z]) {\n            var out = write_number_format_ods(c.z, \"N\" + nfi);\n\n            if (out) {\n              nfs[c.z] = \"N\" + nfi;\n              ++nfi;\n              o.push(out + \"\\n\");\n            }\n          }\n        }\n      }\n    });\n    o.push('  <style:style style:name=\"ce1\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"N37\"/>\\n');\n    keys(nfs).forEach(function (nf) {\n      o.push('<style:style style:name=\"ce' + nfs[nf].slice(1) + '\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"' + nfs[nf] + '\"/>\\n');\n    });\n    /* page-layout */\n\n    o.push(' </office:automatic-styles>\\n');\n    return nfs;\n  };\n\n  return function wcx(wb, opts) {\n    var o = [XML_HEADER];\n    /* 3.1.3.2 */\n\n    var attr = wxt_helper({\n      'xmlns:office': \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n      'xmlns:table': \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n      'xmlns:style': \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n      'xmlns:text': \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n      'xmlns:draw': \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n      'xmlns:fo': \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n      'xmlns:xlink': \"http://www.w3.org/1999/xlink\",\n      'xmlns:dc': \"http://purl.org/dc/elements/1.1/\",\n      'xmlns:meta': \"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\",\n      'xmlns:number': \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n      'xmlns:presentation': \"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\",\n      'xmlns:svg': \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n      'xmlns:chart': \"urn:oasis:names:tc:opendocument:xmlns:chart:1.0\",\n      'xmlns:dr3d': \"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0\",\n      'xmlns:math': \"http://www.w3.org/1998/Math/MathML\",\n      'xmlns:form': \"urn:oasis:names:tc:opendocument:xmlns:form:1.0\",\n      'xmlns:script': \"urn:oasis:names:tc:opendocument:xmlns:script:1.0\",\n      'xmlns:ooo': \"http://openoffice.org/2004/office\",\n      'xmlns:ooow': \"http://openoffice.org/2004/writer\",\n      'xmlns:oooc': \"http://openoffice.org/2004/calc\",\n      'xmlns:dom': \"http://www.w3.org/2001/xml-events\",\n      'xmlns:xforms': \"http://www.w3.org/2002/xforms\",\n      'xmlns:xsd': \"http://www.w3.org/2001/XMLSchema\",\n      'xmlns:xsi': \"http://www.w3.org/2001/XMLSchema-instance\",\n      'xmlns:sheet': \"urn:oasis:names:tc:opendocument:sh33tjs:1.0\",\n      'xmlns:rpt': \"http://openoffice.org/2005/report\",\n      'xmlns:of': \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n      'xmlns:xhtml': \"http://www.w3.org/1999/xhtml\",\n      'xmlns:grddl': \"http://www.w3.org/2003/g/data-view#\",\n      'xmlns:tableooo': \"http://openoffice.org/2009/table\",\n      'xmlns:drawooo': \"http://openoffice.org/2010/draw\",\n      'xmlns:calcext': \"urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0\",\n      'xmlns:loext': \"urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0\",\n      'xmlns:field': \"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0\",\n      'xmlns:formx': \"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0\",\n      'xmlns:css3t': \"http://www.w3.org/TR/css3-text/\",\n      'office:version': \"1.2\"\n    });\n    var fods = wxt_helper({\n      'xmlns:config': \"urn:oasis:names:tc:opendocument:xmlns:config:1.0\",\n      'office:mimetype': \"application/vnd.oasis.opendocument.spreadsheet\"\n    });\n\n    if (opts.bookType == \"fods\") {\n      o.push('<office:document' + attr + fods + '>\\n');\n      o.push(write_meta_ods().replace(/<office:document-meta.*?>/, \"\").replace(/<\\/office:document-meta>/, \"\") + \"\\n\"); // TODO: settings (equiv of settings.xml for ODS)\n    } else o.push('<office:document-content' + attr + '>\\n'); // o.push('  <office:scripts/>\\n');\n\n\n    var nfs = write_automatic_styles_ods(o, wb);\n    o.push('  <office:body>\\n');\n    o.push('    <office:spreadsheet>\\n');\n    if (((wb.Workbook || {}).WBProps || {}).date1904) o.push('      <table:calculation-settings table:case-sensitive=\"false\" table:search-criteria-must-apply-to-whole-cell=\"true\" table:use-wildcards=\"true\" table:use-regular-expressions=\"false\" table:automatic-find-labels=\"false\">\\n        <table:null-date table:date-value=\"1904-01-01\"/>\\n      </table:calculation-settings>\\n');\n\n    for (var i = 0; i != wb.SheetNames.length; ++i) {\n      o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts, nfs));\n    }\n\n    if ((wb.Workbook || {}).Names) o.push(write_names_ods(wb.Workbook.Names, wb.SheetNames, -1));\n    o.push('    </office:spreadsheet>\\n');\n    o.push('  </office:body>\\n');\n    if (opts.bookType == \"fods\") o.push('</office:document>');else o.push('</office:document-content>');\n    return o.join(\"\");\n  };\n}();\n\nfunction write_ods(wb\n/*:any*/\n, opts\n/*:any*/\n) {\n  if (opts.bookType == \"fods\") return write_content_ods(wb, opts);\n  var zip = zip_new();\n  var f = \"\";\n  var manifest\n  /*:Array<Array<string> >*/\n  = [];\n  var rdf\n  /*:Array<[string, string]>*/\n  = [];\n  /* Part 3 Section 3.3 MIME Media Type */\n\n  f = \"mimetype\";\n  zip_add_file(zip, f, \"application/vnd.oasis.opendocument.spreadsheet\");\n  /* Part 1 Section 2.2 Documents */\n\n  f = \"content.xml\";\n  zip_add_file(zip, f, write_content_ods(wb, opts));\n  manifest.push([f, \"text/xml\"]);\n  rdf.push([f, \"ContentFile\"]);\n  /* TODO: these are hard-coded styles to satiate excel */\n\n  f = \"styles.xml\";\n  zip_add_file(zip, f, write_styles_ods(wb, opts));\n  manifest.push([f, \"text/xml\"]);\n  rdf.push([f, \"StylesFile\"]);\n  /* TODO: this is hard-coded to satiate excel */\n\n  f = \"meta.xml\";\n  zip_add_file(zip, f, XML_HEADER + write_meta_ods());\n  manifest.push([f, \"text/xml\"]);\n  rdf.push([f, \"MetadataFile\"]);\n  /* Part 3 Section 6 Metadata Manifest File */\n\n  f = \"manifest.rdf\";\n  zip_add_file(zip, f, write_rdf(rdf\n  /*, opts*/\n  ));\n  manifest.push([f, \"application/rdf+xml\"]);\n  /* Part 3 Section 4 Manifest File */\n\n  f = \"META-INF/manifest.xml\";\n  zip_add_file(zip, f, write_manifest(manifest\n  /*, opts*/\n  ));\n  return zip;\n}\n/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */\n\n\nvar subarray = function () {\n  try {\n    if (typeof Uint8Array == \"undefined\") return \"slice\";\n    if (typeof Uint8Array.prototype.subarray == \"undefined\") return \"slice\";\n\n    if (typeof Buffer !== \"undefined\") {\n      if (typeof Buffer.prototype.subarray == \"undefined\") return \"slice\";\n      if ((typeof Buffer.from == \"function\" ? Buffer.from([72, 62]) : new Buffer([72, 62])) instanceof Uint8Array) return \"subarray\";\n      return \"slice\";\n    }\n\n    return \"subarray\";\n  } catch (e) {\n    return \"slice\";\n  }\n}();\n\nfunction u8_to_dataview(array) {\n  return new DataView(array.buffer, array.byteOffset, array.byteLength);\n}\n\nfunction u8str(u8) {\n  return typeof TextDecoder != \"undefined\" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));\n}\n\nfunction stru8(str) {\n  return typeof TextEncoder != \"undefined\" ? new TextEncoder().encode(str) : s2a(utf8write(str));\n}\n\nfunction u8contains(body, search) {\n  var L = body.indexOf(search[0]);\n  if (L == -1) return false;\n\n  outer: for (; L <= body.length - search.length; ++L) {\n    for (var j = 0; j < search.length; ++j) {\n      if (body[L + j] != search[j]) continue outer;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction u8concat(u8a) {\n  var len = u8a.reduce(function (acc, x) {\n    return acc + x.length;\n  }, 0);\n  var out = new Uint8Array(len);\n  var off = 0;\n  u8a.forEach(function (u8) {\n    out.set(u8, off);\n    off += u8.length;\n  });\n  return out;\n}\n\nfunction popcnt(x) {\n  x -= x >> 1 & 1431655765;\n  x = (x & 858993459) + (x >> 2 & 858993459);\n  return (x + (x >> 4) & 252645135) * 16843009 >>> 24;\n}\n\nfunction readDecimal128LE(buf, offset) {\n  var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;\n  var mantissa = buf[offset + 14] & 1;\n\n  for (var j = offset + 13; j >= offset; --j) {\n    mantissa = mantissa * 256 + buf[j];\n  }\n\n  return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);\n}\n\nfunction writeDecimal128LE(buf, offset, value) {\n  var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 16;\n  var mantissa = value / Math.pow(10, exp - 6176);\n  buf[offset + 15] |= exp >> 7;\n  buf[offset + 14] |= (exp & 127) << 1;\n\n  for (var i = 0; mantissa >= 1; ++i, mantissa /= 256) {\n    buf[offset + i] = mantissa & 255;\n  }\n\n  buf[offset + 15] |= value >= 0 ? 0 : 128;\n}\n\nfunction parse_varint49(buf, ptr) {\n  var l = ptr ? ptr[0] : 0;\n  var usz = buf[l] & 127;\n\n  varint: if (buf[l++] >= 128) {\n    usz |= (buf[l] & 127) << 7;\n    if (buf[l++] < 128) break varint;\n    usz |= (buf[l] & 127) << 14;\n    if (buf[l++] < 128) break varint;\n    usz |= (buf[l] & 127) << 21;\n    if (buf[l++] < 128) break varint;\n    usz += (buf[l] & 127) * Math.pow(2, 28);\n    ++l;\n    if (buf[l++] < 128) break varint;\n    usz += (buf[l] & 127) * Math.pow(2, 35);\n    ++l;\n    if (buf[l++] < 128) break varint;\n    usz += (buf[l] & 127) * Math.pow(2, 42);\n    ++l;\n    if (buf[l++] < 128) break varint;\n  }\n\n  if (ptr) ptr[0] = l;\n  return usz;\n}\n\nfunction write_varint49(v) {\n  var usz = new Uint8Array(7);\n  usz[0] = v & 127;\n  var L = 1;\n\n  sz: if (v > 127) {\n    usz[L - 1] |= 128;\n    usz[L] = v >> 7 & 127;\n    ++L;\n    if (v <= 16383) break sz;\n    usz[L - 1] |= 128;\n    usz[L] = v >> 14 & 127;\n    ++L;\n    if (v <= 2097151) break sz;\n    usz[L - 1] |= 128;\n    usz[L] = v >> 21 & 127;\n    ++L;\n    if (v <= 268435455) break sz;\n    usz[L - 1] |= 128;\n    usz[L] = v / 256 >>> 21 & 127;\n    ++L;\n    if (v <= 34359738367) break sz;\n    usz[L - 1] |= 128;\n    usz[L] = v / 65536 >>> 21 & 127;\n    ++L;\n    if (v <= 4398046511103) break sz;\n    usz[L - 1] |= 128;\n    usz[L] = v / 16777216 >>> 21 & 127;\n    ++L;\n  }\n\n  return usz[subarray](0, L);\n}\n\nfunction parse_packed_varints(buf) {\n  var ptr = [0];\n  var out = [];\n\n  while (ptr[0] < buf.length) {\n    out.push(parse_varint49(buf, ptr));\n  }\n\n  return out;\n}\n\nfunction write_packed_varints(nums) {\n  return u8concat(nums.map(function (x) {\n    return write_varint49(x);\n  }));\n}\n\nfunction varint_to_i32(buf) {\n  var l = 0,\n      i32 = buf[l] & 127;\n\n  varint: if (buf[l++] >= 128) {\n    i32 |= (buf[l] & 127) << 7;\n    if (buf[l++] < 128) break varint;\n    i32 |= (buf[l] & 127) << 14;\n    if (buf[l++] < 128) break varint;\n    i32 |= (buf[l] & 127) << 21;\n    if (buf[l++] < 128) break varint;\n    i32 |= (buf[l] & 127) << 28;\n  }\n\n  return i32;\n}\n\nfunction parse_shallow(buf) {\n  var out = [],\n      ptr = [0];\n\n  while (ptr[0] < buf.length) {\n    var off = ptr[0];\n    var num = parse_varint49(buf, ptr);\n    var type = num & 7;\n    num = Math.floor(num / 8);\n    var len = 0;\n    var res;\n    if (num == 0) break;\n\n    switch (type) {\n      case 0:\n        {\n          var l = ptr[0];\n\n          while (buf[ptr[0]++] >= 128) {\n            ;\n          }\n\n          res = buf[subarray](l, ptr[0]);\n        }\n        break;\n\n      case 5:\n        len = 4;\n        res = buf[subarray](ptr[0], ptr[0] + len);\n        ptr[0] += len;\n        break;\n\n      case 1:\n        len = 8;\n        res = buf[subarray](ptr[0], ptr[0] + len);\n        ptr[0] += len;\n        break;\n\n      case 2:\n        len = parse_varint49(buf, ptr);\n        res = buf[subarray](ptr[0], ptr[0] + len);\n        ptr[0] += len;\n        break;\n\n      case 3:\n      case 4:\n      default:\n        throw new Error(\"PB Type \".concat(type, \" for Field \").concat(num, \" at offset \").concat(off));\n    }\n\n    var v = {\n      data: res,\n      type: type\n    };\n    if (out[num] == null) out[num] = [v];else out[num].push(v);\n  }\n\n  return out;\n}\n\nfunction write_shallow(proto) {\n  var out = [];\n  proto.forEach(function (field, idx) {\n    if (idx == 0) return;\n    field.forEach(function (item) {\n      if (!item.data) return;\n      out.push(write_varint49(idx * 8 + item.type));\n      if (item.type == 2) out.push(write_varint49(item.data.length));\n      out.push(item.data);\n    });\n  });\n  return u8concat(out);\n}\n\nfunction mappa(data, cb) {\n  return (data == null ? void 0 : data.map(function (d) {\n    return cb(d.data);\n  })) || [];\n}\n\nfunction parse_iwa_file(buf) {\n  var _a;\n\n  var out = [],\n      ptr = [0];\n\n  while (ptr[0] < buf.length) {\n    var len = parse_varint49(buf, ptr);\n    var ai = parse_shallow(buf[subarray](ptr[0], ptr[0] + len));\n    ptr[0] += len;\n    var res = {\n      id: varint_to_i32(ai[1][0].data),\n      messages: []\n    };\n    ai[2].forEach(function (b) {\n      var mi = parse_shallow(b.data);\n      var fl = varint_to_i32(mi[3][0].data);\n      res.messages.push({\n        meta: mi,\n        data: buf[subarray](ptr[0], ptr[0] + fl)\n      });\n      ptr[0] += fl;\n    });\n    if ((_a = ai[3]) == null ? void 0 : _a[0]) res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;\n    out.push(res);\n  }\n\n  return out;\n}\n\nfunction write_iwa_file(ias) {\n  var bufs = [];\n  ias.forEach(function (ia) {\n    var ai = [[], [{\n      data: write_varint49(ia.id),\n      type: 0\n    }], []];\n    if (ia.merge != null) ai[3] = [{\n      data: write_varint49(+!!ia.merge),\n      type: 0\n    }];\n    var midata = [];\n    ia.messages.forEach(function (mi) {\n      midata.push(mi.data);\n      mi.meta[3] = [{\n        type: 0,\n        data: write_varint49(mi.data.length)\n      }];\n      ai[2].push({\n        data: write_shallow(mi.meta),\n        type: 2\n      });\n    });\n    var aipayload = write_shallow(ai);\n    bufs.push(write_varint49(aipayload.length));\n    bufs.push(aipayload);\n    midata.forEach(function (mid) {\n      return bufs.push(mid);\n    });\n  });\n  return u8concat(bufs);\n}\n\nfunction parse_snappy_chunk(type, buf) {\n  if (type != 0) throw new Error(\"Unexpected Snappy chunk type \".concat(type));\n  var ptr = [0];\n  var usz = parse_varint49(buf, ptr);\n  var chunks = [];\n\n  while (ptr[0] < buf.length) {\n    var tag = buf[ptr[0]] & 3;\n\n    if (tag == 0) {\n      var len = buf[ptr[0]++] >> 2;\n      if (len < 60) ++len;else {\n        var c = len - 59;\n        len = buf[ptr[0]];\n        if (c > 1) len |= buf[ptr[0] + 1] << 8;\n        if (c > 2) len |= buf[ptr[0] + 2] << 16;\n        if (c > 3) len |= buf[ptr[0] + 3] << 24;\n        len >>>= 0;\n        len++;\n        ptr[0] += c;\n      }\n      chunks.push(buf[subarray](ptr[0], ptr[0] + len));\n      ptr[0] += len;\n      continue;\n    } else {\n      var offset = 0,\n          length = 0;\n\n      if (tag == 1) {\n        length = (buf[ptr[0]] >> 2 & 7) + 4;\n        offset = (buf[ptr[0]++] & 224) << 3;\n        offset |= buf[ptr[0]++];\n      } else {\n        length = (buf[ptr[0]++] >> 2) + 1;\n\n        if (tag == 2) {\n          offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;\n          ptr[0] += 2;\n        } else {\n          offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;\n          ptr[0] += 4;\n        }\n      }\n\n      if (offset == 0) throw new Error(\"Invalid offset 0\");\n      var j = chunks.length - 1,\n          off = offset;\n\n      while (j >= 0 && off >= chunks[j].length) {\n        off -= chunks[j].length;\n        --j;\n      }\n\n      if (j < 0) {\n        if (off == 0) off = chunks[j = 0].length;else throw new Error(\"Invalid offset beyond length\");\n      }\n\n      if (length < off) chunks.push(chunks[j][subarray](chunks[j].length - off, chunks[j].length - off + length));else {\n        if (off > 0) {\n          chunks.push(chunks[j][subarray](chunks[j].length - off));\n          length -= off;\n        }\n\n        ++j;\n\n        while (length >= chunks[j].length) {\n          chunks.push(chunks[j]);\n          length -= chunks[j].length;\n          ++j;\n        }\n\n        if (length) chunks.push(chunks[j][subarray](0, length));\n      }\n      if (chunks.length > 100) chunks = [u8concat(chunks)];\n    }\n  }\n\n  if (chunks.reduce(function (acc, u8) {\n    return acc + u8.length;\n  }, 0) != usz) throw new Error(\"Unexpected length: \".concat(chunks.reduce(function (acc, u8) {\n    return acc + u8.length;\n  }, 0), \" != \").concat(usz));\n  return chunks;\n}\n\nfunction decompress_iwa_file(buf) {\n  if (Array.isArray(buf)) buf = new Uint8Array(buf);\n  var out = [];\n  var l = 0;\n\n  while (l < buf.length) {\n    var t = buf[l++];\n    var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;\n    l += 3;\n    out.push.apply(out, parse_snappy_chunk(t, buf[subarray](l, l + len)));\n    l += len;\n  }\n\n  if (l !== buf.length) throw new Error(\"data is not a valid framed stream!\");\n  return u8concat(out);\n}\n\nfunction compress_iwa_file(buf) {\n  var out = [];\n  var l = 0;\n\n  while (l < buf.length) {\n    var c = Math.min(buf.length - l, 268435455);\n    var frame = new Uint8Array(4);\n    out.push(frame);\n    var usz = write_varint49(c);\n    var L = usz.length;\n    out.push(usz);\n\n    if (c <= 60) {\n      L++;\n      out.push(new Uint8Array([c - 1 << 2]));\n    } else if (c <= 256) {\n      L += 2;\n      out.push(new Uint8Array([240, c - 1 & 255]));\n    } else if (c <= 65536) {\n      L += 3;\n      out.push(new Uint8Array([244, c - 1 & 255, c - 1 >> 8 & 255]));\n    } else if (c <= 16777216) {\n      L += 4;\n      out.push(new Uint8Array([248, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255]));\n    } else if (c <= 4294967296) {\n      L += 5;\n      out.push(new Uint8Array([252, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255, c - 1 >>> 24 & 255]));\n    }\n\n    out.push(buf[subarray](l, l + c));\n    L += c;\n    frame[0] = 0;\n    frame[1] = L & 255;\n    frame[2] = L >> 8 & 255;\n    frame[3] = L >> 16 & 255;\n    l += c;\n  }\n\n  return u8concat(out);\n}\n\nvar numbers_lut_new = function numbers_lut_new() {\n  return {\n    sst: [],\n    rsst: [],\n    ofmt: [],\n    nfmt: []\n  };\n};\n\nfunction numbers_format_cell(cell, t, flags, ofmt, nfmt) {\n  var _a, _b, _c, _d;\n\n  var ctype = t & 255,\n      ver = t >> 8;\n  var fmt = ver >= 5 ? nfmt : ofmt;\n\n  dur: if (flags & (ver > 4 ? 8 : 4) && cell.t == \"n\" && ctype == 7) {\n    var dstyle = ((_a = fmt[7]) == null ? void 0 : _a[0]) ? parse_varint49(fmt[7][0].data) : -1;\n    if (dstyle == -1) break dur;\n    var dmin = ((_b = fmt[15]) == null ? void 0 : _b[0]) ? parse_varint49(fmt[15][0].data) : -1;\n    var dmax = ((_c = fmt[16]) == null ? void 0 : _c[0]) ? parse_varint49(fmt[16][0].data) : -1;\n    var auto = ((_d = fmt[40]) == null ? void 0 : _d[0]) ? parse_varint49(fmt[40][0].data) : -1;\n    var d = cell.v,\n        dd = d;\n\n    autodur: if (auto) {\n      if (d == 0) {\n        dmin = dmax = 2;\n        break autodur;\n      }\n\n      if (d >= 604800) dmin = 1;else if (d >= 86400) dmin = 2;else if (d >= 3600) dmin = 4;else if (d >= 60) dmin = 8;else if (d >= 1) dmin = 16;else dmin = 32;\n      if (Math.floor(d) != d) dmax = 32;else if (d % 60) dmax = 16;else if (d % 3600) dmax = 8;else if (d % 86400) dmax = 4;else if (d % 604800) dmax = 2;\n      if (dmax < dmin) dmax = dmin;\n    }\n\n    if (dmin == -1 || dmax == -1) break dur;\n    var dstr = [],\n        zstr = [];\n\n    if (dmin == 1) {\n      dd = d / 604800;\n\n      if (dmax == 1) {\n        zstr.push('d\"d\"');\n      } else {\n        dd |= 0;\n        d -= 604800 * dd;\n      }\n\n      dstr.push(dd + (dstyle == 2 ? \" week\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"w\" : \"\"));\n    }\n\n    if (dmin <= 2 && dmax >= 2) {\n      dd = d / 86400;\n\n      if (dmax > 2) {\n        dd |= 0;\n        d -= 86400 * dd;\n      }\n\n      zstr.push('d\"d\"');\n      dstr.push(dd + (dstyle == 2 ? \" day\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"d\" : \"\"));\n    }\n\n    if (dmin <= 4 && dmax >= 4) {\n      dd = d / 3600;\n\n      if (dmax > 4) {\n        dd |= 0;\n        d -= 3600 * dd;\n      }\n\n      zstr.push((dmin >= 4 ? \"[h]\" : \"h\") + '\"h\"');\n      dstr.push(dd + (dstyle == 2 ? \" hour\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"h\" : \"\"));\n    }\n\n    if (dmin <= 8 && dmax >= 8) {\n      dd = d / 60;\n\n      if (dmax > 8) {\n        dd |= 0;\n        d -= 60 * dd;\n      }\n\n      zstr.push((dmin >= 8 ? \"[m]\" : \"m\") + '\"m\"');\n      if (dstyle == 0) dstr.push((dmin == 8 && dmax == 8 || dd >= 10 ? \"\" : \"0\") + dd);else dstr.push(dd + (dstyle == 2 ? \" minute\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"m\" : \"\"));\n    }\n\n    if (dmin <= 16 && dmax >= 16) {\n      dd = d;\n\n      if (dmax > 16) {\n        dd |= 0;\n        d -= dd;\n      }\n\n      zstr.push((dmin >= 16 ? \"[s]\" : \"s\") + '\"s\"');\n      if (dstyle == 0) dstr.push((dmax == 16 && dmin == 16 || dd >= 10 ? \"\" : \"0\") + dd);else dstr.push(dd + (dstyle == 2 ? \" second\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"s\" : \"\"));\n    }\n\n    if (dmax >= 32) {\n      dd = Math.round(1e3 * d);\n      if (dmin < 32) zstr.push('.000\"ms\"');\n      if (dstyle == 0) dstr.push((dd >= 100 ? \"\" : dd >= 10 ? \"0\" : \"00\") + dd);else dstr.push(dd + (dstyle == 2 ? \" millisecond\" + (dd == 1 ? \"\" : \"s\") : dstyle == 1 ? \"ms\" : \"\"));\n    }\n\n    cell.w = dstr.join(dstyle == 0 ? \":\" : \" \");\n    cell.z = zstr.join(dstyle == 0 ? '\":\"' : \" \");\n    if (dstyle == 0) cell.w = cell.w.replace(/:(\\d\\d\\d)$/, \".$1\");\n  }\n}\n\nfunction parse_old_storage(buf, lut, v) {\n  var dv = u8_to_dataview(buf);\n  var flags = dv.getUint32(4, true);\n  var ridx = -1,\n      sidx = -1,\n      zidx = -1,\n      ieee = NaN,\n      dt = new Date(2001, 0, 1);\n  var doff = v > 1 ? 12 : 8;\n\n  if (flags & 2) {\n    zidx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  doff += popcnt(flags & (v > 1 ? 3468 : 396)) * 4;\n\n  if (flags & 512) {\n    ridx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  doff += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;\n\n  if (flags & 16) {\n    sidx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  if (flags & 32) {\n    ieee = dv.getFloat64(doff, true);\n    doff += 8;\n  }\n\n  if (flags & 64) {\n    dt.setTime(dt.getTime() + dv.getFloat64(doff, true) * 1e3);\n    doff += 8;\n  }\n\n  if (v > 1) {\n    flags = dv.getUint32(8, true) >>> 16;\n\n    if (flags & 255) {\n      if (zidx == -1) zidx = dv.getUint32(doff, true);\n      doff += 4;\n    }\n  }\n\n  var ret;\n  var t = buf[v >= 4 ? 1 : 2];\n\n  switch (t) {\n    case 0:\n      return void 0;\n\n    case 2:\n      ret = {\n        t: \"n\",\n        v: ieee\n      };\n      break;\n\n    case 3:\n      ret = {\n        t: \"s\",\n        v: lut.sst[sidx]\n      };\n      break;\n\n    case 5:\n      ret = {\n        t: \"d\",\n        v: dt\n      };\n      break;\n\n    case 6:\n      ret = {\n        t: \"b\",\n        v: ieee > 0\n      };\n      break;\n\n    case 7:\n      ret = {\n        t: \"n\",\n        v: ieee\n      };\n      break;\n\n    case 8:\n      ret = {\n        t: \"e\",\n        v: 0\n      };\n      break;\n\n    case 9:\n      {\n        if (ridx > -1) ret = {\n          t: \"s\",\n          v: lut.rsst[ridx]\n        };else throw new Error(\"Unsupported cell type \".concat(buf[subarray](0, 4)));\n      }\n      break;\n\n    default:\n      throw new Error(\"Unsupported cell type \".concat(buf[subarray](0, 4)));\n  }\n\n  if (zidx > -1) numbers_format_cell(ret, t | v << 8, flags, lut.ofmt[zidx], lut.nfmt[zidx]);\n  if (t == 7) ret.v /= 86400;\n  return ret;\n}\n\nfunction parse_new_storage(buf, lut) {\n  var dv = u8_to_dataview(buf);\n  var flags = dv.getUint32(4, true);\n  var fields = dv.getUint32(8, true);\n  var doff = 12;\n  var ridx = -1,\n      sidx = -1,\n      zidx = -1,\n      d128 = NaN,\n      ieee = NaN,\n      dt = new Date(2001, 0, 1);\n\n  if (fields & 1) {\n    d128 = readDecimal128LE(buf, doff);\n    doff += 16;\n  }\n\n  if (fields & 2) {\n    ieee = dv.getFloat64(doff, true);\n    doff += 8;\n  }\n\n  if (fields & 4) {\n    dt.setTime(dt.getTime() + dv.getFloat64(doff, true) * 1e3);\n    doff += 8;\n  }\n\n  if (fields & 8) {\n    sidx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  if (fields & 16) {\n    ridx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  var ret;\n  var t = buf[1];\n\n  switch (t) {\n    case 0:\n      return void 0;\n\n    case 2:\n      ret = {\n        t: \"n\",\n        v: d128\n      };\n      break;\n\n    case 3:\n      ret = {\n        t: \"s\",\n        v: lut.sst[sidx]\n      };\n      break;\n\n    case 5:\n      ret = {\n        t: \"d\",\n        v: dt\n      };\n      break;\n\n    case 6:\n      ret = {\n        t: \"b\",\n        v: ieee > 0\n      };\n      break;\n\n    case 7:\n      ret = {\n        t: \"n\",\n        v: ieee\n      };\n      break;\n\n    case 8:\n      ret = {\n        t: \"e\",\n        v: 0\n      };\n      break;\n\n    case 9:\n      ret = {\n        t: \"s\",\n        v: lut.rsst[ridx]\n      };\n      break;\n\n    case 10:\n      ret = {\n        t: \"n\",\n        v: d128\n      };\n      break;\n\n    default:\n      throw new Error(\"Unsupported cell type \".concat(buf[1], \" : \").concat(fields & 31, \" : \").concat(buf[subarray](0, 4)));\n  }\n\n  doff += popcnt(fields & 8160) * 4;\n\n  if (fields & 516096) {\n    if (zidx == -1) zidx = dv.getUint32(doff, true);\n    doff += 4;\n  }\n\n  if (zidx > -1) numbers_format_cell(ret, t | 5 << 8, fields >> 13, lut.ofmt[zidx], lut.nfmt[zidx]);\n  if (t == 7) ret.v /= 86400;\n  return ret;\n}\n\nfunction write_new_storage(cell, sst) {\n  var out = new Uint8Array(32),\n      dv = u8_to_dataview(out),\n      l = 12,\n      flags = 0;\n  out[0] = 5;\n\n  switch (cell.t) {\n    case \"n\":\n      out[1] = 2;\n      writeDecimal128LE(out, l, cell.v);\n      flags |= 1;\n      l += 16;\n      break;\n\n    case \"b\":\n      out[1] = 6;\n      dv.setFloat64(l, cell.v ? 1 : 0, true);\n      flags |= 2;\n      l += 8;\n      break;\n\n    case \"s\":\n      if (sst.indexOf(cell.v) == -1) throw new Error(\"Value \".concat(cell.v, \" missing from SST!\"));\n      out[1] = 3;\n      dv.setUint32(l, sst.indexOf(cell.v), true);\n      flags |= 8;\n      l += 4;\n      break;\n\n    default:\n      throw \"unsupported cell type \" + cell.t;\n  }\n\n  dv.setUint32(8, flags, true);\n  return out[subarray](0, l);\n}\n\nfunction write_old_storage(cell, sst) {\n  var out = new Uint8Array(32),\n      dv = u8_to_dataview(out),\n      l = 12,\n      flags = 0;\n  out[0] = 4;\n\n  switch (cell.t) {\n    case \"n\":\n      out[2] = 2;\n      dv.setFloat64(l, cell.v, true);\n      flags |= 32;\n      l += 8;\n      break;\n\n    case \"b\":\n      out[2] = 6;\n      dv.setFloat64(l, cell.v ? 1 : 0, true);\n      flags |= 32;\n      l += 8;\n      break;\n\n    case \"s\":\n      if (sst.indexOf(cell.v) == -1) throw new Error(\"Value \".concat(cell.v, \" missing from SST!\"));\n      out[2] = 3;\n      dv.setUint32(l, sst.indexOf(cell.v), true);\n      flags |= 16;\n      l += 4;\n      break;\n\n    default:\n      throw \"unsupported cell type \" + cell.t;\n  }\n\n  dv.setUint32(8, flags, true);\n  return out[subarray](0, l);\n}\n\nfunction parse_cell_storage(buf, lut) {\n  switch (buf[0]) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n      return parse_old_storage(buf, lut, buf[0]);\n\n    case 5:\n      return parse_new_storage(buf, lut);\n\n    default:\n      throw new Error(\"Unsupported payload version \".concat(buf[0]));\n  }\n}\n\nfunction parse_TSP_Reference(buf) {\n  var pb = parse_shallow(buf);\n  return parse_varint49(pb[1][0].data);\n}\n\nfunction write_TSP_Reference(idx) {\n  return write_shallow([[], [{\n    type: 0,\n    data: write_varint49(idx)\n  }]]);\n}\n\nfunction parse_TST_TableDataList(M, root) {\n  var pb = parse_shallow(root.data);\n  var type = varint_to_i32(pb[1][0].data);\n  var entries = pb[3];\n  var data = [];\n  (entries || []).forEach(function (entry) {\n    var le = parse_shallow(entry.data);\n    var key = varint_to_i32(le[1][0].data) >>> 0;\n\n    switch (type) {\n      case 1:\n        data[key] = u8str(le[3][0].data);\n        break;\n\n      case 8:\n        {\n          var rt = M[parse_TSP_Reference(le[9][0].data)][0];\n          var rtp = parse_shallow(rt.data);\n          var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];\n          var mtype = varint_to_i32(rtpref.meta[1][0].data);\n          if (mtype != 2001) throw new Error(\"2000 unexpected reference to \".concat(mtype));\n          var tswpsa = parse_shallow(rtpref.data);\n          data[key] = tswpsa[3].map(function (x) {\n            return u8str(x.data);\n          }).join(\"\");\n        }\n        break;\n\n      case 2:\n        data[key] = parse_shallow(le[6][0].data);\n        break;\n\n      default:\n        throw type;\n    }\n  });\n  return data;\n}\n\nfunction parse_TST_TileRowInfo(u8, type) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n\n  var pb = parse_shallow(u8);\n  var R = varint_to_i32(pb[1][0].data) >>> 0;\n  var cnt = varint_to_i32(pb[2][0].data) >>> 0;\n  var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;\n  var used_storage_u8, used_storage;\n\n  if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {\n    used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;\n    used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;\n  } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {\n    used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;\n    used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;\n  } else throw \"NUMBERS Tile missing \".concat(type, \" cell storage\");\n\n  var width = wide_offsets ? 4 : 1;\n  var used_storage_offsets = u8_to_dataview(used_storage_u8);\n  var offsets = [];\n\n  for (var C = 0; C < used_storage_u8.length / 2; ++C) {\n    var off = used_storage_offsets.getUint16(C * 2, true);\n    if (off < 65535) offsets.push([C, off]);\n  }\n\n  if (offsets.length != cnt) throw \"Expected \".concat(cnt, \" cells, found \").concat(offsets.length);\n  var cells = [];\n\n  for (C = 0; C < offsets.length - 1; ++C) {\n    cells[offsets[C][0]] = used_storage[subarray](offsets[C][1] * width, offsets[C + 1][1] * width);\n  }\n\n  if (offsets.length >= 1) cells[offsets[offsets.length - 1][0]] = used_storage[subarray](offsets[offsets.length - 1][1] * width);\n  return {\n    R: R,\n    cells: cells\n  };\n}\n\nfunction parse_TST_Tile(M, root) {\n  var _a;\n\n  var pb = parse_shallow(root.data);\n  var storage = -1;\n\n  if ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) {\n    if (varint_to_i32(pb[7][0].data) >>> 0) storage = 1;else storage = 0;\n  }\n\n  var ri = mappa(pb[5], function (u8) {\n    return parse_TST_TileRowInfo(u8, storage);\n  });\n  return {\n    nrows: varint_to_i32(pb[4][0].data) >>> 0,\n    data: ri.reduce(function (acc, x) {\n      if (!acc[x.R]) acc[x.R] = [];\n      x.cells.forEach(function (cell, C) {\n        if (acc[x.R][C]) throw new Error(\"Duplicate cell r=\".concat(x.R, \" c=\").concat(C));\n        acc[x.R][C] = cell;\n      });\n      return acc;\n    }, [])\n  };\n}\n\nfunction parse_TST_TableModelArchive(M, root, ws) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var pb = parse_shallow(root.data);\n  var range = {\n    s: {\n      r: 0,\n      c: 0\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;\n  if (range.e.r < 0) throw new Error(\"Invalid row varint \".concat(pb[6][0].data));\n  range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;\n  if (range.e.c < 0) throw new Error(\"Invalid col varint \".concat(pb[7][0].data));\n  ws[\"!ref\"] = encode_range(range);\n  var dense = Array.isArray(ws);\n  var store = parse_shallow(pb[4][0].data);\n  var lut = numbers_lut_new();\n  if ((_a = store[4]) == null ? void 0 : _a[0]) lut.sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);\n  if ((_b = store[11]) == null ? void 0 : _b[0]) lut.ofmt = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[11][0].data)][0]);\n  if ((_c = store[17]) == null ? void 0 : _c[0]) lut.rsst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]);\n  if ((_d = store[22]) == null ? void 0 : _d[0]) lut.nfmt = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[22][0].data)][0]);\n  var tile = parse_shallow(store[3][0].data);\n  var _R = 0;\n  tile[1].forEach(function (t) {\n    var tl = parse_shallow(t.data);\n    var ref2 = M[parse_TSP_Reference(tl[2][0].data)][0];\n    var mtype2 = varint_to_i32(ref2.meta[1][0].data);\n    if (mtype2 != 6002) throw new Error(\"6001 unexpected reference to \".concat(mtype2));\n\n    var _tile = parse_TST_Tile(M, ref2);\n\n    _tile.data.forEach(function (row, R) {\n      row.forEach(function (buf, C) {\n        var res = parse_cell_storage(buf, lut);\n\n        if (res) {\n          if (dense) {\n            if (!ws[_R + R]) ws[_R + R] = [];\n            ws[_R + R][C] = res;\n          } else {\n            var addr = encode_cell({\n              r: _R + R,\n              c: C\n            });\n            ws[addr] = res;\n          }\n        }\n      });\n    });\n\n    _R += _tile.nrows;\n  });\n\n  if ((_e = store[13]) == null ? void 0 : _e[0]) {\n    var ref = M[parse_TSP_Reference(store[13][0].data)][0];\n    var mtype = varint_to_i32(ref.meta[1][0].data);\n    if (mtype != 6144) throw new Error(\"Expected merge type 6144, found \".concat(mtype));\n    ws[\"!merges\"] = (_f = parse_shallow(ref.data)) == null ? void 0 : _f[1].map(function (pi) {\n      var merge = parse_shallow(pi.data);\n      var origin = u8_to_dataview(parse_shallow(merge[1][0].data)[1][0].data),\n          size = u8_to_dataview(parse_shallow(merge[2][0].data)[1][0].data);\n      return {\n        s: {\n          r: origin.getUint16(0, true),\n          c: origin.getUint16(2, true)\n        },\n        e: {\n          r: origin.getUint16(0, true) + size.getUint16(0, true) - 1,\n          c: origin.getUint16(2, true) + size.getUint16(2, true) - 1\n        }\n      };\n    });\n  }\n}\n\nfunction parse_TST_TableInfoArchive(M, root, opts) {\n  var pb = parse_shallow(root.data);\n  var out;\n  if (!(opts == null ? void 0 : opts.dense)) out = {\n    \"!ref\": \"A1\"\n  };else out = [];\n  out[\"!ref\"] = \"A1\";\n  var tableref = M[parse_TSP_Reference(pb[2][0].data)];\n  var mtype = varint_to_i32(tableref[0].meta[1][0].data);\n  if (mtype != 6001) throw new Error(\"6000 unexpected reference to \".concat(mtype));\n  parse_TST_TableModelArchive(M, tableref[0], out);\n  return out;\n}\n\nfunction parse_TN_SheetArchive(M, root, opts) {\n  var _a;\n\n  var pb = parse_shallow(root.data);\n  var out = {\n    name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : \"\",\n    sheets: []\n  };\n  var shapeoffs = mappa(pb[2], parse_TSP_Reference);\n  shapeoffs.forEach(function (off) {\n    M[off].forEach(function (m) {\n      var mtype = varint_to_i32(m.meta[1][0].data);\n      if (mtype == 6e3) out.sheets.push(parse_TST_TableInfoArchive(M, m, opts));\n    });\n  });\n  return out;\n}\n\nfunction parse_TN_DocumentArchive(M, root, opts) {\n  var _a;\n\n  var out = book_new();\n  var pb = parse_shallow(root.data);\n  if ((_a = pb[2]) == null ? void 0 : _a[0]) throw new Error(\"Keynote presentations are not supported\");\n  var sheetoffs = mappa(pb[1], parse_TSP_Reference);\n  sheetoffs.forEach(function (off) {\n    M[off].forEach(function (m) {\n      var mtype = varint_to_i32(m.meta[1][0].data);\n\n      if (mtype == 2) {\n        var root2 = parse_TN_SheetArchive(M, m, opts);\n        root2.sheets.forEach(function (sheet, idx) {\n          book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + \"_\" + idx, true);\n        });\n      }\n    });\n  });\n  if (out.SheetNames.length == 0) throw new Error(\"Empty NUMBERS file\");\n  out.bookType = \"numbers\";\n  return out;\n}\n\nfunction parse_numbers_iwa(cfb, opts) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n\n  var M = {},\n      indices = [];\n  cfb.FullPaths.forEach(function (p) {\n    if (p.match(/\\.iwpv2/)) throw new Error(\"Unsupported password protection\");\n  });\n  cfb.FileIndex.forEach(function (s) {\n    if (!s.name.match(/\\.iwa$/)) return;\n    if (s.content[0] == 98) return;\n    var o;\n\n    try {\n      o = decompress_iwa_file(s.content);\n    } catch (e) {\n      return console.log(\"?? \" + s.content.length + \" \" + (e.message || e));\n    }\n\n    var packets;\n\n    try {\n      packets = parse_iwa_file(o);\n    } catch (e) {\n      return console.log(\"## \" + (e.message || e));\n    }\n\n    packets.forEach(function (packet) {\n      M[packet.id] = packet.messages;\n      indices.push(packet.id);\n    });\n  });\n  if (!indices.length) throw new Error(\"File has no messages\");\n  if (((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1e4) throw new Error(\"Pages documents are not supported\");\n  var docroot = ((_h = (_g = (_f = (_e = M == null ? void 0 : M[1]) == null ? void 0 : _e[0]) == null ? void 0 : _f.meta) == null ? void 0 : _g[1]) == null ? void 0 : _h[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];\n  if (!docroot) indices.forEach(function (idx) {\n    M[idx].forEach(function (iwam) {\n      var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;\n\n      if (mtype == 1) {\n        if (!docroot) docroot = iwam;else throw new Error(\"Document has multiple roots\");\n      }\n    });\n  });\n  if (!docroot) throw new Error(\"Cannot find Document root\");\n  return parse_TN_DocumentArchive(M, docroot, opts);\n}\n\nfunction write_tile_row(tri, data, SST, wide) {\n  var _a, _b;\n\n  if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0])) throw \"Mutation only works on post-BNC storages!\";\n  var cnt = 0;\n\n  if (tri[7][0].data.length < 2 * data.length) {\n    var new_7 = new Uint8Array(2 * data.length);\n    new_7.set(tri[7][0].data);\n    tri[7][0].data = new_7;\n  }\n\n  if (tri[4][0].data.length < 2 * data.length) {\n    var new_4 = new Uint8Array(2 * data.length);\n    new_4.set(tri[4][0].data);\n    tri[4][0].data = new_4;\n  }\n\n  var dv = u8_to_dataview(tri[7][0].data),\n      last_offset = 0,\n      cell_storage = [];\n\n  var _dv = u8_to_dataview(tri[4][0].data),\n      _last_offset = 0,\n      _cell_storage = [];\n\n  var width = wide ? 4 : 1;\n\n  for (var C = 0; C < data.length; ++C) {\n    if (data[C] == null) {\n      dv.setUint16(C * 2, 65535, true);\n\n      _dv.setUint16(C * 2, 65535);\n\n      continue;\n    }\n\n    dv.setUint16(C * 2, last_offset / width, true);\n\n    _dv.setUint16(C * 2, _last_offset / width, true);\n\n    var celload, _celload;\n\n    switch (typeof data[C]) {\n      case \"string\":\n        celload = write_new_storage({\n          t: \"s\",\n          v: data[C]\n        }, SST);\n        _celload = write_old_storage({\n          t: \"s\",\n          v: data[C]\n        }, SST);\n        break;\n\n      case \"number\":\n        celload = write_new_storage({\n          t: \"n\",\n          v: data[C]\n        }, SST);\n        _celload = write_old_storage({\n          t: \"n\",\n          v: data[C]\n        }, SST);\n        break;\n\n      case \"boolean\":\n        celload = write_new_storage({\n          t: \"b\",\n          v: data[C]\n        }, SST);\n        _celload = write_old_storage({\n          t: \"b\",\n          v: data[C]\n        }, SST);\n        break;\n\n      default:\n        throw new Error(\"Unsupported value \" + data[C]);\n    }\n\n    cell_storage.push(celload);\n    last_offset += celload.length;\n    {\n      _cell_storage.push(_celload);\n\n      _last_offset += _celload.length;\n    }\n    ++cnt;\n  }\n\n  tri[2][0].data = write_varint49(cnt);\n  tri[5][0].data = write_varint49(5);\n\n  for (; C < tri[7][0].data.length / 2; ++C) {\n    dv.setUint16(C * 2, 65535, true);\n\n    _dv.setUint16(C * 2, 65535, true);\n  }\n\n  tri[6][0].data = u8concat(cell_storage);\n  tri[3][0].data = u8concat(_cell_storage);\n  tri[8] = [{\n    type: 0,\n    data: write_varint49(wide ? 1 : 0)\n  }];\n  return cnt;\n}\n\nfunction write_iwam(type, payload) {\n  return {\n    meta: [[], [{\n      type: 0,\n      data: write_varint49(type)\n    }]],\n    data: payload\n  };\n}\n\nfunction get_unique_msgid(dep, dependents) {\n  if (!dependents.last) dependents.last = 927262;\n\n  for (var i = dependents.last; i < 2e6; ++i) {\n    if (!dependents[i]) {\n      dependents[dependents.last = i] = dep;\n      return i;\n    }\n  }\n\n  throw new Error(\"Too many messages\");\n}\n\nfunction build_numbers_deps(cfb) {\n  var dependents = {};\n  var indices = [];\n  cfb.FileIndex.map(function (fi, idx) {\n    return [fi, cfb.FullPaths[idx]];\n  }).forEach(function (row) {\n    var fi = row[0],\n        fp = row[1];\n    if (fi.type != 2) return;\n    if (!fi.name.match(/\\.iwa/)) return;\n    if (fi.name.match(/OperationStorage/)) return;\n    parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function (packet) {\n      indices.push(packet.id);\n      dependents[packet.id] = {\n        deps: [],\n        location: fp,\n        type: varint_to_i32(packet.messages[0].meta[1][0].data)\n      };\n    });\n  });\n  indices.sort(function (x, y) {\n    return x - y;\n  });\n  var indices_varint = indices.filter(function (x) {\n    return x > 1;\n  }).map(function (x) {\n    return [x, write_varint49(x)];\n  });\n  cfb.FileIndex.forEach(function (fi) {\n    if (!fi.name.match(/\\.iwa/)) return;\n    if (fi.name.match(/OperationStorage/)) return;\n    parse_iwa_file(decompress_iwa_file(fi.content)).forEach(function (ia) {\n      indices_varint.forEach(function (ivi) {\n        if (ia.messages.some(function (mess) {\n          return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);\n        })) {\n          dependents[ivi[0]].deps.push(ia.id);\n        }\n      });\n    });\n  });\n  return dependents;\n}\n\nfunction write_numbers_iwa(wb, opts) {\n  if (!opts || !opts.numbers) throw new Error(\"Must pass a `numbers` option -- check the README\");\n  var cfb = CFB.read(opts.numbers, {\n    type: \"base64\"\n  });\n  var dependents = build_numbers_deps(cfb);\n  var cfb_DA = CFB.find(cfb, dependents[1].location);\n  if (!cfb_DA) throw \"Could not find \".concat(dependents[1].location, \" in Numbers template\");\n  var iwa_DA = parse_iwa_file(decompress_iwa_file(cfb_DA.content));\n  var docroot = iwa_DA.find(function (packet) {\n    return packet.id == 1;\n  });\n  if (docroot == null) throw \"Could not find message \".concat(1, \" in Numbers template\");\n  var sheetrefs = mappa(parse_shallow(docroot.messages[0].data)[1], parse_TSP_Reference);\n  wb.SheetNames.forEach(function (name, idx) {\n    return write_numbers_ws(cfb, dependents, wb.Sheets[name], name, idx, sheetrefs[idx]);\n  });\n  return cfb;\n}\n\nfunction numbers_iwa_doit(cfb, deps, id, cb) {\n  var entry = CFB.find(cfb, deps[id].location);\n  if (!entry) throw \"Could not find \".concat(deps[id].location, \" in Numbers template\");\n  var x = parse_iwa_file(decompress_iwa_file(entry.content));\n  var ainfo = x.find(function (packet) {\n    return packet.id == id;\n  });\n  cb(ainfo, x);\n  entry.content = compress_iwa_file(write_iwa_file(x));\n  entry.size = entry.content.length;\n}\n\nfunction numbers_iwa_find(cfb, deps, id) {\n  var entry = CFB.find(cfb, deps[id].location);\n  if (!entry) throw \"Could not find \".concat(deps[id].location, \" in Numbers template\");\n  var x = parse_iwa_file(decompress_iwa_file(entry.content));\n  var ainfo = x.find(function (packet) {\n    return packet.id == id;\n  });\n  return ainfo;\n}\n\nfunction write_numbers_ws(cfb, deps, ws, wsname, sheetidx, rootref) {\n  if (sheetidx >= 1) return console.error(\"The Numbers writer currently writes only the first table\");\n  var drawables = [];\n  numbers_iwa_doit(cfb, deps, rootref, function (docroot) {\n    var sheetref = parse_shallow(docroot.messages[0].data);\n    {\n      sheetref[1] = [{\n        type: 2,\n        data: stru8(wsname)\n      }];\n      drawables = mappa(sheetref[2], parse_TSP_Reference);\n    }\n    docroot.messages[0].data = write_shallow(sheetref);\n  });\n  var tia = numbers_iwa_find(cfb, deps, drawables[0]);\n  var tmaref = parse_TSP_Reference(parse_shallow(tia.messages[0].data)[2][0].data);\n  numbers_iwa_doit(cfb, deps, tmaref, function (docroot, x) {\n    return write_numbers_tma(cfb, deps, ws, docroot, x, tmaref);\n  });\n}\n\nvar USE_WIDE_ROWS = true;\n\nfunction write_numbers_tma(cfb, deps, ws, tmaroot, tmafile, tmaref) {\n  var _a, _b;\n\n  var range = decode_range(ws[\"!ref\"]);\n  range.s.r = range.s.c = 0;\n  var trunc = false;\n\n  if (range.e.c > 999) {\n    trunc = true;\n    range.e.c = 999;\n  }\n\n  if (range.e.r > 999999) {\n    trunc = true;\n    range.e.r = 999999;\n  }\n\n  if (trunc) console.error(\"Truncating to \".concat(encode_range(range)));\n  var data = sheet_to_json(ws, {\n    range: range,\n    header: 1\n  });\n  var SST = [\"~Sh33tJ5~\"],\n      SST_set = new Set(SST);\n  data.forEach(function (row) {\n    return row.forEach(function (cell) {\n      if (typeof cell == \"string\" && !SST_set.has(cell)) {\n        SST.push(cell);\n        SST_set.add(cell);\n      }\n    });\n  });\n  var loc = deps[tmaref].location;\n  loc = loc.replace(/^Root Entry\\//, \"\");\n  loc = loc.replace(/^Index\\//, \"\").replace(/\\.iwa$/, \"\");\n  var pb = parse_shallow(tmaroot.messages[0].data);\n  {\n    pb[6][0].data = write_varint49(range.e.r + 1);\n    pb[7][0].data = write_varint49(range.e.c + 1);\n    delete pb[46];\n    var store = parse_shallow(pb[4][0].data);\n    {\n      var row_header_ref = parse_TSP_Reference(parse_shallow(store[1][0].data)[2][0].data);\n      numbers_iwa_doit(cfb, deps, row_header_ref, function (rowhead, _x) {\n        var _a2;\n\n        var base_bucket = parse_shallow(rowhead.messages[0].data);\n        if ((_a2 = base_bucket == null ? void 0 : base_bucket[2]) == null ? void 0 : _a2[0]) for (var R2 = 0; R2 < data.length; ++R2) {\n          var _bucket = parse_shallow(base_bucket[2][0].data);\n\n          _bucket[1][0].data = write_varint49(R2);\n          _bucket[4][0].data = write_varint49(data[R2].length);\n          base_bucket[2][R2] = {\n            type: base_bucket[2][0].type,\n            data: write_shallow(_bucket)\n          };\n        }\n        rowhead.messages[0].data = write_shallow(base_bucket);\n      });\n      var col_header_ref = parse_TSP_Reference(store[2][0].data);\n      numbers_iwa_doit(cfb, deps, col_header_ref, function (colhead, _x) {\n        var base_bucket = parse_shallow(colhead.messages[0].data);\n\n        for (var C = 0; C <= range.e.c; ++C) {\n          var _bucket = parse_shallow(base_bucket[2][0].data);\n\n          _bucket[1][0].data = write_varint49(C);\n          _bucket[4][0].data = write_varint49(range.e.r + 1);\n          base_bucket[2][C] = {\n            type: base_bucket[2][0].type,\n            data: write_shallow(_bucket)\n          };\n        }\n\n        colhead.messages[0].data = write_shallow(base_bucket);\n      });\n      var sstref = parse_TSP_Reference(store[4][0].data);\n      numbers_iwa_doit(cfb, deps, sstref, function (sstroot) {\n        var sstdata = parse_shallow(sstroot.messages[0].data);\n        {\n          sstdata[3] = [];\n          SST.forEach(function (str, i) {\n            sstdata[3].push({\n              type: 2,\n              data: write_shallow([[], [{\n                type: 0,\n                data: write_varint49(i)\n              }], [{\n                type: 0,\n                data: write_varint49(1)\n              }], [{\n                type: 2,\n                data: stru8(str)\n              }]])\n            });\n          });\n        }\n        sstroot.messages[0].data = write_shallow(sstdata);\n      });\n      var rbtree = parse_shallow(store[9][0].data);\n      rbtree[1] = [];\n      var tilestore = parse_shallow(store[3][0].data);\n      {\n        var tstride = 256;\n        tilestore[2] = [{\n          type: 0,\n          data: write_varint49(tstride)\n        }];\n        var tileref = parse_TSP_Reference(parse_shallow(tilestore[1][0].data)[2][0].data);\n        var save_token = 0;\n        {\n          CFB.utils.cfb_del(cfb, deps[tileref].location);\n          numbers_iwa_doit(cfb, deps, 2, function (ai) {\n            var mlist = parse_shallow(ai.messages[0].data);\n            var lst = mlist[3].filter(function (m) {\n              return parse_varint49(parse_shallow(m.data)[1][0].data) == tileref;\n            });\n            if (lst && lst.length > 0) save_token = parse_varint49(parse_shallow(lst[0].data)[12][0].data);\n            mlist[3] = mlist[3].filter(function (m) {\n              return parse_varint49(parse_shallow(m.data)[1][0].data) != tileref;\n            });\n            var parentidx = mlist[3].findIndex(function (m) {\n              var _a2, _b2;\n\n              var mm = parse_shallow(m.data);\n              if ((_a2 = mm[3]) == null ? void 0 : _a2[0]) return u8str(mm[3][0].data) == loc;\n              if (((_b2 = mm[2]) == null ? void 0 : _b2[0]) && u8str(mm[2][0].data) == loc) return true;\n              return false;\n            });\n            var parent = parse_shallow(mlist[3][parentidx].data);\n            if (!parent[6]) parent[6] = [];\n            parent[6] = parent[6].filter(function (m) {\n              return parse_varint49(parse_shallow(m.data)[1][0].data) != tileref;\n            });\n            mlist[3][parentidx].data = write_shallow(parent);\n            ai.messages[0].data = write_shallow(mlist);\n          });\n        }\n        tilestore[1] = [];\n        var ntiles = Math.ceil((range.e.r + 1) / tstride);\n\n        for (var tidx = 0; tidx < ntiles; ++tidx) {\n          var newtileid = get_unique_msgid({\n            deps: [],\n            location: \"\",\n            type: 6002\n          }, deps);\n          deps[newtileid].location = \"Root Entry/Index/Tables/Tile-\".concat(newtileid, \".iwa\");\n          var tiledata = [[], [{\n            type: 0,\n            data: write_varint49(0)\n          }], [{\n            type: 0,\n            data: write_varint49(Math.min(range.e.r + 1, (tidx + 1) * tstride))\n          }], [{\n            type: 0,\n            data: write_varint49(0)\n          }], [{\n            type: 0,\n            data: write_varint49(Math.min((tidx + 1) * tstride, range.e.r + 1) - tidx * tstride)\n          }], [], [{\n            type: 0,\n            data: write_varint49(5)\n          }], [{\n            type: 0,\n            data: write_varint49(1)\n          }], [{\n            type: 0,\n            data: write_varint49(USE_WIDE_ROWS ? 1 : 0)\n          }]];\n\n          for (var R = tidx * tstride; R <= Math.min(range.e.r, (tidx + 1) * tstride - 1); ++R) {\n            var tilerow = [[], [{\n              type: 0,\n              data: write_varint49(0)\n            }], [{\n              type: 0,\n              data: write_varint49(0)\n            }], [{\n              type: 2,\n              data: new Uint8Array([])\n            }], [{\n              type: 2,\n              data: new Uint8Array(Array.from({\n                length: 510\n              }, function () {\n                return 255;\n              }))\n            }], [{\n              type: 0,\n              data: write_varint49(5)\n            }], [{\n              type: 2,\n              data: new Uint8Array([])\n            }], [{\n              type: 2,\n              data: new Uint8Array(Array.from({\n                length: 510\n              }, function () {\n                return 255;\n              }))\n            }], [{\n              type: 0,\n              data: write_varint49(1)\n            }]];\n            write_tile_row(tilerow, data[R], SST, USE_WIDE_ROWS);\n            tilerow[1][0].data = write_varint49(R - tidx * tstride);\n            tiledata[5].push({\n              data: write_shallow(tilerow),\n              type: 2\n            });\n          }\n\n          tilestore[1].push({\n            type: 2,\n            data: write_shallow([[], [{\n              type: 0,\n              data: write_varint49(tidx)\n            }], [{\n              type: 2,\n              data: write_TSP_Reference(newtileid)\n            }]])\n          });\n          var newtile = {\n            id: newtileid,\n            messages: [write_iwam(6002, write_shallow(tiledata))]\n          };\n          var tilecontent = compress_iwa_file(write_iwa_file([newtile]));\n          CFB.utils.cfb_add(cfb, \"/Index/Tables/Tile-\".concat(newtileid, \".iwa\"), tilecontent);\n          numbers_iwa_doit(cfb, deps, 2, function (ai) {\n            var mlist = parse_shallow(ai.messages[0].data);\n            mlist[3].push({\n              type: 2,\n              data: write_shallow([[], [{\n                type: 0,\n                data: write_varint49(newtileid)\n              }], [{\n                type: 2,\n                data: stru8(\"Tables/Tile\")\n              }], [{\n                type: 2,\n                data: stru8(\"Tables/Tile-\".concat(newtileid))\n              }], [{\n                type: 2,\n                data: new Uint8Array([2, 0, 0])\n              }], [{\n                type: 2,\n                data: new Uint8Array([2, 0, 0])\n              }], [], [], [], [], [{\n                type: 0,\n                data: write_varint49(0)\n              }], [], [{\n                type: 0,\n                data: write_varint49(save_token)\n              }]])\n            });\n            mlist[1] = [{\n              type: 0,\n              data: write_varint49(Math.max(newtileid + 1, parse_varint49(mlist[1][0].data)))\n            }];\n            var parentidx = mlist[3].findIndex(function (m) {\n              var _a2, _b2;\n\n              var mm = parse_shallow(m.data);\n              if ((_a2 = mm[3]) == null ? void 0 : _a2[0]) return u8str(mm[3][0].data) == loc;\n              if (((_b2 = mm[2]) == null ? void 0 : _b2[0]) && u8str(mm[2][0].data) == loc) return true;\n              return false;\n            });\n            var parent = parse_shallow(mlist[3][parentidx].data);\n            if (!parent[6]) parent[6] = [];\n            parent[6].push({\n              type: 2,\n              data: write_shallow([[], [{\n                type: 0,\n                data: write_varint49(newtileid)\n              }]])\n            });\n            mlist[3][parentidx].data = write_shallow(parent);\n            ai.messages[0].data = write_shallow(mlist);\n          });\n          var orefs = ((_a = tmaroot.messages[0].meta[5]) == null ? void 0 : _a[0]) ? parse_packed_varints(tmaroot.messages[0].meta[5][0].data) : [];\n          var orefidx = orefs.indexOf(newtileid);\n\n          if (orefidx == -1) {\n            orefs[orefidx = orefs.length] = newtileid;\n            tmaroot.messages[0].meta[5] = [{\n              type: 2,\n              data: write_packed_varints(orefs)\n            }];\n          }\n\n          rbtree[1].push({\n            type: 2,\n            data: write_shallow([[], [{\n              type: 0,\n              data: write_varint49(tidx * tstride)\n            }], [{\n              type: 0,\n              data: write_varint49(tidx)\n            }]])\n          });\n        }\n      }\n      store[3][0].data = write_shallow(tilestore);\n      store[9][0].data = write_shallow(rbtree);\n      store[10] = [{\n        type: 2,\n        data: new Uint8Array([])\n      }];\n\n      if (ws[\"!merges\"]) {\n        var mergeid = get_unique_msgid({\n          type: 6144,\n          deps: [tmaref],\n          location: deps[tmaref].location\n        }, deps);\n        tmafile.push({\n          id: mergeid,\n          messages: [write_iwam(6144, write_shallow([[], ws[\"!merges\"].map(function (m) {\n            return {\n              type: 2,\n              data: write_shallow([[], [{\n                type: 2,\n                data: write_shallow([[], [{\n                  type: 5,\n                  data: new Uint8Array(new Uint16Array([m.s.r, m.s.c]).buffer)\n                }]])\n              }], [{\n                type: 2,\n                data: write_shallow([[], [{\n                  type: 5,\n                  data: new Uint8Array(new Uint16Array([m.e.r - m.s.r + 1, m.e.c - m.s.c + 1]).buffer)\n                }]])\n              }]])\n            };\n          })]))]\n        });\n        store[13] = [{\n          type: 2,\n          data: write_TSP_Reference(mergeid)\n        }];\n        numbers_iwa_doit(cfb, deps, 2, function (ai) {\n          var mlist = parse_shallow(ai.messages[0].data);\n          var parentidx = mlist[3].findIndex(function (m) {\n            var _a2, _b2;\n\n            var mm = parse_shallow(m.data);\n            if ((_a2 = mm[3]) == null ? void 0 : _a2[0]) return u8str(mm[3][0].data) == loc;\n            if (((_b2 = mm[2]) == null ? void 0 : _b2[0]) && u8str(mm[2][0].data) == loc) return true;\n            return false;\n          });\n          var parent = parse_shallow(mlist[3][parentidx].data);\n          if (!parent[6]) parent[6] = [];\n          parent[6].push({\n            type: 2,\n            data: write_shallow([[], [{\n              type: 0,\n              data: write_varint49(mergeid)\n            }]])\n          });\n          mlist[3][parentidx].data = write_shallow(parent);\n          ai.messages[0].data = write_shallow(mlist);\n        });\n        orefs = ((_b = tmaroot.messages[0].meta[5]) == null ? void 0 : _b[0]) ? parse_packed_varints(tmaroot.messages[0].meta[5][0].data) : [];\n        orefidx = orefs.indexOf(mergeid);\n\n        if (orefidx == -1) {\n          orefs[orefidx = orefs.length] = mergeid;\n          tmaroot.messages[0].meta[5] = [{\n            type: 2,\n            data: write_packed_varints(orefs)\n          }];\n        }\n      } else delete store[13];\n    }\n    pb[4][0].data = write_shallow(store);\n  }\n  tmaroot.messages[0].data = write_shallow(pb);\n}\n\nfunction fix_opts_func(defaults\n/*:Array<Array<any> >*/\n)\n/*:{(o:any):void}*/\n{\n  return function fix_opts(opts) {\n    for (var i = 0; i != defaults.length; ++i) {\n      var d = defaults[i];\n      if (opts[d[0]] === undefined) opts[d[0]] = d[1];\n      if (d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);\n    }\n  };\n}\n\nfunction fix_read_opts(opts) {\n  fix_opts_func([['cellNF', false],\n  /* emit cell number format string as .z */\n  ['cellHTML', true],\n  /* emit html string as .h */\n  ['cellFormula', true],\n  /* emit formulae as .f */\n  ['cellStyles', false],\n  /* emits style/theme as .s */\n  ['cellText', true],\n  /* emit formatted text as .w */\n  ['cellDates', false],\n  /* emit date cells with type `d` */\n  ['sheetStubs', false],\n  /* emit empty cells */\n  ['sheetRows', 0, 'n'],\n  /* read n rows (0 = read all rows) */\n  ['bookDeps', false],\n  /* parse calculation chains */\n  ['bookSheets', false],\n  /* only try to get sheet names (no Sheets) */\n  ['bookProps', false],\n  /* only try to get properties (no Sheets) */\n  ['bookFiles', false],\n  /* include raw file structure (keys, files, cfb) */\n  ['bookVBA', false],\n  /* include vba raw data (vbaraw) */\n  ['password', ''],\n  /* password */\n  ['WTF', false]\n  /* WTF mode (throws errors) */\n  ])(opts);\n}\n\nfunction fix_write_opts(opts) {\n  fix_opts_func([['cellDates', false],\n  /* write date cells with type `d` */\n  ['bookSST', false],\n  /* Generate Shared String Table */\n  ['bookType', 'xlsx'],\n  /* Type of workbook (xlsx/m/b) */\n  ['compression', false],\n  /* Use file compression */\n  ['WTF', false]\n  /* WTF mode (throws errors) */\n  ])(opts);\n}\n\nfunction get_sheet_type(n\n/*:string*/\n)\n/*:string*/\n{\n  if (RELS.WS.indexOf(n) > -1) return \"sheet\";\n  if (RELS.CS && n == RELS.CS) return \"chart\";\n  if (RELS.DS && n == RELS.DS) return \"dialog\";\n  if (RELS.MS && n == RELS.MS) return \"macro\";\n  return n && n.length ? n : \"sheet\";\n}\n\nfunction safe_parse_wbrels(wbrels, sheets) {\n  if (!wbrels) return 0;\n\n  try {\n    wbrels = sheets.map(function pwbr(w) {\n      if (!w.id) w.id = w.strRelID;\n      return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)];\n    });\n  } catch (e) {\n    return null;\n  }\n\n  return !wbrels || wbrels.length === 0 ? null : wbrels;\n}\n\nfunction safe_parse_sheet(zip, path\n/*:string*/\n, relsPath\n/*:string*/\n, sheet, idx\n/*:number*/\n, sheetRels, sheets, stype\n/*:string*/\n, opts, wb, themes, styles) {\n  try {\n    sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);\n    var data = getzipdata(zip, path);\n\n    var _ws;\n\n    switch (stype) {\n      case 'sheet':\n        _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n        break;\n\n      case 'chart':\n        _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n        if (!_ws || !_ws['!drawel']) break;\n        var dfile = resolve_path(_ws['!drawel'].Target, path);\n        var drelsp = get_rels_path(dfile);\n        var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));\n        var chartp = resolve_path(draw, dfile);\n        var crelsp = get_rels_path(chartp);\n        _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);\n        break;\n\n      case 'macro':\n        _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n        break;\n\n      case 'dialog':\n        _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n        break;\n\n      default:\n        throw new Error(\"Unrecognized sheet type \" + stype);\n    }\n\n    sheets[sheet] = _ws;\n    /* scan rels for comments and threaded comments */\n\n    var comments = [],\n        tcomments = [];\n    if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function (n) {\n      var dfile = \"\";\n\n      if (sheetRels[sheet][n].Type == RELS.CMNT) {\n        dfile = resolve_path(sheetRels[sheet][n].Target, path);\n        comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);\n        if (!comments || !comments.length) return;\n        sheet_insert_comments(_ws, comments, false);\n      }\n\n      if (sheetRels[sheet][n].Type == RELS.TCMNT) {\n        dfile = resolve_path(sheetRels[sheet][n].Target, path);\n        tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));\n      }\n    });\n    if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);\n  } catch (e) {\n    if (opts.WTF) throw e;\n  }\n}\n\nfunction strip_front_slash(x\n/*:string*/\n)\n/*:string*/\n{\n  return x.charAt(0) == '/' ? x.slice(1) : x;\n}\n\nfunction parse_zip(zip\n/*:ZIP*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  make_ssf();\n  opts = opts || {};\n  fix_read_opts(opts);\n  /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */\n\n  if (safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);\n  /* UOC */\n\n  if (safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);\n  /* Numbers */\n\n  if (safegetzipfile(zip, 'Index/Document.iwa')) {\n    if (typeof Uint8Array == \"undefined\") throw new Error('NUMBERS file parsing requires Uint8Array support');\n\n    if (typeof parse_numbers_iwa != \"undefined\") {\n      if (zip.FileIndex) return parse_numbers_iwa(zip, opts);\n\n      var _zip = CFB.utils.cfb_new();\n\n      zipentries(zip).forEach(function (e) {\n        zip_add_file(_zip, e, getzipbin(zip, e));\n      });\n      return parse_numbers_iwa(_zip, opts);\n    }\n\n    throw new Error('Unsupported NUMBERS file');\n  }\n\n  if (!safegetzipfile(zip, '[Content_Types].xml')) {\n    if (safegetzipfile(zip, 'index.xml.gz')) throw new Error('Unsupported NUMBERS 08 file');\n    if (safegetzipfile(zip, 'index.xml')) throw new Error('Unsupported NUMBERS 09 file');\n    var index_zip = CFB.find(zip, 'Index.zip');\n\n    if (index_zip) {\n      opts = dup(opts);\n      delete opts.type;\n      if (typeof index_zip.content == \"string\") opts.type = \"binary\"; // TODO: Bun buffer bug\n\n      if (typeof Bun !== \"undefined\" && Buffer.isBuffer(index_zip.content)) return readSync(new Uint8Array(index_zip.content), opts);\n      return readSync(index_zip.content, opts);\n    }\n\n    throw new Error('Unsupported ZIP file');\n  }\n\n  var entries = zipentries(zip);\n  var dir = parse_ct(getzipstr(zip, '[Content_Types].xml')\n  /*:?any*/\n  );\n  var xlsb = false;\n  var sheets, binname;\n\n  if (dir.workbooks.length === 0) {\n    binname = \"xl/workbook.xml\";\n    if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);\n  }\n\n  if (dir.workbooks.length === 0) {\n    binname = \"xl/workbook.bin\";\n    if (!getzipdata(zip, binname, true)) throw new Error(\"Could not find workbook\");\n    dir.workbooks.push(binname);\n    xlsb = true;\n  }\n\n  if (dir.workbooks[0].slice(-3) == \"bin\") xlsb = true;\n  var themes = {}\n  /*:any*/\n  ;\n  var styles = {}\n  /*:any*/\n  ;\n\n  if (!opts.bookSheets && !opts.bookProps) {\n    strs = [];\n    if (dir.sst) try {\n      strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);\n    } catch (e) {\n      if (opts.WTF) throw e;\n    }\n    if (opts.cellStyles && dir.themes.length) themes = parse_theme_xml(getzipstr(zip, dir.themes[0].replace(/^\\//, ''), true) || \"\", opts);\n    if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);\n  }\n  /*var externbooks = */\n\n\n  dir.links.map(function (link) {\n    try {\n      var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);\n      return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);\n    } catch (e) {}\n  });\n  var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);\n  var props = {},\n      propdata = \"\";\n\n  if (dir.coreprops.length) {\n    propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);\n    if (propdata) props = parse_core_props(propdata);\n\n    if (dir.extprops.length !== 0) {\n      propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);\n      if (propdata) parse_ext_props(propdata, props, opts);\n    }\n  }\n\n  var custprops = {};\n\n  if (!opts.bookSheets || opts.bookProps) {\n    if (dir.custprops.length !== 0) {\n      propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);\n      if (propdata) custprops = parse_cust_props(propdata, opts);\n    }\n  }\n\n  var out = {}\n  /*:any*/\n  ;\n\n  if (opts.bookSheets || opts.bookProps) {\n    if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {\n      return x.name;\n    });else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;\n\n    if (opts.bookProps) {\n      out.Props = props;\n      out.Custprops = custprops;\n    }\n\n    if (opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;\n    if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n  }\n\n  sheets = {};\n  var deps = {};\n  if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);\n  var i = 0;\n  var sheetRels = {}\n  /*:any*/\n  ;\n  var path, relsPath;\n  {\n    var wbsheets = wb.Sheets;\n    props.Worksheets = wbsheets.length;\n    props.SheetNames = [];\n\n    for (var j = 0; j != wbsheets.length; ++j) {\n      props.SheetNames[j] = wbsheets[j].name;\n    }\n  }\n  var wbext = xlsb ? \"bin\" : \"xml\";\n  var wbrelsi = dir.workbooks[0].lastIndexOf(\"/\");\n  var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + \"_rels/\" + dir.workbooks[0].slice(wbrelsi + 1) + \".rels\").replace(/^\\//, \"\");\n  if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';\n  var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, \"s5s\"));\n\n  if ((dir.metadata || []).length >= 1) {\n    /* TODO: MDX and other types of metadata */\n    opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);\n  }\n\n  if ((dir.people || []).length >= 1) {\n    opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);\n  }\n\n  if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n  /* Numbers iOS hack */\n\n  var nmode = getzipdata(zip, \"xl/worksheets/sheet.xml\", true) ? 1 : 0;\n\n  wsloop: for (i = 0; i != props.Worksheets; ++i) {\n    var stype = \"sheet\";\n\n    if (wbrels && wbrels[i]) {\n      path = 'xl/' + wbrels[i][1].replace(/[\\/]?xl\\//, \"\");\n      if (!safegetzipfile(zip, path)) path = wbrels[i][1];\n      if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\\/.*$/, \"\") + wbrels[i][1];\n      stype = wbrels[i][2];\n    } else {\n      path = 'xl/worksheets/sheet' + (i + 1 - nmode) + \".\" + wbext;\n      path = path.replace(/sheet0\\./, \"sheet.\");\n    }\n\n    relsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n    if (opts && opts.sheets != null) switch (typeof opts.sheets) {\n      case \"number\":\n        if (i != opts.sheets) continue wsloop;\n        break;\n\n      case \"string\":\n        if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;\n        break;\n\n      default:\n        if (Array.isArray && Array.isArray(opts.sheets)) {\n          var snjseen = false;\n\n          for (var snj = 0; snj != opts.sheets.length; ++snj) {\n            if (typeof opts.sheets[snj] == \"number\" && opts.sheets[snj] == i) snjseen = 1;\n            if (typeof opts.sheets[snj] == \"string\" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;\n          }\n\n          if (!snjseen) continue wsloop;\n        }\n\n    }\n    safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);\n  }\n\n  out = {\n    Directory: dir,\n    Workbook: wb,\n    Props: props,\n    Custprops: custprops,\n    Deps: deps,\n    Sheets: sheets,\n    SheetNames: props.SheetNames,\n    Strings: strs,\n    Styles: styles,\n    Themes: themes,\n    SSF: dup(table_fmt)\n  }\n  /*:any*/\n  ;\n\n  if (opts && opts.bookFiles) {\n    if (zip.files) {\n      out.keys = entries;\n      out.files = zip.files;\n    } else {\n      out.keys = [];\n      out.files = {};\n      zip.FullPaths.forEach(function (p, idx) {\n        p = p.replace(/^Root Entry[\\/]/, \"\");\n        out.keys.push(p);\n        out.files[p] = zip.FileIndex[idx];\n      });\n    }\n  }\n\n  if (opts && opts.bookVBA) {\n    if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin', true);\n  } // TODO: pass back content types metdata for xlsm/xlsx resolution\n\n\n  out.bookType = xlsb ? \"xlsb\" : \"xlsx\";\n  return out;\n}\n/* [MS-OFFCRYPTO] 2.1.1 */\n\n\nfunction parse_xlsxcfb(cfb, _opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  var opts = _opts || {};\n  var f = 'Workbook',\n      data = CFB.find(cfb, f);\n\n  try {\n    f = '/!DataSpaces/Version';\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    /*var version = */\n\n    parse_DataSpaceVersionInfo(data.content);\n    /* 2.3.4.1 */\n\n    f = '/!DataSpaces/DataSpaceMap';\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    var dsm = parse_DataSpaceMap(data.content);\n    if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== \"StrongEncryptionDataSpace\" || dsm[0].comps[0].v !== \"EncryptedPackage\") throw new Error(\"ECMA-376 Encrypted file bad \" + f);\n    /* 2.3.4.2 */\n\n    f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    var seds = parse_DataSpaceDefinition(data.content);\n    if (seds.length != 1 || seds[0] != \"StrongEncryptionTransform\") throw new Error(\"ECMA-376 Encrypted file bad \" + f);\n    /* 2.3.4.3 */\n\n    f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    /*var hdr = */\n\n    parse_Primary(data.content);\n  } catch (e) {}\n\n  f = '/EncryptionInfo';\n  data = CFB.find(cfb, f);\n  if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n  var einfo = parse_EncryptionInfo(data.content);\n  /* 2.3.4.4 */\n\n  f = '/EncryptedPackage';\n  data = CFB.find(cfb, f);\n  if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n  /*global decrypt_agile */\n\n  /*:: declare var decrypt_agile:any; */\n\n  if (einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || \"\", opts);\n  /*global decrypt_std76 */\n\n  /*:: declare var decrypt_std76:any; */\n\n  if (einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || \"\", opts);\n  throw new Error(\"File is password-protected\");\n}\n\nfunction write_zip_xlsb(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n)\n/*:ZIP*/\n{\n  if (wb && !wb.SSF) {\n    wb.SSF = dup(table_fmt);\n  }\n\n  if (wb && wb.SSF) {\n    make_ssf();\n    SSF_load_table(wb.SSF); // $FlowIgnore\n\n    opts.revssf = evert_num(wb.SSF);\n    opts.revssf[wb.SSF[65535]] = 0;\n    opts.ssf = wb.SSF;\n  }\n\n  opts.rels = {};\n  opts.wbrels = {};\n  opts.Strings =\n  /*::((*/\n  []\n  /*:: :any):SST)*/\n  ;\n  opts.Strings.Count = 0;\n  opts.Strings.Unique = 0;\n  if (browser_has_Map) opts.revStrings = new Map();else {\n    opts.revStrings = {};\n    opts.revStrings.foo = [];\n    delete opts.revStrings.foo;\n  }\n  var wbext = \"bin\";\n  var vbafmt = true;\n  var ct = new_ct();\n  fix_write_opts(opts = opts || {});\n  var zip = zip_new();\n  var f = \"\",\n      rId = 0;\n  opts.cellXfs = [];\n  get_cell_style(opts.cellXfs, {}, {\n    revssf: {\n      \"General\": 0\n    }\n  });\n  if (!wb.Props) wb.Props = {};\n  f = \"docProps/core.xml\";\n  zip_add_file(zip, f, write_core_props(wb.Props, opts));\n  ct.coreprops.push(f);\n  add_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n  /*::if(!wb.Props) throw \"unreachable\"; */\n\n  f = \"docProps/app.xml\";\n\n  if (wb.Props && wb.Props.SheetNames) {\n    /* empty */\n  } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;else {\n    var _sn = [];\n\n    for (var _i = 0; _i < wb.SheetNames.length; ++_i) {\n      if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);\n    }\n\n    wb.Props.SheetNames = _sn;\n  }\n\n  wb.Props.Worksheets = wb.Props.SheetNames.length;\n  zip_add_file(zip, f, write_ext_props(wb.Props, opts));\n  ct.extprops.push(f);\n  add_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\n  if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {\n    f = \"docProps/custom.xml\";\n    zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));\n    ct.custprops.push(f);\n    add_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n  }\n\n  for (rId = 1; rId <= wb.SheetNames.length; ++rId) {\n    var wsrels = {\n      '!id': {}\n    };\n    var ws = wb.Sheets[wb.SheetNames[rId - 1]];\n\n    var _type = (ws || {})[\"!type\"] || \"sheet\";\n\n    switch (_type) {\n      case \"chart\":\n      /* falls through */\n\n      default:\n        f = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n        zip_add_file(zip, f, write_ws_bin(rId - 1, opts, wb, wsrels));\n        ct.sheets.push(f);\n        add_rels(opts.wbrels, -1, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS[0]);\n    }\n\n    if (ws) {\n      var comments = ws['!comments'];\n      var need_vml = false;\n      var cf = \"\";\n\n      if (comments && comments.length > 0) {\n        cf = \"xl/comments\" + rId + \".\" + wbext;\n        zip_add_file(zip, cf, write_comments_bin(comments, opts));\n        ct.comments.push(cf);\n        add_rels(wsrels, -1, \"../comments\" + rId + \".\" + wbext, RELS.CMNT);\n        need_vml = true;\n      }\n\n      if (ws['!legacy']) {\n        if (need_vml) zip_add_file(zip, \"xl/drawings/vmlDrawing\" + rId + \".vml\", write_vml(rId, ws['!comments']));\n      }\n\n      delete ws['!comments'];\n      delete ws['!legacy'];\n    }\n\n    if (wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));\n  }\n\n  if (opts.Strings != null && opts.Strings.length > 0) {\n    f = \"xl/sharedStrings.\" + wbext;\n    zip_add_file(zip, f, write_sst_bin(opts.Strings, opts));\n    ct.strs.push(f);\n    add_rels(opts.wbrels, -1, \"sharedStrings.\" + wbext, RELS.SST);\n  }\n\n  f = \"xl/workbook.\" + wbext;\n  zip_add_file(zip, f, write_wb_bin(wb, opts));\n  ct.workbooks.push(f);\n  add_rels(opts.rels, 1, f, RELS.WB);\n  /* TODO: something more intelligent with themes */\n\n  f = \"xl/theme/theme1.xml\";\n  var ww = write_theme(wb.Themes, opts);\n  zip_add_file(zip, f, ww);\n  ct.themes.push(f);\n  add_rels(opts.wbrels, -1, \"theme/theme1.xml\", RELS.THEME);\n  /* TODO: something more intelligent with styles */\n\n  f = \"xl/styles.\" + wbext;\n  zip_add_file(zip, f, write_sty_bin(wb, opts));\n  ct.styles.push(f);\n  add_rels(opts.wbrels, -1, \"styles.\" + wbext, RELS.STY);\n\n  if (wb.vbaraw && vbafmt) {\n    f = \"xl/vbaProject.bin\";\n    zip_add_file(zip, f, wb.vbaraw);\n    ct.vba.push(f);\n    add_rels(opts.wbrels, -1, \"vbaProject.bin\", RELS.VBA);\n  }\n\n  f = \"xl/metadata.\" + wbext;\n  zip_add_file(zip, f, write_xlmeta_bin());\n  ct.metadata.push(f);\n  add_rels(opts.wbrels, -1, \"metadata.\" + wbext, RELS.XLMETA);\n  zip_add_file(zip, \"[Content_Types].xml\", write_ct(ct, opts));\n  zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));\n  zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n  delete opts.revssf;\n  delete opts.ssf;\n  return zip;\n}\n\nfunction write_zip_xlsx(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n)\n/*:ZIP*/\n{\n  if (wb && !wb.SSF) {\n    wb.SSF = dup(table_fmt);\n  }\n\n  if (wb && wb.SSF) {\n    make_ssf();\n    SSF_load_table(wb.SSF); // $FlowIgnore\n\n    opts.revssf = evert_num(wb.SSF);\n    opts.revssf[wb.SSF[65535]] = 0;\n    opts.ssf = wb.SSF;\n  }\n\n  opts.rels = {};\n  opts.wbrels = {};\n  opts.Strings =\n  /*::((*/\n  []\n  /*:: :any):SST)*/\n  ;\n  opts.Strings.Count = 0;\n  opts.Strings.Unique = 0;\n  if (browser_has_Map) opts.revStrings = new Map();else {\n    opts.revStrings = {};\n    opts.revStrings.foo = [];\n    delete opts.revStrings.foo;\n  }\n  var wbext = \"xml\";\n  var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;\n  var ct = new_ct();\n  fix_write_opts(opts = opts || {});\n  var zip = zip_new();\n  var f = \"\",\n      rId = 0;\n  opts.cellXfs = [];\n  get_cell_style(opts.cellXfs, {}, {\n    revssf: {\n      \"General\": 0\n    }\n  });\n  if (!wb.Props) wb.Props = {};\n  f = \"docProps/core.xml\";\n  zip_add_file(zip, f, write_core_props(wb.Props, opts));\n  ct.coreprops.push(f);\n  add_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n  /*::if(!wb.Props) throw \"unreachable\"; */\n\n  f = \"docProps/app.xml\";\n\n  if (wb.Props && wb.Props.SheetNames) {\n    /* empty */\n  } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;else {\n    var _sn = [];\n\n    for (var _i = 0; _i < wb.SheetNames.length; ++_i) {\n      if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);\n    }\n\n    wb.Props.SheetNames = _sn;\n  }\n\n  wb.Props.Worksheets = wb.Props.SheetNames.length;\n  zip_add_file(zip, f, write_ext_props(wb.Props, opts));\n  ct.extprops.push(f);\n  add_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\n  if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {\n    f = \"docProps/custom.xml\";\n    zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));\n    ct.custprops.push(f);\n    add_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n  }\n\n  var people = [\"SheetJ5\"];\n  opts.tcid = 0;\n\n  for (rId = 1; rId <= wb.SheetNames.length; ++rId) {\n    var wsrels = {\n      '!id': {}\n    };\n    var ws = wb.Sheets[wb.SheetNames[rId - 1]];\n\n    var _type = (ws || {})[\"!type\"] || \"sheet\";\n\n    switch (_type) {\n      case \"chart\":\n      /* falls through */\n\n      default:\n        f = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n        zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));\n        ct.sheets.push(f);\n        add_rels(opts.wbrels, -1, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS[0]);\n    }\n\n    if (ws) {\n      var comments = ws['!comments'];\n      var need_vml = false;\n      var cf = \"\";\n\n      if (comments && comments.length > 0) {\n        var needtc = false;\n        comments.forEach(function (carr) {\n          carr[1].forEach(function (c) {\n            if (c.T == true) needtc = true;\n          });\n        });\n\n        if (needtc) {\n          cf = \"xl/threadedComments/threadedComment\" + rId + \".xml\";\n          zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));\n          ct.threadedcomments.push(cf);\n          add_rels(wsrels, -1, \"../threadedComments/threadedComment\" + rId + \".xml\", RELS.TCMNT);\n        }\n\n        cf = \"xl/comments\" + rId + \".\" + wbext;\n        zip_add_file(zip, cf, write_comments_xml(comments, opts));\n        ct.comments.push(cf);\n        add_rels(wsrels, -1, \"../comments\" + rId + \".\" + wbext, RELS.CMNT);\n        need_vml = true;\n      }\n\n      if (ws['!legacy']) {\n        if (need_vml) zip_add_file(zip, \"xl/drawings/vmlDrawing\" + rId + \".vml\", write_vml(rId, ws['!comments']));\n      }\n\n      delete ws['!comments'];\n      delete ws['!legacy'];\n    }\n\n    if (wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));\n  }\n\n  if (opts.Strings != null && opts.Strings.length > 0) {\n    f = \"xl/sharedStrings.\" + wbext;\n    zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));\n    ct.strs.push(f);\n    add_rels(opts.wbrels, -1, \"sharedStrings.\" + wbext, RELS.SST);\n  }\n\n  f = \"xl/workbook.\" + wbext;\n  zip_add_file(zip, f, write_wb_xml(wb, opts));\n  ct.workbooks.push(f);\n  add_rels(opts.rels, 1, f, RELS.WB);\n  /* TODO: something more intelligent with themes */\n\n  f = \"xl/theme/theme1.xml\";\n  zip_add_file(zip, f, write_theme(wb.Themes, opts));\n  ct.themes.push(f);\n  add_rels(opts.wbrels, -1, \"theme/theme1.xml\", RELS.THEME);\n  /* TODO: something more intelligent with styles */\n\n  f = \"xl/styles.\" + wbext;\n  zip_add_file(zip, f, write_sty_xml(wb, opts));\n  ct.styles.push(f);\n  add_rels(opts.wbrels, -1, \"styles.\" + wbext, RELS.STY);\n\n  if (wb.vbaraw && vbafmt) {\n    f = \"xl/vbaProject.bin\";\n    zip_add_file(zip, f, wb.vbaraw);\n    ct.vba.push(f);\n    add_rels(opts.wbrels, -1, \"vbaProject.bin\", RELS.VBA);\n  }\n\n  f = \"xl/metadata.\" + wbext;\n  zip_add_file(zip, f, write_xlmeta_xml());\n  ct.metadata.push(f);\n  add_rels(opts.wbrels, -1, \"metadata.\" + wbext, RELS.XLMETA);\n\n  if (people.length > 1) {\n    f = \"xl/persons/person.xml\";\n    zip_add_file(zip, f, write_people_xml(people, opts));\n    ct.people.push(f);\n    add_rels(opts.wbrels, -1, \"persons/person.xml\", RELS.PEOPLE);\n  }\n\n  zip_add_file(zip, \"[Content_Types].xml\", write_ct(ct, opts));\n  zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));\n  zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n  delete opts.revssf;\n  delete opts.ssf;\n  return zip;\n}\n\nfunction firstbyte(f\n/*:RawData*/\n, o\n/*:?TypeOpts*/\n)\n/*:Array<number>*/\n{\n  var x = \"\";\n\n  switch ((o || {}).type || \"base64\") {\n    case 'buffer':\n      return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];\n\n    case 'base64':\n      x = Base64_decode(f.slice(0, 12));\n      break;\n\n    case 'binary':\n      x = f;\n      break;\n\n    case 'array':\n      return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];\n\n    default:\n      throw new Error(\"Unrecognized type \" + (o && o.type || \"undefined\"));\n  }\n\n  return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];\n}\n\nfunction read_cfb(cfb\n/*:CFBContainer*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  if (CFB.find(cfb, \"EncryptedPackage\")) return parse_xlsxcfb(cfb, opts);\n  return parse_xlscfb(cfb, opts);\n}\n\nfunction read_zip(data\n/*:RawData*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  var zip,\n      d = data;\n  var o = opts || {};\n  if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n  zip = zip_read(d, o);\n  return parse_zip(zip, o);\n}\n\nfunction read_plaintext(data\n/*:string*/\n, o\n/*:ParseOpts*/\n)\n/*:Workbook*/\n{\n  var i = 0;\n\n  main: while (i < data.length) {\n    switch (data.charCodeAt(i)) {\n      case 0x0A:\n      case 0x0D:\n      case 0x20:\n        ++i;\n        break;\n\n      case 0x3C:\n        return parse_xlml(data.slice(i), o);\n\n      default:\n        break main;\n    }\n  }\n\n  return PRN.to_workbook(data, o);\n}\n\nfunction read_plaintext_raw(data\n/*:RawData*/\n, o\n/*:ParseOpts*/\n)\n/*:Workbook*/\n{\n  var str = \"\",\n      bytes = firstbyte(data, o);\n\n  switch (o.type) {\n    case 'base64':\n      str = Base64_decode(data);\n      break;\n\n    case 'binary':\n      str = data;\n      break;\n\n    case 'buffer':\n      str = data.toString('binary');\n      break;\n\n    case 'array':\n      str = cc2str(data);\n      break;\n\n    default:\n      throw new Error(\"Unrecognized type \" + o.type);\n  }\n\n  if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);\n  o.type = \"binary\";\n  return read_plaintext(str, o);\n}\n\nfunction read_utf16(data\n/*:RawData*/\n, o\n/*:ParseOpts*/\n)\n/*:Workbook*/\n{\n  var d = data;\n  if (o.type == 'base64') d = Base64_decode(d);\n  d = typeof $cptable !== \"undefined\" ? $cptable.utils.decode(1200, d.slice(2), 'str') : utf16leread(d.slice(2));\n  o.type = \"binary\";\n  return read_plaintext(d, o);\n}\n\nfunction bstrify(data\n/*:string*/\n)\n/*:string*/\n{\n  return !data.match(/[^\\x00-\\x7F]/) ? data : utf8write(data);\n}\n\nfunction read_prn(data, d, o, str) {\n  if (str) {\n    o.type = \"string\";\n    return PRN.to_workbook(data, o);\n  }\n\n  return PRN.to_workbook(d, o);\n}\n\nfunction readSync(data\n/*:RawData*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  reset_cp();\n  var o = opts || {};\n  if (o.codepage && typeof $cptable === \"undefined\") console.error(\"Codepage tables are not loaded.  Non-ASCII characters may not give expected results\");\n  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = \"array\", o));\n  if (typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== \"undefined\" ? \"buffer\" : \"array\";\n  var d = data,\n      n = [0, 0, 0, 0],\n      str = false;\n\n  if (o.cellStyles) {\n    o.cellNF = true;\n    o.sheetStubs = true;\n  }\n\n  _ssfopts = {};\n  if (o.dateNF) _ssfopts.dateNF = o.dateNF;\n  if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n\n  if (o.type == \"file\") {\n    o.type = has_buf ? \"buffer\" : \"binary\";\n    d = read_binary(data);\n    if (typeof Uint8Array !== 'undefined' && !has_buf) o.type = \"array\";\n  }\n\n  if (o.type == \"string\") {\n    str = true;\n    o.type = \"binary\";\n    o.codepage = 65001;\n    d = bstrify(data);\n  }\n\n  if (o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {\n    // $FlowIgnore\n    var ab = new ArrayBuffer(3),\n        vu = new Uint8Array(ab);\n    vu.foo = \"bar\"; // $FlowIgnore\n\n    if (!vu.foo) {\n      o = dup(o);\n      o.type = 'array';\n      return readSync(ab2a(d), o);\n    }\n  }\n\n  switch ((n = firstbyte(d, o))[0]) {\n    case 0xD0:\n      if (n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o);\n      break;\n\n    case 0x09:\n      if (n[1] <= 0x08) return parse_xlscfb(d, o);\n      break;\n\n    case 0x3C:\n      return parse_xlml(d, o);\n\n    case 0x49:\n      if (n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error(\"TIFF Image File is not a spreadsheet\");\n      if (n[1] === 0x44) return read_wb_ID(d, o);\n      break;\n\n    case 0x54:\n      if (n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o);\n      break;\n\n    case 0x50:\n      return n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09 ? read_zip(d, o) : read_prn(data, d, o, str);\n\n    case 0xEF:\n      return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);\n\n    case 0xFF:\n      if (n[1] === 0xFE) {\n        return read_utf16(d, o);\n      } else if (n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);\n\n      break;\n\n    case 0x00:\n      if (n[1] === 0x00) {\n        if (n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);\n        if (n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);\n      }\n\n      break;\n\n    case 0x03:\n    case 0x83:\n    case 0x8B:\n    case 0x8C:\n      return DBF.to_workbook(d, o);\n\n    case 0x7B:\n      if (n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return rtf_to_workbook(d, o);\n      break;\n\n    case 0x0A:\n    case 0x0D:\n    case 0x20:\n      return read_plaintext_raw(d, o);\n\n    case 0x89:\n      if (n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error(\"PNG Image File is not a spreadsheet\");\n      break;\n\n    case 0x08:\n      if (n[1] === 0xE7) throw new Error(\"Unsupported Multiplan 1.x file!\");\n      break;\n\n    case 0x0C:\n      if (n[1] === 0xEC) throw new Error(\"Unsupported Multiplan 2.x file!\");\n      if (n[1] === 0xED) throw new Error(\"Unsupported Multiplan 3.x file!\");\n      break;\n  }\n\n  if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);\n  return read_prn(data, d, o, str);\n}\n\nfunction readFileSync(filename\n/*:string*/\n, opts\n/*:?ParseOpts*/\n)\n/*:Workbook*/\n{\n  var o = opts || {};\n  o.type = 'file';\n  return readSync(filename, o);\n}\n\nfunction write_cfb_ctr(cfb\n/*:CFBContainer*/\n, o\n/*:WriteOpts*/\n)\n/*:any*/\n{\n  switch (o.type) {\n    case \"base64\":\n    case \"binary\":\n      break;\n\n    case \"buffer\":\n    case \"array\":\n      o.type = \"\";\n      break;\n\n    case \"file\":\n      return write_dl(o.file, CFB.write(cfb, {\n        type: has_buf ? 'buffer' : \"\"\n      }));\n\n    case \"string\":\n      throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n\n    default:\n      throw new Error(\"Unrecognized type \" + o.type);\n  }\n\n  return CFB.write(cfb, o);\n}\n\nfunction write_zip(wb\n/*:Workbook*/\n, opts\n/*:WriteOpts*/\n)\n/*:ZIP*/\n{\n  switch (opts.bookType) {\n    case \"ods\":\n      return write_ods(wb, opts);\n\n    case \"numbers\":\n      return write_numbers_iwa(wb, opts);\n\n    case \"xlsb\":\n      return write_zip_xlsb(wb, opts);\n\n    default:\n      return write_zip_xlsx(wb, opts);\n  }\n}\n/*:: declare var encrypt_agile:any; */\n\n\nfunction write_zip_type(wb\n/*:Workbook*/\n, opts\n/*:?WriteOpts*/\n)\n/*:any*/\n{\n  var o = dup(opts || {});\n  var z = write_zip(wb, o);\n  return write_zip_denouement(z, o);\n}\n\nfunction write_zip_typeXLSX(wb\n/*:Workbook*/\n, opts\n/*:?WriteOpts*/\n)\n/*:any*/\n{\n  var o = dup(opts || {});\n  var z = write_zip_xlsx(wb, o);\n  return write_zip_denouement(z, o);\n}\n\nfunction write_zip_denouement(z\n/*:any*/\n, o\n/*:?WriteOpts*/\n)\n/*:any*/\n{\n  var oopts = {};\n  var ftype = has_buf ? \"nodebuffer\" : typeof Uint8Array !== \"undefined\" ? \"array\" : \"string\";\n  if (o.compression) oopts.compression = 'DEFLATE';\n  if (o.password) oopts.type = ftype;else switch (o.type) {\n    case \"base64\":\n      oopts.type = \"base64\";\n      break;\n\n    case \"binary\":\n      oopts.type = \"string\";\n      break;\n\n    case \"string\":\n      throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n\n    case \"buffer\":\n    case \"file\":\n      oopts.type = ftype;\n      break;\n\n    default:\n      throw new Error(\"Unrecognized type \" + o.type);\n  }\n  var out = z.FullPaths ? CFB.write(z, {\n    fileType: \"zip\",\n    type:\n    /*::(*/\n    {\n      \"nodebuffer\": \"buffer\",\n      \"string\": \"binary\"\n    }\n    /*:: :any)*/\n    [oopts.type] || oopts.type,\n    compression: !!o.compression\n  }) : z.generate(oopts);\n\n  if (typeof Deno !== \"undefined\") {\n    if (typeof out == \"string\") {\n      if (o.type == \"binary\" || o.type == \"base64\") return out;\n      out = new Uint8Array(s2ab(out));\n    }\n  }\n  /*jshint -W083 */\n\n\n  if (o.password && typeof encrypt_agile !== 'undefined') return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef\n\n  /*jshint +W083 */\n\n  if (o.type === \"file\") return write_dl(o.file, out);\n  return o.type == \"string\" ? utf8read(\n  /*::(*/\n  out\n  /*:: :any)*/\n  ) : out;\n}\n\nfunction write_cfb_type(wb\n/*:Workbook*/\n, opts\n/*:?WriteOpts*/\n)\n/*:any*/\n{\n  var o = opts || {};\n  var cfb\n  /*:CFBContainer*/\n  = write_xlscfb(wb, o);\n  return write_cfb_ctr(cfb, o);\n}\n\nfunction write_string_type(out\n/*:string*/\n, opts\n/*:WriteOpts*/\n, bom\n/*:?string*/\n)\n/*:any*/\n{\n  if (!bom) bom = \"\";\n  var o = bom + out;\n\n  switch (opts.type) {\n    case \"base64\":\n      return Base64_encode(utf8write(o));\n\n    case \"binary\":\n      return utf8write(o);\n\n    case \"string\":\n      return out;\n\n    case \"file\":\n      return write_dl(opts.file, o, 'utf8');\n\n    case \"buffer\":\n      {\n        if (has_buf) return Buffer_from(o, 'utf8');else if (typeof TextEncoder !== \"undefined\") return new TextEncoder().encode(o);else return write_string_type(o, {\n          type: 'binary'\n        }).split(\"\").map(function (c) {\n          return c.charCodeAt(0);\n        });\n      }\n  }\n\n  throw new Error(\"Unrecognized type \" + opts.type);\n}\n\nfunction write_stxt_type(out\n/*:string*/\n, opts\n/*:WriteOpts*/\n)\n/*:any*/\n{\n  switch (opts.type) {\n    case \"base64\":\n      return Base64_encode_pass(out);\n\n    case \"binary\":\n      return out;\n\n    case \"string\":\n      return out;\n\n    /* override in sheet_to_txt */\n\n    case \"file\":\n      return write_dl(opts.file, out, 'binary');\n\n    case \"buffer\":\n      {\n        if (has_buf) return Buffer_from(out, 'binary');else return out.split(\"\").map(function (c) {\n          return c.charCodeAt(0);\n        });\n      }\n  }\n\n  throw new Error(\"Unrecognized type \" + opts.type);\n}\n/* TODO: test consistency */\n\n\nfunction write_binary_type(out, opts\n/*:WriteOpts*/\n)\n/*:any*/\n{\n  switch (opts.type) {\n    case \"string\":\n    case \"base64\":\n    case \"binary\":\n      var bstr = \"\"; // $FlowIgnore\n\n      for (var i = 0; i < out.length; ++i) {\n        bstr += String.fromCharCode(out[i]);\n      }\n\n      return opts.type == 'base64' ? Base64_encode(bstr) : opts.type == 'string' ? utf8read(bstr) : bstr;\n\n    case \"file\":\n      return write_dl(opts.file, out);\n\n    case \"buffer\":\n      return out;\n\n    default:\n      throw new Error(\"Unrecognized type \" + opts.type);\n  }\n}\n\nfunction writeSyncXLSX(wb\n/*:Workbook*/\n, opts\n/*:?WriteOpts*/\n) {\n  reset_cp();\n  check_wb(wb);\n  var o = dup(opts || {});\n\n  if (o.cellStyles) {\n    o.cellNF = true;\n    o.sheetStubs = true;\n  }\n\n  if (o.type == \"array\") {\n    o.type = \"binary\";\n    var out\n    /*:string*/\n    = writeSyncXLSX(wb, o)\n    /*:any*/\n    ;\n    o.type = \"array\";\n    return s2ab(out);\n  }\n\n  return write_zip_typeXLSX(wb, o);\n}\n\nfunction writeSync(wb\n/*:Workbook*/\n, opts\n/*:?WriteOpts*/\n) {\n  reset_cp();\n  check_wb(wb);\n  var o = dup(opts || {});\n\n  if (o.cellStyles) {\n    o.cellNF = true;\n    o.sheetStubs = true;\n  }\n\n  if (o.type == \"array\") {\n    o.type = \"binary\";\n    var out\n    /*:string*/\n    = writeSync(wb, o)\n    /*:any*/\n    ;\n    o.type = \"array\";\n    return s2ab(out);\n  }\n\n  var idx = 0;\n\n  if (o.sheet) {\n    if (typeof o.sheet == \"number\") idx = o.sheet;else idx = wb.SheetNames.indexOf(o.sheet);\n    if (!wb.SheetNames[idx]) throw new Error(\"Sheet not found: \" + o.sheet + \" : \" + typeof o.sheet);\n  }\n\n  switch (o.bookType || 'xlsb') {\n    case 'xml':\n    case 'xlml':\n      return write_string_type(write_xlml(wb, o), o);\n\n    case 'slk':\n    case 'sylk':\n      return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb), o);\n\n    case 'htm':\n    case 'html':\n      return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'txt':\n      return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'csv':\n      return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, \"\\uFEFF\");\n\n    case 'dif':\n      return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'dbf':\n      return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'prn':\n      return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'rtf':\n      return write_string_type(sheet_to_rtf(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'eth':\n      return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'fods':\n      return write_string_type(write_ods(wb, o), o);\n\n    case 'wk1':\n      return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);\n\n    case 'wk3':\n      return write_binary_type(WK_.book_to_wk3(wb, o), o);\n\n    case 'biff2':\n      if (!o.biff) o.biff = 2;\n\n    /* falls through */\n\n    case 'biff3':\n      if (!o.biff) o.biff = 3;\n\n    /* falls through */\n\n    case 'biff4':\n      if (!o.biff) o.biff = 4;\n      return write_binary_type(write_biff_buf(wb, o), o);\n\n    case 'biff5':\n      if (!o.biff) o.biff = 5;\n\n    /* falls through */\n\n    case 'biff8':\n    case 'xla':\n    case 'xls':\n      if (!o.biff) o.biff = 8;\n      return write_cfb_type(wb, o);\n\n    case 'xlsx':\n    case 'xlsm':\n    case 'xlam':\n    case 'xlsb':\n    case 'numbers':\n    case 'ods':\n      return write_zip_type(wb, o);\n\n    default:\n      throw new Error(\"Unrecognized bookType |\" + o.bookType + \"|\");\n  }\n}\n\nfunction resolve_book_type(o\n/*:WriteFileOpts*/\n) {\n  if (o.bookType) return;\n  var _BT = {\n    \"xls\": \"biff8\",\n    \"htm\": \"html\",\n    \"slk\": \"sylk\",\n    \"socialcalc\": \"eth\",\n    \"Sh33tJS\": \"WTF\"\n  };\n  var ext = o.file.slice(o.file.lastIndexOf(\".\")).toLowerCase();\n  if (ext.match(/^\\.[a-z]+$/)) o.bookType = ext.slice(1);\n  o.bookType = _BT[o.bookType] || o.bookType;\n}\n\nfunction writeFileSync(wb\n/*:Workbook*/\n, filename\n/*:string*/\n, opts\n/*:?WriteFileOpts*/\n) {\n  var o = opts || {};\n  o.type = 'file';\n  o.file = filename;\n  resolve_book_type(o);\n  return writeSync(wb, o);\n}\n\nfunction writeFileSyncXLSX(wb\n/*:Workbook*/\n, filename\n/*:string*/\n, opts\n/*:?WriteFileOpts*/\n) {\n  var o = opts || {};\n  o.type = 'file';\n  o.file = filename;\n  resolve_book_type(o);\n  return writeSyncXLSX(wb, o);\n}\n\nfunction writeFileAsync(filename\n/*:string*/\n, wb\n/*:Workbook*/\n, opts\n/*:?WriteFileOpts*/\n, cb\n/*:?(e?:ErrnoError)=>void*/\n) {\n  var o = opts || {};\n  o.type = 'file';\n  o.file = filename;\n  resolve_book_type(o);\n  o.type = 'buffer';\n  var _cb = cb;\n  if (!(_cb instanceof Function)) _cb = opts\n  /*:any*/\n  ;\n  return _fs.writeFile(filename, writeSync(wb, o), _cb);\n}\n/*::\ntype MJRObject = {\n\trow: any;\n\tisempty: boolean;\n};\n*/\n\n\nfunction make_json_row(sheet\n/*:Worksheet*/\n, r\n/*:Range*/\n, R\n/*:number*/\n, cols\n/*:Array<string>*/\n, header\n/*:number*/\n, hdr\n/*:Array<any>*/\n, dense\n/*:boolean*/\n, o\n/*:Sheet2JSONOpts*/\n)\n/*:MJRObject*/\n{\n  var rr = encode_row(R);\n  var defval = o.defval,\n      raw = o.raw || !Object.prototype.hasOwnProperty.call(o, \"raw\");\n  var isempty = true;\n  var row\n  /*:any*/\n  = header === 1 ? [] : {};\n\n  if (header !== 1) {\n    if (Object.defineProperty) try {\n      Object.defineProperty(row, '__rowNum__', {\n        value: R,\n        enumerable: false\n      });\n    } catch (e) {\n      row.__rowNum__ = R;\n    } else row.__rowNum__ = R;\n  }\n\n  if (!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {\n    var val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\n    if (val === undefined || val.t === undefined) {\n      if (defval === undefined) continue;\n\n      if (hdr[C] != null) {\n        row[hdr[C]] = defval;\n      }\n\n      continue;\n    }\n\n    var v = val.v;\n\n    switch (val.t) {\n      case 'z':\n        if (v == null) break;\n        continue;\n\n      case 'e':\n        v = v == 0 ? null : void 0;\n        break;\n\n      case 's':\n      case 'd':\n      case 'b':\n      case 'n':\n        break;\n\n      default:\n        throw new Error('unrecognized type ' + val.t);\n    }\n\n    if (hdr[C] != null) {\n      if (v == null) {\n        if (val.t == \"e\" && v === null) row[hdr[C]] = null;else if (defval !== undefined) row[hdr[C]] = defval;else if (raw && v === null) row[hdr[C]] = null;else continue;\n      } else {\n        row[hdr[C]] = raw && (val.t !== \"n\" || val.t === \"n\" && o.rawNumbers !== false) ? v : format_cell(val, v, o);\n      }\n\n      if (v != null) isempty = false;\n    }\n  }\n  return {\n    row: row,\n    isempty: isempty\n  };\n}\n\nfunction sheet_to_json(sheet\n/*:Worksheet*/\n, opts\n/*:?Sheet2JSONOpts*/\n) {\n  if (sheet == null || sheet[\"!ref\"] == null) return [];\n  var val = {\n    t: 'n',\n    v: 0\n  },\n      header = 0,\n      offset = 1,\n      hdr\n  /*:Array<any>*/\n  = [],\n      v = 0,\n      vv = \"\";\n  var r = {\n    s: {\n      r: 0,\n      c: 0\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var o = opts || {};\n  var range = o.range != null ? o.range : sheet[\"!ref\"];\n  if (o.header === 1) header = 1;else if (o.header === \"A\") header = 2;else if (Array.isArray(o.header)) header = 3;else if (o.header == null) header = 0;\n\n  switch (typeof range) {\n    case 'string':\n      r = safe_decode_range(range);\n      break;\n\n    case 'number':\n      r = safe_decode_range(sheet[\"!ref\"]);\n      r.s.r = range;\n      break;\n\n    default:\n      r = range;\n  }\n\n  if (header > 0) offset = 0;\n  var rr = encode_row(r.s.r);\n  var cols\n  /*:Array<string>*/\n  = [];\n  var out\n  /*:Array<any>*/\n  = [];\n  var outi = 0,\n      counter = 0;\n  var dense = Array.isArray(sheet);\n  var R = r.s.r,\n      C = 0;\n  var header_cnt = {};\n  if (dense && !sheet[R]) sheet[R] = [];\n  var colinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!cols\"] || [];\n  var rowinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!rows\"] || [];\n\n  for (C = r.s.c; C <= r.e.c; ++C) {\n    if ((colinfo[C] || {}).hidden) continue;\n    cols[C] = encode_col(C);\n    val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\n    switch (header) {\n      case 1:\n        hdr[C] = C - r.s.c;\n        break;\n\n      case 2:\n        hdr[C] = cols[C];\n        break;\n\n      case 3:\n        hdr[C] = o.header[C - r.s.c];\n        break;\n\n      default:\n        if (val == null) val = {\n          w: \"__EMPTY\",\n          t: \"s\"\n        };\n        vv = v = format_cell(val, null, o);\n        counter = header_cnt[v] || 0;\n        if (!counter) header_cnt[v] = 1;else {\n          do {\n            vv = v + \"_\" + counter++;\n          } while (header_cnt[vv]);\n\n          header_cnt[v] = counter;\n          header_cnt[vv] = 1;\n        }\n        hdr[C] = vv;\n    }\n  }\n\n  for (R = r.s.r + offset; R <= r.e.r; ++R) {\n    if ((rowinfo[R] || {}).hidden) continue;\n    var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n    if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;\n  }\n\n  out.length = outi;\n  return out;\n}\n\nvar qreg = /\"/g;\n\nfunction make_csv_row(sheet\n/*:Worksheet*/\n, r\n/*:Range*/\n, R\n/*:number*/\n, cols\n/*:Array<string>*/\n, fs\n/*:number*/\n, rs\n/*:number*/\n, FS\n/*:string*/\n, o\n/*:Sheet2CSVOpts*/\n)\n/*:?string*/\n{\n  var isempty = true;\n  var row\n  /*:Array<string>*/\n  = [],\n      txt = \"\",\n      rr = encode_row(R);\n\n  for (var C = r.s.c; C <= r.e.c; ++C) {\n    if (!cols[C]) continue;\n    var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];\n    if (val == null) txt = \"\";else if (val.v != null) {\n      isempty = false;\n      txt = '' + (o.rawNumbers && val.t == \"n\" ? val.v : format_cell(val, null, o));\n\n      for (var i = 0, cc = 0; i !== txt.length; ++i) {\n        if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {\n          txt = \"\\\"\" + txt.replace(qreg, '\"\"') + \"\\\"\";\n          break;\n        }\n      }\n\n      if (txt == \"ID\") txt = '\"ID\"';\n    } else if (val.f != null && !val.F) {\n      isempty = false;\n      txt = '=' + val.f;\n      if (txt.indexOf(\",\") >= 0) txt = '\"' + txt.replace(qreg, '\"\"') + '\"';\n    } else txt = \"\";\n    /* NOTE: Excel CSV does not support array formulae */\n\n    row.push(txt);\n  }\n\n  if (o.blankrows === false && isempty) return null;\n  return row.join(FS);\n}\n\nfunction sheet_to_csv(sheet\n/*:Worksheet*/\n, opts\n/*:?Sheet2CSVOpts*/\n)\n/*:string*/\n{\n  var out\n  /*:Array<string>*/\n  = [];\n  var o = opts == null ? {} : opts;\n  if (sheet == null || sheet[\"!ref\"] == null) return \"\";\n  var r = safe_decode_range(sheet[\"!ref\"]);\n  var FS = o.FS !== undefined ? o.FS : \",\",\n      fs = FS.charCodeAt(0);\n  var RS = o.RS !== undefined ? o.RS : \"\\n\",\n      rs = RS.charCodeAt(0);\n  var endregex = new RegExp((FS == \"|\" ? \"\\\\|\" : FS) + \"+$\");\n  var row = \"\",\n      cols\n  /*:Array<string>*/\n  = [];\n  o.dense = Array.isArray(sheet);\n  var colinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!cols\"] || [];\n  var rowinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!rows\"] || [];\n\n  for (var C = r.s.c; C <= r.e.c; ++C) {\n    if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);\n  }\n\n  var w = 0;\n\n  for (var R = r.s.r; R <= r.e.r; ++R) {\n    if ((rowinfo[R] || {}).hidden) continue;\n    row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);\n\n    if (row == null) {\n      continue;\n    }\n\n    if (o.strip) row = row.replace(endregex, \"\");\n    if (row || o.blankrows !== false) out.push((w++ ? RS : \"\") + row);\n  }\n\n  delete o.dense;\n  return out.join(\"\");\n}\n\nfunction sheet_to_txt(sheet\n/*:Worksheet*/\n, opts\n/*:?Sheet2CSVOpts*/\n) {\n  if (!opts) opts = {};\n  opts.FS = \"\\t\";\n  opts.RS = \"\\n\";\n  var s = sheet_to_csv(sheet, opts);\n  if (typeof $cptable == 'undefined' || opts.type == 'string') return s;\n  var o = $cptable.utils.encode(1200, s, 'str');\n  return String.fromCharCode(255) + String.fromCharCode(254) + o;\n}\n\nfunction sheet_to_formulae(sheet\n/*:Worksheet*/\n)\n/*:Array<string>*/\n{\n  var y = \"\",\n      x,\n      val = \"\";\n  if (sheet == null || sheet[\"!ref\"] == null) return [];\n  var r = safe_decode_range(sheet['!ref']),\n      rr = \"\",\n      cols\n  /*:Array<string>*/\n  = [],\n      C;\n  var cmds\n  /*:Array<string>*/\n  = [];\n  var dense = Array.isArray(sheet);\n\n  for (C = r.s.c; C <= r.e.c; ++C) {\n    cols[C] = encode_col(C);\n  }\n\n  for (var R = r.s.r; R <= r.e.r; ++R) {\n    rr = encode_row(R);\n\n    for (C = r.s.c; C <= r.e.c; ++C) {\n      y = cols[C] + rr;\n      x = dense ? (sheet[R] || [])[C] : sheet[y];\n      val = \"\";\n      if (x === undefined) continue;else if (x.F != null) {\n        y = x.F;\n        if (!x.f) continue;\n        val = x.f;\n        if (y.indexOf(\":\") == -1) y = y + \":\" + y;\n      }\n      if (x.f != null) val = x.f;else if (x.t == 'z') continue;else if (x.t == 'n' && x.v != null) val = \"\" + x.v;else if (x.t == 'b') val = x.v ? \"TRUE\" : \"FALSE\";else if (x.w !== undefined) val = \"'\" + x.w;else if (x.v === undefined) continue;else if (x.t == 's') val = \"'\" + x.v;else val = \"\" + x.v;\n      cmds[cmds.length] = y + \"=\" + val;\n    }\n  }\n\n  return cmds;\n}\n\nfunction sheet_add_json(_ws\n/*:?Worksheet*/\n, js\n/*:Array<any>*/\n, opts)\n/*:Worksheet*/\n{\n  var o = opts || {};\n  var dense = _ws ? Array.isArray(_ws) : o.dense;\n  if (DENSE != null && dense == null) dense = DENSE;\n  var offset = +!o.skipHeader;\n  var ws\n  /*:Worksheet*/\n  = _ws || (dense ? []\n  /*:any*/\n  : {}\n  /*:any*/\n  );\n  var _R = 0,\n      _C = 0;\n\n  if (ws && o.origin != null) {\n    if (typeof o.origin == 'number') _R = o.origin;else {\n      var _origin\n      /*:CellAddress*/\n      = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n\n      _R = _origin.r;\n      _C = _origin.c;\n    }\n  }\n\n  var range\n  /*:Range*/\n  = {\n    s: {\n      c: 0,\n      r: 0\n    },\n    e: {\n      c: _C,\n      r: _R + js.length - 1 + offset\n    }\n  }\n  /*:any*/\n  ;\n\n  if (ws['!ref']) {\n    var _range = safe_decode_range(ws['!ref']);\n\n    range.e.c = Math.max(range.e.c, _range.e.c);\n    range.e.r = Math.max(range.e.r, _range.e.r);\n\n    if (_R == -1) {\n      _R = _range.e.r + 1;\n      range.e.r = _R + js.length - 1 + offset;\n    }\n  } else {\n    if (_R == -1) {\n      _R = 0;\n      range.e.r = js.length - 1 + offset;\n    }\n  }\n\n  var hdr\n  /*:Array<string>*/\n  = o.header || [],\n      C = 0;\n  var ROW = [];\n  js.forEach(function (JS, R\n  /*:number*/\n  ) {\n    if (dense && !ws[_R + R + offset]) ws[_R + R + offset] = [];\n    if (dense) ROW = ws[_R + R + offset];\n    keys(JS).forEach(function (k) {\n      if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;\n      var v = JS[k];\n      var t = 'z';\n      var z = \"\";\n      var ref = dense ? \"\" : encode_cell({\n        c: _C + C,\n        r: _R + R + offset\n      });\n      var cell\n      /*:Cell*/\n      = dense ? ROW[_C + C] : ws[ref];\n\n      if (v && typeof v === 'object' && !(v instanceof Date)) {\n        ws[ref] = v;\n      } else {\n        if (typeof v == 'number') t = 'n';else if (typeof v == 'boolean') t = 'b';else if (typeof v == 'string') t = 's';else if (v instanceof Date) {\n          t = 'd';\n\n          if (!o.cellDates) {\n            t = 'n';\n            v = datenum(v);\n          }\n\n          z = cell != null && cell.z && fmt_is_date(cell.z) ? cell.z : o.dateNF || table_fmt[14];\n        } else if (v === null && o.nullError) {\n          t = 'e';\n          v = 0;\n        }\n\n        if (!cell) {\n          if (!dense) ws[ref] = cell = {\n            t: t,\n            v: v\n          }\n          /*:any*/\n          ;else ROW[_C + C] = cell = {\n            t: t,\n            v: v\n          }\n          /*:any*/\n          ;\n        } else {\n          cell.t = t;\n          cell.v = v;\n          delete cell.w;\n          delete cell.R;\n          if (z) cell.z = z;\n        }\n\n        if (z) cell.z = z;\n      }\n    });\n  });\n  range.e.c = Math.max(range.e.c, _C + hdr.length - 1);\n\n  var __R = encode_row(_R);\n\n  if (dense && !ws[_R]) ws[_R] = [];\n  if (offset) for (C = 0; C < hdr.length; ++C) {\n    if (dense) ws[_R][C + _C] = {\n      t: 's',\n      v: hdr[C]\n    };else ws[encode_col(C + _C) + __R] = {\n      t: 's',\n      v: hdr[C]\n    };\n  }\n  ws['!ref'] = encode_range(range);\n  return ws;\n}\n\nfunction json_to_sheet(js\n/*:Array<any>*/\n, opts)\n/*:Worksheet*/\n{\n  return sheet_add_json(null, js, opts);\n}\n/* get cell, creating a stub if necessary */\n\n\nfunction ws_get_cell_stub(ws\n/*:Worksheet*/\n, R, C\n/*:?number*/\n)\n/*:Cell*/\n{\n  /* A1 cell address */\n  if (typeof R == \"string\") {\n    /* dense */\n    if (Array.isArray(ws)) {\n      var RC = decode_cell(R);\n      if (!ws[RC.r]) ws[RC.r] = [];\n      return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {\n        t: 'z'\n      });\n    }\n\n    return ws[R] || (ws[R] = {\n      t: 'z'\n    });\n  }\n  /* cell address object */\n\n\n  if (typeof R != \"number\") return ws_get_cell_stub(ws, encode_cell(R));\n  /* R and C are 0-based indices */\n\n  return ws_get_cell_stub(ws, encode_cell({\n    r: R,\n    c: C || 0\n  }));\n}\n/* find sheet index for given name / validate index */\n\n\nfunction wb_sheet_idx(wb\n/*:Workbook*/\n, sh\n/*:number|string*/\n) {\n  if (typeof sh == \"number\") {\n    if (sh >= 0 && wb.SheetNames.length > sh) return sh;\n    throw new Error(\"Cannot find sheet # \" + sh);\n  } else if (typeof sh == \"string\") {\n    var idx = wb.SheetNames.indexOf(sh);\n    if (idx > -1) return idx;\n    throw new Error(\"Cannot find sheet name |\" + sh + \"|\");\n  } else throw new Error(\"Cannot find sheet |\" + sh + \"|\");\n}\n/* simple blank workbook object */\n\n\nfunction book_new()\n/*:Workbook*/\n{\n  return {\n    SheetNames: [],\n    Sheets: {}\n  };\n}\n/* add a worksheet to the end of a given workbook */\n\n\nfunction book_append_sheet(wb\n/*:Workbook*/\n, ws\n/*:Worksheet*/\n, name\n/*:?string*/\n, roll\n/*:?boolean*/\n)\n/*:string*/\n{\n  var i = 1;\n  if (!name) for (; i <= 0xFFFF; ++i, name = undefined) {\n    if (wb.SheetNames.indexOf(name = \"Sheet\" + i) == -1) break;\n  }\n  if (!name || wb.SheetNames.length >= 0xFFFF) throw new Error(\"Too many worksheets\");\n\n  if (roll && wb.SheetNames.indexOf(name) >= 0) {\n    var m = name.match(/(^.*?)(\\d+)$/);\n    i = m && +m[2] || 0;\n    var root = m && m[1] || name;\n\n    for (++i; i <= 0xFFFF; ++i) {\n      if (wb.SheetNames.indexOf(name = root + i) == -1) break;\n    }\n  }\n\n  check_ws_name(name);\n  if (wb.SheetNames.indexOf(name) >= 0) throw new Error(\"Worksheet with name |\" + name + \"| already exists!\");\n  wb.SheetNames.push(name);\n  wb.Sheets[name] = ws;\n  return name;\n}\n/* set sheet visibility (visible/hidden/very hidden) */\n\n\nfunction book_set_sheet_visibility(wb\n/*:Workbook*/\n, sh\n/*:number|string*/\n, vis\n/*:number*/\n) {\n  if (!wb.Workbook) wb.Workbook = {};\n  if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];\n  var idx = wb_sheet_idx(wb, sh); // $FlowIgnore\n\n  if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};\n\n  switch (vis) {\n    case 0:\n    case 1:\n    case 2:\n      break;\n\n    default:\n      throw new Error(\"Bad sheet visibility setting \" + vis);\n  } // $FlowIgnore\n\n\n  wb.Workbook.Sheets[idx].Hidden = vis;\n}\n/* set number format */\n\n\nfunction cell_set_number_format(cell\n/*:Cell*/\n, fmt\n/*:string|number*/\n) {\n  cell.z = fmt;\n  return cell;\n}\n/* set cell hyperlink */\n\n\nfunction cell_set_hyperlink(cell\n/*:Cell*/\n, target\n/*:string*/\n, tooltip\n/*:?string*/\n) {\n  if (!target) {\n    delete cell.l;\n  } else {\n    cell.l = {\n      Target: target\n    }\n    /*:Hyperlink*/\n    ;\n    if (tooltip) cell.l.Tooltip = tooltip;\n  }\n\n  return cell;\n}\n\nfunction cell_set_internal_link(cell\n/*:Cell*/\n, range\n/*:string*/\n, tooltip\n/*:?string*/\n) {\n  return cell_set_hyperlink(cell, \"#\" + range, tooltip);\n}\n/* add to cell comments */\n\n\nfunction cell_add_comment(cell\n/*:Cell*/\n, text\n/*:string*/\n, author\n/*:?string*/\n) {\n  if (!cell.c) cell.c = [];\n  cell.c.push({\n    t: text,\n    a: author || \"SheetJS\"\n  });\n}\n/* set array formula and flush related cells */\n\n\nfunction sheet_set_array_formula(ws\n/*:Worksheet*/\n, range, formula\n/*:string*/\n, dynamic\n/*:boolean*/\n) {\n  var rng = typeof range != \"string\" ? range : safe_decode_range(range);\n  var rngstr = typeof range == \"string\" ? range : encode_range(range);\n\n  for (var R = rng.s.r; R <= rng.e.r; ++R) {\n    for (var C = rng.s.c; C <= rng.e.c; ++C) {\n      var cell = ws_get_cell_stub(ws, R, C);\n      cell.t = 'n';\n      cell.F = rngstr;\n      delete cell.v;\n\n      if (R == rng.s.r && C == rng.s.c) {\n        cell.f = formula;\n        if (dynamic) cell.D = true;\n      }\n    }\n  }\n\n  var wsr = decode_range(ws[\"!ref\"]);\n  if (wsr.s.r > rng.s.r) wsr.s.r = rng.s.r;\n  if (wsr.s.c > rng.s.c) wsr.s.c = rng.s.c;\n  if (wsr.e.r < rng.e.r) wsr.e.r = rng.e.r;\n  if (wsr.e.c < rng.e.c) wsr.e.c = rng.e.c;\n  ws[\"!ref\"] = encode_range(wsr);\n  return ws;\n}\n\nvar utils\n/*:any*/\n= {\n  encode_col: encode_col,\n  encode_row: encode_row,\n  encode_cell: encode_cell,\n  encode_range: encode_range,\n  decode_col: decode_col,\n  decode_row: decode_row,\n  split_cell: split_cell,\n  decode_cell: decode_cell,\n  decode_range: decode_range,\n  format_cell: format_cell,\n  sheet_add_aoa: sheet_add_aoa,\n  sheet_add_json: sheet_add_json,\n  sheet_add_dom: sheet_add_dom,\n  aoa_to_sheet: aoa_to_sheet,\n  json_to_sheet: json_to_sheet,\n  table_to_sheet: parse_dom_table,\n  table_to_book: table_to_book,\n  sheet_to_csv: sheet_to_csv,\n  sheet_to_txt: sheet_to_txt,\n  sheet_to_json: sheet_to_json,\n  sheet_to_html: sheet_to_html,\n  sheet_to_formulae: sheet_to_formulae,\n  sheet_to_row_object_array: sheet_to_json,\n  sheet_get_cell: ws_get_cell_stub,\n  book_new: book_new,\n  book_append_sheet: book_append_sheet,\n  book_set_sheet_visibility: book_set_sheet_visibility,\n  cell_set_number_format: cell_set_number_format,\n  cell_set_hyperlink: cell_set_hyperlink,\n  cell_set_internal_link: cell_set_internal_link,\n  cell_add_comment: cell_add_comment,\n  sheet_set_array_formula: sheet_set_array_formula,\n  consts: {\n    SHEET_VISIBLE: 0,\n    SHEET_HIDDEN: 1,\n    SHEET_VERY_HIDDEN: 2\n  }\n};\n\nvar _Readable;\n\nfunction set_readable(R) {\n  _Readable = R;\n}\n\nfunction write_csv_stream(sheet\n/*:Worksheet*/\n, opts\n/*:?Sheet2CSVOpts*/\n) {\n  var stream = _Readable();\n\n  var o = opts == null ? {} : opts;\n\n  if (sheet == null || sheet[\"!ref\"] == null) {\n    stream.push(null);\n    return stream;\n  }\n\n  var r = safe_decode_range(sheet[\"!ref\"]);\n  var FS = o.FS !== undefined ? o.FS : \",\",\n      fs = FS.charCodeAt(0);\n  var RS = o.RS !== undefined ? o.RS : \"\\n\",\n      rs = RS.charCodeAt(0);\n  var endregex = new RegExp((FS == \"|\" ? \"\\\\|\" : FS) + \"+$\");\n  var row\n  /*:?string*/\n  = \"\",\n      cols\n  /*:Array<string>*/\n  = [];\n  o.dense = Array.isArray(sheet);\n  var colinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!cols\"] || [];\n  var rowinfo\n  /*:Array<RowInfo>*/\n  = o.skipHidden && sheet[\"!rows\"] || [];\n\n  for (var C = r.s.c; C <= r.e.c; ++C) {\n    if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);\n  }\n\n  var R = r.s.r;\n  var BOM = false,\n      w = 0;\n\n  stream._read = function () {\n    if (!BOM) {\n      BOM = true;\n      return stream.push(\"\\uFEFF\");\n    }\n\n    while (R <= r.e.r) {\n      ++R;\n      if ((rowinfo[R - 1] || {}).hidden) continue;\n      row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);\n\n      if (row != null) {\n        if (o.strip) row = row.replace(endregex, \"\");\n        if (row || o.blankrows !== false) return stream.push((w++ ? RS : \"\") + row);\n      }\n    }\n\n    return stream.push(null);\n  };\n\n  return stream;\n}\n\nfunction write_html_stream(ws\n/*:Worksheet*/\n, opts\n/*:?Sheet2HTMLOpts*/\n) {\n  var stream = _Readable();\n\n  var o = opts || {};\n  var header = o.header != null ? o.header : HTML_BEGIN;\n  var footer = o.footer != null ? o.footer : HTML_END;\n  stream.push(header);\n  var r = decode_range(ws['!ref']);\n  o.dense = Array.isArray(ws);\n  stream.push(make_html_preamble(ws, r, o));\n  var R = r.s.r;\n  var end = false;\n\n  stream._read = function () {\n    if (R > r.e.r) {\n      if (!end) {\n        end = true;\n        stream.push(\"</table>\" + footer);\n      }\n\n      return stream.push(null);\n    }\n\n    while (R <= r.e.r) {\n      stream.push(make_html_row(ws, r, R, o));\n      ++R;\n      break;\n    }\n  };\n\n  return stream;\n}\n\nfunction write_json_stream(sheet\n/*:Worksheet*/\n, opts\n/*:?Sheet2CSVOpts*/\n) {\n  var stream = _Readable({\n    objectMode: true\n  });\n\n  if (sheet == null || sheet[\"!ref\"] == null) {\n    stream.push(null);\n    return stream;\n  }\n\n  var val = {\n    t: 'n',\n    v: 0\n  },\n      header = 0,\n      offset = 1,\n      hdr\n  /*:Array<any>*/\n  = [],\n      v = 0,\n      vv = \"\";\n  var r = {\n    s: {\n      r: 0,\n      c: 0\n    },\n    e: {\n      r: 0,\n      c: 0\n    }\n  };\n  var o = opts || {};\n  var range = o.range != null ? o.range : sheet[\"!ref\"];\n  if (o.header === 1) header = 1;else if (o.header === \"A\") header = 2;else if (Array.isArray(o.header)) header = 3;\n\n  switch (typeof range) {\n    case 'string':\n      r = safe_decode_range(range);\n      break;\n\n    case 'number':\n      r = safe_decode_range(sheet[\"!ref\"]);\n      r.s.r = range;\n      break;\n\n    default:\n      r = range;\n  }\n\n  if (header > 0) offset = 0;\n  var rr = encode_row(r.s.r);\n  var cols\n  /*:Array<string>*/\n  = [];\n  var counter = 0;\n  var dense = Array.isArray(sheet);\n  var R = r.s.r,\n      C = 0;\n  var header_cnt = {};\n  if (dense && !sheet[R]) sheet[R] = [];\n  var colinfo\n  /*:Array<ColInfo>*/\n  = o.skipHidden && sheet[\"!cols\"] || [];\n  var rowinfo\n  /*:Array<RowInfo>*/\n  = o.skipHidden && sheet[\"!rows\"] || [];\n\n  for (C = r.s.c; C <= r.e.c; ++C) {\n    if ((colinfo[C] || {}).hidden) continue;\n    cols[C] = encode_col(C);\n    val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n\n    switch (header) {\n      case 1:\n        hdr[C] = C - r.s.c;\n        break;\n\n      case 2:\n        hdr[C] = cols[C];\n        break;\n\n      case 3:\n        hdr[C] = o.header[C - r.s.c];\n        break;\n\n      default:\n        if (val == null) val = {\n          w: \"__EMPTY\",\n          t: \"s\"\n        };\n        vv = v = format_cell(val, null, o);\n        counter = header_cnt[v] || 0;\n        if (!counter) header_cnt[v] = 1;else {\n          do {\n            vv = v + \"_\" + counter++;\n          } while (header_cnt[vv]);\n\n          header_cnt[v] = counter;\n          header_cnt[vv] = 1;\n        }\n        hdr[C] = vv;\n    }\n  }\n\n  R = r.s.r + offset;\n\n  stream._read = function () {\n    while (R <= r.e.r) {\n      if ((rowinfo[R - 1] || {}).hidden) continue;\n      var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n      ++R;\n\n      if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {\n        stream.push(row.row);\n        return;\n      }\n    }\n\n    return stream.push(null);\n  };\n\n  return stream;\n}\n\nvar __stream = {\n  to_json: write_json_stream,\n  to_html: write_html_stream,\n  to_csv: write_csv_stream,\n  set_readable: set_readable\n};\nexport var version = XLSX.version;\nexport { parse_xlscfb, parse_zip, readSync as read, readFileSync as readFile, readFileSync, writeSync as write, writeFileSync as writeFile, writeFileSync, writeFileAsync, writeSyncXLSX as writeXLSX, writeFileSyncXLSX as writeFileXLSX, utils, set_fs, set_cptable, __stream as stream, SSF, CFB };\nexport default {\n  parse_xlscfb: parse_xlscfb,\n  parse_zip: parse_zip,\n  read: readSync,\n  readFile: readFileSync,\n  readFileSync: readFileSync,\n  write: writeSync,\n  writeFile: writeFileSync,\n  writeFileSync: writeFileSync,\n  writeFileAsync: writeFileAsync,\n  writeXLSX: writeSyncXLSX,\n  writeFileXLSX: writeFileSyncXLSX,\n  utils: utils,\n  set_fs: set_fs,\n  set_cptable: set_cptable,\n  stream: __stream,\n  SSF: SSF,\n  CFB: CFB\n};","map":null,"metadata":{},"sourceType":"module"}