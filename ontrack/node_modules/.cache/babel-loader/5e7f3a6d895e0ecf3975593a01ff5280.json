{"ast":null,"code":"import Blob from './index.js';\n\nconst _File = class File extends Blob {\n  #lastModified = 0;\n  #name = '';\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */\n  // @ts-ignore\n\n  constructor(fileBits, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    super(fileBits, options);\n    if (options === null) options = {}; // Simulate WebIDL type casting for NaN value in lastModified option.\n\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified;\n    }\n\n    this.#name = String(fileName);\n  }\n\n  get name() {\n    return this.#name;\n  }\n\n  get lastModified() {\n    return this.#lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n\n  static [Symbol.hasInstance](object) {\n    return !!object && object instanceof Blob && /^(File)$/.test(object[Symbol.toStringTag]);\n  }\n\n};\n/** @type {typeof globalThis.File} */\n// @ts-ignore\n\n\nexport const File = _File;\nexport default File;","map":{"version":3,"names":["Blob","_File","File","lastModified","name","constructor","fileBits","fileName","options","arguments","length","TypeError","undefined","Date","now","Number","isNaN","String","Symbol","toStringTag","hasInstance","object","test"],"sources":["/home/jordanm/Documents/GitHub/SWE4103-Team-Project/ontrack/node_modules/fetch-blob/file.js"],"sourcesContent":["import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof Blob &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,KAAK,GAAG,MAAMC,IAAN,SAAmBF,IAAnB,CAAwB;EACpC,CAACG,YAAD,GAAgB,CAAhB;EACA,CAACC,IAAD,GAAQ,EAAR;EAEA;AACF;AACA;AACA;AACA;EAAK;;EACHC,WAAW,CAAEC,QAAF,EAAYC,QAAZ,EAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC7C,IAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIC,SAAJ,CAAe,8DAA6DF,SAAS,CAACC,MAAO,WAA7F,CAAN;IACD;;IACD,MAAMJ,QAAN,EAAgBE,OAAhB;IAEA,IAAIA,OAAO,KAAK,IAAhB,EAAsBA,OAAO,GAAG,EAAV,CANuB,CAQ7C;;IACA,MAAML,YAAY,GAAGK,OAAO,CAACL,YAAR,KAAyBS,SAAzB,GAAqCC,IAAI,CAACC,GAAL,EAArC,GAAkDC,MAAM,CAACP,OAAO,CAACL,YAAT,CAA7E;;IACA,IAAI,CAACY,MAAM,CAACC,KAAP,CAAab,YAAb,CAAL,EAAiC;MAC/B,KAAK,CAACA,YAAN,GAAqBA,YAArB;IACD;;IAED,KAAK,CAACC,IAAN,GAAaa,MAAM,CAACV,QAAD,CAAnB;EACD;;EAEO,IAAJH,IAAI,GAAI;IACV,OAAO,KAAK,CAACA,IAAb;EACD;;EAEe,IAAZD,YAAY,GAAI;IAClB,OAAO,KAAK,CAACA,YAAb;EACD;;EAEsB,KAAlBe,MAAM,CAACC,WAAW,IAAK;IAC1B,OAAO,MAAP;EACD;;EAEyB,QAAlBD,MAAM,CAACE,WAAW,EAAGC,MAAH,EAAW;IACnC,OAAO,CAAC,CAACA,MAAF,IAAYA,MAAM,YAAYrB,IAA9B,IACL,WAAWsB,IAAX,CAAgBD,MAAM,CAACH,MAAM,CAACC,WAAR,CAAtB,CADF;EAED;;AAzCmC,CAAtC;AA4CA;AAAqC;;;AACrC,OAAO,MAAMjB,IAAI,GAAGD,KAAb;AACP,eAAeC,IAAf"},"metadata":{},"sourceType":"module"}