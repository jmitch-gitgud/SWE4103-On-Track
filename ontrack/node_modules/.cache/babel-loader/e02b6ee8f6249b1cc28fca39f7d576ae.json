{"ast":null,"code":"// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\nvar dgram = require('dgram'),\n    EventEmitter = require('events').EventEmitter,\n    ipaddr = require('ipaddr.js'),\n    net = require('net'),\n    util = require('util');\n\nvar UDPSocket = exports.UDPSocket = function (socket, remote) {\n  this._socket = socket;\n  this._remote = remote;\n  this._buff = undefined;\n  this.base_size = 512;\n  this.bound = false;\n  this.unref = undefined;\n  this.ref = undefined;\n};\n\nutil.inherits(UDPSocket, EventEmitter);\n\nUDPSocket.prototype.buffer = function (size) {\n  this._buff = new Buffer(size);\n  return this._buff;\n};\n\nUDPSocket.prototype.send = function (len) {\n  this._socket.send(this._buff, 0, len, this._remote.port, this._remote.address);\n};\n\nUDPSocket.prototype.bind = function (type) {\n  var self = this;\n\n  if (this.bound) {\n    this.emit('ready');\n  } else {\n    this._socket = dgram.createSocket(type);\n\n    this._socket.on('listening', function () {\n      self.bound = true;\n\n      if (self._socket.unref) {\n        self.unref = function () {\n          self._socket.unref();\n        };\n\n        self.ref = function () {\n          self._socket.ref();\n        };\n      }\n\n      self.emit('ready');\n    });\n\n    this._socket.on('message', this.emit.bind(this, 'message'));\n\n    this._socket.on('close', function () {\n      self.bound = false;\n      self.emit('close');\n    });\n\n    this._socket.bind();\n  }\n};\n\nUDPSocket.prototype.close = function () {\n  this._socket.close();\n};\n\nUDPSocket.prototype.remote = function (remote) {\n  return new UDPSocket(this._socket, remote);\n};\n\nvar TCPSocket = exports.TCPSocket = function (socket) {\n  UDPSocket.call(this, socket);\n  this.base_size = 4096;\n  this._rest = undefined;\n};\n\nutil.inherits(TCPSocket, UDPSocket);\n\nTCPSocket.prototype.buffer = function (size) {\n  this._buff = new Buffer(size + 2);\n  return this._buff.slice(2);\n};\n\nTCPSocket.prototype.send = function (len) {\n  this._buff.writeUInt16BE(len, 0);\n\n  this._socket.write(this._buff.slice(0, len + 2));\n};\n\nTCPSocket.prototype.bind = function (server) {\n  var self = this;\n\n  if (this.bound) {\n    this.emit('ready');\n  } else {\n    this._socket = net.connect(server.port, server.address);\n\n    this._socket.on('connect', function () {\n      self.bound = true;\n\n      if (self._socket.unref) {\n        self.unref = function () {\n          self._socket.unref();\n        };\n\n        self.ref = function () {\n          self._socket.ref();\n        };\n      }\n\n      self.emit('ready');\n    });\n\n    this._socket.on('timeout', function () {\n      self.bound = false;\n      self.emit('close');\n    });\n\n    this._socket.on('close', function () {\n      self.bound = false;\n      self.emit('close');\n    });\n\n    this.catchMessages();\n  }\n};\n\nTCPSocket.prototype.catchMessages = function () {\n  var self = this;\n\n  this._socket.on('data', function (data) {\n    var len, tmp;\n\n    if (!self._rest) {\n      self._rest = data;\n    } else {\n      tmp = new Buffer(self._rest.length + data.length);\n\n      self._rest.copy(tmp, 0);\n\n      data.copy(tmp, self._rest.length);\n      self._rest = tmp;\n    }\n\n    while (self._rest && self._rest.length > 2) {\n      len = self._rest.readUInt16BE(0);\n\n      if (self._rest.length >= len + 2) {\n        self.emit('message', self._rest.slice(2, len + 2), self);\n        self._rest = self._rest.slice(len + 2);\n      } else {\n        break;\n      }\n    }\n  });\n};\n\nTCPSocket.prototype.close = function () {\n  this._socket.end();\n};\n\nTCPSocket.prototype.remote = function () {\n  return this;\n};\n\nexports.reverseIP = function (ip) {\n  var address, kind, reverseip, parts;\n  address = ipaddr.parse(ip.split(/%/)[0]);\n  kind = address.kind();\n\n  switch (kind) {\n    case 'ipv4':\n      address = address.toByteArray();\n      address.reverse();\n      reverseip = address.join('.') + '.IN-ADDR.ARPA';\n      break;\n\n    case 'ipv6':\n      parts = [];\n      address.toNormalizedString().split(':').forEach(function (part) {\n        var i,\n            pad = 4 - part.length;\n\n        for (i = 0; i < pad; i++) {\n          part = '0' + part;\n        }\n\n        part.split('').forEach(function (p) {\n          parts.push(p);\n        });\n      });\n      parts.reverse();\n      reverseip = parts.join('.') + '.IP6.ARPA';\n      break;\n  }\n\n  return reverseip;\n};","map":null,"metadata":{},"sourceType":"script"}