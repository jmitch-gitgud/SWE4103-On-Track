{"ast":null,"code":"\"use strict\"; //binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nvar _classCallCheck = require(\"/home/jordanm/Documents/GitHub/SWE4103-Team-Project/ontrack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jordanm/Documents/GitHub/SWE4103-Team-Project/ontrack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\n\nvar Writer = /*#__PURE__*/function () {\n  function Writer() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n\n    _classCallCheck(this, Writer);\n\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n\n  _createClass(Writer, [{\n    key: \"ensure\",\n    value: function ensure(size) {\n      var remaining = this.buffer.length - this.offset;\n\n      if (remaining < size) {\n        var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5\n        // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n\n        var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n        this.buffer = Buffer.allocUnsafe(newSize);\n        oldBuffer.copy(this.buffer);\n      }\n    }\n  }, {\n    key: \"addInt32\",\n    value: function addInt32(num) {\n      this.ensure(4);\n      this.buffer[this.offset++] = num >>> 24 & 0xff;\n      this.buffer[this.offset++] = num >>> 16 & 0xff;\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addInt16\",\n    value: function addInt16(num) {\n      this.ensure(2);\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addCString\",\n    value: function addCString(string) {\n      if (!string) {\n        this.ensure(1);\n      } else {\n        var len = Buffer.byteLength(string);\n        this.ensure(len + 1); // +1 for null terminator\n\n        this.buffer.write(string, this.offset, 'utf-8');\n        this.offset += len;\n      }\n\n      this.buffer[this.offset++] = 0; // null terminator\n\n      return this;\n    }\n  }, {\n    key: \"addString\",\n    value: function addString() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = Buffer.byteLength(string);\n      this.ensure(len);\n      this.buffer.write(string, this.offset);\n      this.offset += len;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(otherBuffer) {\n      this.ensure(otherBuffer.length);\n      otherBuffer.copy(this.buffer, this.offset);\n      this.offset += otherBuffer.length;\n      return this;\n    }\n  }, {\n    key: \"join\",\n    value: function join(code) {\n      if (code) {\n        this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code\n\n        var length = this.offset - (this.headerPosition + 1);\n        this.buffer.writeInt32BE(length, this.headerPosition + 1);\n      }\n\n      return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(code) {\n      var result = this.join(code);\n      this.offset = 5;\n      this.headerPosition = 0;\n      this.buffer = Buffer.allocUnsafe(this.size);\n      return result;\n    }\n  }]);\n\n  return Writer;\n}();\n\nexports.Writer = Writer;","map":null,"metadata":{},"sourceType":"script"}