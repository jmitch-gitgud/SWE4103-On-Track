{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\MicSc\\\\Documents\\\\SWE4103\\\\Project\\\\SWE4103-On-Track\\\\ontrack\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\MicSc\\\\Documents\\\\SWE4103\\\\Project\\\\SWE4103-On-Track\\\\ontrack\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse();\n};\n\nvar ArrayParser = /*#__PURE__*/function () {\n  function ArrayParser(source, transform) {\n    _classCallCheck(this, ArrayParser);\n\n    this.source = source;\n    this.transform = transform || identity;\n    this.position = 0;\n    this.entries = [];\n    this.recorded = [];\n    this.dimension = 0;\n  }\n\n  _createClass(ArrayParser, [{\n    key: \"isEof\",\n    value: function isEof() {\n      return this.position >= this.source.length;\n    }\n  }, {\n    key: \"nextCharacter\",\n    value: function nextCharacter() {\n      var character = this.source[this.position++];\n\n      if (character === '\\\\') {\n        return {\n          value: this.source[this.position++],\n          escaped: true\n        };\n      }\n\n      return {\n        value: character,\n        escaped: false\n      };\n    }\n  }, {\n    key: \"record\",\n    value: function record(character) {\n      this.recorded.push(character);\n    }\n  }, {\n    key: \"newEntry\",\n    value: function newEntry(includeEmpty) {\n      var entry;\n\n      if (this.recorded.length > 0 || includeEmpty) {\n        entry = this.recorded.join('');\n\n        if (entry === 'NULL' && !includeEmpty) {\n          entry = null;\n        }\n\n        if (entry !== null) entry = this.transform(entry);\n        this.entries.push(entry);\n        this.recorded = [];\n      }\n    }\n  }, {\n    key: \"consumeDimensions\",\n    value: function consumeDimensions() {\n      if (this.source[0] === '[') {\n        while (!this.isEof()) {\n          var char = this.nextCharacter();\n          if (char.value === '=') break;\n        }\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(nested) {\n      var character, parser, quote;\n      this.consumeDimensions();\n\n      while (!this.isEof()) {\n        character = this.nextCharacter();\n\n        if (character.value === '{' && !quote) {\n          this.dimension++;\n\n          if (this.dimension > 1) {\n            parser = new ArrayParser(this.source.substr(this.position - 1), this.transform);\n            this.entries.push(parser.parse(true));\n            this.position += parser.position - 2;\n          }\n        } else if (character.value === '}' && !quote) {\n          this.dimension--;\n\n          if (!this.dimension) {\n            this.newEntry();\n            if (nested) return this.entries;\n          }\n        } else if (character.value === '\"' && !character.escaped) {\n          if (quote) this.newEntry(true);\n          quote = !quote;\n        } else if (character.value === ',' && !quote) {\n          this.newEntry();\n        } else {\n          this.record(character.value);\n        }\n      }\n\n      if (this.dimension !== 0) {\n        throw new Error('array dimension not balanced');\n      }\n\n      return this.entries;\n    }\n  }]);\n\n  return ArrayParser;\n}();\n\nfunction identity(value) {\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}