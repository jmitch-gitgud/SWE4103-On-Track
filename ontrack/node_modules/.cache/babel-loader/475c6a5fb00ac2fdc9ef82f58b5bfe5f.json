{"ast":null,"code":"// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\n'use strict';\n\nvar dgram = require('dgram'),\n    EventEmitter = require('events').EventEmitter,\n    net = require('net'),\n    util = require('util'),\n    UDPSocket = require('./utils').UDPSocket,\n    TCPSocket = require('./utils').TCPSocket,\n    Packet = require('./packet');\n\nvar Server = function Server(opts) {\n  var self = this;\n\n  this._socket.on('listening', function () {\n    self.emit('listening');\n  });\n\n  this._socket.on('close', function () {\n    self.emit('close');\n  });\n\n  this._socket.on('error', function (err) {\n    self.emit('socketError', err, self._socket);\n  });\n};\n\nutil.inherits(Server, EventEmitter);\n\nServer.prototype.close = function () {\n  this._socket.close();\n};\n\nServer.prototype.address = function () {\n  return this._socket.address();\n};\n\nServer.prototype.handleMessage = function (msg, remote, address) {\n  var request,\n      response = new Packet(remote);\n\n  try {\n    request = Packet.parse(msg, remote);\n    request.address = address;\n    response.header.id = request.header.id;\n    response.header.qr = 1;\n    response.question = request.question;\n    this.emit('request', request, response);\n  } catch (e) {\n    this.emit('error', e, msg, response);\n  }\n};\n\nvar UDPServer = function UDPServer(opts) {\n  var self = this;\n  this._socket = dgram.createSocket(opts.dgram_type || 'udp4');\n\n  this._socket.on('message', function (msg, remote) {\n    self.handleMessage(msg, new UDPSocket(self._socket, remote), remote);\n  });\n\n  Server.call(this, opts);\n};\n\nutil.inherits(UDPServer, Server);\n\nUDPServer.prototype.serve = function (port, address) {\n  this._socket.bind(port, address);\n};\n\nvar TCPServer = function TCPServer(opts) {\n  var self = this;\n  this._socket = net.createServer(function (client) {\n    var tcp = new TCPSocket(client);\n    var address = client.address();\n    tcp.on('message', function (msg, remote) {\n      self.handleMessage(msg, tcp, address);\n    });\n    tcp.catchMessages();\n  });\n  Server.call(this, opts);\n};\n\nutil.inherits(TCPServer, Server);\n\nTCPServer.prototype.serve = function (port, address) {\n  this._socket.listen(port, address);\n};\n\nexports.createServer = function (opts) {\n  return new UDPServer(opts || {});\n};\n\nexports.createUDPServer = function (opts) {\n  return exports.createServer(opts);\n};\n\nexports.createTCPServer = function (opts) {\n  return new TCPServer(opts || {});\n};","map":null,"metadata":{},"sourceType":"script"}