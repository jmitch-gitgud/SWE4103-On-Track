{"ast":null,"code":"'use strict';\n\nvar path = require('path'),\n    Stream = require('stream').Stream,\n    split = require('split2'),\n    util = require('util'),\n    defaultPort = 5432,\n    isWin = process.platform === 'win32',\n    warnStream = process.stderr;\n\nvar S_IRWXG = 56 //    00070(8)\n,\n    S_IRWXO = 7 //    00007(8)\n,\n    S_IFMT = 61440 // 00170000(8)\n,\n    S_IFREG = 32768 //  0100000(8)\n;\n\nfunction isRegFile(mode) {\n  return (mode & S_IFMT) == S_IFREG;\n}\n\nvar fieldNames = ['host', 'port', 'database', 'user', 'password'];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[nrOfFields - 1];\n\nfunction warn() {\n  var isWritable = warnStream instanceof Stream && true === warnStream.writable;\n\n  if (isWritable) {\n    var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n    warnStream.write(util.format.apply(util, args));\n  }\n}\n\nObject.defineProperty(module.exports, 'isWin', {\n  get: function get() {\n    return isWin;\n  },\n  set: function set(val) {\n    isWin = val;\n  }\n});\n\nmodule.exports.warnTo = function (stream) {\n  var old = warnStream;\n  warnStream = stream;\n  return old;\n};\n\nmodule.exports.getFileName = function (rawEnv) {\n  var env = rawEnv || process.env;\n  var file = env.PGPASSFILE || (isWin ? path.join(env.APPDATA || './', 'postgresql', 'pgpass.conf') : path.join(env.HOME || './', '.pgpass'));\n  return file;\n};\n\nmodule.exports.usePgPass = function (stats, fname) {\n  if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n    return false;\n  }\n\n  if (isWin) {\n    return true;\n  }\n\n  fname = fname || '<unkn>';\n\n  if (!isRegFile(stats.mode)) {\n    warn('WARNING: password file \"%s\" is not a plain file', fname);\n    return false;\n  }\n\n  if (stats.mode & (S_IRWXG | S_IRWXO)) {\n    /* If password file is insecure, alert the user and ignore it. */\n    warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n    return false;\n  }\n\n  return true;\n};\n\nvar matcher = module.exports.match = function (connInfo, entry) {\n  return fieldNames.slice(0, -1).reduce(function (prev, field, idx) {\n    if (idx == 1) {\n      // the port\n      if (Number(connInfo[field] || defaultPort) === Number(entry[field])) {\n        return prev && true;\n      }\n    }\n\n    return prev && (entry[field] === '*' || entry[field] === connInfo[field]);\n  }, true);\n};\n\nmodule.exports.getPassword = function (connInfo, stream, cb) {\n  var pass;\n  var lineStream = stream.pipe(split());\n\n  function onLine(line) {\n    var entry = parseLine(line);\n\n    if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n      pass = entry[passKey];\n      lineStream.end(); // -> calls onEnd(), but pass is set now\n    }\n  }\n\n  var onEnd = function onEnd() {\n    stream.destroy();\n    cb(pass);\n  };\n\n  var onErr = function onErr(err) {\n    stream.destroy();\n    warn('WARNING: error on reading file: %s', err);\n    cb(undefined);\n  };\n\n  stream.on('error', onErr);\n  lineStream.on('data', onLine).on('end', onEnd).on('error', onErr);\n};\n\nvar parseLine = module.exports.parseLine = function (line) {\n  if (line.length < 11 || line.match(/^\\s+#/)) {\n    return null;\n  }\n\n  var curChar = '';\n  var prevChar = '';\n  var fieldIdx = 0;\n  var startIdx = 0;\n  var endIdx = 0;\n  var obj = {};\n  var isLastField = false;\n\n  var addToObj = function addToObj(idx, i0, i1) {\n    var field = line.substring(i0, i1);\n\n    if (!Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n      field = field.replace(/\\\\([:\\\\])/g, '$1');\n    }\n\n    obj[fieldNames[idx]] = field;\n  };\n\n  for (var i = 0; i < line.length - 1; i += 1) {\n    curChar = line.charAt(i + 1);\n    prevChar = line.charAt(i);\n    isLastField = fieldIdx == nrOfFields - 1;\n\n    if (isLastField) {\n      addToObj(fieldIdx, startIdx);\n      break;\n    }\n\n    if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n      addToObj(fieldIdx, startIdx, i + 1);\n      startIdx = i + 2;\n      fieldIdx += 1;\n    }\n  }\n\n  obj = Object.keys(obj).length === nrOfFields ? obj : null;\n  return obj;\n};\n\nvar isValidEntry = module.exports.isValidEntry = function (entry) {\n  var rules = {\n    // host\n    0: function _(x) {\n      return x.length > 0;\n    },\n    // port\n    1: function _(x) {\n      if (x === '*') {\n        return true;\n      }\n\n      x = Number(x);\n      return isFinite(x) && x > 0 && x < 9007199254740992 && Math.floor(x) === x;\n    },\n    // database\n    2: function _(x) {\n      return x.length > 0;\n    },\n    // username\n    3: function _(x) {\n      return x.length > 0;\n    },\n    // password\n    4: function _(x) {\n      return x.length > 0;\n    }\n  };\n\n  for (var idx = 0; idx < fieldNames.length; idx += 1) {\n    var rule = rules[idx];\n    var value = entry[fieldNames[idx]] || '';\n    var res = rule(value);\n\n    if (!res) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}