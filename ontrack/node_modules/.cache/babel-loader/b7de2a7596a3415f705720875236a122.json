{"ast":null,"code":"function ReportWorkAbsences(filename) {\n  //Data Declaration\n  var i = 0;\n  var data = [];\n\n  var Pool = require('pg').Pool;\n\n  var XLSX = require(\"xlsx\");\n\n  var workbook = XLSX.readFile(filename);\n  var pool = new Pool({\n    host: \"localhost\",\n    user: \"postgres\",\n    database: \"postgres\",\n    password: \"Vwf7j5yb#M\",\n    port: 5432\n  }); //Loop through all sheets in the file\n\n  var ws = workbook.Sheets[workbook.SheetNames[i]];\n\n  var _loop = function _loop() {\n    //Split the excel sheet into a 2d array\n    csv = XLSX.utils.sheet_to_csv(ws);\n    csv = csv.split(\"\\n\");\n\n    for (var _j = 0; _j < csv.length; _j++) {\n      data.push(csv[_j].split(\",\"));\n    } //Remove all of the empty rows at the end of the sheet\n\n\n    var j = data.length - 1;\n\n    while (data[j][0] == '') {\n      data.pop();\n      j--;\n    } //Remove the two headers of the worksheet\n\n\n    for (var _j2 = 0; _j2 < 2; _j2++) {\n      data.shift();\n    } //Stored Procedure would go here\n\n\n    var query = \"INSERT INTO work_abscense(Absence_ID, Staff_ID, Period1, \" + \"Period2, Period3, Period4, day) VALUES (DEFAULT, $1, $2, $3, $4, $5, $6)\";\n    var query2 = \"SELECT Staff_ID FROM staff WHERE username = $1\";\n    pool.connect(function (err, client, done) {\n      if (err) throw err;\n\n      try {\n        data.forEach(function (row) {\n          var user = [];\n          var id;\n          user.push(row[0]);\n          client.query(query2, user, function (err, res) {\n            if (err) {\n              console.log(err.stack);\n            } else {\n              id = res.rows[0];\n\n              if (id != undefined) {\n                var _loop2 = function _loop2(_j3) {\n                  var x = 4 * _j3;\n                  var absenceList = [];\n                  absenceList.push(id.staff_id);\n                  absenceList.push(row[x + 1]);\n                  absenceList.push(row[x + 2]);\n                  absenceList.push(row[x + 3]);\n                  absenceList.push(row[x + 4]);\n\n                  switch (x) {\n                    case 0:\n                      absenceList.push(\"Monday\");\n                      break;\n\n                    case 4:\n                      absenceList.push(\"Tuesday\");\n                      break;\n\n                    case 8:\n                      absenceList.push(\"Wednesday\");\n                      break;\n\n                    case 12:\n                      absenceList.push(\"Thursday\");\n                      break;\n\n                    default:\n                      absenceList.push(\"Friday\");\n                  }\n\n                  client.query(query, absenceList, function (err, res) {\n                    if (err) {\n                      console.log(err.stack);\n                    } else {\n                      console.log(\"inserted for user: \" + user[0] + \"\\n\" + \" row:\", absenceList + \"\\n\");\n                    }\n                  });\n                };\n\n                for (var _j3 = 0; _j3 < 5; _j3++) {\n                  _loop2(_j3);\n                }\n              } else {\n                console.log(\"Error on user row: \" + user[0] + \"\\n Failed insert: \" + \"The given user does not exist.\\n\");\n              }\n            }\n          });\n        });\n      } finally {\n        done();\n      }\n    });\n    i++;\n    ws = workbook.Sheets[workbook.SheetNames[i]];\n  };\n\n  while (ws != undefined) {\n    var csv;\n\n    _loop();\n  }\n}\n\nexports.ReportWorkAbsences = ReportWorkAbsences;","map":{"version":3,"names":["ReportWorkAbsences","filename","i","data","Pool","require","XLSX","workbook","readFile","pool","host","user","database","password","port","ws","Sheets","SheetNames","csv","utils","sheet_to_csv","split","j","length","push","pop","shift","query","query2","connect","err","client","done","forEach","row","id","res","console","log","stack","rows","undefined","x","absenceList","staff_id","exports"],"sources":["C:/Users/MicSc/Documents/SWE4103/Project/SWE4103-On-Track/ontrack/src/functions/ReportWorkAbsences.js"],"sourcesContent":["function ReportWorkAbsences(filename)\r\n{\r\n    //Data Declaration\r\n    var i = 0;\r\n    const data = [];\r\n    var Pool = require('pg').Pool;\r\n    var XLSX = require(\"xlsx\");\r\n\r\n    var workbook = XLSX.readFile(filename);\r\n\r\n    const pool = new Pool({\r\n        host: \"localhost\",\r\n        user: \"postgres\",\r\n        database: \"postgres\",\r\n        password: \"Vwf7j5yb#M\",\r\n        port: 5432\r\n      });\r\n\r\n    //Loop through all sheets in the file\r\n    var ws = workbook.Sheets[workbook.SheetNames[i]];\r\n\r\n    while(ws != undefined)\r\n    {\r\n        //Split the excel sheet into a 2d array\r\n        var csv = XLSX.utils.sheet_to_csv(ws);\r\n\r\n        csv = csv.split(\"\\n\");\r\n\r\n        for(let j = 0; j < csv.length; j++)\r\n        {\r\n            data.push(csv[j].split(\",\"));\r\n        }\r\n\r\n        //Remove all of the empty rows at the end of the sheet\r\n        let j = data.length - 1;\r\n\r\n        while(data[j][0] ==  '')\r\n        {\r\n            data.pop();\r\n\r\n            j--;\r\n        }\r\n\r\n        //Remove the two headers of the worksheet\r\n        for(let j = 0; j < 2; j++)\r\n        {\r\n            data.shift();\r\n        }\r\n\r\n        //Stored Procedure would go here\r\n        const query = \"INSERT INTO work_abscense(Absence_ID, Staff_ID, Period1, \" +\r\n                      \"Period2, Period3, Period4, day) VALUES (DEFAULT, $1, $2, $3, $4, $5, $6)\"\r\n\r\n        const query2 = \"SELECT Staff_ID FROM staff WHERE username = $1\"\r\n\r\n        pool.connect((err, client, done) => {\r\n            if (err) throw err;\r\n                  \r\n             try {\r\n                    data.forEach(row => {\r\n                        const user = [];\r\n                        var id;\r\n\r\n                        user.push(row[0]);\r\n                        \r\n                        client.query(query2, user, (err, res) => {\r\n                            if (err) {\r\n                                console.log(err.stack);\r\n                            } else {\r\n                                id = res.rows[0];\r\n\r\n                                if(id != undefined)\r\n                                {\r\n                                    for(let j = 0; j < 5; j++)\r\n                                    {\r\n                                        let x = 4 * j;\r\n                                        let absenceList = [];\r\n\r\n                                        absenceList.push(id.staff_id);\r\n                                        absenceList.push(row[x + 1]);\r\n                                        absenceList.push(row[x + 2]);\r\n                                        absenceList.push(row[x + 3]);\r\n                                        absenceList.push(row[x + 4]);\r\n\r\n                                        switch(x)\r\n                                        {\r\n                                            case 0:\r\n                                                absenceList.push(\"Monday\");\r\n                                                break;\r\n                                            case 4:\r\n                                                absenceList.push(\"Tuesday\");\r\n                                                break;\r\n                                            case 8:\r\n                                                absenceList.push(\"Wednesday\");\r\n                                                break;\r\n                                            case 12:\r\n                                                absenceList.push(\"Thursday\");\r\n                                                break; \r\n                                            default:\r\n                                                absenceList.push(\"Friday\");\r\n                                        }\r\n\r\n                                        client.query(query, absenceList, (err, res) => {\r\n                                            if (err) {\r\n                                                console.log(err.stack);\r\n                                            } else {\r\n                                                console.log(\"inserted for user: \" + user[0] + \"\\n\" +\r\n                                                            \" row:\", absenceList + \"\\n\");\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    console.log(\"Error on user row: \" + user[0] + \"\\n Failed insert: \" +\r\n                                                \"The given user does not exist.\\n\");\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n             } finally {\r\n                    done();\r\n             }\r\n        });\r\n\r\n        i++;\r\n\r\n        ws = workbook.Sheets[workbook.SheetNames[i]];\r\n    }\r\n}\r\n\r\nexports.ReportWorkAbsences = ReportWorkAbsences;"],"mappings":"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"},"metadata":{},"sourceType":"module"}