{"ast":null,"code":"// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Looking up and converting between various constants\nvar util = require('util');\n\nmodule.exports = {\n  'type': swap_type,\n  'class': swap_class,\n  'type_to_label': type_to_label,\n  'type_to_number': type_to_number,\n  'class_to_label': class_to_label,\n  'class_to_number': class_to_number // For testing\n  ,\n  'transpose': transpose,\n  'mk_type_labels': mk_type_labels\n};\nvar TYPE_LABELS = mk_type_labels(),\n    CLASS_LABELS = mk_class_labels(),\n    TYPE_NUMBERS = transpose(TYPE_LABELS),\n    CLASS_NUMBERS = transpose(CLASS_LABELS);\n\nfunction swap_type(obj) {\n  return typeof obj == 'string' ? type_to_number(obj) : type_to_label(obj);\n}\n\nfunction swap_class(obj) {\n  return typeof obj == 'string' ? class_to_number(obj) : class_to_label(obj);\n}\n\nfunction type_to_label(type) {\n  if (isNaN(type) || typeof type != 'number' || type < 1 || type > 65535) throw new Error('Invalid record type: ' + type);\n  return TYPE_LABELS[type];\n}\n\nfunction type_to_number(type) {\n  if (typeof type != 'string') throw new Error('Type must be string: ' + type);\n  var num = TYPE_NUMBERS[type];\n  if (!num) throw new Error('No such type label: ' + type);else return num;\n}\n\nfunction class_to_label(clas) {\n  if (isNaN(clas) || typeof clas != 'number' || clas < 1 || clas > 65535) throw new Error('Invalid record class: ' + clas);\n  return CLASS_LABELS[clas];\n}\n\nfunction class_to_number(clas) {\n  if (typeof clas != 'string') throw new Error('Type must be string: ' + clas);\n  var num = CLASS_NUMBERS[clas];\n  if (!num) throw new Error('No such clas label: ' + clas);else return num;\n} //\n// Utilities\n//\n\n\nfunction transpose(obj) {\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    var val = obj[key];\n    if (typeof val == 'string') result[val] = +key;\n  });\n  return result;\n}\n\nfunction mk_class_labels() {\n  var classes = {\n    0: 'reserved',\n    1: 'IN',\n    2: null,\n    3: 'CH',\n    4: 'HS' // 5 - 127 unassigned classes\n    // 128 - 253 unassigned qclasses\n    ,\n    254: 'NONE',\n    255: '*' // 256 - 32767 unassigned\n    // 32768 - 57343 unassigned\n    // 57344 - 65279 unassigned qclasses and metaclasses\n    // 65280 - 65534 Private use\n    ,\n    65535: 'reserved'\n  };\n  var unassigned = [[5, 253], [256, 65279]];\n  unassigned.forEach(function (pair) {\n    var start = pair[0],\n        stop = pair[1];\n\n    for (var i = start; i <= stop; i++) {\n      classes[i] = null;\n    }\n  });\n\n  for (var i = 65280; i <= 65534; i++) {\n    classes[i] = 'Private use';\n  }\n\n  return classes;\n}\n\nfunction mk_type_labels() {\n  var types = {\n    0: null,\n    1: 'A',\n    2: 'NS',\n    3: 'MD',\n    4: 'MF',\n    5: 'CNAME',\n    6: 'SOA',\n    7: 'MB',\n    8: 'MG',\n    9: 'MR',\n    10: 'NULL',\n    11: 'WKS',\n    12: 'PTR',\n    13: 'HINFO',\n    14: 'MINFO',\n    15: 'MX',\n    16: 'TXT',\n    17: 'RP',\n    18: 'AFSDB',\n    19: 'X25',\n    20: 'ISDN',\n    21: 'RT',\n    22: 'NSAP',\n    23: 'NSAP-PTR',\n    24: 'SIG',\n    25: 'KEY',\n    26: 'PX',\n    27: 'GPOS',\n    28: 'AAAA',\n    29: 'LOC',\n    30: 'NXT',\n    31: 'EID',\n    32: 'NIMLOC',\n    33: 'SRV',\n    34: 'ATMA',\n    35: 'NAPTR',\n    36: 'KX',\n    37: 'CERT',\n    38: 'A6',\n    39: 'DNAME',\n    40: 'SINK',\n    41: 'OPT',\n    42: 'APL',\n    43: 'DS',\n    44: 'SSHFP',\n    45: 'IPSECKEY',\n    46: 'RRSIG',\n    47: 'NSEC',\n    48: 'DNSKEY',\n    49: 'DHCID',\n    50: 'NSEC3',\n    51: 'NSEC3PARAM',\n    52: 'TLSA' // 53 - 54 unassigned\n    ,\n    55: 'HIP',\n    56: 'NINFO',\n    57: 'RKEY',\n    58: 'TALINK',\n    59: 'CDS' // 60 - 98 unassigned\n    ,\n    99: 'SPF',\n    100: 'UINFO',\n    101: 'UID',\n    102: 'GID',\n    103: 'UNSPEC',\n    104: 'NID',\n    105: 'L32',\n    106: 'L64',\n    107: 'LP' // 108 - 248 unassigned\n    ,\n    249: 'TKEY',\n    250: 'TSIG',\n    251: 'IXFR',\n    252: 'AXFR',\n    253: 'MAILB',\n    254: 'MAILA',\n    255: '*',\n    256: 'URI',\n    257: 'CAA' // 258 - 32767 unassigned\n    ,\n    32768: 'TA',\n    32769: 'DLV' // 32770 - 65279 unassigned\n    // 65280 - 65534 Private use\n    ,\n    65535: 'Reserved'\n  };\n  var unassigned = [[53, 54], [60, 98], [108, 248], [258, 32767], [32770, 65279]];\n  unassigned.forEach(function (pair) {\n    var start = pair[0],\n        stop = pair[1];\n\n    for (var i = start; i <= stop; i++) {\n      types[i] = null;\n    }\n  });\n\n  for (var i = 65280; i <= 65534; i++) {\n    types[i] = 'Private use';\n  }\n\n  return types;\n}","map":null,"metadata":{},"sourceType":"script"}