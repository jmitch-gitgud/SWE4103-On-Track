{"ast":null,"code":"// Copyright 2011 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\n'use strict';\n\nvar fs = require('fs'),\n    EventEmitter = require('events').EventEmitter,\n    net = require('net'),\n    os = require('os'),\n    util = require('util'),\n    Cache = require('native-dns-cache'),\n    consts = require('native-dns-packet').consts,\n    path = require('path'),\n    utils = require('./utils');\n\nvar A = consts.NAME_TO_QTYPE.A,\n    AAAA = consts.NAME_TO_QTYPE.AAAA,\n    PTR = consts.NAME_TO_QTYPE.PTR;\n\nvar Platform = function Platform() {\n  this._nsReady = false;\n  this._hostsReady = false;\n  Object.defineProperty(this, 'ready', {\n    get: function get() {\n      return this._nsReady && this._hostsReady;\n    }\n  });\n  this._watches = {};\n  Object.defineProperty(this, 'watching', {\n    get: function get() {\n      return Object.keys(this._watches).length > 0;\n    },\n    set: function set(value) {\n      var k;\n      if (value) this._watchFiles();else {\n        for (k in this._watches) {\n          this._watches[k].close();\n\n          delete this._watches[k];\n        }\n      }\n    }\n  });\n  this.hosts = new Cache();\n\n  this._initNameServers();\n\n  this._initHostsFile();\n\n  this._populate();\n\n  this.cache = false; //new Cache();\n};\n\nutil.inherits(Platform, EventEmitter);\n\nPlatform.prototype.reload = function () {\n  this.emit('unready');\n\n  this._initNameServers();\n\n  this._initHostsFile();\n\n  this._populate();\n};\n\nPlatform.prototype._initNameServers = function () {\n  this._nsReady = false;\n  this.name_servers = [];\n  this.search_path = [];\n  this.timeout = 5 * 1000;\n  this.attempts = 5;\n  this.edns = false;\n};\n\nPlatform.prototype._initHostsFile = function () {\n  this._hostsReady = false;\n  this.hosts.purge();\n};\n\nPlatform.prototype._populate = function () {\n  var hostsfile,\n      self = this;\n\n  switch (os.platform()) {\n    case 'win32':\n      this.name_servers = [{\n        address: '8.8.8.8',\n        port: 53\n      }, {\n        address: '8.8.4.4',\n        port: 53\n      }];\n      self._nsReady = true;\n      hostsfile = path.join(process.env.SystemRoot, '\\\\System32\\\\drivers\\\\etc\\\\hosts');\n      break;\n\n    default:\n      this.parseResolv();\n      hostsfile = '/etc/hosts';\n      break;\n  }\n\n  this._parseHosts(hostsfile);\n};\n\nPlatform.prototype._watchFiles = function () {\n  var self = this,\n      watchParams;\n  watchParams = {\n    persistent: false\n  };\n\n  switch (os.platform()) {\n    case 'win32':\n      //TODO XXX FIXME: it would be nice if this existed\n      break;\n\n    default:\n      this._watches.resolve = fs.watch('/etc/resolv.conf', watchParams, function (event, filename) {\n        if (event === 'change') {\n          self.emit('unready');\n\n          self._initNameServers();\n\n          self.parseResolv();\n        }\n      });\n      this._watches.hosts = fs.watch('/etc/hosts', watchParams, function (event, filename) {\n        if (event === 'change') {\n          self.emit('unready');\n\n          self._initHostsFile();\n\n          self._parseHosts(hostsfile);\n        }\n      });\n      break;\n  }\n};\n\nPlatform.prototype._checkReady = function () {\n  if (this.ready) {\n    this.emit('ready');\n  }\n};\n\nPlatform.prototype.parseResolv = function () {\n  var self = this;\n  fs.readFile('/etc/resolv.conf', 'ascii', function (err, file) {\n    if (err) {\n      throw err;\n    }\n\n    file.split(/\\n/).forEach(function (line) {\n      var i, parts, subparts;\n      line = line.replace(/^\\s+|\\s+$/g, '');\n\n      if (!line.match(/^#/)) {\n        parts = line.split(/\\s+/);\n\n        switch (parts[0]) {\n          case 'nameserver':\n            self.name_servers.push({\n              address: parts[1],\n              port: 53\n            });\n            break;\n\n          case 'domain':\n            self.search_path = [parts[1]];\n            break;\n\n          case 'search':\n            self.search_path = [parts.slice(1)];\n            break;\n\n          case 'options':\n            for (i = 1; i < parts.length; i++) {\n              subparts = parts[i].split(/:/);\n\n              switch (subparts[0]) {\n                case 'timeout':\n                  self.timeout = parseInt(subparts[1], 10) * 1000;\n                  break;\n\n                case 'attempts':\n                  self.attempts = parseInt(subparts[1], 10);\n                  break;\n\n                case 'edns0':\n                  self.edns = true;\n                  break;\n              }\n            }\n\n            break;\n        }\n      }\n    });\n    self._nsReady = true;\n\n    self._checkReady();\n  });\n};\n\nPlatform.prototype._parseHosts = function (hostsfile) {\n  var self = this;\n  fs.readFile(hostsfile, 'ascii', function (err, file) {\n    var toStore = {};\n\n    if (err) {\n      throw err;\n    }\n\n    file.split(/\\n/).forEach(function (line) {\n      var i, parts, ip, revip, kind;\n      line = line.replace(/^\\s+|\\s+$/g, '');\n\n      if (!line.match(/^#/)) {\n        parts = line.split(/\\s+/);\n        ip = parts[0];\n        parts = parts.slice(1);\n        kind = net.isIP(ip);\n\n        if (parts.length && ip && kind) {\n          /* IP -> Domain */\n          revip = utils.reverseIP(ip);\n          parts.forEach(function (domain) {\n            var r = toStore[revip];\n            if (!r) r = toStore[revip] = {};\n            var t = r[PTR];\n            if (!t) t = r[PTR] = [];\n            t.push({\n              type: PTR,\n              class: 1,\n              name: revip,\n              data: domain,\n              ttl: Infinity\n            });\n          });\n          /* Domain -> IP */\n\n          parts.forEach(function (domain) {\n            var r = toStore[domain.toLowerCase()];\n\n            if (!r) {\n              r = toStore[domain.toLowerCase()] = {};\n            }\n\n            var type = kind === 4 ? A : AAAA;\n            var t = r[type];\n            if (!t) t = r[type] = [];\n            t.push({\n              type: type,\n              name: domain.toLowerCase(),\n              address: ip,\n              ttl: Infinity\n            });\n          });\n        }\n      }\n    });\n    Object.keys(toStore).forEach(function (key) {\n      self.hosts._store.set(self.hosts._zone, key, toStore[key]);\n    });\n    self._hostsReady = true;\n\n    self._checkReady();\n  });\n};\n\nmodule.exports = new Platform();","map":null,"metadata":{},"sourceType":"script"}