{"ast":null,"code":"var textParsers = require('./lib/textParsers');\n\nvar binaryParsers = require('./lib/binaryParsers');\n\nvar arrayParser = require('./lib/arrayParser');\n\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\nvar typeParsers = {\n  text: {},\n  binary: {}\n}; //the empty parse function\n\nfunction noParse(val) {\n  return String(val);\n}\n\n; //returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\n\nfunction getTypeParser(oid, format) {\n  format = format || 'text';\n\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n\n  return typeParsers[format][oid] || noParse;\n}\n\n;\n\nfunction setTypeParser(oid, format, parseFn) {\n  if (typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n\n  typeParsers[format][oid] = parseFn;\n}\n\n;\ntextParsers.init(function (oid, converter) {\n  typeParsers.text[oid] = converter;\n});\nbinaryParsers.init(function (oid, converter) {\n  typeParsers.binary[oid] = converter;\n});","map":null,"metadata":{},"sourceType":"script"}